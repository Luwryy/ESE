
TP2_micro_VAA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004924  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c6c  08004c6c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c74  08004c74  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c74  08004c74  00014c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c78  08004c78  00014c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  2000006c  08004ce8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004ce8  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db80  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020e8  00000000  00000000  0002dc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  0002fd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009cb  00000000  00000000  000309e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000174e7  00000000  00000000  000313b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f09d  00000000  00000000  0004889a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008efe2  00000000  00000000  00057937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fd0  00000000  00000000  000e691c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ea8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004aac 	.word	0x08004aac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08004aac 	.word	0x08004aac

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
 80005b6:	4b31      	ldr	r3, [pc, #196]	; (800067c <MX_GPIO_Init+0xe0>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a30      	ldr	r2, [pc, #192]	; (800067c <MX_GPIO_Init+0xe0>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b2e      	ldr	r3, [pc, #184]	; (800067c <MX_GPIO_Init+0xe0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	4b2a      	ldr	r3, [pc, #168]	; (800067c <MX_GPIO_Init+0xe0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a29      	ldr	r2, [pc, #164]	; (800067c <MX_GPIO_Init+0xe0>)
 80005d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b27      	ldr	r3, [pc, #156]	; (800067c <MX_GPIO_Init+0xe0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	4b23      	ldr	r3, [pc, #140]	; (800067c <MX_GPIO_Init+0xe0>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a22      	ldr	r2, [pc, #136]	; (800067c <MX_GPIO_Init+0xe0>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b20      	ldr	r3, [pc, #128]	; (800067c <MX_GPIO_Init+0xe0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_GPIO_Init+0xe0>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a1b      	ldr	r2, [pc, #108]	; (800067c <MX_GPIO_Init+0xe0>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_GPIO_Init+0xe0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2120      	movs	r1, #32
 8000626:	4816      	ldr	r0, [pc, #88]	; (8000680 <MX_GPIO_Init+0xe4>)
 8000628:	f000 feac 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800062c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000632:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4619      	mov	r1, r3
 8000642:	4810      	ldr	r0, [pc, #64]	; (8000684 <MX_GPIO_Init+0xe8>)
 8000644:	f000 fd1a 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000648:	2320      	movs	r3, #32
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	4808      	ldr	r0, [pc, #32]	; (8000680 <MX_GPIO_Init+0xe4>)
 8000660:	f000 fd0c 	bl	800107c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	2028      	movs	r0, #40	; 0x28
 800066a:	f000 fcd0 	bl	800100e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800066e:	2028      	movs	r0, #40	; 0x28
 8000670:	f000 fce9 	bl	8001046 <HAL_NVIC_EnableIRQ>

}
 8000674:	bf00      	nop
 8000676:	3728      	adds	r7, #40	; 0x28
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40020000 	.word	0x40020000
 8000684:	40020800 	.word	0x40020800

08000688 <HAL_TIM_PeriodElapsedCallback>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	static int counter=0;
	if (htim->Instance == TIM2)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000698:	d112      	bne.n	80006c0 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		if(counter > (freq_counter-1))
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	dc07      	bgt.n	80006b6 <HAL_TIM_PeriodElapsedCallback+0x2e>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006a6:	2120      	movs	r1, #32
 80006a8:	4809      	ldr	r0, [pc, #36]	; (80006d0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80006aa:	f000 fe84 	bl	80013b6 <HAL_GPIO_TogglePin>
			counter = 0;
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
		else
		{
			counter++;
		}
	}
}
 80006b4:	e004      	b.n	80006c0 <HAL_TIM_PeriodElapsedCallback+0x38>
			counter++;
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	4a03      	ldr	r2, [pc, #12]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80006be:	6013      	str	r3, [r2, #0]
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000000 	.word	0x20000000
 80006cc:	20000088 	.word	0x20000088
 80006d0:	40020000 	.word	0x40020000

080006d4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin && freq_counter == 1)
 80006de:	88fb      	ldrh	r3, [r7, #6]
 80006e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006e4:	d107      	bne.n	80006f6 <HAL_GPIO_EXTI_Callback+0x22>
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <HAL_GPIO_EXTI_Callback+0x60>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d103      	bne.n	80006f6 <HAL_GPIO_EXTI_Callback+0x22>
	{
		freq_counter=8;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_GPIO_EXTI_Callback+0x60>)
 80006f0:	2208      	movs	r2, #8
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	e017      	b.n	8000726 <HAL_GPIO_EXTI_Callback+0x52>
	}
	else if(GPIO_Pin == B1_Pin && freq_counter == 8)
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006fc:	d107      	bne.n	800070e <HAL_GPIO_EXTI_Callback+0x3a>
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <HAL_GPIO_EXTI_Callback+0x60>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b08      	cmp	r3, #8
 8000704:	d103      	bne.n	800070e <HAL_GPIO_EXTI_Callback+0x3a>
	{
		freq_counter=25;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <HAL_GPIO_EXTI_Callback+0x60>)
 8000708:	2219      	movs	r2, #25
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	e00b      	b.n	8000726 <HAL_GPIO_EXTI_Callback+0x52>
	}
	else if(GPIO_Pin == B1_Pin && freq_counter == 25)
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000714:	d107      	bne.n	8000726 <HAL_GPIO_EXTI_Callback+0x52>
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <HAL_GPIO_EXTI_Callback+0x60>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b19      	cmp	r3, #25
 800071c:	d103      	bne.n	8000726 <HAL_GPIO_EXTI_Callback+0x52>
	{
		freq_counter=1;
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_GPIO_EXTI_Callback+0x60>)
 8000720:	2201      	movs	r2, #1
 8000722:	601a      	str	r2, [r3, #0]
	}
}
 8000724:	e7ff      	b.n	8000726 <HAL_GPIO_EXTI_Callback+0x52>
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000000 	.word	0x20000000

08000738 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000740:	1d39      	adds	r1, r7, #4
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	2201      	movs	r2, #1
 8000748:	4803      	ldr	r0, [pc, #12]	; (8000758 <__io_putchar+0x20>)
 800074a:	f001 ff92 	bl	8002672 <HAL_UART_Transmit>
  return ch;
 800074e:	687b      	ldr	r3, [r7, #4]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200000d8 	.word	0x200000d8

0800075c <__io_getchar>:

GETCHAR_PROTOTYPE
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <__io_getchar+0x48>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <__io_getchar+0x48>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800077c:	1df9      	adds	r1, r7, #7
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	2201      	movs	r2, #1
 8000784:	4807      	ldr	r0, [pc, #28]	; (80007a4 <__io_getchar+0x48>)
 8000786:	f002 f806 	bl	8002796 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800078a:	1df9      	adds	r1, r7, #7
 800078c:	f04f 33ff 	mov.w	r3, #4294967295
 8000790:	2201      	movs	r2, #1
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <__io_getchar+0x48>)
 8000794:	f001 ff6d 	bl	8002672 <HAL_UART_Transmit>
  return ch;
 8000798:	79fb      	ldrb	r3, [r7, #7]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000d8 	.word	0x200000d8

080007a8 <prompt>:

void prompt(char * buf){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	if(!strcmp( buf, "pin" ))
 80007b0:	4908      	ldr	r1, [pc, #32]	; (80007d4 <prompt+0x2c>)
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f7ff fd14 	bl	80001e0 <strcmp>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d103      	bne.n	80007c6 <prompt+0x1e>
	{
		printf("\r\npin active");
 80007be:	4806      	ldr	r0, [pc, #24]	; (80007d8 <prompt+0x30>)
 80007c0:	f002 fc1e 	bl	8003000 <iprintf>
	}
	else
	{
		printf("\r\n");
	}
}
 80007c4:	e002      	b.n	80007cc <prompt+0x24>
		printf("\r\n");
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <prompt+0x34>)
 80007c8:	f002 fc80 	bl	80030cc <puts>
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	08004ac4 	.word	0x08004ac4
 80007d8:	08004ac8 	.word	0x08004ac8
 80007dc:	08004ad8 	.word	0x08004ad8

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b094      	sub	sp, #80	; 0x50
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e6:	f000 fac5 	bl	8000d74 <HAL_Init>

  /* USER CODE BEGIN Init */
  setvbuf(stdin, NULL, _IONBF, 0);
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <main+0x4c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6858      	ldr	r0, [r3, #4]
 80007f0:	2300      	movs	r3, #0
 80007f2:	2202      	movs	r2, #2
 80007f4:	2100      	movs	r1, #0
 80007f6:	f002 fc83 	bl	8003100 <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fa:	f000 f81f 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fe:	f7ff fecd 	bl	800059c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000802:	f000 fa1b 	bl	8000c3c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000806:	f000 f9a5 	bl	8000b54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800080a:	4809      	ldr	r0, [pc, #36]	; (8000830 <main+0x50>)
 800080c:	f001 faee 	bl	8001dec <HAL_TIM_Base_Start_IT>
	  /*if(HAL_UART_Receive(&huart2, msg, sizeof(uint8_t), HAL_MAX_DELAY)==HAL_OK)
	  {
		  HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n",sizeof(uint8_t)*2,HAL_MAX_DELAY);
		  HAL_UART_Transmit(&huart2, msg, sizeof(uint8_t), HAL_MAX_DELAY);
	  }*/
	  printf( "\r\n[NUCLEO-F401RE]$ " );
 8000810:	4808      	ldr	r0, [pc, #32]	; (8000834 <main+0x54>)
 8000812:	f002 fbf5 	bl	8003000 <iprintf>
	  scanf("%80s",buf);
 8000816:	463b      	mov	r3, r7
 8000818:	4619      	mov	r1, r3
 800081a:	4807      	ldr	r0, [pc, #28]	; (8000838 <main+0x58>)
 800081c:	f002 fc5e 	bl	80030dc <iscanf>
	  prompt((char *) buf);
 8000820:	463b      	mov	r3, r7
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ffc0 	bl	80007a8 <prompt>
	  printf( "\r\n[NUCLEO-F401RE]$ " );
 8000828:	e7f2      	b.n	8000810 <main+0x30>
 800082a:	bf00      	nop
 800082c:	20000068 	.word	0x20000068
 8000830:	20000090 	.word	0x20000090
 8000834:	08004adc 	.word	0x08004adc
 8000838:	08004af0 	.word	0x08004af0

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b094      	sub	sp, #80	; 0x50
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0320 	add.w	r3, r7, #32
 8000846:	2230      	movs	r2, #48	; 0x30
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f002 fdde 	bl	800340c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	4b29      	ldr	r3, [pc, #164]	; (800090c <SystemClock_Config+0xd0>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	4a28      	ldr	r2, [pc, #160]	; (800090c <SystemClock_Config+0xd0>)
 800086a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086e:	6413      	str	r3, [r2, #64]	; 0x40
 8000870:	4b26      	ldr	r3, [pc, #152]	; (800090c <SystemClock_Config+0xd0>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <SystemClock_Config+0xd4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000888:	4a21      	ldr	r2, [pc, #132]	; (8000910 <SystemClock_Config+0xd4>)
 800088a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <SystemClock_Config+0xd4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089c:	2302      	movs	r3, #2
 800089e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a0:	2301      	movs	r3, #1
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a4:	2310      	movs	r3, #16
 80008a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a8:	2302      	movs	r3, #2
 80008aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ac:	2300      	movs	r3, #0
 80008ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008b0:	2310      	movs	r3, #16
 80008b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ba:	2304      	movs	r3, #4
 80008bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008be:	2307      	movs	r3, #7
 80008c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c2:	f107 0320 	add.w	r3, r7, #32
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fda8 	bl	800141c <HAL_RCC_OscConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008d2:	f000 f81f 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d6:	230f      	movs	r3, #15
 80008d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008da:	2302      	movs	r3, #2
 80008dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2102      	movs	r1, #2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 f80a 	bl	800190c <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008fe:	f000 f809 	bl	8000914 <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	3750      	adds	r7, #80	; 0x50
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	4a0f      	ldr	r2, [pc, #60]	; (800096c <HAL_MspInit+0x4c>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000934:	6453      	str	r3, [r2, #68]	; 0x44
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_MspInit+0x4c>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800095e:	2007      	movs	r0, #7
 8000960:	f000 fb4a 	bl	8000ff8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 fa2c 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <TIM2_IRQHandler+0x10>)
 80009ca:	f001 fa71 	bl	8001eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000090 	.word	0x20000090

080009d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009e0:	f000 fd04 	bl	80013ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	e00a      	b.n	8000a10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009fa:	f7ff feaf 	bl	800075c <__io_getchar>
 80009fe:	4601      	mov	r1, r0
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	60ba      	str	r2, [r7, #8]
 8000a06:	b2ca      	uxtb	r2, r1
 8000a08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697a      	ldr	r2, [r7, #20]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	dbf0      	blt.n	80009fa <_read+0x12>
  }

  return len;
 8000a18:	687b      	ldr	r3, [r7, #4]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b086      	sub	sp, #24
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	60f8      	str	r0, [r7, #12]
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	e009      	b.n	8000a48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	60ba      	str	r2, [r7, #8]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fe7b 	bl	8000738 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	3301      	adds	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	dbf1      	blt.n	8000a34 <_write+0x12>
  }
  return len;
 8000a50:	687b      	ldr	r3, [r7, #4]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <_close>:

int _close(int file)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a82:	605a      	str	r2, [r3, #4]
  return 0;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_isatty>:

int _isatty(int file)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000acc:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <_sbrk+0x5c>)
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <_sbrk+0x60>)
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d102      	bne.n	8000ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <_sbrk+0x64>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <_sbrk+0x68>)
 8000ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d207      	bcs.n	8000b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af4:	f002 fcd8 	bl	80034a8 <__errno>
 8000af8:	4603      	mov	r3, r0
 8000afa:	220c      	movs	r2, #12
 8000afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	e009      	b.n	8000b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <_sbrk+0x64>)
 8000b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20018000 	.word	0x20018000
 8000b24:	00000400 	.word	0x00000400
 8000b28:	2000008c 	.word	0x2000008c
 8000b2c:	20000270 	.word	0x20000270

08000b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <SystemInit+0x20>)
 8000b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <SystemInit+0x20>)
 8000b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b5a:	f107 0308 	add.w	r3, r7, #8
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b68:	463b      	mov	r3, r7
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <MX_TIM2_Init+0x94>)
 8000b72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_TIM2_Init+0x94>)
 8000b7a:	2253      	movs	r2, #83	; 0x53
 8000b7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <MX_TIM2_Init+0x94>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000-1;
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_TIM2_Init+0x94>)
 8000b86:	4a19      	ldr	r2, [pc, #100]	; (8000bec <MX_TIM2_Init+0x98>)
 8000b88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_TIM2_Init+0x94>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_TIM2_Init+0x94>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b96:	4814      	ldr	r0, [pc, #80]	; (8000be8 <MX_TIM2_Init+0x94>)
 8000b98:	f001 f8d8 	bl	8001d4c <HAL_TIM_Base_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000ba2:	f7ff feb7 	bl	8000914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000baa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480d      	ldr	r0, [pc, #52]	; (8000be8 <MX_TIM2_Init+0x94>)
 8000bb4:	f001 fa84 	bl	80020c0 <HAL_TIM_ConfigClockSource>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000bbe:	f7ff fea9 	bl	8000914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bca:	463b      	mov	r3, r7
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4806      	ldr	r0, [pc, #24]	; (8000be8 <MX_TIM2_Init+0x94>)
 8000bd0:	f001 fc80 	bl	80024d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000bda:	f7ff fe9b 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000090 	.word	0x20000090
 8000bec:	0001869f 	.word	0x0001869f

08000bf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c00:	d115      	bne.n	8000c2e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_TIM_Base_MspInit+0x48>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <HAL_TIM_Base_MspInit+0x48>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_TIM_Base_MspInit+0x48>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	201c      	movs	r0, #28
 8000c24:	f000 f9f3 	bl	800100e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c28:	201c      	movs	r0, #28
 8000c2a:	f000 fa0c 	bl	8001046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800

08000c3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <MX_USART2_UART_Init+0x50>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c74:	f001 fcb0 	bl	80025d8 <HAL_UART_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c7e:	f7ff fe49 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200000d8 	.word	0x200000d8
 8000c8c:	40004400 	.word	0x40004400

08000c90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <HAL_UART_MspInit+0x84>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d12b      	bne.n	8000d0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <HAL_UART_MspInit+0x88>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <HAL_UART_MspInit+0x88>)
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <HAL_UART_MspInit+0x88>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_UART_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <HAL_UART_MspInit+0x88>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_UART_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cea:	230c      	movs	r3, #12
 8000cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cfa:	2307      	movs	r3, #7
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <HAL_UART_MspInit+0x8c>)
 8000d06:	f000 f9b9 	bl	800107c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3728      	adds	r7, #40	; 0x28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40004400 	.word	0x40004400
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020000 	.word	0x40020000

08000d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d26:	490e      	ldr	r1, [pc, #56]	; (8000d60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d28:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d3c:	4c0b      	ldr	r4, [pc, #44]	; (8000d6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d4a:	f7ff fef1 	bl	8000b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f002 fbb1 	bl	80034b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d52:	f7ff fd45 	bl	80007e0 <main>
  bx  lr    
 8000d56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d64:	08004c7c 	.word	0x08004c7c
  ldr r2, =_sbss
 8000d68:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d6c:	2000026c 	.word	0x2000026c

08000d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC_IRQHandler>
	...

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <HAL_Init+0x40>)
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_Init+0x40>)
 8000d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_Init+0x40>)
 8000d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 f92b 	bl	8000ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 f808 	bl	8000db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f7ff fdba 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023c00 	.word	0x40023c00

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_InitTick+0x54>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x58>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f943 	bl	8001062 <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00e      	b.n	8000e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d80a      	bhi.n	8000e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f000 f90b 	bl	800100e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df8:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <HAL_InitTick+0x5c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000004 	.word	0x20000004
 8000e10:	2000000c 	.word	0x2000000c
 8000e14:	20000008 	.word	0x20000008

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	2000000c 	.word	0x2000000c
 8000e3c:	2000011c 	.word	0x2000011c

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	2000011c 	.word	0x2000011c

08000e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	60d3      	str	r3, [r2, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	db0b      	blt.n	8000ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f003 021f 	and.w	r2, r3, #31
 8000ed4:	4907      	ldr	r1, [pc, #28]	; (8000ef4 <__NVIC_EnableIRQ+0x38>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	2001      	movs	r0, #1
 8000ede:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e100 	.word	0xe000e100

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	; (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	; (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f1c3 0307 	rsb	r3, r3, #7
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf28      	it	cs
 8000f6a:	2304      	movcs	r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d902      	bls.n	8000f7c <NVIC_EncodePriority+0x30>
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	e000      	b.n	8000f7e <NVIC_EncodePriority+0x32>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	4313      	orrs	r3, r2
         );
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	; 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc4:	d301      	bcc.n	8000fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00f      	b.n	8000fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <SysTick_Config+0x40>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd2:	210f      	movs	r1, #15
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f7ff ff8e 	bl	8000ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <SysTick_Config+0x40>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <SysTick_Config+0x40>)
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	e000e010 	.word	0xe000e010

08000ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff29 	bl	8000e58 <__NVIC_SetPriorityGrouping>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100e:	b580      	push	{r7, lr}
 8001010:	b086      	sub	sp, #24
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001020:	f7ff ff3e 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 8001024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff ff8e 	bl	8000f4c <NVIC_EncodePriority>
 8001030:	4602      	mov	r2, r0
 8001032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff5d 	bl	8000ef8 <__NVIC_SetPriority>
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff31 	bl	8000ebc <__NVIC_EnableIRQ>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffa2 	bl	8000fb4 <SysTick_Config>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	e159      	b.n	800134c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001098:	2201      	movs	r2, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	f040 8148 	bne.w	8001346 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d005      	beq.n	80010ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d130      	bne.n	8001130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	f003 0201 	and.w	r2, r3, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b03      	cmp	r3, #3
 800113a:	d017      	beq.n	800116c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d123      	bne.n	80011c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	08da      	lsrs	r2, r3, #3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3208      	adds	r2, #8
 8001180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	220f      	movs	r2, #15
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	08da      	lsrs	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3208      	adds	r2, #8
 80011ba:	69b9      	ldr	r1, [r7, #24]
 80011bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0203 	and.w	r2, r3, #3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 80a2 	beq.w	8001346 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b57      	ldr	r3, [pc, #348]	; (8001364 <HAL_GPIO_Init+0x2e8>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a56      	ldr	r2, [pc, #344]	; (8001364 <HAL_GPIO_Init+0x2e8>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b54      	ldr	r3, [pc, #336]	; (8001364 <HAL_GPIO_Init+0x2e8>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121e:	4a52      	ldr	r2, [pc, #328]	; (8001368 <HAL_GPIO_Init+0x2ec>)
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	220f      	movs	r2, #15
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a49      	ldr	r2, [pc, #292]	; (800136c <HAL_GPIO_Init+0x2f0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_GPIO_Init+0x202>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a48      	ldr	r2, [pc, #288]	; (8001370 <HAL_GPIO_Init+0x2f4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0x1fe>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a47      	ldr	r2, [pc, #284]	; (8001374 <HAL_GPIO_Init+0x2f8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d00d      	beq.n	8001276 <HAL_GPIO_Init+0x1fa>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a46      	ldr	r2, [pc, #280]	; (8001378 <HAL_GPIO_Init+0x2fc>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d007      	beq.n	8001272 <HAL_GPIO_Init+0x1f6>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a45      	ldr	r2, [pc, #276]	; (800137c <HAL_GPIO_Init+0x300>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_GPIO_Init+0x1f2>
 800126a:	2304      	movs	r3, #4
 800126c:	e008      	b.n	8001280 <HAL_GPIO_Init+0x204>
 800126e:	2307      	movs	r3, #7
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x204>
 8001272:	2303      	movs	r3, #3
 8001274:	e004      	b.n	8001280 <HAL_GPIO_Init+0x204>
 8001276:	2302      	movs	r3, #2
 8001278:	e002      	b.n	8001280 <HAL_GPIO_Init+0x204>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_GPIO_Init+0x204>
 800127e:	2300      	movs	r3, #0
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	f002 0203 	and.w	r2, r2, #3
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4093      	lsls	r3, r2
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001290:	4935      	ldr	r1, [pc, #212]	; (8001368 <HAL_GPIO_Init+0x2ec>)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129e:	4b38      	ldr	r3, [pc, #224]	; (8001380 <HAL_GPIO_Init+0x304>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c2:	4a2f      	ldr	r2, [pc, #188]	; (8001380 <HAL_GPIO_Init+0x304>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c8:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <HAL_GPIO_Init+0x304>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ec:	4a24      	ldr	r2, [pc, #144]	; (8001380 <HAL_GPIO_Init+0x304>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012f2:	4b23      	ldr	r3, [pc, #140]	; (8001380 <HAL_GPIO_Init+0x304>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001316:	4a1a      	ldr	r2, [pc, #104]	; (8001380 <HAL_GPIO_Init+0x304>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <HAL_GPIO_Init+0x304>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001340:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <HAL_GPIO_Init+0x304>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b0f      	cmp	r3, #15
 8001350:	f67f aea2 	bls.w	8001098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40013800 	.word	0x40013800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400
 8001374:	40020800 	.word	0x40020800
 8001378:	40020c00 	.word	0x40020c00
 800137c:	40021000 	.word	0x40021000
 8001380:	40013c00 	.word	0x40013c00

08001384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
 8001390:	4613      	mov	r3, r2
 8001392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001394:	787b      	ldrb	r3, [r7, #1]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a0:	e003      	b.n	80013aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	041a      	lsls	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	619a      	str	r2, [r3, #24]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013c8:	887a      	ldrh	r2, [r7, #2]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4013      	ands	r3, r2
 80013ce:	041a      	lsls	r2, r3, #16
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	400b      	ands	r3, r1
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	619a      	str	r2, [r3, #24]
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d006      	beq.n	8001410 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f962 	bl	80006d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40013c00 	.word	0x40013c00

0800141c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e267      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d075      	beq.n	8001526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800143a:	4b88      	ldr	r3, [pc, #544]	; (800165c <HAL_RCC_OscConfig+0x240>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b04      	cmp	r3, #4
 8001444:	d00c      	beq.n	8001460 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001446:	4b85      	ldr	r3, [pc, #532]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800144e:	2b08      	cmp	r3, #8
 8001450:	d112      	bne.n	8001478 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001452:	4b82      	ldr	r3, [pc, #520]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800145e:	d10b      	bne.n	8001478 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	4b7e      	ldr	r3, [pc, #504]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d05b      	beq.n	8001524 <HAL_RCC_OscConfig+0x108>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d157      	bne.n	8001524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e242      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d106      	bne.n	8001490 <HAL_RCC_OscConfig+0x74>
 8001482:	4b76      	ldr	r3, [pc, #472]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a75      	ldr	r2, [pc, #468]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e01d      	b.n	80014cc <HAL_RCC_OscConfig+0xb0>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x98>
 800149a:	4b70      	ldr	r3, [pc, #448]	; (800165c <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a6f      	ldr	r2, [pc, #444]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b6d      	ldr	r3, [pc, #436]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a6c      	ldr	r2, [pc, #432]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e00b      	b.n	80014cc <HAL_RCC_OscConfig+0xb0>
 80014b4:	4b69      	ldr	r3, [pc, #420]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a68      	ldr	r2, [pc, #416]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b66      	ldr	r3, [pc, #408]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a65      	ldr	r2, [pc, #404]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d013      	beq.n	80014fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fcb4 	bl	8000e40 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fcb0 	bl	8000e40 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e207      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	4b5b      	ldr	r3, [pc, #364]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0xc0>
 80014fa:	e014      	b.n	8001526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fca0 	bl	8000e40 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fc9c 	bl	8000e40 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e1f3      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001516:	4b51      	ldr	r3, [pc, #324]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0xe8>
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d063      	beq.n	80015fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001532:	4b4a      	ldr	r3, [pc, #296]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00b      	beq.n	8001556 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001546:	2b08      	cmp	r3, #8
 8001548:	d11c      	bne.n	8001584 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154a:	4b44      	ldr	r3, [pc, #272]	; (800165c <HAL_RCC_OscConfig+0x240>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d116      	bne.n	8001584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001556:	4b41      	ldr	r3, [pc, #260]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <HAL_RCC_OscConfig+0x152>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d001      	beq.n	800156e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e1c7      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156e:	4b3b      	ldr	r3, [pc, #236]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4937      	ldr	r1, [pc, #220]	; (800165c <HAL_RCC_OscConfig+0x240>)
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001582:	e03a      	b.n	80015fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d020      	beq.n	80015ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158c:	4b34      	ldr	r3, [pc, #208]	; (8001660 <HAL_RCC_OscConfig+0x244>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001592:	f7ff fc55 	bl	8000e40 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff fc51 	bl	8000e40 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e1a8      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ac:	4b2b      	ldr	r3, [pc, #172]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b8:	4b28      	ldr	r3, [pc, #160]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4925      	ldr	r1, [pc, #148]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]
 80015cc:	e015      	b.n	80015fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_RCC_OscConfig+0x244>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff fc34 	bl	8000e40 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015dc:	f7ff fc30 	bl	8000e40 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e187      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d036      	beq.n	8001674 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d016      	beq.n	800163c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_RCC_OscConfig+0x248>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7ff fc14 	bl	8000e40 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800161c:	f7ff fc10 	bl	8000e40 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e167      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_OscConfig+0x240>)
 8001630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x200>
 800163a:	e01b      	b.n	8001674 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_RCC_OscConfig+0x248>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001642:	f7ff fbfd 	bl	8000e40 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	e00e      	b.n	8001668 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800164a:	f7ff fbf9 	bl	8000e40 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d907      	bls.n	8001668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e150      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
 800165c:	40023800 	.word	0x40023800
 8001660:	42470000 	.word	0x42470000
 8001664:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001668:	4b88      	ldr	r3, [pc, #544]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800166a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1ea      	bne.n	800164a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8097 	beq.w	80017b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001686:	4b81      	ldr	r3, [pc, #516]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10f      	bne.n	80016b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	4b7d      	ldr	r3, [pc, #500]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a7c      	ldr	r2, [pc, #496]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b7a      	ldr	r3, [pc, #488]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ae:	2301      	movs	r3, #1
 80016b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b2:	4b77      	ldr	r3, [pc, #476]	; (8001890 <HAL_RCC_OscConfig+0x474>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d118      	bne.n	80016f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016be:	4b74      	ldr	r3, [pc, #464]	; (8001890 <HAL_RCC_OscConfig+0x474>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a73      	ldr	r2, [pc, #460]	; (8001890 <HAL_RCC_OscConfig+0x474>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fbb9 	bl	8000e40 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d2:	f7ff fbb5 	bl	8000e40 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e10c      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e4:	4b6a      	ldr	r3, [pc, #424]	; (8001890 <HAL_RCC_OscConfig+0x474>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_OscConfig+0x2ea>
 80016f8:	4b64      	ldr	r3, [pc, #400]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fc:	4a63      	ldr	r2, [pc, #396]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6713      	str	r3, [r2, #112]	; 0x70
 8001704:	e01c      	b.n	8001740 <HAL_RCC_OscConfig+0x324>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b05      	cmp	r3, #5
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x30c>
 800170e:	4b5f      	ldr	r3, [pc, #380]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001712:	4a5e      	ldr	r2, [pc, #376]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	6713      	str	r3, [r2, #112]	; 0x70
 800171a:	4b5c      	ldr	r3, [pc, #368]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	4a5b      	ldr	r2, [pc, #364]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6713      	str	r3, [r2, #112]	; 0x70
 8001726:	e00b      	b.n	8001740 <HAL_RCC_OscConfig+0x324>
 8001728:	4b58      	ldr	r3, [pc, #352]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172c:	4a57      	ldr	r2, [pc, #348]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	6713      	str	r3, [r2, #112]	; 0x70
 8001734:	4b55      	ldr	r3, [pc, #340]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001738:	4a54      	ldr	r2, [pc, #336]	; (800188c <HAL_RCC_OscConfig+0x470>)
 800173a:	f023 0304 	bic.w	r3, r3, #4
 800173e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d015      	beq.n	8001774 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001748:	f7ff fb7a 	bl	8000e40 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174e:	e00a      	b.n	8001766 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001750:	f7ff fb76 	bl	8000e40 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e0cb      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001766:	4b49      	ldr	r3, [pc, #292]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0ee      	beq.n	8001750 <HAL_RCC_OscConfig+0x334>
 8001772:	e014      	b.n	800179e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001774:	f7ff fb64 	bl	8000e40 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177a:	e00a      	b.n	8001792 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800177c:	f7ff fb60 	bl	8000e40 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	; 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e0b5      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001792:	4b3e      	ldr	r3, [pc, #248]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1ee      	bne.n	800177c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800179e:	7dfb      	ldrb	r3, [r7, #23]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d105      	bne.n	80017b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a4:	4b39      	ldr	r3, [pc, #228]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	4a38      	ldr	r2, [pc, #224]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80017aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80a1 	beq.w	80018fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d05c      	beq.n	8001880 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d141      	bne.n	8001852 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ce:	4b31      	ldr	r3, [pc, #196]	; (8001894 <HAL_RCC_OscConfig+0x478>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb34 	bl	8000e40 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff fb30 	bl	8000e40 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e087      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	4b27      	ldr	r3, [pc, #156]	; (800188c <HAL_RCC_OscConfig+0x470>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69da      	ldr	r2, [r3, #28]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	019b      	lsls	r3, r3, #6
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	085b      	lsrs	r3, r3, #1
 8001812:	3b01      	subs	r3, #1
 8001814:	041b      	lsls	r3, r3, #16
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	061b      	lsls	r3, r3, #24
 800181e:	491b      	ldr	r1, [pc, #108]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_RCC_OscConfig+0x478>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff fb09 	bl	8000e40 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff fb05 	bl	8000e40 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e05c      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x416>
 8001850:	e054      	b.n	80018fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_RCC_OscConfig+0x478>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff faf2 	bl	8000e40 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff faee 	bl	8000e40 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e045      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_RCC_OscConfig+0x470>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x444>
 800187e:	e03d      	b.n	80018fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d107      	bne.n	8001898 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e038      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
 800188c:	40023800 	.word	0x40023800
 8001890:	40007000 	.word	0x40007000
 8001894:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_RCC_OscConfig+0x4ec>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d028      	beq.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d121      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d11a      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018c8:	4013      	ands	r3, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d111      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	3b01      	subs	r3, #1
 80018e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d107      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800

0800190c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0cc      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001920:	4b68      	ldr	r3, [pc, #416]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d90c      	bls.n	8001948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	4b65      	ldr	r3, [pc, #404]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b63      	ldr	r3, [pc, #396]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0b8      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001960:	4b59      	ldr	r3, [pc, #356]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a58      	ldr	r2, [pc, #352]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800196a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a52      	ldr	r2, [pc, #328]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001984:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	494d      	ldr	r1, [pc, #308]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	4313      	orrs	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d044      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d119      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e07f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d003      	beq.n	80019ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ca:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e06f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e067      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ea:	4b37      	ldr	r3, [pc, #220]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f023 0203 	bic.w	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4934      	ldr	r1, [pc, #208]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019fc:	f7ff fa20 	bl	8000e40 <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a04:	f7ff fa1c 	bl	8000e40 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e04f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 020c 	and.w	r2, r3, #12
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d1eb      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d20c      	bcs.n	8001a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e032      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4916      	ldr	r1, [pc, #88]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d009      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	490e      	ldr	r1, [pc, #56]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a92:	f000 f821 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	490a      	ldr	r1, [pc, #40]	; (8001acc <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	5ccb      	ldrb	r3, [r1, r3]
 8001aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f980 	bl	8000db8 <HAL_InitTick>

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023c00 	.word	0x40023c00
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	08004b04 	.word	0x08004b04
 8001ad0:	20000004 	.word	0x20000004
 8001ad4:	20000008 	.word	0x20000008

08001ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001adc:	b094      	sub	sp, #80	; 0x50
 8001ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ae8:	2300      	movs	r3, #0
 8001aea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af0:	4b79      	ldr	r3, [pc, #484]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d00d      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x40>
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	f200 80e1 	bhi.w	8001cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x34>
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d003      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b0a:	e0db      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b0c:	4b73      	ldr	r3, [pc, #460]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8001b0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b10:	e0db      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b12:	4b73      	ldr	r3, [pc, #460]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b16:	e0d8      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b18:	4b6f      	ldr	r3, [pc, #444]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b22:	4b6d      	ldr	r3, [pc, #436]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d063      	beq.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2e:	4b6a      	ldr	r3, [pc, #424]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	099b      	lsrs	r3, r3, #6
 8001b34:	2200      	movs	r2, #0
 8001b36:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
 8001b42:	2300      	movs	r3, #0
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
 8001b46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b4a:	4622      	mov	r2, r4
 8001b4c:	462b      	mov	r3, r5
 8001b4e:	f04f 0000 	mov.w	r0, #0
 8001b52:	f04f 0100 	mov.w	r1, #0
 8001b56:	0159      	lsls	r1, r3, #5
 8001b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b5c:	0150      	lsls	r0, r2, #5
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4621      	mov	r1, r4
 8001b64:	1a51      	subs	r1, r2, r1
 8001b66:	6139      	str	r1, [r7, #16]
 8001b68:	4629      	mov	r1, r5
 8001b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b7c:	4659      	mov	r1, fp
 8001b7e:	018b      	lsls	r3, r1, #6
 8001b80:	4651      	mov	r1, sl
 8001b82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b86:	4651      	mov	r1, sl
 8001b88:	018a      	lsls	r2, r1, #6
 8001b8a:	4651      	mov	r1, sl
 8001b8c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b90:	4659      	mov	r1, fp
 8001b92:	eb63 0901 	sbc.w	r9, r3, r1
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001baa:	4690      	mov	r8, r2
 8001bac:	4699      	mov	r9, r3
 8001bae:	4623      	mov	r3, r4
 8001bb0:	eb18 0303 	adds.w	r3, r8, r3
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	462b      	mov	r3, r5
 8001bb8:	eb49 0303 	adc.w	r3, r9, r3
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bca:	4629      	mov	r1, r5
 8001bcc:	024b      	lsls	r3, r1, #9
 8001bce:	4621      	mov	r1, r4
 8001bd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	024a      	lsls	r2, r1, #9
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bde:	2200      	movs	r2, #0
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001be4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001be8:	f7fe fb5a 	bl	80002a0 <__aeabi_uldivmod>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bf4:	e058      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf6:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	099b      	lsrs	r3, r3, #6
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	4611      	mov	r1, r2
 8001c02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c06:	623b      	str	r3, [r7, #32]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c10:	4642      	mov	r2, r8
 8001c12:	464b      	mov	r3, r9
 8001c14:	f04f 0000 	mov.w	r0, #0
 8001c18:	f04f 0100 	mov.w	r1, #0
 8001c1c:	0159      	lsls	r1, r3, #5
 8001c1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c22:	0150      	lsls	r0, r2, #5
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4641      	mov	r1, r8
 8001c2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c2e:	4649      	mov	r1, r9
 8001c30:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c48:	ebb2 040a 	subs.w	r4, r2, sl
 8001c4c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	00eb      	lsls	r3, r5, #3
 8001c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c5e:	00e2      	lsls	r2, r4, #3
 8001c60:	4614      	mov	r4, r2
 8001c62:	461d      	mov	r5, r3
 8001c64:	4643      	mov	r3, r8
 8001c66:	18e3      	adds	r3, r4, r3
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	464b      	mov	r3, r9
 8001c6c:	eb45 0303 	adc.w	r3, r5, r3
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c7e:	4629      	mov	r1, r5
 8001c80:	028b      	lsls	r3, r1, #10
 8001c82:	4621      	mov	r1, r4
 8001c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c88:	4621      	mov	r1, r4
 8001c8a:	028a      	lsls	r2, r1, #10
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c92:	2200      	movs	r2, #0
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	61fa      	str	r2, [r7, #28]
 8001c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c9c:	f7fe fb00 	bl	80002a0 <__aeabi_uldivmod>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	0c1b      	lsrs	r3, r3, #16
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cc2:	e002      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8001cc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3750      	adds	r7, #80	; 0x50
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	00f42400 	.word	0x00f42400
 8001ce0:	007a1200 	.word	0x007a1200

08001ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000004 	.word	0x20000004

08001cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d00:	f7ff fff0 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	0a9b      	lsrs	r3, r3, #10
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4903      	ldr	r1, [pc, #12]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d12:	5ccb      	ldrb	r3, [r1, r3]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	08004b14 	.word	0x08004b14

08001d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d28:	f7ff ffdc 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	0b5b      	lsrs	r3, r3, #13
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	4903      	ldr	r1, [pc, #12]	; (8001d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40023800 	.word	0x40023800
 8001d48:	08004b14 	.word	0x08004b14

08001d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e041      	b.n	8001de2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe ff3c 	bl	8000bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3304      	adds	r3, #4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f000 fa88 	bl	80022a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d001      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e044      	b.n	8001e8e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1e      	ldr	r2, [pc, #120]	; (8001e9c <HAL_TIM_Base_Start_IT+0xb0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d018      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x6c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2e:	d013      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x6c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1a      	ldr	r2, [pc, #104]	; (8001ea0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00e      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x6c>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d009      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x6c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a17      	ldr	r2, [pc, #92]	; (8001ea8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d004      	beq.n	8001e58 <HAL_TIM_Base_Start_IT+0x6c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a16      	ldr	r2, [pc, #88]	; (8001eac <HAL_TIM_Base_Start_IT+0xc0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d111      	bne.n	8001e7c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d010      	beq.n	8001e8c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7a:	e007      	b.n	8001e8c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40010000 	.word	0x40010000
 8001ea0:	40000400 	.word	0x40000400
 8001ea4:	40000800 	.word	0x40000800
 8001ea8:	40000c00 	.word	0x40000c00
 8001eac:	40014000 	.word	0x40014000

08001eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d122      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d11b      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0202 	mvn.w	r2, #2
 8001edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f9b5 	bl	8002262 <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f9a7 	bl	800224e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f9b8 	bl	8002276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d122      	bne.n	8001f60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d11b      	bne.n	8001f60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0204 	mvn.w	r2, #4
 8001f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2202      	movs	r2, #2
 8001f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f98b 	bl	8002262 <HAL_TIM_IC_CaptureCallback>
 8001f4c:	e005      	b.n	8001f5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f97d 	bl	800224e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f98e 	bl	8002276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d122      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d11b      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0208 	mvn.w	r2, #8
 8001f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2204      	movs	r2, #4
 8001f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f961 	bl	8002262 <HAL_TIM_IC_CaptureCallback>
 8001fa0:	e005      	b.n	8001fae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f953 	bl	800224e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f964 	bl	8002276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b10      	cmp	r3, #16
 8001fc0:	d122      	bne.n	8002008 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b10      	cmp	r3, #16
 8001fce:	d11b      	bne.n	8002008 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0210 	mvn.w	r2, #16
 8001fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2208      	movs	r2, #8
 8001fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f937 	bl	8002262 <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e005      	b.n	8002002 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f929 	bl	800224e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f93a 	bl	8002276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10e      	bne.n	8002034 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0201 	mvn.w	r2, #1
 800202c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7fe fb2a 	bl	8000688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203e:	2b80      	cmp	r3, #128	; 0x80
 8002040:	d10e      	bne.n	8002060 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204c:	2b80      	cmp	r3, #128	; 0x80
 800204e:	d107      	bne.n	8002060 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fab2 	bl	80025c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206a:	2b40      	cmp	r3, #64	; 0x40
 800206c:	d10e      	bne.n	800208c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002078:	2b40      	cmp	r3, #64	; 0x40
 800207a:	d107      	bne.n	800208c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8ff 	bl	800228a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b20      	cmp	r3, #32
 8002098:	d10e      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	2b20      	cmp	r3, #32
 80020a6:	d107      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0220 	mvn.w	r2, #32
 80020b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 fa7c 	bl	80025b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_TIM_ConfigClockSource+0x1c>
 80020d8:	2302      	movs	r3, #2
 80020da:	e0b4      	b.n	8002246 <HAL_TIM_ConfigClockSource+0x186>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002102:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002114:	d03e      	beq.n	8002194 <HAL_TIM_ConfigClockSource+0xd4>
 8002116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800211a:	f200 8087 	bhi.w	800222c <HAL_TIM_ConfigClockSource+0x16c>
 800211e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002122:	f000 8086 	beq.w	8002232 <HAL_TIM_ConfigClockSource+0x172>
 8002126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800212a:	d87f      	bhi.n	800222c <HAL_TIM_ConfigClockSource+0x16c>
 800212c:	2b70      	cmp	r3, #112	; 0x70
 800212e:	d01a      	beq.n	8002166 <HAL_TIM_ConfigClockSource+0xa6>
 8002130:	2b70      	cmp	r3, #112	; 0x70
 8002132:	d87b      	bhi.n	800222c <HAL_TIM_ConfigClockSource+0x16c>
 8002134:	2b60      	cmp	r3, #96	; 0x60
 8002136:	d050      	beq.n	80021da <HAL_TIM_ConfigClockSource+0x11a>
 8002138:	2b60      	cmp	r3, #96	; 0x60
 800213a:	d877      	bhi.n	800222c <HAL_TIM_ConfigClockSource+0x16c>
 800213c:	2b50      	cmp	r3, #80	; 0x50
 800213e:	d03c      	beq.n	80021ba <HAL_TIM_ConfigClockSource+0xfa>
 8002140:	2b50      	cmp	r3, #80	; 0x50
 8002142:	d873      	bhi.n	800222c <HAL_TIM_ConfigClockSource+0x16c>
 8002144:	2b40      	cmp	r3, #64	; 0x40
 8002146:	d058      	beq.n	80021fa <HAL_TIM_ConfigClockSource+0x13a>
 8002148:	2b40      	cmp	r3, #64	; 0x40
 800214a:	d86f      	bhi.n	800222c <HAL_TIM_ConfigClockSource+0x16c>
 800214c:	2b30      	cmp	r3, #48	; 0x30
 800214e:	d064      	beq.n	800221a <HAL_TIM_ConfigClockSource+0x15a>
 8002150:	2b30      	cmp	r3, #48	; 0x30
 8002152:	d86b      	bhi.n	800222c <HAL_TIM_ConfigClockSource+0x16c>
 8002154:	2b20      	cmp	r3, #32
 8002156:	d060      	beq.n	800221a <HAL_TIM_ConfigClockSource+0x15a>
 8002158:	2b20      	cmp	r3, #32
 800215a:	d867      	bhi.n	800222c <HAL_TIM_ConfigClockSource+0x16c>
 800215c:	2b00      	cmp	r3, #0
 800215e:	d05c      	beq.n	800221a <HAL_TIM_ConfigClockSource+0x15a>
 8002160:	2b10      	cmp	r3, #16
 8002162:	d05a      	beq.n	800221a <HAL_TIM_ConfigClockSource+0x15a>
 8002164:	e062      	b.n	800222c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	6899      	ldr	r1, [r3, #8]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f000 f98d 	bl	8002494 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	609a      	str	r2, [r3, #8]
      break;
 8002192:	e04f      	b.n	8002234 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	6899      	ldr	r1, [r3, #8]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f000 f976 	bl	8002494 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021b6:	609a      	str	r2, [r3, #8]
      break;
 80021b8:	e03c      	b.n	8002234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6859      	ldr	r1, [r3, #4]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	461a      	mov	r2, r3
 80021c8:	f000 f8ea 	bl	80023a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2150      	movs	r1, #80	; 0x50
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f943 	bl	800245e <TIM_ITRx_SetConfig>
      break;
 80021d8:	e02c      	b.n	8002234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	6859      	ldr	r1, [r3, #4]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	461a      	mov	r2, r3
 80021e8:	f000 f909 	bl	80023fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2160      	movs	r1, #96	; 0x60
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 f933 	bl	800245e <TIM_ITRx_SetConfig>
      break;
 80021f8:	e01c      	b.n	8002234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6859      	ldr	r1, [r3, #4]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	461a      	mov	r2, r3
 8002208:	f000 f8ca 	bl	80023a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2140      	movs	r1, #64	; 0x40
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f923 	bl	800245e <TIM_ITRx_SetConfig>
      break;
 8002218:	e00c      	b.n	8002234 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4619      	mov	r1, r3
 8002224:	4610      	mov	r0, r2
 8002226:	f000 f91a 	bl	800245e <TIM_ITRx_SetConfig>
      break;
 800222a:	e003      	b.n	8002234 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
      break;
 8002230:	e000      	b.n	8002234 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002244:	7bfb      	ldrb	r3, [r7, #15]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a34      	ldr	r2, [pc, #208]	; (8002384 <TIM_Base_SetConfig+0xe4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00f      	beq.n	80022d8 <TIM_Base_SetConfig+0x38>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022be:	d00b      	beq.n	80022d8 <TIM_Base_SetConfig+0x38>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a31      	ldr	r2, [pc, #196]	; (8002388 <TIM_Base_SetConfig+0xe8>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d007      	beq.n	80022d8 <TIM_Base_SetConfig+0x38>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a30      	ldr	r2, [pc, #192]	; (800238c <TIM_Base_SetConfig+0xec>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d003      	beq.n	80022d8 <TIM_Base_SetConfig+0x38>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a2f      	ldr	r2, [pc, #188]	; (8002390 <TIM_Base_SetConfig+0xf0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d108      	bne.n	80022ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a25      	ldr	r2, [pc, #148]	; (8002384 <TIM_Base_SetConfig+0xe4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d01b      	beq.n	800232a <TIM_Base_SetConfig+0x8a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f8:	d017      	beq.n	800232a <TIM_Base_SetConfig+0x8a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a22      	ldr	r2, [pc, #136]	; (8002388 <TIM_Base_SetConfig+0xe8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <TIM_Base_SetConfig+0x8a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a21      	ldr	r2, [pc, #132]	; (800238c <TIM_Base_SetConfig+0xec>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00f      	beq.n	800232a <TIM_Base_SetConfig+0x8a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a20      	ldr	r2, [pc, #128]	; (8002390 <TIM_Base_SetConfig+0xf0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00b      	beq.n	800232a <TIM_Base_SetConfig+0x8a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a1f      	ldr	r2, [pc, #124]	; (8002394 <TIM_Base_SetConfig+0xf4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d007      	beq.n	800232a <TIM_Base_SetConfig+0x8a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a1e      	ldr	r2, [pc, #120]	; (8002398 <TIM_Base_SetConfig+0xf8>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d003      	beq.n	800232a <TIM_Base_SetConfig+0x8a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a1d      	ldr	r2, [pc, #116]	; (800239c <TIM_Base_SetConfig+0xfc>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d108      	bne.n	800233c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	4313      	orrs	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a08      	ldr	r2, [pc, #32]	; (8002384 <TIM_Base_SetConfig+0xe4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d103      	bne.n	8002370 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	615a      	str	r2, [r3, #20]
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40010000 	.word	0x40010000
 8002388:	40000400 	.word	0x40000400
 800238c:	40000800 	.word	0x40000800
 8002390:	40000c00 	.word	0x40000c00
 8002394:	40014000 	.word	0x40014000
 8002398:	40014400 	.word	0x40014400
 800239c:	40014800 	.word	0x40014800

080023a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	f023 0201 	bic.w	r2, r3, #1
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f023 030a 	bic.w	r3, r3, #10
 80023dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	621a      	str	r2, [r3, #32]
}
 80023f2:	bf00      	nop
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023fe:	b480      	push	{r7}
 8002400:	b087      	sub	sp, #28
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	f023 0210 	bic.w	r2, r3, #16
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002428:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	031b      	lsls	r3, r3, #12
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800243a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	621a      	str	r2, [r3, #32]
}
 8002452:	bf00      	nop
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800245e:	b480      	push	{r7}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	f043 0307 	orr.w	r3, r3, #7
 8002480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	609a      	str	r2, [r3, #8]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	021a      	lsls	r2, r3, #8
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	609a      	str	r2, [r3, #8]
}
 80024c8:	bf00      	nop
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e050      	b.n	800258e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1c      	ldr	r2, [pc, #112]	; (800259c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d018      	beq.n	8002562 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002538:	d013      	beq.n	8002562 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a18      	ldr	r2, [pc, #96]	; (80025a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d00e      	beq.n	8002562 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a16      	ldr	r2, [pc, #88]	; (80025a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d009      	beq.n	8002562 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a15      	ldr	r2, [pc, #84]	; (80025a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d004      	beq.n	8002562 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a13      	ldr	r2, [pc, #76]	; (80025ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d10c      	bne.n	800257c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002568:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	4313      	orrs	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40010000 	.word	0x40010000
 80025a0:	40000400 	.word	0x40000400
 80025a4:	40000800 	.word	0x40000800
 80025a8:	40000c00 	.word	0x40000c00
 80025ac:	40014000 	.word	0x40014000

080025b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e03f      	b.n	800266a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d106      	bne.n	8002604 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe fb46 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2224      	movs	r2, #36	; 0x24
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800261a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f9cb 	bl	80029b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002630:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002640:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002650:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b08a      	sub	sp, #40	; 0x28
 8002676:	af02      	add	r7, sp, #8
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	603b      	str	r3, [r7, #0]
 800267e:	4613      	mov	r3, r2
 8002680:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b20      	cmp	r3, #32
 8002690:	d17c      	bne.n	800278c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_UART_Transmit+0x2c>
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e075      	b.n	800278e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_UART_Transmit+0x3e>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e06e      	b.n	800278e <HAL_UART_Transmit+0x11c>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2221      	movs	r2, #33	; 0x21
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026c6:	f7fe fbbb 	bl	8000e40 <HAL_GetTick>
 80026ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	88fa      	ldrh	r2, [r7, #6]
 80026d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	88fa      	ldrh	r2, [r7, #6]
 80026d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e0:	d108      	bne.n	80026f4 <HAL_UART_Transmit+0x82>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d104      	bne.n	80026f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	e003      	b.n	80026fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002704:	e02a      	b.n	800275c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2200      	movs	r2, #0
 800270e:	2180      	movs	r1, #128	; 0x80
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f8e2 	bl	80028da <UART_WaitOnFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e036      	b.n	800278e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10b      	bne.n	800273e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002734:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	3302      	adds	r3, #2
 800273a:	61bb      	str	r3, [r7, #24]
 800273c:	e007      	b.n	800274e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	781a      	ldrb	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	3301      	adds	r3, #1
 800274c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1cf      	bne.n	8002706 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2200      	movs	r2, #0
 800276e:	2140      	movs	r1, #64	; 0x40
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 f8b2 	bl	80028da <UART_WaitOnFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e006      	b.n	800278e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b08a      	sub	sp, #40	; 0x28
 800279a:	af02      	add	r7, sp, #8
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	4613      	mov	r3, r2
 80027a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	f040 808c 	bne.w	80028d0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_UART_Receive+0x2e>
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e084      	b.n	80028d2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_UART_Receive+0x40>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e07d      	b.n	80028d2 <HAL_UART_Receive+0x13c>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2222      	movs	r2, #34	; 0x22
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027f2:	f7fe fb25 	bl	8000e40 <HAL_GetTick>
 80027f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	88fa      	ldrh	r2, [r7, #6]
 80027fc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	88fa      	ldrh	r2, [r7, #6]
 8002802:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280c:	d108      	bne.n	8002820 <HAL_UART_Receive+0x8a>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d104      	bne.n	8002820 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	e003      	b.n	8002828 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002830:	e043      	b.n	80028ba <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2200      	movs	r2, #0
 800283a:	2120      	movs	r1, #32
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f84c 	bl	80028da <UART_WaitOnFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e042      	b.n	80028d2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10c      	bne.n	800286c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	b29b      	uxth	r3, r3
 800285a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800285e:	b29a      	uxth	r2, r3
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	3302      	adds	r3, #2
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	e01f      	b.n	80028ac <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002874:	d007      	beq.n	8002886 <HAL_UART_Receive+0xf0>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <HAL_UART_Receive+0xfe>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	e008      	b.n	80028a6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3301      	adds	r3, #1
 80028aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1b6      	bne.n	8002832 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
  }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b090      	sub	sp, #64	; 0x40
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	4613      	mov	r3, r2
 80028e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ea:	e050      	b.n	800298e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d04c      	beq.n	800298e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <UART_WaitOnFlagUntilTimeout+0x30>
 80028fa:	f7fe faa1 	bl	8000e40 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002906:	429a      	cmp	r2, r3
 8002908:	d241      	bcs.n	800298e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	330c      	adds	r3, #12
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	e853 3f00 	ldrex	r3, [r3]
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	330c      	adds	r3, #12
 8002928:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800292a:	637a      	str	r2, [r7, #52]	; 0x34
 800292c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002932:	e841 2300 	strex	r3, r2, [r1]
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1e5      	bne.n	800290a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3314      	adds	r3, #20
 8002944:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	e853 3f00 	ldrex	r3, [r3]
 800294c:	613b      	str	r3, [r7, #16]
   return(result);
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	63bb      	str	r3, [r7, #56]	; 0x38
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3314      	adds	r3, #20
 800295c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800295e:	623a      	str	r2, [r7, #32]
 8002960:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002962:	69f9      	ldr	r1, [r7, #28]
 8002964:	6a3a      	ldr	r2, [r7, #32]
 8002966:	e841 2300 	strex	r3, r2, [r1]
 800296a:	61bb      	str	r3, [r7, #24]
   return(result);
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1e5      	bne.n	800293e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e00f      	b.n	80029ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4013      	ands	r3, r2
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	429a      	cmp	r2, r3
 800299c:	bf0c      	ite	eq
 800299e:	2301      	moveq	r3, #1
 80029a0:	2300      	movne	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d09f      	beq.n	80028ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3740      	adds	r7, #64	; 0x40
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029bc:	b0c0      	sub	sp, #256	; 0x100
 80029be:	af00      	add	r7, sp, #0
 80029c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d4:	68d9      	ldr	r1, [r3, #12]
 80029d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	ea40 0301 	orr.w	r3, r0, r1
 80029e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a10:	f021 010c 	bic.w	r1, r1, #12
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a1e:	430b      	orrs	r3, r1
 8002a20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a32:	6999      	ldr	r1, [r3, #24]
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	ea40 0301 	orr.w	r3, r0, r1
 8002a3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	4b8f      	ldr	r3, [pc, #572]	; (8002c84 <UART_SetConfig+0x2cc>)
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d005      	beq.n	8002a58 <UART_SetConfig+0xa0>
 8002a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	4b8d      	ldr	r3, [pc, #564]	; (8002c88 <UART_SetConfig+0x2d0>)
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d104      	bne.n	8002a62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a58:	f7ff f964 	bl	8001d24 <HAL_RCC_GetPCLK2Freq>
 8002a5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a60:	e003      	b.n	8002a6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a62:	f7ff f94b 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 8002a66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a74:	f040 810c 	bne.w	8002c90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a8a:	4622      	mov	r2, r4
 8002a8c:	462b      	mov	r3, r5
 8002a8e:	1891      	adds	r1, r2, r2
 8002a90:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a92:	415b      	adcs	r3, r3
 8002a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	eb12 0801 	adds.w	r8, r2, r1
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	eb43 0901 	adc.w	r9, r3, r1
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aba:	4690      	mov	r8, r2
 8002abc:	4699      	mov	r9, r3
 8002abe:	4623      	mov	r3, r4
 8002ac0:	eb18 0303 	adds.w	r3, r8, r3
 8002ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ac8:	462b      	mov	r3, r5
 8002aca:	eb49 0303 	adc.w	r3, r9, r3
 8002ace:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ade:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ae2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	18db      	adds	r3, r3, r3
 8002aea:	653b      	str	r3, [r7, #80]	; 0x50
 8002aec:	4613      	mov	r3, r2
 8002aee:	eb42 0303 	adc.w	r3, r2, r3
 8002af2:	657b      	str	r3, [r7, #84]	; 0x54
 8002af4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002af8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002afc:	f7fd fbd0 	bl	80002a0 <__aeabi_uldivmod>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4b61      	ldr	r3, [pc, #388]	; (8002c8c <UART_SetConfig+0x2d4>)
 8002b06:	fba3 2302 	umull	r2, r3, r3, r2
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	011c      	lsls	r4, r3, #4
 8002b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b12:	2200      	movs	r2, #0
 8002b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b20:	4642      	mov	r2, r8
 8002b22:	464b      	mov	r3, r9
 8002b24:	1891      	adds	r1, r2, r2
 8002b26:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b28:	415b      	adcs	r3, r3
 8002b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b30:	4641      	mov	r1, r8
 8002b32:	eb12 0a01 	adds.w	sl, r2, r1
 8002b36:	4649      	mov	r1, r9
 8002b38:	eb43 0b01 	adc.w	fp, r3, r1
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b50:	4692      	mov	sl, r2
 8002b52:	469b      	mov	fp, r3
 8002b54:	4643      	mov	r3, r8
 8002b56:	eb1a 0303 	adds.w	r3, sl, r3
 8002b5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b5e:	464b      	mov	r3, r9
 8002b60:	eb4b 0303 	adc.w	r3, fp, r3
 8002b64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	18db      	adds	r3, r3, r3
 8002b80:	643b      	str	r3, [r7, #64]	; 0x40
 8002b82:	4613      	mov	r3, r2
 8002b84:	eb42 0303 	adc.w	r3, r2, r3
 8002b88:	647b      	str	r3, [r7, #68]	; 0x44
 8002b8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b92:	f7fd fb85 	bl	80002a0 <__aeabi_uldivmod>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4b3b      	ldr	r3, [pc, #236]	; (8002c8c <UART_SetConfig+0x2d4>)
 8002b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2264      	movs	r2, #100	; 0x64
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	1acb      	subs	r3, r1, r3
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002bb2:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <UART_SetConfig+0x2d4>)
 8002bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bc0:	441c      	add	r4, r3
 8002bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002bd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002bd4:	4642      	mov	r2, r8
 8002bd6:	464b      	mov	r3, r9
 8002bd8:	1891      	adds	r1, r2, r2
 8002bda:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bdc:	415b      	adcs	r3, r3
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002be0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002be4:	4641      	mov	r1, r8
 8002be6:	1851      	adds	r1, r2, r1
 8002be8:	6339      	str	r1, [r7, #48]	; 0x30
 8002bea:	4649      	mov	r1, r9
 8002bec:	414b      	adcs	r3, r1
 8002bee:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002bfc:	4659      	mov	r1, fp
 8002bfe:	00cb      	lsls	r3, r1, #3
 8002c00:	4651      	mov	r1, sl
 8002c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c06:	4651      	mov	r1, sl
 8002c08:	00ca      	lsls	r2, r1, #3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4642      	mov	r2, r8
 8002c12:	189b      	adds	r3, r3, r2
 8002c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c18:	464b      	mov	r3, r9
 8002c1a:	460a      	mov	r2, r1
 8002c1c:	eb42 0303 	adc.w	r3, r2, r3
 8002c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c38:	460b      	mov	r3, r1
 8002c3a:	18db      	adds	r3, r3, r3
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c3e:	4613      	mov	r3, r2
 8002c40:	eb42 0303 	adc.w	r3, r2, r3
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c4e:	f7fd fb27 	bl	80002a0 <__aeabi_uldivmod>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <UART_SetConfig+0x2d4>)
 8002c58:	fba3 1302 	umull	r1, r3, r3, r2
 8002c5c:	095b      	lsrs	r3, r3, #5
 8002c5e:	2164      	movs	r1, #100	; 0x64
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	3332      	adds	r3, #50	; 0x32
 8002c6a:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <UART_SetConfig+0x2d4>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	095b      	lsrs	r3, r3, #5
 8002c72:	f003 0207 	and.w	r2, r3, #7
 8002c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4422      	add	r2, r4
 8002c7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c80:	e106      	b.n	8002e90 <UART_SetConfig+0x4d8>
 8002c82:	bf00      	nop
 8002c84:	40011000 	.word	0x40011000
 8002c88:	40011400 	.word	0x40011400
 8002c8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c94:	2200      	movs	r2, #0
 8002c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ca2:	4642      	mov	r2, r8
 8002ca4:	464b      	mov	r3, r9
 8002ca6:	1891      	adds	r1, r2, r2
 8002ca8:	6239      	str	r1, [r7, #32]
 8002caa:	415b      	adcs	r3, r3
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
 8002cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cb2:	4641      	mov	r1, r8
 8002cb4:	1854      	adds	r4, r2, r1
 8002cb6:	4649      	mov	r1, r9
 8002cb8:	eb43 0501 	adc.w	r5, r3, r1
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	00eb      	lsls	r3, r5, #3
 8002cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cca:	00e2      	lsls	r2, r4, #3
 8002ccc:	4614      	mov	r4, r2
 8002cce:	461d      	mov	r5, r3
 8002cd0:	4643      	mov	r3, r8
 8002cd2:	18e3      	adds	r3, r4, r3
 8002cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cd8:	464b      	mov	r3, r9
 8002cda:	eb45 0303 	adc.w	r3, r5, r3
 8002cde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cfe:	4629      	mov	r1, r5
 8002d00:	008b      	lsls	r3, r1, #2
 8002d02:	4621      	mov	r1, r4
 8002d04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d08:	4621      	mov	r1, r4
 8002d0a:	008a      	lsls	r2, r1, #2
 8002d0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d10:	f7fd fac6 	bl	80002a0 <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4b60      	ldr	r3, [pc, #384]	; (8002e9c <UART_SetConfig+0x4e4>)
 8002d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	011c      	lsls	r4, r3, #4
 8002d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d26:	2200      	movs	r2, #0
 8002d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d34:	4642      	mov	r2, r8
 8002d36:	464b      	mov	r3, r9
 8002d38:	1891      	adds	r1, r2, r2
 8002d3a:	61b9      	str	r1, [r7, #24]
 8002d3c:	415b      	adcs	r3, r3
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d44:	4641      	mov	r1, r8
 8002d46:	1851      	adds	r1, r2, r1
 8002d48:	6139      	str	r1, [r7, #16]
 8002d4a:	4649      	mov	r1, r9
 8002d4c:	414b      	adcs	r3, r1
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d5c:	4659      	mov	r1, fp
 8002d5e:	00cb      	lsls	r3, r1, #3
 8002d60:	4651      	mov	r1, sl
 8002d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d66:	4651      	mov	r1, sl
 8002d68:	00ca      	lsls	r2, r1, #3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4642      	mov	r2, r8
 8002d72:	189b      	adds	r3, r3, r2
 8002d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d78:	464b      	mov	r3, r9
 8002d7a:	460a      	mov	r2, r1
 8002d7c:	eb42 0303 	adc.w	r3, r2, r3
 8002d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d9c:	4649      	mov	r1, r9
 8002d9e:	008b      	lsls	r3, r1, #2
 8002da0:	4641      	mov	r1, r8
 8002da2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002da6:	4641      	mov	r1, r8
 8002da8:	008a      	lsls	r2, r1, #2
 8002daa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002dae:	f7fd fa77 	bl	80002a0 <__aeabi_uldivmod>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4611      	mov	r1, r2
 8002db8:	4b38      	ldr	r3, [pc, #224]	; (8002e9c <UART_SetConfig+0x4e4>)
 8002dba:	fba3 2301 	umull	r2, r3, r3, r1
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2264      	movs	r2, #100	; 0x64
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	1acb      	subs	r3, r1, r3
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	3332      	adds	r3, #50	; 0x32
 8002dcc:	4a33      	ldr	r2, [pc, #204]	; (8002e9c <UART_SetConfig+0x4e4>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd8:	441c      	add	r4, r3
 8002dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dde:	2200      	movs	r2, #0
 8002de0:	673b      	str	r3, [r7, #112]	; 0x70
 8002de2:	677a      	str	r2, [r7, #116]	; 0x74
 8002de4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002de8:	4642      	mov	r2, r8
 8002dea:	464b      	mov	r3, r9
 8002dec:	1891      	adds	r1, r2, r2
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	415b      	adcs	r3, r3
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002df8:	4641      	mov	r1, r8
 8002dfa:	1851      	adds	r1, r2, r1
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	4649      	mov	r1, r9
 8002e00:	414b      	adcs	r3, r1
 8002e02:	607b      	str	r3, [r7, #4]
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e10:	4659      	mov	r1, fp
 8002e12:	00cb      	lsls	r3, r1, #3
 8002e14:	4651      	mov	r1, sl
 8002e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e1a:	4651      	mov	r1, sl
 8002e1c:	00ca      	lsls	r2, r1, #3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	4642      	mov	r2, r8
 8002e26:	189b      	adds	r3, r3, r2
 8002e28:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e2a:	464b      	mov	r3, r9
 8002e2c:	460a      	mov	r2, r1
 8002e2e:	eb42 0303 	adc.w	r3, r2, r3
 8002e32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8002e3e:	667a      	str	r2, [r7, #100]	; 0x64
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	008b      	lsls	r3, r1, #2
 8002e50:	4641      	mov	r1, r8
 8002e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e56:	4641      	mov	r1, r8
 8002e58:	008a      	lsls	r2, r1, #2
 8002e5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e5e:	f7fd fa1f 	bl	80002a0 <__aeabi_uldivmod>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <UART_SetConfig+0x4e4>)
 8002e68:	fba3 1302 	umull	r1, r3, r3, r2
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	2164      	movs	r1, #100	; 0x64
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	3332      	adds	r3, #50	; 0x32
 8002e7a:	4a08      	ldr	r2, [pc, #32]	; (8002e9c <UART_SetConfig+0x4e4>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	f003 020f 	and.w	r2, r3, #15
 8002e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4422      	add	r2, r4
 8002e8e:	609a      	str	r2, [r3, #8]
}
 8002e90:	bf00      	nop
 8002e92:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e96:	46bd      	mov	sp, r7
 8002e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e9c:	51eb851f 	.word	0x51eb851f

08002ea0 <std>:
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	b510      	push	{r4, lr}
 8002ea4:	4604      	mov	r4, r0
 8002ea6:	e9c0 3300 	strd	r3, r3, [r0]
 8002eaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002eae:	6083      	str	r3, [r0, #8]
 8002eb0:	8181      	strh	r1, [r0, #12]
 8002eb2:	6643      	str	r3, [r0, #100]	; 0x64
 8002eb4:	81c2      	strh	r2, [r0, #14]
 8002eb6:	6183      	str	r3, [r0, #24]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	2208      	movs	r2, #8
 8002ebc:	305c      	adds	r0, #92	; 0x5c
 8002ebe:	f000 faa5 	bl	800340c <memset>
 8002ec2:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <std+0x38>)
 8002ec4:	6263      	str	r3, [r4, #36]	; 0x24
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <std+0x3c>)
 8002ec8:	62a3      	str	r3, [r4, #40]	; 0x28
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <std+0x40>)
 8002ecc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ece:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <std+0x44>)
 8002ed0:	6224      	str	r4, [r4, #32]
 8002ed2:	6323      	str	r3, [r4, #48]	; 0x30
 8002ed4:	bd10      	pop	{r4, pc}
 8002ed6:	bf00      	nop
 8002ed8:	0800325d 	.word	0x0800325d
 8002edc:	0800327f 	.word	0x0800327f
 8002ee0:	080032b7 	.word	0x080032b7
 8002ee4:	080032db 	.word	0x080032db

08002ee8 <stdio_exit_handler>:
 8002ee8:	4a02      	ldr	r2, [pc, #8]	; (8002ef4 <stdio_exit_handler+0xc>)
 8002eea:	4903      	ldr	r1, [pc, #12]	; (8002ef8 <stdio_exit_handler+0x10>)
 8002eec:	4803      	ldr	r0, [pc, #12]	; (8002efc <stdio_exit_handler+0x14>)
 8002eee:	f000 b869 	b.w	8002fc4 <_fwalk_sglue>
 8002ef2:	bf00      	nop
 8002ef4:	20000010 	.word	0x20000010
 8002ef8:	080043bd 	.word	0x080043bd
 8002efc:	2000001c 	.word	0x2000001c

08002f00 <cleanup_stdio>:
 8002f00:	6841      	ldr	r1, [r0, #4]
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <cleanup_stdio+0x34>)
 8002f04:	4299      	cmp	r1, r3
 8002f06:	b510      	push	{r4, lr}
 8002f08:	4604      	mov	r4, r0
 8002f0a:	d001      	beq.n	8002f10 <cleanup_stdio+0x10>
 8002f0c:	f001 fa56 	bl	80043bc <_fflush_r>
 8002f10:	68a1      	ldr	r1, [r4, #8]
 8002f12:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <cleanup_stdio+0x38>)
 8002f14:	4299      	cmp	r1, r3
 8002f16:	d002      	beq.n	8002f1e <cleanup_stdio+0x1e>
 8002f18:	4620      	mov	r0, r4
 8002f1a:	f001 fa4f 	bl	80043bc <_fflush_r>
 8002f1e:	68e1      	ldr	r1, [r4, #12]
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <cleanup_stdio+0x3c>)
 8002f22:	4299      	cmp	r1, r3
 8002f24:	d004      	beq.n	8002f30 <cleanup_stdio+0x30>
 8002f26:	4620      	mov	r0, r4
 8002f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f2c:	f001 ba46 	b.w	80043bc <_fflush_r>
 8002f30:	bd10      	pop	{r4, pc}
 8002f32:	bf00      	nop
 8002f34:	20000120 	.word	0x20000120
 8002f38:	20000188 	.word	0x20000188
 8002f3c:	200001f0 	.word	0x200001f0

08002f40 <global_stdio_init.part.0>:
 8002f40:	b510      	push	{r4, lr}
 8002f42:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <global_stdio_init.part.0+0x30>)
 8002f44:	4c0b      	ldr	r4, [pc, #44]	; (8002f74 <global_stdio_init.part.0+0x34>)
 8002f46:	4a0c      	ldr	r2, [pc, #48]	; (8002f78 <global_stdio_init.part.0+0x38>)
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2104      	movs	r1, #4
 8002f50:	f7ff ffa6 	bl	8002ea0 <std>
 8002f54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002f58:	2201      	movs	r2, #1
 8002f5a:	2109      	movs	r1, #9
 8002f5c:	f7ff ffa0 	bl	8002ea0 <std>
 8002f60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002f64:	2202      	movs	r2, #2
 8002f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f6a:	2112      	movs	r1, #18
 8002f6c:	f7ff bf98 	b.w	8002ea0 <std>
 8002f70:	20000258 	.word	0x20000258
 8002f74:	20000120 	.word	0x20000120
 8002f78:	08002ee9 	.word	0x08002ee9

08002f7c <__sfp_lock_acquire>:
 8002f7c:	4801      	ldr	r0, [pc, #4]	; (8002f84 <__sfp_lock_acquire+0x8>)
 8002f7e:	f000 babd 	b.w	80034fc <__retarget_lock_acquire_recursive>
 8002f82:	bf00      	nop
 8002f84:	20000261 	.word	0x20000261

08002f88 <__sfp_lock_release>:
 8002f88:	4801      	ldr	r0, [pc, #4]	; (8002f90 <__sfp_lock_release+0x8>)
 8002f8a:	f000 bab8 	b.w	80034fe <__retarget_lock_release_recursive>
 8002f8e:	bf00      	nop
 8002f90:	20000261 	.word	0x20000261

08002f94 <__sinit>:
 8002f94:	b510      	push	{r4, lr}
 8002f96:	4604      	mov	r4, r0
 8002f98:	f7ff fff0 	bl	8002f7c <__sfp_lock_acquire>
 8002f9c:	6a23      	ldr	r3, [r4, #32]
 8002f9e:	b11b      	cbz	r3, 8002fa8 <__sinit+0x14>
 8002fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fa4:	f7ff bff0 	b.w	8002f88 <__sfp_lock_release>
 8002fa8:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <__sinit+0x28>)
 8002faa:	6223      	str	r3, [r4, #32]
 8002fac:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <__sinit+0x2c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f5      	bne.n	8002fa0 <__sinit+0xc>
 8002fb4:	f7ff ffc4 	bl	8002f40 <global_stdio_init.part.0>
 8002fb8:	e7f2      	b.n	8002fa0 <__sinit+0xc>
 8002fba:	bf00      	nop
 8002fbc:	08002f01 	.word	0x08002f01
 8002fc0:	20000258 	.word	0x20000258

08002fc4 <_fwalk_sglue>:
 8002fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fc8:	4607      	mov	r7, r0
 8002fca:	4688      	mov	r8, r1
 8002fcc:	4614      	mov	r4, r2
 8002fce:	2600      	movs	r6, #0
 8002fd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002fd4:	f1b9 0901 	subs.w	r9, r9, #1
 8002fd8:	d505      	bpl.n	8002fe6 <_fwalk_sglue+0x22>
 8002fda:	6824      	ldr	r4, [r4, #0]
 8002fdc:	2c00      	cmp	r4, #0
 8002fde:	d1f7      	bne.n	8002fd0 <_fwalk_sglue+0xc>
 8002fe0:	4630      	mov	r0, r6
 8002fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fe6:	89ab      	ldrh	r3, [r5, #12]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d907      	bls.n	8002ffc <_fwalk_sglue+0x38>
 8002fec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	d003      	beq.n	8002ffc <_fwalk_sglue+0x38>
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	4638      	mov	r0, r7
 8002ff8:	47c0      	blx	r8
 8002ffa:	4306      	orrs	r6, r0
 8002ffc:	3568      	adds	r5, #104	; 0x68
 8002ffe:	e7e9      	b.n	8002fd4 <_fwalk_sglue+0x10>

08003000 <iprintf>:
 8003000:	b40f      	push	{r0, r1, r2, r3}
 8003002:	b507      	push	{r0, r1, r2, lr}
 8003004:	4906      	ldr	r1, [pc, #24]	; (8003020 <iprintf+0x20>)
 8003006:	ab04      	add	r3, sp, #16
 8003008:	6808      	ldr	r0, [r1, #0]
 800300a:	f853 2b04 	ldr.w	r2, [r3], #4
 800300e:	6881      	ldr	r1, [r0, #8]
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	f000 fb9f 	bl	8003754 <_vfiprintf_r>
 8003016:	b003      	add	sp, #12
 8003018:	f85d eb04 	ldr.w	lr, [sp], #4
 800301c:	b004      	add	sp, #16
 800301e:	4770      	bx	lr
 8003020:	20000068 	.word	0x20000068

08003024 <_puts_r>:
 8003024:	6a03      	ldr	r3, [r0, #32]
 8003026:	b570      	push	{r4, r5, r6, lr}
 8003028:	6884      	ldr	r4, [r0, #8]
 800302a:	4605      	mov	r5, r0
 800302c:	460e      	mov	r6, r1
 800302e:	b90b      	cbnz	r3, 8003034 <_puts_r+0x10>
 8003030:	f7ff ffb0 	bl	8002f94 <__sinit>
 8003034:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003036:	07db      	lsls	r3, r3, #31
 8003038:	d405      	bmi.n	8003046 <_puts_r+0x22>
 800303a:	89a3      	ldrh	r3, [r4, #12]
 800303c:	0598      	lsls	r0, r3, #22
 800303e:	d402      	bmi.n	8003046 <_puts_r+0x22>
 8003040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003042:	f000 fa5b 	bl	80034fc <__retarget_lock_acquire_recursive>
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	0719      	lsls	r1, r3, #28
 800304a:	d513      	bpl.n	8003074 <_puts_r+0x50>
 800304c:	6923      	ldr	r3, [r4, #16]
 800304e:	b18b      	cbz	r3, 8003074 <_puts_r+0x50>
 8003050:	3e01      	subs	r6, #1
 8003052:	68a3      	ldr	r3, [r4, #8]
 8003054:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003058:	3b01      	subs	r3, #1
 800305a:	60a3      	str	r3, [r4, #8]
 800305c:	b9e9      	cbnz	r1, 800309a <_puts_r+0x76>
 800305e:	2b00      	cmp	r3, #0
 8003060:	da2e      	bge.n	80030c0 <_puts_r+0x9c>
 8003062:	4622      	mov	r2, r4
 8003064:	210a      	movs	r1, #10
 8003066:	4628      	mov	r0, r5
 8003068:	f000 f93b 	bl	80032e2 <__swbuf_r>
 800306c:	3001      	adds	r0, #1
 800306e:	d007      	beq.n	8003080 <_puts_r+0x5c>
 8003070:	250a      	movs	r5, #10
 8003072:	e007      	b.n	8003084 <_puts_r+0x60>
 8003074:	4621      	mov	r1, r4
 8003076:	4628      	mov	r0, r5
 8003078:	f000 f970 	bl	800335c <__swsetup_r>
 800307c:	2800      	cmp	r0, #0
 800307e:	d0e7      	beq.n	8003050 <_puts_r+0x2c>
 8003080:	f04f 35ff 	mov.w	r5, #4294967295
 8003084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003086:	07da      	lsls	r2, r3, #31
 8003088:	d405      	bmi.n	8003096 <_puts_r+0x72>
 800308a:	89a3      	ldrh	r3, [r4, #12]
 800308c:	059b      	lsls	r3, r3, #22
 800308e:	d402      	bmi.n	8003096 <_puts_r+0x72>
 8003090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003092:	f000 fa34 	bl	80034fe <__retarget_lock_release_recursive>
 8003096:	4628      	mov	r0, r5
 8003098:	bd70      	pop	{r4, r5, r6, pc}
 800309a:	2b00      	cmp	r3, #0
 800309c:	da04      	bge.n	80030a8 <_puts_r+0x84>
 800309e:	69a2      	ldr	r2, [r4, #24]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	dc06      	bgt.n	80030b2 <_puts_r+0x8e>
 80030a4:	290a      	cmp	r1, #10
 80030a6:	d004      	beq.n	80030b2 <_puts_r+0x8e>
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	6022      	str	r2, [r4, #0]
 80030ae:	7019      	strb	r1, [r3, #0]
 80030b0:	e7cf      	b.n	8003052 <_puts_r+0x2e>
 80030b2:	4622      	mov	r2, r4
 80030b4:	4628      	mov	r0, r5
 80030b6:	f000 f914 	bl	80032e2 <__swbuf_r>
 80030ba:	3001      	adds	r0, #1
 80030bc:	d1c9      	bne.n	8003052 <_puts_r+0x2e>
 80030be:	e7df      	b.n	8003080 <_puts_r+0x5c>
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	250a      	movs	r5, #10
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	6022      	str	r2, [r4, #0]
 80030c8:	701d      	strb	r5, [r3, #0]
 80030ca:	e7db      	b.n	8003084 <_puts_r+0x60>

080030cc <puts>:
 80030cc:	4b02      	ldr	r3, [pc, #8]	; (80030d8 <puts+0xc>)
 80030ce:	4601      	mov	r1, r0
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	f7ff bfa7 	b.w	8003024 <_puts_r>
 80030d6:	bf00      	nop
 80030d8:	20000068 	.word	0x20000068

080030dc <iscanf>:
 80030dc:	b40f      	push	{r0, r1, r2, r3}
 80030de:	b507      	push	{r0, r1, r2, lr}
 80030e0:	4906      	ldr	r1, [pc, #24]	; (80030fc <iscanf+0x20>)
 80030e2:	ab04      	add	r3, sp, #16
 80030e4:	6808      	ldr	r0, [r1, #0]
 80030e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80030ea:	6841      	ldr	r1, [r0, #4]
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	f000 ff7d 	bl	8003fec <_vfiscanf_r>
 80030f2:	b003      	add	sp, #12
 80030f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80030f8:	b004      	add	sp, #16
 80030fa:	4770      	bx	lr
 80030fc:	20000068 	.word	0x20000068

08003100 <setvbuf>:
 8003100:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003104:	461d      	mov	r5, r3
 8003106:	4b54      	ldr	r3, [pc, #336]	; (8003258 <setvbuf+0x158>)
 8003108:	681f      	ldr	r7, [r3, #0]
 800310a:	4604      	mov	r4, r0
 800310c:	460e      	mov	r6, r1
 800310e:	4690      	mov	r8, r2
 8003110:	b127      	cbz	r7, 800311c <setvbuf+0x1c>
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	b913      	cbnz	r3, 800311c <setvbuf+0x1c>
 8003116:	4638      	mov	r0, r7
 8003118:	f7ff ff3c 	bl	8002f94 <__sinit>
 800311c:	f1b8 0f02 	cmp.w	r8, #2
 8003120:	d006      	beq.n	8003130 <setvbuf+0x30>
 8003122:	f1b8 0f01 	cmp.w	r8, #1
 8003126:	f200 8094 	bhi.w	8003252 <setvbuf+0x152>
 800312a:	2d00      	cmp	r5, #0
 800312c:	f2c0 8091 	blt.w	8003252 <setvbuf+0x152>
 8003130:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003132:	07da      	lsls	r2, r3, #31
 8003134:	d405      	bmi.n	8003142 <setvbuf+0x42>
 8003136:	89a3      	ldrh	r3, [r4, #12]
 8003138:	059b      	lsls	r3, r3, #22
 800313a:	d402      	bmi.n	8003142 <setvbuf+0x42>
 800313c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800313e:	f000 f9dd 	bl	80034fc <__retarget_lock_acquire_recursive>
 8003142:	4621      	mov	r1, r4
 8003144:	4638      	mov	r0, r7
 8003146:	f001 f939 	bl	80043bc <_fflush_r>
 800314a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800314c:	b141      	cbz	r1, 8003160 <setvbuf+0x60>
 800314e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003152:	4299      	cmp	r1, r3
 8003154:	d002      	beq.n	800315c <setvbuf+0x5c>
 8003156:	4638      	mov	r0, r7
 8003158:	f000 f9d2 	bl	8003500 <_free_r>
 800315c:	2300      	movs	r3, #0
 800315e:	6363      	str	r3, [r4, #52]	; 0x34
 8003160:	2300      	movs	r3, #0
 8003162:	61a3      	str	r3, [r4, #24]
 8003164:	6063      	str	r3, [r4, #4]
 8003166:	89a3      	ldrh	r3, [r4, #12]
 8003168:	0618      	lsls	r0, r3, #24
 800316a:	d503      	bpl.n	8003174 <setvbuf+0x74>
 800316c:	6921      	ldr	r1, [r4, #16]
 800316e:	4638      	mov	r0, r7
 8003170:	f000 f9c6 	bl	8003500 <_free_r>
 8003174:	89a3      	ldrh	r3, [r4, #12]
 8003176:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	f1b8 0f02 	cmp.w	r8, #2
 8003182:	81a3      	strh	r3, [r4, #12]
 8003184:	d05f      	beq.n	8003246 <setvbuf+0x146>
 8003186:	ab01      	add	r3, sp, #4
 8003188:	466a      	mov	r2, sp
 800318a:	4621      	mov	r1, r4
 800318c:	4638      	mov	r0, r7
 800318e:	f001 f93d 	bl	800440c <__swhatbuf_r>
 8003192:	89a3      	ldrh	r3, [r4, #12]
 8003194:	4318      	orrs	r0, r3
 8003196:	81a0      	strh	r0, [r4, #12]
 8003198:	bb2d      	cbnz	r5, 80031e6 <setvbuf+0xe6>
 800319a:	9d00      	ldr	r5, [sp, #0]
 800319c:	4628      	mov	r0, r5
 800319e:	f000 f9fb 	bl	8003598 <malloc>
 80031a2:	4606      	mov	r6, r0
 80031a4:	2800      	cmp	r0, #0
 80031a6:	d150      	bne.n	800324a <setvbuf+0x14a>
 80031a8:	f8dd 9000 	ldr.w	r9, [sp]
 80031ac:	45a9      	cmp	r9, r5
 80031ae:	d13e      	bne.n	800322e <setvbuf+0x12e>
 80031b0:	f04f 35ff 	mov.w	r5, #4294967295
 80031b4:	2200      	movs	r2, #0
 80031b6:	60a2      	str	r2, [r4, #8]
 80031b8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80031bc:	6022      	str	r2, [r4, #0]
 80031be:	6122      	str	r2, [r4, #16]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031c6:	6162      	str	r2, [r4, #20]
 80031c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80031ca:	f043 0302 	orr.w	r3, r3, #2
 80031ce:	07d1      	lsls	r1, r2, #31
 80031d0:	81a3      	strh	r3, [r4, #12]
 80031d2:	d404      	bmi.n	80031de <setvbuf+0xde>
 80031d4:	059b      	lsls	r3, r3, #22
 80031d6:	d402      	bmi.n	80031de <setvbuf+0xde>
 80031d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031da:	f000 f990 	bl	80034fe <__retarget_lock_release_recursive>
 80031de:	4628      	mov	r0, r5
 80031e0:	b003      	add	sp, #12
 80031e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031e6:	2e00      	cmp	r6, #0
 80031e8:	d0d8      	beq.n	800319c <setvbuf+0x9c>
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	b913      	cbnz	r3, 80031f4 <setvbuf+0xf4>
 80031ee:	4638      	mov	r0, r7
 80031f0:	f7ff fed0 	bl	8002f94 <__sinit>
 80031f4:	f1b8 0f01 	cmp.w	r8, #1
 80031f8:	bf08      	it	eq
 80031fa:	89a3      	ldrheq	r3, [r4, #12]
 80031fc:	6026      	str	r6, [r4, #0]
 80031fe:	bf04      	itt	eq
 8003200:	f043 0301 	orreq.w	r3, r3, #1
 8003204:	81a3      	strheq	r3, [r4, #12]
 8003206:	89a3      	ldrh	r3, [r4, #12]
 8003208:	f013 0208 	ands.w	r2, r3, #8
 800320c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003210:	d01d      	beq.n	800324e <setvbuf+0x14e>
 8003212:	07da      	lsls	r2, r3, #31
 8003214:	bf41      	itttt	mi
 8003216:	2200      	movmi	r2, #0
 8003218:	426d      	negmi	r5, r5
 800321a:	60a2      	strmi	r2, [r4, #8]
 800321c:	61a5      	strmi	r5, [r4, #24]
 800321e:	bf58      	it	pl
 8003220:	60a5      	strpl	r5, [r4, #8]
 8003222:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003224:	f015 0501 	ands.w	r5, r5, #1
 8003228:	d0d4      	beq.n	80031d4 <setvbuf+0xd4>
 800322a:	2500      	movs	r5, #0
 800322c:	e7d7      	b.n	80031de <setvbuf+0xde>
 800322e:	4648      	mov	r0, r9
 8003230:	f000 f9b2 	bl	8003598 <malloc>
 8003234:	4606      	mov	r6, r0
 8003236:	2800      	cmp	r0, #0
 8003238:	d0ba      	beq.n	80031b0 <setvbuf+0xb0>
 800323a:	89a3      	ldrh	r3, [r4, #12]
 800323c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003240:	81a3      	strh	r3, [r4, #12]
 8003242:	464d      	mov	r5, r9
 8003244:	e7d1      	b.n	80031ea <setvbuf+0xea>
 8003246:	2500      	movs	r5, #0
 8003248:	e7b4      	b.n	80031b4 <setvbuf+0xb4>
 800324a:	46a9      	mov	r9, r5
 800324c:	e7f5      	b.n	800323a <setvbuf+0x13a>
 800324e:	60a2      	str	r2, [r4, #8]
 8003250:	e7e7      	b.n	8003222 <setvbuf+0x122>
 8003252:	f04f 35ff 	mov.w	r5, #4294967295
 8003256:	e7c2      	b.n	80031de <setvbuf+0xde>
 8003258:	20000068 	.word	0x20000068

0800325c <__sread>:
 800325c:	b510      	push	{r4, lr}
 800325e:	460c      	mov	r4, r1
 8003260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003264:	f000 f8fc 	bl	8003460 <_read_r>
 8003268:	2800      	cmp	r0, #0
 800326a:	bfab      	itete	ge
 800326c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800326e:	89a3      	ldrhlt	r3, [r4, #12]
 8003270:	181b      	addge	r3, r3, r0
 8003272:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003276:	bfac      	ite	ge
 8003278:	6563      	strge	r3, [r4, #84]	; 0x54
 800327a:	81a3      	strhlt	r3, [r4, #12]
 800327c:	bd10      	pop	{r4, pc}

0800327e <__swrite>:
 800327e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003282:	461f      	mov	r7, r3
 8003284:	898b      	ldrh	r3, [r1, #12]
 8003286:	05db      	lsls	r3, r3, #23
 8003288:	4605      	mov	r5, r0
 800328a:	460c      	mov	r4, r1
 800328c:	4616      	mov	r6, r2
 800328e:	d505      	bpl.n	800329c <__swrite+0x1e>
 8003290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003294:	2302      	movs	r3, #2
 8003296:	2200      	movs	r2, #0
 8003298:	f000 f8d0 	bl	800343c <_lseek_r>
 800329c:	89a3      	ldrh	r3, [r4, #12]
 800329e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032a6:	81a3      	strh	r3, [r4, #12]
 80032a8:	4632      	mov	r2, r6
 80032aa:	463b      	mov	r3, r7
 80032ac:	4628      	mov	r0, r5
 80032ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032b2:	f000 b8e7 	b.w	8003484 <_write_r>

080032b6 <__sseek>:
 80032b6:	b510      	push	{r4, lr}
 80032b8:	460c      	mov	r4, r1
 80032ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032be:	f000 f8bd 	bl	800343c <_lseek_r>
 80032c2:	1c43      	adds	r3, r0, #1
 80032c4:	89a3      	ldrh	r3, [r4, #12]
 80032c6:	bf15      	itete	ne
 80032c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80032ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80032ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80032d2:	81a3      	strheq	r3, [r4, #12]
 80032d4:	bf18      	it	ne
 80032d6:	81a3      	strhne	r3, [r4, #12]
 80032d8:	bd10      	pop	{r4, pc}

080032da <__sclose>:
 80032da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032de:	f000 b89d 	b.w	800341c <_close_r>

080032e2 <__swbuf_r>:
 80032e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e4:	460e      	mov	r6, r1
 80032e6:	4614      	mov	r4, r2
 80032e8:	4605      	mov	r5, r0
 80032ea:	b118      	cbz	r0, 80032f4 <__swbuf_r+0x12>
 80032ec:	6a03      	ldr	r3, [r0, #32]
 80032ee:	b90b      	cbnz	r3, 80032f4 <__swbuf_r+0x12>
 80032f0:	f7ff fe50 	bl	8002f94 <__sinit>
 80032f4:	69a3      	ldr	r3, [r4, #24]
 80032f6:	60a3      	str	r3, [r4, #8]
 80032f8:	89a3      	ldrh	r3, [r4, #12]
 80032fa:	071a      	lsls	r2, r3, #28
 80032fc:	d525      	bpl.n	800334a <__swbuf_r+0x68>
 80032fe:	6923      	ldr	r3, [r4, #16]
 8003300:	b31b      	cbz	r3, 800334a <__swbuf_r+0x68>
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	6922      	ldr	r2, [r4, #16]
 8003306:	1a98      	subs	r0, r3, r2
 8003308:	6963      	ldr	r3, [r4, #20]
 800330a:	b2f6      	uxtb	r6, r6
 800330c:	4283      	cmp	r3, r0
 800330e:	4637      	mov	r7, r6
 8003310:	dc04      	bgt.n	800331c <__swbuf_r+0x3a>
 8003312:	4621      	mov	r1, r4
 8003314:	4628      	mov	r0, r5
 8003316:	f001 f851 	bl	80043bc <_fflush_r>
 800331a:	b9e0      	cbnz	r0, 8003356 <__swbuf_r+0x74>
 800331c:	68a3      	ldr	r3, [r4, #8]
 800331e:	3b01      	subs	r3, #1
 8003320:	60a3      	str	r3, [r4, #8]
 8003322:	6823      	ldr	r3, [r4, #0]
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	6022      	str	r2, [r4, #0]
 8003328:	701e      	strb	r6, [r3, #0]
 800332a:	6962      	ldr	r2, [r4, #20]
 800332c:	1c43      	adds	r3, r0, #1
 800332e:	429a      	cmp	r2, r3
 8003330:	d004      	beq.n	800333c <__swbuf_r+0x5a>
 8003332:	89a3      	ldrh	r3, [r4, #12]
 8003334:	07db      	lsls	r3, r3, #31
 8003336:	d506      	bpl.n	8003346 <__swbuf_r+0x64>
 8003338:	2e0a      	cmp	r6, #10
 800333a:	d104      	bne.n	8003346 <__swbuf_r+0x64>
 800333c:	4621      	mov	r1, r4
 800333e:	4628      	mov	r0, r5
 8003340:	f001 f83c 	bl	80043bc <_fflush_r>
 8003344:	b938      	cbnz	r0, 8003356 <__swbuf_r+0x74>
 8003346:	4638      	mov	r0, r7
 8003348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800334a:	4621      	mov	r1, r4
 800334c:	4628      	mov	r0, r5
 800334e:	f000 f805 	bl	800335c <__swsetup_r>
 8003352:	2800      	cmp	r0, #0
 8003354:	d0d5      	beq.n	8003302 <__swbuf_r+0x20>
 8003356:	f04f 37ff 	mov.w	r7, #4294967295
 800335a:	e7f4      	b.n	8003346 <__swbuf_r+0x64>

0800335c <__swsetup_r>:
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <__swsetup_r+0xac>)
 8003360:	4605      	mov	r5, r0
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	460c      	mov	r4, r1
 8003366:	b118      	cbz	r0, 8003370 <__swsetup_r+0x14>
 8003368:	6a03      	ldr	r3, [r0, #32]
 800336a:	b90b      	cbnz	r3, 8003370 <__swsetup_r+0x14>
 800336c:	f7ff fe12 	bl	8002f94 <__sinit>
 8003370:	89a3      	ldrh	r3, [r4, #12]
 8003372:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003376:	0718      	lsls	r0, r3, #28
 8003378:	d422      	bmi.n	80033c0 <__swsetup_r+0x64>
 800337a:	06d9      	lsls	r1, r3, #27
 800337c:	d407      	bmi.n	800338e <__swsetup_r+0x32>
 800337e:	2309      	movs	r3, #9
 8003380:	602b      	str	r3, [r5, #0]
 8003382:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003386:	81a3      	strh	r3, [r4, #12]
 8003388:	f04f 30ff 	mov.w	r0, #4294967295
 800338c:	e034      	b.n	80033f8 <__swsetup_r+0x9c>
 800338e:	0758      	lsls	r0, r3, #29
 8003390:	d512      	bpl.n	80033b8 <__swsetup_r+0x5c>
 8003392:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003394:	b141      	cbz	r1, 80033a8 <__swsetup_r+0x4c>
 8003396:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800339a:	4299      	cmp	r1, r3
 800339c:	d002      	beq.n	80033a4 <__swsetup_r+0x48>
 800339e:	4628      	mov	r0, r5
 80033a0:	f000 f8ae 	bl	8003500 <_free_r>
 80033a4:	2300      	movs	r3, #0
 80033a6:	6363      	str	r3, [r4, #52]	; 0x34
 80033a8:	89a3      	ldrh	r3, [r4, #12]
 80033aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80033ae:	81a3      	strh	r3, [r4, #12]
 80033b0:	2300      	movs	r3, #0
 80033b2:	6063      	str	r3, [r4, #4]
 80033b4:	6923      	ldr	r3, [r4, #16]
 80033b6:	6023      	str	r3, [r4, #0]
 80033b8:	89a3      	ldrh	r3, [r4, #12]
 80033ba:	f043 0308 	orr.w	r3, r3, #8
 80033be:	81a3      	strh	r3, [r4, #12]
 80033c0:	6923      	ldr	r3, [r4, #16]
 80033c2:	b94b      	cbnz	r3, 80033d8 <__swsetup_r+0x7c>
 80033c4:	89a3      	ldrh	r3, [r4, #12]
 80033c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80033ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ce:	d003      	beq.n	80033d8 <__swsetup_r+0x7c>
 80033d0:	4621      	mov	r1, r4
 80033d2:	4628      	mov	r0, r5
 80033d4:	f001 f840 	bl	8004458 <__smakebuf_r>
 80033d8:	89a0      	ldrh	r0, [r4, #12]
 80033da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033de:	f010 0301 	ands.w	r3, r0, #1
 80033e2:	d00a      	beq.n	80033fa <__swsetup_r+0x9e>
 80033e4:	2300      	movs	r3, #0
 80033e6:	60a3      	str	r3, [r4, #8]
 80033e8:	6963      	ldr	r3, [r4, #20]
 80033ea:	425b      	negs	r3, r3
 80033ec:	61a3      	str	r3, [r4, #24]
 80033ee:	6923      	ldr	r3, [r4, #16]
 80033f0:	b943      	cbnz	r3, 8003404 <__swsetup_r+0xa8>
 80033f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80033f6:	d1c4      	bne.n	8003382 <__swsetup_r+0x26>
 80033f8:	bd38      	pop	{r3, r4, r5, pc}
 80033fa:	0781      	lsls	r1, r0, #30
 80033fc:	bf58      	it	pl
 80033fe:	6963      	ldrpl	r3, [r4, #20]
 8003400:	60a3      	str	r3, [r4, #8]
 8003402:	e7f4      	b.n	80033ee <__swsetup_r+0x92>
 8003404:	2000      	movs	r0, #0
 8003406:	e7f7      	b.n	80033f8 <__swsetup_r+0x9c>
 8003408:	20000068 	.word	0x20000068

0800340c <memset>:
 800340c:	4402      	add	r2, r0
 800340e:	4603      	mov	r3, r0
 8003410:	4293      	cmp	r3, r2
 8003412:	d100      	bne.n	8003416 <memset+0xa>
 8003414:	4770      	bx	lr
 8003416:	f803 1b01 	strb.w	r1, [r3], #1
 800341a:	e7f9      	b.n	8003410 <memset+0x4>

0800341c <_close_r>:
 800341c:	b538      	push	{r3, r4, r5, lr}
 800341e:	4d06      	ldr	r5, [pc, #24]	; (8003438 <_close_r+0x1c>)
 8003420:	2300      	movs	r3, #0
 8003422:	4604      	mov	r4, r0
 8003424:	4608      	mov	r0, r1
 8003426:	602b      	str	r3, [r5, #0]
 8003428:	f7fd fb17 	bl	8000a5a <_close>
 800342c:	1c43      	adds	r3, r0, #1
 800342e:	d102      	bne.n	8003436 <_close_r+0x1a>
 8003430:	682b      	ldr	r3, [r5, #0]
 8003432:	b103      	cbz	r3, 8003436 <_close_r+0x1a>
 8003434:	6023      	str	r3, [r4, #0]
 8003436:	bd38      	pop	{r3, r4, r5, pc}
 8003438:	2000025c 	.word	0x2000025c

0800343c <_lseek_r>:
 800343c:	b538      	push	{r3, r4, r5, lr}
 800343e:	4d07      	ldr	r5, [pc, #28]	; (800345c <_lseek_r+0x20>)
 8003440:	4604      	mov	r4, r0
 8003442:	4608      	mov	r0, r1
 8003444:	4611      	mov	r1, r2
 8003446:	2200      	movs	r2, #0
 8003448:	602a      	str	r2, [r5, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	f7fd fb2c 	bl	8000aa8 <_lseek>
 8003450:	1c43      	adds	r3, r0, #1
 8003452:	d102      	bne.n	800345a <_lseek_r+0x1e>
 8003454:	682b      	ldr	r3, [r5, #0]
 8003456:	b103      	cbz	r3, 800345a <_lseek_r+0x1e>
 8003458:	6023      	str	r3, [r4, #0]
 800345a:	bd38      	pop	{r3, r4, r5, pc}
 800345c:	2000025c 	.word	0x2000025c

08003460 <_read_r>:
 8003460:	b538      	push	{r3, r4, r5, lr}
 8003462:	4d07      	ldr	r5, [pc, #28]	; (8003480 <_read_r+0x20>)
 8003464:	4604      	mov	r4, r0
 8003466:	4608      	mov	r0, r1
 8003468:	4611      	mov	r1, r2
 800346a:	2200      	movs	r2, #0
 800346c:	602a      	str	r2, [r5, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	f7fd faba 	bl	80009e8 <_read>
 8003474:	1c43      	adds	r3, r0, #1
 8003476:	d102      	bne.n	800347e <_read_r+0x1e>
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	b103      	cbz	r3, 800347e <_read_r+0x1e>
 800347c:	6023      	str	r3, [r4, #0]
 800347e:	bd38      	pop	{r3, r4, r5, pc}
 8003480:	2000025c 	.word	0x2000025c

08003484 <_write_r>:
 8003484:	b538      	push	{r3, r4, r5, lr}
 8003486:	4d07      	ldr	r5, [pc, #28]	; (80034a4 <_write_r+0x20>)
 8003488:	4604      	mov	r4, r0
 800348a:	4608      	mov	r0, r1
 800348c:	4611      	mov	r1, r2
 800348e:	2200      	movs	r2, #0
 8003490:	602a      	str	r2, [r5, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	f7fd fac5 	bl	8000a22 <_write>
 8003498:	1c43      	adds	r3, r0, #1
 800349a:	d102      	bne.n	80034a2 <_write_r+0x1e>
 800349c:	682b      	ldr	r3, [r5, #0]
 800349e:	b103      	cbz	r3, 80034a2 <_write_r+0x1e>
 80034a0:	6023      	str	r3, [r4, #0]
 80034a2:	bd38      	pop	{r3, r4, r5, pc}
 80034a4:	2000025c 	.word	0x2000025c

080034a8 <__errno>:
 80034a8:	4b01      	ldr	r3, [pc, #4]	; (80034b0 <__errno+0x8>)
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	20000068 	.word	0x20000068

080034b4 <__libc_init_array>:
 80034b4:	b570      	push	{r4, r5, r6, lr}
 80034b6:	4d0d      	ldr	r5, [pc, #52]	; (80034ec <__libc_init_array+0x38>)
 80034b8:	4c0d      	ldr	r4, [pc, #52]	; (80034f0 <__libc_init_array+0x3c>)
 80034ba:	1b64      	subs	r4, r4, r5
 80034bc:	10a4      	asrs	r4, r4, #2
 80034be:	2600      	movs	r6, #0
 80034c0:	42a6      	cmp	r6, r4
 80034c2:	d109      	bne.n	80034d8 <__libc_init_array+0x24>
 80034c4:	4d0b      	ldr	r5, [pc, #44]	; (80034f4 <__libc_init_array+0x40>)
 80034c6:	4c0c      	ldr	r4, [pc, #48]	; (80034f8 <__libc_init_array+0x44>)
 80034c8:	f001 faf0 	bl	8004aac <_init>
 80034cc:	1b64      	subs	r4, r4, r5
 80034ce:	10a4      	asrs	r4, r4, #2
 80034d0:	2600      	movs	r6, #0
 80034d2:	42a6      	cmp	r6, r4
 80034d4:	d105      	bne.n	80034e2 <__libc_init_array+0x2e>
 80034d6:	bd70      	pop	{r4, r5, r6, pc}
 80034d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034dc:	4798      	blx	r3
 80034de:	3601      	adds	r6, #1
 80034e0:	e7ee      	b.n	80034c0 <__libc_init_array+0xc>
 80034e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e6:	4798      	blx	r3
 80034e8:	3601      	adds	r6, #1
 80034ea:	e7f2      	b.n	80034d2 <__libc_init_array+0x1e>
 80034ec:	08004c74 	.word	0x08004c74
 80034f0:	08004c74 	.word	0x08004c74
 80034f4:	08004c74 	.word	0x08004c74
 80034f8:	08004c78 	.word	0x08004c78

080034fc <__retarget_lock_acquire_recursive>:
 80034fc:	4770      	bx	lr

080034fe <__retarget_lock_release_recursive>:
 80034fe:	4770      	bx	lr

08003500 <_free_r>:
 8003500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003502:	2900      	cmp	r1, #0
 8003504:	d044      	beq.n	8003590 <_free_r+0x90>
 8003506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800350a:	9001      	str	r0, [sp, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f1a1 0404 	sub.w	r4, r1, #4
 8003512:	bfb8      	it	lt
 8003514:	18e4      	addlt	r4, r4, r3
 8003516:	f000 f8e7 	bl	80036e8 <__malloc_lock>
 800351a:	4a1e      	ldr	r2, [pc, #120]	; (8003594 <_free_r+0x94>)
 800351c:	9801      	ldr	r0, [sp, #4]
 800351e:	6813      	ldr	r3, [r2, #0]
 8003520:	b933      	cbnz	r3, 8003530 <_free_r+0x30>
 8003522:	6063      	str	r3, [r4, #4]
 8003524:	6014      	str	r4, [r2, #0]
 8003526:	b003      	add	sp, #12
 8003528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800352c:	f000 b8e2 	b.w	80036f4 <__malloc_unlock>
 8003530:	42a3      	cmp	r3, r4
 8003532:	d908      	bls.n	8003546 <_free_r+0x46>
 8003534:	6825      	ldr	r5, [r4, #0]
 8003536:	1961      	adds	r1, r4, r5
 8003538:	428b      	cmp	r3, r1
 800353a:	bf01      	itttt	eq
 800353c:	6819      	ldreq	r1, [r3, #0]
 800353e:	685b      	ldreq	r3, [r3, #4]
 8003540:	1949      	addeq	r1, r1, r5
 8003542:	6021      	streq	r1, [r4, #0]
 8003544:	e7ed      	b.n	8003522 <_free_r+0x22>
 8003546:	461a      	mov	r2, r3
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	b10b      	cbz	r3, 8003550 <_free_r+0x50>
 800354c:	42a3      	cmp	r3, r4
 800354e:	d9fa      	bls.n	8003546 <_free_r+0x46>
 8003550:	6811      	ldr	r1, [r2, #0]
 8003552:	1855      	adds	r5, r2, r1
 8003554:	42a5      	cmp	r5, r4
 8003556:	d10b      	bne.n	8003570 <_free_r+0x70>
 8003558:	6824      	ldr	r4, [r4, #0]
 800355a:	4421      	add	r1, r4
 800355c:	1854      	adds	r4, r2, r1
 800355e:	42a3      	cmp	r3, r4
 8003560:	6011      	str	r1, [r2, #0]
 8003562:	d1e0      	bne.n	8003526 <_free_r+0x26>
 8003564:	681c      	ldr	r4, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	6053      	str	r3, [r2, #4]
 800356a:	440c      	add	r4, r1
 800356c:	6014      	str	r4, [r2, #0]
 800356e:	e7da      	b.n	8003526 <_free_r+0x26>
 8003570:	d902      	bls.n	8003578 <_free_r+0x78>
 8003572:	230c      	movs	r3, #12
 8003574:	6003      	str	r3, [r0, #0]
 8003576:	e7d6      	b.n	8003526 <_free_r+0x26>
 8003578:	6825      	ldr	r5, [r4, #0]
 800357a:	1961      	adds	r1, r4, r5
 800357c:	428b      	cmp	r3, r1
 800357e:	bf04      	itt	eq
 8003580:	6819      	ldreq	r1, [r3, #0]
 8003582:	685b      	ldreq	r3, [r3, #4]
 8003584:	6063      	str	r3, [r4, #4]
 8003586:	bf04      	itt	eq
 8003588:	1949      	addeq	r1, r1, r5
 800358a:	6021      	streq	r1, [r4, #0]
 800358c:	6054      	str	r4, [r2, #4]
 800358e:	e7ca      	b.n	8003526 <_free_r+0x26>
 8003590:	b003      	add	sp, #12
 8003592:	bd30      	pop	{r4, r5, pc}
 8003594:	20000264 	.word	0x20000264

08003598 <malloc>:
 8003598:	4b02      	ldr	r3, [pc, #8]	; (80035a4 <malloc+0xc>)
 800359a:	4601      	mov	r1, r0
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	f000 b823 	b.w	80035e8 <_malloc_r>
 80035a2:	bf00      	nop
 80035a4:	20000068 	.word	0x20000068

080035a8 <sbrk_aligned>:
 80035a8:	b570      	push	{r4, r5, r6, lr}
 80035aa:	4e0e      	ldr	r6, [pc, #56]	; (80035e4 <sbrk_aligned+0x3c>)
 80035ac:	460c      	mov	r4, r1
 80035ae:	6831      	ldr	r1, [r6, #0]
 80035b0:	4605      	mov	r5, r0
 80035b2:	b911      	cbnz	r1, 80035ba <sbrk_aligned+0x12>
 80035b4:	f001 f92c 	bl	8004810 <_sbrk_r>
 80035b8:	6030      	str	r0, [r6, #0]
 80035ba:	4621      	mov	r1, r4
 80035bc:	4628      	mov	r0, r5
 80035be:	f001 f927 	bl	8004810 <_sbrk_r>
 80035c2:	1c43      	adds	r3, r0, #1
 80035c4:	d00a      	beq.n	80035dc <sbrk_aligned+0x34>
 80035c6:	1cc4      	adds	r4, r0, #3
 80035c8:	f024 0403 	bic.w	r4, r4, #3
 80035cc:	42a0      	cmp	r0, r4
 80035ce:	d007      	beq.n	80035e0 <sbrk_aligned+0x38>
 80035d0:	1a21      	subs	r1, r4, r0
 80035d2:	4628      	mov	r0, r5
 80035d4:	f001 f91c 	bl	8004810 <_sbrk_r>
 80035d8:	3001      	adds	r0, #1
 80035da:	d101      	bne.n	80035e0 <sbrk_aligned+0x38>
 80035dc:	f04f 34ff 	mov.w	r4, #4294967295
 80035e0:	4620      	mov	r0, r4
 80035e2:	bd70      	pop	{r4, r5, r6, pc}
 80035e4:	20000268 	.word	0x20000268

080035e8 <_malloc_r>:
 80035e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035ec:	1ccd      	adds	r5, r1, #3
 80035ee:	f025 0503 	bic.w	r5, r5, #3
 80035f2:	3508      	adds	r5, #8
 80035f4:	2d0c      	cmp	r5, #12
 80035f6:	bf38      	it	cc
 80035f8:	250c      	movcc	r5, #12
 80035fa:	2d00      	cmp	r5, #0
 80035fc:	4607      	mov	r7, r0
 80035fe:	db01      	blt.n	8003604 <_malloc_r+0x1c>
 8003600:	42a9      	cmp	r1, r5
 8003602:	d905      	bls.n	8003610 <_malloc_r+0x28>
 8003604:	230c      	movs	r3, #12
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	2600      	movs	r6, #0
 800360a:	4630      	mov	r0, r6
 800360c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003610:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80036e4 <_malloc_r+0xfc>
 8003614:	f000 f868 	bl	80036e8 <__malloc_lock>
 8003618:	f8d8 3000 	ldr.w	r3, [r8]
 800361c:	461c      	mov	r4, r3
 800361e:	bb5c      	cbnz	r4, 8003678 <_malloc_r+0x90>
 8003620:	4629      	mov	r1, r5
 8003622:	4638      	mov	r0, r7
 8003624:	f7ff ffc0 	bl	80035a8 <sbrk_aligned>
 8003628:	1c43      	adds	r3, r0, #1
 800362a:	4604      	mov	r4, r0
 800362c:	d155      	bne.n	80036da <_malloc_r+0xf2>
 800362e:	f8d8 4000 	ldr.w	r4, [r8]
 8003632:	4626      	mov	r6, r4
 8003634:	2e00      	cmp	r6, #0
 8003636:	d145      	bne.n	80036c4 <_malloc_r+0xdc>
 8003638:	2c00      	cmp	r4, #0
 800363a:	d048      	beq.n	80036ce <_malloc_r+0xe6>
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	4631      	mov	r1, r6
 8003640:	4638      	mov	r0, r7
 8003642:	eb04 0903 	add.w	r9, r4, r3
 8003646:	f001 f8e3 	bl	8004810 <_sbrk_r>
 800364a:	4581      	cmp	r9, r0
 800364c:	d13f      	bne.n	80036ce <_malloc_r+0xe6>
 800364e:	6821      	ldr	r1, [r4, #0]
 8003650:	1a6d      	subs	r5, r5, r1
 8003652:	4629      	mov	r1, r5
 8003654:	4638      	mov	r0, r7
 8003656:	f7ff ffa7 	bl	80035a8 <sbrk_aligned>
 800365a:	3001      	adds	r0, #1
 800365c:	d037      	beq.n	80036ce <_malloc_r+0xe6>
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	442b      	add	r3, r5
 8003662:	6023      	str	r3, [r4, #0]
 8003664:	f8d8 3000 	ldr.w	r3, [r8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d038      	beq.n	80036de <_malloc_r+0xf6>
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	42a2      	cmp	r2, r4
 8003670:	d12b      	bne.n	80036ca <_malloc_r+0xe2>
 8003672:	2200      	movs	r2, #0
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	e00f      	b.n	8003698 <_malloc_r+0xb0>
 8003678:	6822      	ldr	r2, [r4, #0]
 800367a:	1b52      	subs	r2, r2, r5
 800367c:	d41f      	bmi.n	80036be <_malloc_r+0xd6>
 800367e:	2a0b      	cmp	r2, #11
 8003680:	d917      	bls.n	80036b2 <_malloc_r+0xca>
 8003682:	1961      	adds	r1, r4, r5
 8003684:	42a3      	cmp	r3, r4
 8003686:	6025      	str	r5, [r4, #0]
 8003688:	bf18      	it	ne
 800368a:	6059      	strne	r1, [r3, #4]
 800368c:	6863      	ldr	r3, [r4, #4]
 800368e:	bf08      	it	eq
 8003690:	f8c8 1000 	streq.w	r1, [r8]
 8003694:	5162      	str	r2, [r4, r5]
 8003696:	604b      	str	r3, [r1, #4]
 8003698:	4638      	mov	r0, r7
 800369a:	f104 060b 	add.w	r6, r4, #11
 800369e:	f000 f829 	bl	80036f4 <__malloc_unlock>
 80036a2:	f026 0607 	bic.w	r6, r6, #7
 80036a6:	1d23      	adds	r3, r4, #4
 80036a8:	1af2      	subs	r2, r6, r3
 80036aa:	d0ae      	beq.n	800360a <_malloc_r+0x22>
 80036ac:	1b9b      	subs	r3, r3, r6
 80036ae:	50a3      	str	r3, [r4, r2]
 80036b0:	e7ab      	b.n	800360a <_malloc_r+0x22>
 80036b2:	42a3      	cmp	r3, r4
 80036b4:	6862      	ldr	r2, [r4, #4]
 80036b6:	d1dd      	bne.n	8003674 <_malloc_r+0x8c>
 80036b8:	f8c8 2000 	str.w	r2, [r8]
 80036bc:	e7ec      	b.n	8003698 <_malloc_r+0xb0>
 80036be:	4623      	mov	r3, r4
 80036c0:	6864      	ldr	r4, [r4, #4]
 80036c2:	e7ac      	b.n	800361e <_malloc_r+0x36>
 80036c4:	4634      	mov	r4, r6
 80036c6:	6876      	ldr	r6, [r6, #4]
 80036c8:	e7b4      	b.n	8003634 <_malloc_r+0x4c>
 80036ca:	4613      	mov	r3, r2
 80036cc:	e7cc      	b.n	8003668 <_malloc_r+0x80>
 80036ce:	230c      	movs	r3, #12
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	4638      	mov	r0, r7
 80036d4:	f000 f80e 	bl	80036f4 <__malloc_unlock>
 80036d8:	e797      	b.n	800360a <_malloc_r+0x22>
 80036da:	6025      	str	r5, [r4, #0]
 80036dc:	e7dc      	b.n	8003698 <_malloc_r+0xb0>
 80036de:	605b      	str	r3, [r3, #4]
 80036e0:	deff      	udf	#255	; 0xff
 80036e2:	bf00      	nop
 80036e4:	20000264 	.word	0x20000264

080036e8 <__malloc_lock>:
 80036e8:	4801      	ldr	r0, [pc, #4]	; (80036f0 <__malloc_lock+0x8>)
 80036ea:	f7ff bf07 	b.w	80034fc <__retarget_lock_acquire_recursive>
 80036ee:	bf00      	nop
 80036f0:	20000260 	.word	0x20000260

080036f4 <__malloc_unlock>:
 80036f4:	4801      	ldr	r0, [pc, #4]	; (80036fc <__malloc_unlock+0x8>)
 80036f6:	f7ff bf02 	b.w	80034fe <__retarget_lock_release_recursive>
 80036fa:	bf00      	nop
 80036fc:	20000260 	.word	0x20000260

08003700 <__sfputc_r>:
 8003700:	6893      	ldr	r3, [r2, #8]
 8003702:	3b01      	subs	r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	b410      	push	{r4}
 8003708:	6093      	str	r3, [r2, #8]
 800370a:	da08      	bge.n	800371e <__sfputc_r+0x1e>
 800370c:	6994      	ldr	r4, [r2, #24]
 800370e:	42a3      	cmp	r3, r4
 8003710:	db01      	blt.n	8003716 <__sfputc_r+0x16>
 8003712:	290a      	cmp	r1, #10
 8003714:	d103      	bne.n	800371e <__sfputc_r+0x1e>
 8003716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800371a:	f7ff bde2 	b.w	80032e2 <__swbuf_r>
 800371e:	6813      	ldr	r3, [r2, #0]
 8003720:	1c58      	adds	r0, r3, #1
 8003722:	6010      	str	r0, [r2, #0]
 8003724:	7019      	strb	r1, [r3, #0]
 8003726:	4608      	mov	r0, r1
 8003728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800372c:	4770      	bx	lr

0800372e <__sfputs_r>:
 800372e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003730:	4606      	mov	r6, r0
 8003732:	460f      	mov	r7, r1
 8003734:	4614      	mov	r4, r2
 8003736:	18d5      	adds	r5, r2, r3
 8003738:	42ac      	cmp	r4, r5
 800373a:	d101      	bne.n	8003740 <__sfputs_r+0x12>
 800373c:	2000      	movs	r0, #0
 800373e:	e007      	b.n	8003750 <__sfputs_r+0x22>
 8003740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003744:	463a      	mov	r2, r7
 8003746:	4630      	mov	r0, r6
 8003748:	f7ff ffda 	bl	8003700 <__sfputc_r>
 800374c:	1c43      	adds	r3, r0, #1
 800374e:	d1f3      	bne.n	8003738 <__sfputs_r+0xa>
 8003750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003754 <_vfiprintf_r>:
 8003754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003758:	460d      	mov	r5, r1
 800375a:	b09d      	sub	sp, #116	; 0x74
 800375c:	4614      	mov	r4, r2
 800375e:	4698      	mov	r8, r3
 8003760:	4606      	mov	r6, r0
 8003762:	b118      	cbz	r0, 800376c <_vfiprintf_r+0x18>
 8003764:	6a03      	ldr	r3, [r0, #32]
 8003766:	b90b      	cbnz	r3, 800376c <_vfiprintf_r+0x18>
 8003768:	f7ff fc14 	bl	8002f94 <__sinit>
 800376c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800376e:	07d9      	lsls	r1, r3, #31
 8003770:	d405      	bmi.n	800377e <_vfiprintf_r+0x2a>
 8003772:	89ab      	ldrh	r3, [r5, #12]
 8003774:	059a      	lsls	r2, r3, #22
 8003776:	d402      	bmi.n	800377e <_vfiprintf_r+0x2a>
 8003778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800377a:	f7ff febf 	bl	80034fc <__retarget_lock_acquire_recursive>
 800377e:	89ab      	ldrh	r3, [r5, #12]
 8003780:	071b      	lsls	r3, r3, #28
 8003782:	d501      	bpl.n	8003788 <_vfiprintf_r+0x34>
 8003784:	692b      	ldr	r3, [r5, #16]
 8003786:	b99b      	cbnz	r3, 80037b0 <_vfiprintf_r+0x5c>
 8003788:	4629      	mov	r1, r5
 800378a:	4630      	mov	r0, r6
 800378c:	f7ff fde6 	bl	800335c <__swsetup_r>
 8003790:	b170      	cbz	r0, 80037b0 <_vfiprintf_r+0x5c>
 8003792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003794:	07dc      	lsls	r4, r3, #31
 8003796:	d504      	bpl.n	80037a2 <_vfiprintf_r+0x4e>
 8003798:	f04f 30ff 	mov.w	r0, #4294967295
 800379c:	b01d      	add	sp, #116	; 0x74
 800379e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037a2:	89ab      	ldrh	r3, [r5, #12]
 80037a4:	0598      	lsls	r0, r3, #22
 80037a6:	d4f7      	bmi.n	8003798 <_vfiprintf_r+0x44>
 80037a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037aa:	f7ff fea8 	bl	80034fe <__retarget_lock_release_recursive>
 80037ae:	e7f3      	b.n	8003798 <_vfiprintf_r+0x44>
 80037b0:	2300      	movs	r3, #0
 80037b2:	9309      	str	r3, [sp, #36]	; 0x24
 80037b4:	2320      	movs	r3, #32
 80037b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80037be:	2330      	movs	r3, #48	; 0x30
 80037c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003974 <_vfiprintf_r+0x220>
 80037c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037c8:	f04f 0901 	mov.w	r9, #1
 80037cc:	4623      	mov	r3, r4
 80037ce:	469a      	mov	sl, r3
 80037d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037d4:	b10a      	cbz	r2, 80037da <_vfiprintf_r+0x86>
 80037d6:	2a25      	cmp	r2, #37	; 0x25
 80037d8:	d1f9      	bne.n	80037ce <_vfiprintf_r+0x7a>
 80037da:	ebba 0b04 	subs.w	fp, sl, r4
 80037de:	d00b      	beq.n	80037f8 <_vfiprintf_r+0xa4>
 80037e0:	465b      	mov	r3, fp
 80037e2:	4622      	mov	r2, r4
 80037e4:	4629      	mov	r1, r5
 80037e6:	4630      	mov	r0, r6
 80037e8:	f7ff ffa1 	bl	800372e <__sfputs_r>
 80037ec:	3001      	adds	r0, #1
 80037ee:	f000 80a9 	beq.w	8003944 <_vfiprintf_r+0x1f0>
 80037f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037f4:	445a      	add	r2, fp
 80037f6:	9209      	str	r2, [sp, #36]	; 0x24
 80037f8:	f89a 3000 	ldrb.w	r3, [sl]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 80a1 	beq.w	8003944 <_vfiprintf_r+0x1f0>
 8003802:	2300      	movs	r3, #0
 8003804:	f04f 32ff 	mov.w	r2, #4294967295
 8003808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800380c:	f10a 0a01 	add.w	sl, sl, #1
 8003810:	9304      	str	r3, [sp, #16]
 8003812:	9307      	str	r3, [sp, #28]
 8003814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003818:	931a      	str	r3, [sp, #104]	; 0x68
 800381a:	4654      	mov	r4, sl
 800381c:	2205      	movs	r2, #5
 800381e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003822:	4854      	ldr	r0, [pc, #336]	; (8003974 <_vfiprintf_r+0x220>)
 8003824:	f7fc fcec 	bl	8000200 <memchr>
 8003828:	9a04      	ldr	r2, [sp, #16]
 800382a:	b9d8      	cbnz	r0, 8003864 <_vfiprintf_r+0x110>
 800382c:	06d1      	lsls	r1, r2, #27
 800382e:	bf44      	itt	mi
 8003830:	2320      	movmi	r3, #32
 8003832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003836:	0713      	lsls	r3, r2, #28
 8003838:	bf44      	itt	mi
 800383a:	232b      	movmi	r3, #43	; 0x2b
 800383c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003840:	f89a 3000 	ldrb.w	r3, [sl]
 8003844:	2b2a      	cmp	r3, #42	; 0x2a
 8003846:	d015      	beq.n	8003874 <_vfiprintf_r+0x120>
 8003848:	9a07      	ldr	r2, [sp, #28]
 800384a:	4654      	mov	r4, sl
 800384c:	2000      	movs	r0, #0
 800384e:	f04f 0c0a 	mov.w	ip, #10
 8003852:	4621      	mov	r1, r4
 8003854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003858:	3b30      	subs	r3, #48	; 0x30
 800385a:	2b09      	cmp	r3, #9
 800385c:	d94d      	bls.n	80038fa <_vfiprintf_r+0x1a6>
 800385e:	b1b0      	cbz	r0, 800388e <_vfiprintf_r+0x13a>
 8003860:	9207      	str	r2, [sp, #28]
 8003862:	e014      	b.n	800388e <_vfiprintf_r+0x13a>
 8003864:	eba0 0308 	sub.w	r3, r0, r8
 8003868:	fa09 f303 	lsl.w	r3, r9, r3
 800386c:	4313      	orrs	r3, r2
 800386e:	9304      	str	r3, [sp, #16]
 8003870:	46a2      	mov	sl, r4
 8003872:	e7d2      	b.n	800381a <_vfiprintf_r+0xc6>
 8003874:	9b03      	ldr	r3, [sp, #12]
 8003876:	1d19      	adds	r1, r3, #4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	9103      	str	r1, [sp, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	bfbb      	ittet	lt
 8003880:	425b      	neglt	r3, r3
 8003882:	f042 0202 	orrlt.w	r2, r2, #2
 8003886:	9307      	strge	r3, [sp, #28]
 8003888:	9307      	strlt	r3, [sp, #28]
 800388a:	bfb8      	it	lt
 800388c:	9204      	strlt	r2, [sp, #16]
 800388e:	7823      	ldrb	r3, [r4, #0]
 8003890:	2b2e      	cmp	r3, #46	; 0x2e
 8003892:	d10c      	bne.n	80038ae <_vfiprintf_r+0x15a>
 8003894:	7863      	ldrb	r3, [r4, #1]
 8003896:	2b2a      	cmp	r3, #42	; 0x2a
 8003898:	d134      	bne.n	8003904 <_vfiprintf_r+0x1b0>
 800389a:	9b03      	ldr	r3, [sp, #12]
 800389c:	1d1a      	adds	r2, r3, #4
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	9203      	str	r2, [sp, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bfb8      	it	lt
 80038a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80038aa:	3402      	adds	r4, #2
 80038ac:	9305      	str	r3, [sp, #20]
 80038ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003984 <_vfiprintf_r+0x230>
 80038b2:	7821      	ldrb	r1, [r4, #0]
 80038b4:	2203      	movs	r2, #3
 80038b6:	4650      	mov	r0, sl
 80038b8:	f7fc fca2 	bl	8000200 <memchr>
 80038bc:	b138      	cbz	r0, 80038ce <_vfiprintf_r+0x17a>
 80038be:	9b04      	ldr	r3, [sp, #16]
 80038c0:	eba0 000a 	sub.w	r0, r0, sl
 80038c4:	2240      	movs	r2, #64	; 0x40
 80038c6:	4082      	lsls	r2, r0
 80038c8:	4313      	orrs	r3, r2
 80038ca:	3401      	adds	r4, #1
 80038cc:	9304      	str	r3, [sp, #16]
 80038ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038d2:	4829      	ldr	r0, [pc, #164]	; (8003978 <_vfiprintf_r+0x224>)
 80038d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038d8:	2206      	movs	r2, #6
 80038da:	f7fc fc91 	bl	8000200 <memchr>
 80038de:	2800      	cmp	r0, #0
 80038e0:	d03f      	beq.n	8003962 <_vfiprintf_r+0x20e>
 80038e2:	4b26      	ldr	r3, [pc, #152]	; (800397c <_vfiprintf_r+0x228>)
 80038e4:	bb1b      	cbnz	r3, 800392e <_vfiprintf_r+0x1da>
 80038e6:	9b03      	ldr	r3, [sp, #12]
 80038e8:	3307      	adds	r3, #7
 80038ea:	f023 0307 	bic.w	r3, r3, #7
 80038ee:	3308      	adds	r3, #8
 80038f0:	9303      	str	r3, [sp, #12]
 80038f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038f4:	443b      	add	r3, r7
 80038f6:	9309      	str	r3, [sp, #36]	; 0x24
 80038f8:	e768      	b.n	80037cc <_vfiprintf_r+0x78>
 80038fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80038fe:	460c      	mov	r4, r1
 8003900:	2001      	movs	r0, #1
 8003902:	e7a6      	b.n	8003852 <_vfiprintf_r+0xfe>
 8003904:	2300      	movs	r3, #0
 8003906:	3401      	adds	r4, #1
 8003908:	9305      	str	r3, [sp, #20]
 800390a:	4619      	mov	r1, r3
 800390c:	f04f 0c0a 	mov.w	ip, #10
 8003910:	4620      	mov	r0, r4
 8003912:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003916:	3a30      	subs	r2, #48	; 0x30
 8003918:	2a09      	cmp	r2, #9
 800391a:	d903      	bls.n	8003924 <_vfiprintf_r+0x1d0>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0c6      	beq.n	80038ae <_vfiprintf_r+0x15a>
 8003920:	9105      	str	r1, [sp, #20]
 8003922:	e7c4      	b.n	80038ae <_vfiprintf_r+0x15a>
 8003924:	fb0c 2101 	mla	r1, ip, r1, r2
 8003928:	4604      	mov	r4, r0
 800392a:	2301      	movs	r3, #1
 800392c:	e7f0      	b.n	8003910 <_vfiprintf_r+0x1bc>
 800392e:	ab03      	add	r3, sp, #12
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	462a      	mov	r2, r5
 8003934:	4b12      	ldr	r3, [pc, #72]	; (8003980 <_vfiprintf_r+0x22c>)
 8003936:	a904      	add	r1, sp, #16
 8003938:	4630      	mov	r0, r6
 800393a:	f3af 8000 	nop.w
 800393e:	4607      	mov	r7, r0
 8003940:	1c78      	adds	r0, r7, #1
 8003942:	d1d6      	bne.n	80038f2 <_vfiprintf_r+0x19e>
 8003944:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003946:	07d9      	lsls	r1, r3, #31
 8003948:	d405      	bmi.n	8003956 <_vfiprintf_r+0x202>
 800394a:	89ab      	ldrh	r3, [r5, #12]
 800394c:	059a      	lsls	r2, r3, #22
 800394e:	d402      	bmi.n	8003956 <_vfiprintf_r+0x202>
 8003950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003952:	f7ff fdd4 	bl	80034fe <__retarget_lock_release_recursive>
 8003956:	89ab      	ldrh	r3, [r5, #12]
 8003958:	065b      	lsls	r3, r3, #25
 800395a:	f53f af1d 	bmi.w	8003798 <_vfiprintf_r+0x44>
 800395e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003960:	e71c      	b.n	800379c <_vfiprintf_r+0x48>
 8003962:	ab03      	add	r3, sp, #12
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	462a      	mov	r2, r5
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <_vfiprintf_r+0x22c>)
 800396a:	a904      	add	r1, sp, #16
 800396c:	4630      	mov	r0, r6
 800396e:	f000 f879 	bl	8003a64 <_printf_i>
 8003972:	e7e4      	b.n	800393e <_vfiprintf_r+0x1ea>
 8003974:	08004b1c 	.word	0x08004b1c
 8003978:	08004b26 	.word	0x08004b26
 800397c:	00000000 	.word	0x00000000
 8003980:	0800372f 	.word	0x0800372f
 8003984:	08004b22 	.word	0x08004b22

08003988 <_printf_common>:
 8003988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800398c:	4616      	mov	r6, r2
 800398e:	4699      	mov	r9, r3
 8003990:	688a      	ldr	r2, [r1, #8]
 8003992:	690b      	ldr	r3, [r1, #16]
 8003994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003998:	4293      	cmp	r3, r2
 800399a:	bfb8      	it	lt
 800399c:	4613      	movlt	r3, r2
 800399e:	6033      	str	r3, [r6, #0]
 80039a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039a4:	4607      	mov	r7, r0
 80039a6:	460c      	mov	r4, r1
 80039a8:	b10a      	cbz	r2, 80039ae <_printf_common+0x26>
 80039aa:	3301      	adds	r3, #1
 80039ac:	6033      	str	r3, [r6, #0]
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	0699      	lsls	r1, r3, #26
 80039b2:	bf42      	ittt	mi
 80039b4:	6833      	ldrmi	r3, [r6, #0]
 80039b6:	3302      	addmi	r3, #2
 80039b8:	6033      	strmi	r3, [r6, #0]
 80039ba:	6825      	ldr	r5, [r4, #0]
 80039bc:	f015 0506 	ands.w	r5, r5, #6
 80039c0:	d106      	bne.n	80039d0 <_printf_common+0x48>
 80039c2:	f104 0a19 	add.w	sl, r4, #25
 80039c6:	68e3      	ldr	r3, [r4, #12]
 80039c8:	6832      	ldr	r2, [r6, #0]
 80039ca:	1a9b      	subs	r3, r3, r2
 80039cc:	42ab      	cmp	r3, r5
 80039ce:	dc26      	bgt.n	8003a1e <_printf_common+0x96>
 80039d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039d4:	1e13      	subs	r3, r2, #0
 80039d6:	6822      	ldr	r2, [r4, #0]
 80039d8:	bf18      	it	ne
 80039da:	2301      	movne	r3, #1
 80039dc:	0692      	lsls	r2, r2, #26
 80039de:	d42b      	bmi.n	8003a38 <_printf_common+0xb0>
 80039e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039e4:	4649      	mov	r1, r9
 80039e6:	4638      	mov	r0, r7
 80039e8:	47c0      	blx	r8
 80039ea:	3001      	adds	r0, #1
 80039ec:	d01e      	beq.n	8003a2c <_printf_common+0xa4>
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	6922      	ldr	r2, [r4, #16]
 80039f2:	f003 0306 	and.w	r3, r3, #6
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	bf02      	ittt	eq
 80039fa:	68e5      	ldreq	r5, [r4, #12]
 80039fc:	6833      	ldreq	r3, [r6, #0]
 80039fe:	1aed      	subeq	r5, r5, r3
 8003a00:	68a3      	ldr	r3, [r4, #8]
 8003a02:	bf0c      	ite	eq
 8003a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a08:	2500      	movne	r5, #0
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	bfc4      	itt	gt
 8003a0e:	1a9b      	subgt	r3, r3, r2
 8003a10:	18ed      	addgt	r5, r5, r3
 8003a12:	2600      	movs	r6, #0
 8003a14:	341a      	adds	r4, #26
 8003a16:	42b5      	cmp	r5, r6
 8003a18:	d11a      	bne.n	8003a50 <_printf_common+0xc8>
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	e008      	b.n	8003a30 <_printf_common+0xa8>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	4652      	mov	r2, sl
 8003a22:	4649      	mov	r1, r9
 8003a24:	4638      	mov	r0, r7
 8003a26:	47c0      	blx	r8
 8003a28:	3001      	adds	r0, #1
 8003a2a:	d103      	bne.n	8003a34 <_printf_common+0xac>
 8003a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a34:	3501      	adds	r5, #1
 8003a36:	e7c6      	b.n	80039c6 <_printf_common+0x3e>
 8003a38:	18e1      	adds	r1, r4, r3
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	2030      	movs	r0, #48	; 0x30
 8003a3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a42:	4422      	add	r2, r4
 8003a44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a4c:	3302      	adds	r3, #2
 8003a4e:	e7c7      	b.n	80039e0 <_printf_common+0x58>
 8003a50:	2301      	movs	r3, #1
 8003a52:	4622      	mov	r2, r4
 8003a54:	4649      	mov	r1, r9
 8003a56:	4638      	mov	r0, r7
 8003a58:	47c0      	blx	r8
 8003a5a:	3001      	adds	r0, #1
 8003a5c:	d0e6      	beq.n	8003a2c <_printf_common+0xa4>
 8003a5e:	3601      	adds	r6, #1
 8003a60:	e7d9      	b.n	8003a16 <_printf_common+0x8e>
	...

08003a64 <_printf_i>:
 8003a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a68:	7e0f      	ldrb	r7, [r1, #24]
 8003a6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a6c:	2f78      	cmp	r7, #120	; 0x78
 8003a6e:	4691      	mov	r9, r2
 8003a70:	4680      	mov	r8, r0
 8003a72:	460c      	mov	r4, r1
 8003a74:	469a      	mov	sl, r3
 8003a76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a7a:	d807      	bhi.n	8003a8c <_printf_i+0x28>
 8003a7c:	2f62      	cmp	r7, #98	; 0x62
 8003a7e:	d80a      	bhi.n	8003a96 <_printf_i+0x32>
 8003a80:	2f00      	cmp	r7, #0
 8003a82:	f000 80d4 	beq.w	8003c2e <_printf_i+0x1ca>
 8003a86:	2f58      	cmp	r7, #88	; 0x58
 8003a88:	f000 80c0 	beq.w	8003c0c <_printf_i+0x1a8>
 8003a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a94:	e03a      	b.n	8003b0c <_printf_i+0xa8>
 8003a96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a9a:	2b15      	cmp	r3, #21
 8003a9c:	d8f6      	bhi.n	8003a8c <_printf_i+0x28>
 8003a9e:	a101      	add	r1, pc, #4	; (adr r1, 8003aa4 <_printf_i+0x40>)
 8003aa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003aa4:	08003afd 	.word	0x08003afd
 8003aa8:	08003b11 	.word	0x08003b11
 8003aac:	08003a8d 	.word	0x08003a8d
 8003ab0:	08003a8d 	.word	0x08003a8d
 8003ab4:	08003a8d 	.word	0x08003a8d
 8003ab8:	08003a8d 	.word	0x08003a8d
 8003abc:	08003b11 	.word	0x08003b11
 8003ac0:	08003a8d 	.word	0x08003a8d
 8003ac4:	08003a8d 	.word	0x08003a8d
 8003ac8:	08003a8d 	.word	0x08003a8d
 8003acc:	08003a8d 	.word	0x08003a8d
 8003ad0:	08003c15 	.word	0x08003c15
 8003ad4:	08003b3d 	.word	0x08003b3d
 8003ad8:	08003bcf 	.word	0x08003bcf
 8003adc:	08003a8d 	.word	0x08003a8d
 8003ae0:	08003a8d 	.word	0x08003a8d
 8003ae4:	08003c37 	.word	0x08003c37
 8003ae8:	08003a8d 	.word	0x08003a8d
 8003aec:	08003b3d 	.word	0x08003b3d
 8003af0:	08003a8d 	.word	0x08003a8d
 8003af4:	08003a8d 	.word	0x08003a8d
 8003af8:	08003bd7 	.word	0x08003bd7
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	1d1a      	adds	r2, r3, #4
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	602a      	str	r2, [r5, #0]
 8003b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e09f      	b.n	8003c50 <_printf_i+0x1ec>
 8003b10:	6820      	ldr	r0, [r4, #0]
 8003b12:	682b      	ldr	r3, [r5, #0]
 8003b14:	0607      	lsls	r7, r0, #24
 8003b16:	f103 0104 	add.w	r1, r3, #4
 8003b1a:	6029      	str	r1, [r5, #0]
 8003b1c:	d501      	bpl.n	8003b22 <_printf_i+0xbe>
 8003b1e:	681e      	ldr	r6, [r3, #0]
 8003b20:	e003      	b.n	8003b2a <_printf_i+0xc6>
 8003b22:	0646      	lsls	r6, r0, #25
 8003b24:	d5fb      	bpl.n	8003b1e <_printf_i+0xba>
 8003b26:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003b2a:	2e00      	cmp	r6, #0
 8003b2c:	da03      	bge.n	8003b36 <_printf_i+0xd2>
 8003b2e:	232d      	movs	r3, #45	; 0x2d
 8003b30:	4276      	negs	r6, r6
 8003b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b36:	485a      	ldr	r0, [pc, #360]	; (8003ca0 <_printf_i+0x23c>)
 8003b38:	230a      	movs	r3, #10
 8003b3a:	e012      	b.n	8003b62 <_printf_i+0xfe>
 8003b3c:	682b      	ldr	r3, [r5, #0]
 8003b3e:	6820      	ldr	r0, [r4, #0]
 8003b40:	1d19      	adds	r1, r3, #4
 8003b42:	6029      	str	r1, [r5, #0]
 8003b44:	0605      	lsls	r5, r0, #24
 8003b46:	d501      	bpl.n	8003b4c <_printf_i+0xe8>
 8003b48:	681e      	ldr	r6, [r3, #0]
 8003b4a:	e002      	b.n	8003b52 <_printf_i+0xee>
 8003b4c:	0641      	lsls	r1, r0, #25
 8003b4e:	d5fb      	bpl.n	8003b48 <_printf_i+0xe4>
 8003b50:	881e      	ldrh	r6, [r3, #0]
 8003b52:	4853      	ldr	r0, [pc, #332]	; (8003ca0 <_printf_i+0x23c>)
 8003b54:	2f6f      	cmp	r7, #111	; 0x6f
 8003b56:	bf0c      	ite	eq
 8003b58:	2308      	moveq	r3, #8
 8003b5a:	230a      	movne	r3, #10
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b62:	6865      	ldr	r5, [r4, #4]
 8003b64:	60a5      	str	r5, [r4, #8]
 8003b66:	2d00      	cmp	r5, #0
 8003b68:	bfa2      	ittt	ge
 8003b6a:	6821      	ldrge	r1, [r4, #0]
 8003b6c:	f021 0104 	bicge.w	r1, r1, #4
 8003b70:	6021      	strge	r1, [r4, #0]
 8003b72:	b90e      	cbnz	r6, 8003b78 <_printf_i+0x114>
 8003b74:	2d00      	cmp	r5, #0
 8003b76:	d04b      	beq.n	8003c10 <_printf_i+0x1ac>
 8003b78:	4615      	mov	r5, r2
 8003b7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b7e:	fb03 6711 	mls	r7, r3, r1, r6
 8003b82:	5dc7      	ldrb	r7, [r0, r7]
 8003b84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b88:	4637      	mov	r7, r6
 8003b8a:	42bb      	cmp	r3, r7
 8003b8c:	460e      	mov	r6, r1
 8003b8e:	d9f4      	bls.n	8003b7a <_printf_i+0x116>
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d10b      	bne.n	8003bac <_printf_i+0x148>
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	07de      	lsls	r6, r3, #31
 8003b98:	d508      	bpl.n	8003bac <_printf_i+0x148>
 8003b9a:	6923      	ldr	r3, [r4, #16]
 8003b9c:	6861      	ldr	r1, [r4, #4]
 8003b9e:	4299      	cmp	r1, r3
 8003ba0:	bfde      	ittt	le
 8003ba2:	2330      	movle	r3, #48	; 0x30
 8003ba4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ba8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003bac:	1b52      	subs	r2, r2, r5
 8003bae:	6122      	str	r2, [r4, #16]
 8003bb0:	f8cd a000 	str.w	sl, [sp]
 8003bb4:	464b      	mov	r3, r9
 8003bb6:	aa03      	add	r2, sp, #12
 8003bb8:	4621      	mov	r1, r4
 8003bba:	4640      	mov	r0, r8
 8003bbc:	f7ff fee4 	bl	8003988 <_printf_common>
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d14a      	bne.n	8003c5a <_printf_i+0x1f6>
 8003bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc8:	b004      	add	sp, #16
 8003bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	f043 0320 	orr.w	r3, r3, #32
 8003bd4:	6023      	str	r3, [r4, #0]
 8003bd6:	4833      	ldr	r0, [pc, #204]	; (8003ca4 <_printf_i+0x240>)
 8003bd8:	2778      	movs	r7, #120	; 0x78
 8003bda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	6829      	ldr	r1, [r5, #0]
 8003be2:	061f      	lsls	r7, r3, #24
 8003be4:	f851 6b04 	ldr.w	r6, [r1], #4
 8003be8:	d402      	bmi.n	8003bf0 <_printf_i+0x18c>
 8003bea:	065f      	lsls	r7, r3, #25
 8003bec:	bf48      	it	mi
 8003bee:	b2b6      	uxthmi	r6, r6
 8003bf0:	07df      	lsls	r7, r3, #31
 8003bf2:	bf48      	it	mi
 8003bf4:	f043 0320 	orrmi.w	r3, r3, #32
 8003bf8:	6029      	str	r1, [r5, #0]
 8003bfa:	bf48      	it	mi
 8003bfc:	6023      	strmi	r3, [r4, #0]
 8003bfe:	b91e      	cbnz	r6, 8003c08 <_printf_i+0x1a4>
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	f023 0320 	bic.w	r3, r3, #32
 8003c06:	6023      	str	r3, [r4, #0]
 8003c08:	2310      	movs	r3, #16
 8003c0a:	e7a7      	b.n	8003b5c <_printf_i+0xf8>
 8003c0c:	4824      	ldr	r0, [pc, #144]	; (8003ca0 <_printf_i+0x23c>)
 8003c0e:	e7e4      	b.n	8003bda <_printf_i+0x176>
 8003c10:	4615      	mov	r5, r2
 8003c12:	e7bd      	b.n	8003b90 <_printf_i+0x12c>
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	6826      	ldr	r6, [r4, #0]
 8003c18:	6961      	ldr	r1, [r4, #20]
 8003c1a:	1d18      	adds	r0, r3, #4
 8003c1c:	6028      	str	r0, [r5, #0]
 8003c1e:	0635      	lsls	r5, r6, #24
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	d501      	bpl.n	8003c28 <_printf_i+0x1c4>
 8003c24:	6019      	str	r1, [r3, #0]
 8003c26:	e002      	b.n	8003c2e <_printf_i+0x1ca>
 8003c28:	0670      	lsls	r0, r6, #25
 8003c2a:	d5fb      	bpl.n	8003c24 <_printf_i+0x1c0>
 8003c2c:	8019      	strh	r1, [r3, #0]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	6123      	str	r3, [r4, #16]
 8003c32:	4615      	mov	r5, r2
 8003c34:	e7bc      	b.n	8003bb0 <_printf_i+0x14c>
 8003c36:	682b      	ldr	r3, [r5, #0]
 8003c38:	1d1a      	adds	r2, r3, #4
 8003c3a:	602a      	str	r2, [r5, #0]
 8003c3c:	681d      	ldr	r5, [r3, #0]
 8003c3e:	6862      	ldr	r2, [r4, #4]
 8003c40:	2100      	movs	r1, #0
 8003c42:	4628      	mov	r0, r5
 8003c44:	f7fc fadc 	bl	8000200 <memchr>
 8003c48:	b108      	cbz	r0, 8003c4e <_printf_i+0x1ea>
 8003c4a:	1b40      	subs	r0, r0, r5
 8003c4c:	6060      	str	r0, [r4, #4]
 8003c4e:	6863      	ldr	r3, [r4, #4]
 8003c50:	6123      	str	r3, [r4, #16]
 8003c52:	2300      	movs	r3, #0
 8003c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c58:	e7aa      	b.n	8003bb0 <_printf_i+0x14c>
 8003c5a:	6923      	ldr	r3, [r4, #16]
 8003c5c:	462a      	mov	r2, r5
 8003c5e:	4649      	mov	r1, r9
 8003c60:	4640      	mov	r0, r8
 8003c62:	47d0      	blx	sl
 8003c64:	3001      	adds	r0, #1
 8003c66:	d0ad      	beq.n	8003bc4 <_printf_i+0x160>
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	079b      	lsls	r3, r3, #30
 8003c6c:	d413      	bmi.n	8003c96 <_printf_i+0x232>
 8003c6e:	68e0      	ldr	r0, [r4, #12]
 8003c70:	9b03      	ldr	r3, [sp, #12]
 8003c72:	4298      	cmp	r0, r3
 8003c74:	bfb8      	it	lt
 8003c76:	4618      	movlt	r0, r3
 8003c78:	e7a6      	b.n	8003bc8 <_printf_i+0x164>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	4632      	mov	r2, r6
 8003c7e:	4649      	mov	r1, r9
 8003c80:	4640      	mov	r0, r8
 8003c82:	47d0      	blx	sl
 8003c84:	3001      	adds	r0, #1
 8003c86:	d09d      	beq.n	8003bc4 <_printf_i+0x160>
 8003c88:	3501      	adds	r5, #1
 8003c8a:	68e3      	ldr	r3, [r4, #12]
 8003c8c:	9903      	ldr	r1, [sp, #12]
 8003c8e:	1a5b      	subs	r3, r3, r1
 8003c90:	42ab      	cmp	r3, r5
 8003c92:	dcf2      	bgt.n	8003c7a <_printf_i+0x216>
 8003c94:	e7eb      	b.n	8003c6e <_printf_i+0x20a>
 8003c96:	2500      	movs	r5, #0
 8003c98:	f104 0619 	add.w	r6, r4, #25
 8003c9c:	e7f5      	b.n	8003c8a <_printf_i+0x226>
 8003c9e:	bf00      	nop
 8003ca0:	08004b2d 	.word	0x08004b2d
 8003ca4:	08004b3e 	.word	0x08004b3e

08003ca8 <__svfiscanf_r>:
 8003ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cac:	461d      	mov	r5, r3
 8003cae:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8003cb0:	07df      	lsls	r7, r3, #31
 8003cb2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003cb6:	4606      	mov	r6, r0
 8003cb8:	460c      	mov	r4, r1
 8003cba:	4692      	mov	sl, r2
 8003cbc:	d405      	bmi.n	8003cca <__svfiscanf_r+0x22>
 8003cbe:	898b      	ldrh	r3, [r1, #12]
 8003cc0:	0598      	lsls	r0, r3, #22
 8003cc2:	d402      	bmi.n	8003cca <__svfiscanf_r+0x22>
 8003cc4:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8003cc6:	f7ff fc19 	bl	80034fc <__retarget_lock_acquire_recursive>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8003cd0:	4baa      	ldr	r3, [pc, #680]	; (8003f7c <__svfiscanf_r+0x2d4>)
 8003cd2:	93a0      	str	r3, [sp, #640]	; 0x280
 8003cd4:	f10d 0804 	add.w	r8, sp, #4
 8003cd8:	4ba9      	ldr	r3, [pc, #676]	; (8003f80 <__svfiscanf_r+0x2d8>)
 8003cda:	4faa      	ldr	r7, [pc, #680]	; (8003f84 <__svfiscanf_r+0x2dc>)
 8003cdc:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8003f88 <__svfiscanf_r+0x2e0>
 8003ce0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003ce4:	93a1      	str	r3, [sp, #644]	; 0x284
 8003ce6:	9500      	str	r5, [sp, #0]
 8003ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8170 	beq.w	8003fd2 <__svfiscanf_r+0x32a>
 8003cf2:	5cf9      	ldrb	r1, [r7, r3]
 8003cf4:	f011 0108 	ands.w	r1, r1, #8
 8003cf8:	f10a 0501 	add.w	r5, sl, #1
 8003cfc:	d019      	beq.n	8003d32 <__svfiscanf_r+0x8a>
 8003cfe:	6863      	ldr	r3, [r4, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	dd0f      	ble.n	8003d24 <__svfiscanf_r+0x7c>
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	781a      	ldrb	r2, [r3, #0]
 8003d08:	5cba      	ldrb	r2, [r7, r2]
 8003d0a:	0711      	lsls	r1, r2, #28
 8003d0c:	d401      	bmi.n	8003d12 <__svfiscanf_r+0x6a>
 8003d0e:	46aa      	mov	sl, r5
 8003d10:	e7ea      	b.n	8003ce8 <__svfiscanf_r+0x40>
 8003d12:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003d14:	3201      	adds	r2, #1
 8003d16:	9245      	str	r2, [sp, #276]	; 0x114
 8003d18:	6862      	ldr	r2, [r4, #4]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	3a01      	subs	r2, #1
 8003d1e:	6062      	str	r2, [r4, #4]
 8003d20:	6023      	str	r3, [r4, #0]
 8003d22:	e7ec      	b.n	8003cfe <__svfiscanf_r+0x56>
 8003d24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003d26:	4621      	mov	r1, r4
 8003d28:	4630      	mov	r0, r6
 8003d2a:	4798      	blx	r3
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	d0e9      	beq.n	8003d04 <__svfiscanf_r+0x5c>
 8003d30:	e7ed      	b.n	8003d0e <__svfiscanf_r+0x66>
 8003d32:	2b25      	cmp	r3, #37	; 0x25
 8003d34:	d012      	beq.n	8003d5c <__svfiscanf_r+0xb4>
 8003d36:	469a      	mov	sl, r3
 8003d38:	6863      	ldr	r3, [r4, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f340 8093 	ble.w	8003e66 <__svfiscanf_r+0x1be>
 8003d40:	6822      	ldr	r2, [r4, #0]
 8003d42:	7813      	ldrb	r3, [r2, #0]
 8003d44:	4553      	cmp	r3, sl
 8003d46:	f040 8144 	bne.w	8003fd2 <__svfiscanf_r+0x32a>
 8003d4a:	6863      	ldr	r3, [r4, #4]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	6063      	str	r3, [r4, #4]
 8003d50:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003d52:	3201      	adds	r2, #1
 8003d54:	3301      	adds	r3, #1
 8003d56:	6022      	str	r2, [r4, #0]
 8003d58:	9345      	str	r3, [sp, #276]	; 0x114
 8003d5a:	e7d8      	b.n	8003d0e <__svfiscanf_r+0x66>
 8003d5c:	9141      	str	r1, [sp, #260]	; 0x104
 8003d5e:	9143      	str	r1, [sp, #268]	; 0x10c
 8003d60:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8003d64:	2b2a      	cmp	r3, #42	; 0x2a
 8003d66:	bf02      	ittt	eq
 8003d68:	2310      	moveq	r3, #16
 8003d6a:	9341      	streq	r3, [sp, #260]	; 0x104
 8003d6c:	f10a 0502 	addeq.w	r5, sl, #2
 8003d70:	220a      	movs	r2, #10
 8003d72:	46aa      	mov	sl, r5
 8003d74:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003d78:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003d7c:	2b09      	cmp	r3, #9
 8003d7e:	d91d      	bls.n	8003dbc <__svfiscanf_r+0x114>
 8003d80:	4881      	ldr	r0, [pc, #516]	; (8003f88 <__svfiscanf_r+0x2e0>)
 8003d82:	2203      	movs	r2, #3
 8003d84:	f7fc fa3c 	bl	8000200 <memchr>
 8003d88:	b138      	cbz	r0, 8003d9a <__svfiscanf_r+0xf2>
 8003d8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003d8c:	eba0 0009 	sub.w	r0, r0, r9
 8003d90:	2301      	movs	r3, #1
 8003d92:	4083      	lsls	r3, r0
 8003d94:	4313      	orrs	r3, r2
 8003d96:	9341      	str	r3, [sp, #260]	; 0x104
 8003d98:	4655      	mov	r5, sl
 8003d9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d9e:	2b78      	cmp	r3, #120	; 0x78
 8003da0:	d807      	bhi.n	8003db2 <__svfiscanf_r+0x10a>
 8003da2:	2b57      	cmp	r3, #87	; 0x57
 8003da4:	d811      	bhi.n	8003dca <__svfiscanf_r+0x122>
 8003da6:	2b25      	cmp	r3, #37	; 0x25
 8003da8:	d0c5      	beq.n	8003d36 <__svfiscanf_r+0x8e>
 8003daa:	d857      	bhi.n	8003e5c <__svfiscanf_r+0x1b4>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 80c6 	beq.w	8003f3e <__svfiscanf_r+0x296>
 8003db2:	2303      	movs	r3, #3
 8003db4:	9347      	str	r3, [sp, #284]	; 0x11c
 8003db6:	230a      	movs	r3, #10
 8003db8:	9342      	str	r3, [sp, #264]	; 0x108
 8003dba:	e07f      	b.n	8003ebc <__svfiscanf_r+0x214>
 8003dbc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003dbe:	fb02 1103 	mla	r1, r2, r3, r1
 8003dc2:	3930      	subs	r1, #48	; 0x30
 8003dc4:	9143      	str	r1, [sp, #268]	; 0x10c
 8003dc6:	4655      	mov	r5, sl
 8003dc8:	e7d3      	b.n	8003d72 <__svfiscanf_r+0xca>
 8003dca:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003dce:	2a20      	cmp	r2, #32
 8003dd0:	d8ef      	bhi.n	8003db2 <__svfiscanf_r+0x10a>
 8003dd2:	a101      	add	r1, pc, #4	; (adr r1, 8003dd8 <__svfiscanf_r+0x130>)
 8003dd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003dd8:	08003e9f 	.word	0x08003e9f
 8003ddc:	08003db3 	.word	0x08003db3
 8003de0:	08003db3 	.word	0x08003db3
 8003de4:	08003efd 	.word	0x08003efd
 8003de8:	08003db3 	.word	0x08003db3
 8003dec:	08003db3 	.word	0x08003db3
 8003df0:	08003db3 	.word	0x08003db3
 8003df4:	08003db3 	.word	0x08003db3
 8003df8:	08003db3 	.word	0x08003db3
 8003dfc:	08003db3 	.word	0x08003db3
 8003e00:	08003db3 	.word	0x08003db3
 8003e04:	08003f13 	.word	0x08003f13
 8003e08:	08003ef9 	.word	0x08003ef9
 8003e0c:	08003e63 	.word	0x08003e63
 8003e10:	08003e63 	.word	0x08003e63
 8003e14:	08003e63 	.word	0x08003e63
 8003e18:	08003db3 	.word	0x08003db3
 8003e1c:	08003eb5 	.word	0x08003eb5
 8003e20:	08003db3 	.word	0x08003db3
 8003e24:	08003db3 	.word	0x08003db3
 8003e28:	08003db3 	.word	0x08003db3
 8003e2c:	08003db3 	.word	0x08003db3
 8003e30:	08003f23 	.word	0x08003f23
 8003e34:	08003ef1 	.word	0x08003ef1
 8003e38:	08003e97 	.word	0x08003e97
 8003e3c:	08003db3 	.word	0x08003db3
 8003e40:	08003db3 	.word	0x08003db3
 8003e44:	08003f1f 	.word	0x08003f1f
 8003e48:	08003db3 	.word	0x08003db3
 8003e4c:	08003ef9 	.word	0x08003ef9
 8003e50:	08003db3 	.word	0x08003db3
 8003e54:	08003db3 	.word	0x08003db3
 8003e58:	08003e9f 	.word	0x08003e9f
 8003e5c:	3b45      	subs	r3, #69	; 0x45
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d8a7      	bhi.n	8003db2 <__svfiscanf_r+0x10a>
 8003e62:	2305      	movs	r3, #5
 8003e64:	e029      	b.n	8003eba <__svfiscanf_r+0x212>
 8003e66:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003e68:	4621      	mov	r1, r4
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	4798      	blx	r3
 8003e6e:	2800      	cmp	r0, #0
 8003e70:	f43f af66 	beq.w	8003d40 <__svfiscanf_r+0x98>
 8003e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e76:	07da      	lsls	r2, r3, #31
 8003e78:	f140 80a3 	bpl.w	8003fc2 <__svfiscanf_r+0x31a>
 8003e7c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	d066      	beq.n	8003f50 <__svfiscanf_r+0x2a8>
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e88:	bf18      	it	ne
 8003e8a:	f04f 30ff 	movne.w	r0, #4294967295
 8003e8e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8003e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e96:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003e98:	f042 0220 	orr.w	r2, r2, #32
 8003e9c:	9241      	str	r2, [sp, #260]	; 0x104
 8003e9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea4:	9241      	str	r2, [sp, #260]	; 0x104
 8003ea6:	2210      	movs	r2, #16
 8003ea8:	2b6f      	cmp	r3, #111	; 0x6f
 8003eaa:	9242      	str	r2, [sp, #264]	; 0x108
 8003eac:	bf34      	ite	cc
 8003eae:	2303      	movcc	r3, #3
 8003eb0:	2304      	movcs	r3, #4
 8003eb2:	e002      	b.n	8003eba <__svfiscanf_r+0x212>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9342      	str	r3, [sp, #264]	; 0x108
 8003eb8:	2303      	movs	r3, #3
 8003eba:	9347      	str	r3, [sp, #284]	; 0x11c
 8003ebc:	6863      	ldr	r3, [r4, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	dd49      	ble.n	8003f56 <__svfiscanf_r+0x2ae>
 8003ec2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003ec4:	065b      	lsls	r3, r3, #25
 8003ec6:	d404      	bmi.n	8003ed2 <__svfiscanf_r+0x22a>
 8003ec8:	6823      	ldr	r3, [r4, #0]
 8003eca:	781a      	ldrb	r2, [r3, #0]
 8003ecc:	5cba      	ldrb	r2, [r7, r2]
 8003ece:	0710      	lsls	r0, r2, #28
 8003ed0:	d448      	bmi.n	8003f64 <__svfiscanf_r+0x2bc>
 8003ed2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	dc60      	bgt.n	8003f9a <__svfiscanf_r+0x2f2>
 8003ed8:	466b      	mov	r3, sp
 8003eda:	4622      	mov	r2, r4
 8003edc:	a941      	add	r1, sp, #260	; 0x104
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f000 f898 	bl	8004014 <_scanf_chars>
 8003ee4:	2801      	cmp	r0, #1
 8003ee6:	d074      	beq.n	8003fd2 <__svfiscanf_r+0x32a>
 8003ee8:	2802      	cmp	r0, #2
 8003eea:	f47f af10 	bne.w	8003d0e <__svfiscanf_r+0x66>
 8003eee:	e7c1      	b.n	8003e74 <__svfiscanf_r+0x1cc>
 8003ef0:	2308      	movs	r3, #8
 8003ef2:	9342      	str	r3, [sp, #264]	; 0x108
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	e7e0      	b.n	8003eba <__svfiscanf_r+0x212>
 8003ef8:	220a      	movs	r2, #10
 8003efa:	e7d5      	b.n	8003ea8 <__svfiscanf_r+0x200>
 8003efc:	4629      	mov	r1, r5
 8003efe:	4640      	mov	r0, r8
 8003f00:	f000 fb6c 	bl	80045dc <__sccl>
 8003f04:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f0a:	9341      	str	r3, [sp, #260]	; 0x104
 8003f0c:	4605      	mov	r5, r0
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e7d3      	b.n	8003eba <__svfiscanf_r+0x212>
 8003f12:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f18:	9341      	str	r3, [sp, #260]	; 0x104
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e7cd      	b.n	8003eba <__svfiscanf_r+0x212>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e7cb      	b.n	8003eba <__svfiscanf_r+0x212>
 8003f22:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003f24:	06c3      	lsls	r3, r0, #27
 8003f26:	f53f aef2 	bmi.w	8003d0e <__svfiscanf_r+0x66>
 8003f2a:	9b00      	ldr	r3, [sp, #0]
 8003f2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003f2e:	1d19      	adds	r1, r3, #4
 8003f30:	9100      	str	r1, [sp, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	07c0      	lsls	r0, r0, #31
 8003f36:	bf4c      	ite	mi
 8003f38:	801a      	strhmi	r2, [r3, #0]
 8003f3a:	601a      	strpl	r2, [r3, #0]
 8003f3c:	e6e7      	b.n	8003d0e <__svfiscanf_r+0x66>
 8003f3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f40:	07d8      	lsls	r0, r3, #31
 8003f42:	d405      	bmi.n	8003f50 <__svfiscanf_r+0x2a8>
 8003f44:	89a3      	ldrh	r3, [r4, #12]
 8003f46:	0599      	lsls	r1, r3, #22
 8003f48:	d402      	bmi.n	8003f50 <__svfiscanf_r+0x2a8>
 8003f4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f4c:	f7ff fad7 	bl	80034fe <__retarget_lock_release_recursive>
 8003f50:	f04f 30ff 	mov.w	r0, #4294967295
 8003f54:	e79b      	b.n	8003e8e <__svfiscanf_r+0x1e6>
 8003f56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003f58:	4621      	mov	r1, r4
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	4798      	blx	r3
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	d0af      	beq.n	8003ec2 <__svfiscanf_r+0x21a>
 8003f62:	e787      	b.n	8003e74 <__svfiscanf_r+0x1cc>
 8003f64:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003f66:	3201      	adds	r2, #1
 8003f68:	9245      	str	r2, [sp, #276]	; 0x114
 8003f6a:	6862      	ldr	r2, [r4, #4]
 8003f6c:	3a01      	subs	r2, #1
 8003f6e:	2a00      	cmp	r2, #0
 8003f70:	6062      	str	r2, [r4, #4]
 8003f72:	dd0b      	ble.n	8003f8c <__svfiscanf_r+0x2e4>
 8003f74:	3301      	adds	r3, #1
 8003f76:	6023      	str	r3, [r4, #0]
 8003f78:	e7a6      	b.n	8003ec8 <__svfiscanf_r+0x220>
 8003f7a:	bf00      	nop
 8003f7c:	080046c3 	.word	0x080046c3
 8003f80:	080044ed 	.word	0x080044ed
 8003f84:	08004b6b 	.word	0x08004b6b
 8003f88:	08004b22 	.word	0x08004b22
 8003f8c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003f8e:	4621      	mov	r1, r4
 8003f90:	4630      	mov	r0, r6
 8003f92:	4798      	blx	r3
 8003f94:	2800      	cmp	r0, #0
 8003f96:	d097      	beq.n	8003ec8 <__svfiscanf_r+0x220>
 8003f98:	e76c      	b.n	8003e74 <__svfiscanf_r+0x1cc>
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	dc06      	bgt.n	8003fac <__svfiscanf_r+0x304>
 8003f9e:	466b      	mov	r3, sp
 8003fa0:	4622      	mov	r2, r4
 8003fa2:	a941      	add	r1, sp, #260	; 0x104
 8003fa4:	4630      	mov	r0, r6
 8003fa6:	f000 f88f 	bl	80040c8 <_scanf_i>
 8003faa:	e79b      	b.n	8003ee4 <__svfiscanf_r+0x23c>
 8003fac:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <__svfiscanf_r+0x340>)
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f43f aead 	beq.w	8003d0e <__svfiscanf_r+0x66>
 8003fb4:	466b      	mov	r3, sp
 8003fb6:	4622      	mov	r2, r4
 8003fb8:	a941      	add	r1, sp, #260	; 0x104
 8003fba:	4630      	mov	r0, r6
 8003fbc:	f3af 8000 	nop.w
 8003fc0:	e790      	b.n	8003ee4 <__svfiscanf_r+0x23c>
 8003fc2:	89a3      	ldrh	r3, [r4, #12]
 8003fc4:	0599      	lsls	r1, r3, #22
 8003fc6:	f53f af59 	bmi.w	8003e7c <__svfiscanf_r+0x1d4>
 8003fca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fcc:	f7ff fa97 	bl	80034fe <__retarget_lock_release_recursive>
 8003fd0:	e754      	b.n	8003e7c <__svfiscanf_r+0x1d4>
 8003fd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fd4:	07da      	lsls	r2, r3, #31
 8003fd6:	d405      	bmi.n	8003fe4 <__svfiscanf_r+0x33c>
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	059b      	lsls	r3, r3, #22
 8003fdc:	d402      	bmi.n	8003fe4 <__svfiscanf_r+0x33c>
 8003fde:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fe0:	f7ff fa8d 	bl	80034fe <__retarget_lock_release_recursive>
 8003fe4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003fe6:	e752      	b.n	8003e8e <__svfiscanf_r+0x1e6>
 8003fe8:	00000000 	.word	0x00000000

08003fec <_vfiscanf_r>:
 8003fec:	b530      	push	{r4, r5, lr}
 8003fee:	4604      	mov	r4, r0
 8003ff0:	b085      	sub	sp, #20
 8003ff2:	b148      	cbz	r0, 8004008 <_vfiscanf_r+0x1c>
 8003ff4:	6a05      	ldr	r5, [r0, #32]
 8003ff6:	b93d      	cbnz	r5, 8004008 <_vfiscanf_r+0x1c>
 8003ff8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ffc:	9101      	str	r1, [sp, #4]
 8003ffe:	f7fe ffc9 	bl	8002f94 <__sinit>
 8004002:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004006:	9901      	ldr	r1, [sp, #4]
 8004008:	4620      	mov	r0, r4
 800400a:	b005      	add	sp, #20
 800400c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004010:	f7ff be4a 	b.w	8003ca8 <__svfiscanf_r>

08004014 <_scanf_chars>:
 8004014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004018:	4615      	mov	r5, r2
 800401a:	688a      	ldr	r2, [r1, #8]
 800401c:	4680      	mov	r8, r0
 800401e:	460c      	mov	r4, r1
 8004020:	b932      	cbnz	r2, 8004030 <_scanf_chars+0x1c>
 8004022:	698a      	ldr	r2, [r1, #24]
 8004024:	2a00      	cmp	r2, #0
 8004026:	bf0c      	ite	eq
 8004028:	2201      	moveq	r2, #1
 800402a:	f04f 32ff 	movne.w	r2, #4294967295
 800402e:	608a      	str	r2, [r1, #8]
 8004030:	6822      	ldr	r2, [r4, #0]
 8004032:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80040c4 <_scanf_chars+0xb0>
 8004036:	06d1      	lsls	r1, r2, #27
 8004038:	bf5f      	itttt	pl
 800403a:	681a      	ldrpl	r2, [r3, #0]
 800403c:	1d11      	addpl	r1, r2, #4
 800403e:	6019      	strpl	r1, [r3, #0]
 8004040:	6816      	ldrpl	r6, [r2, #0]
 8004042:	2700      	movs	r7, #0
 8004044:	69a0      	ldr	r0, [r4, #24]
 8004046:	b188      	cbz	r0, 800406c <_scanf_chars+0x58>
 8004048:	2801      	cmp	r0, #1
 800404a:	d107      	bne.n	800405c <_scanf_chars+0x48>
 800404c:	682a      	ldr	r2, [r5, #0]
 800404e:	7811      	ldrb	r1, [r2, #0]
 8004050:	6962      	ldr	r2, [r4, #20]
 8004052:	5c52      	ldrb	r2, [r2, r1]
 8004054:	b952      	cbnz	r2, 800406c <_scanf_chars+0x58>
 8004056:	2f00      	cmp	r7, #0
 8004058:	d031      	beq.n	80040be <_scanf_chars+0xaa>
 800405a:	e022      	b.n	80040a2 <_scanf_chars+0x8e>
 800405c:	2802      	cmp	r0, #2
 800405e:	d120      	bne.n	80040a2 <_scanf_chars+0x8e>
 8004060:	682b      	ldr	r3, [r5, #0]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004068:	071b      	lsls	r3, r3, #28
 800406a:	d41a      	bmi.n	80040a2 <_scanf_chars+0x8e>
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	06da      	lsls	r2, r3, #27
 8004070:	bf5e      	ittt	pl
 8004072:	682b      	ldrpl	r3, [r5, #0]
 8004074:	781b      	ldrbpl	r3, [r3, #0]
 8004076:	f806 3b01 	strbpl.w	r3, [r6], #1
 800407a:	682a      	ldr	r2, [r5, #0]
 800407c:	686b      	ldr	r3, [r5, #4]
 800407e:	3201      	adds	r2, #1
 8004080:	602a      	str	r2, [r5, #0]
 8004082:	68a2      	ldr	r2, [r4, #8]
 8004084:	3b01      	subs	r3, #1
 8004086:	3a01      	subs	r2, #1
 8004088:	606b      	str	r3, [r5, #4]
 800408a:	3701      	adds	r7, #1
 800408c:	60a2      	str	r2, [r4, #8]
 800408e:	b142      	cbz	r2, 80040a2 <_scanf_chars+0x8e>
 8004090:	2b00      	cmp	r3, #0
 8004092:	dcd7      	bgt.n	8004044 <_scanf_chars+0x30>
 8004094:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004098:	4629      	mov	r1, r5
 800409a:	4640      	mov	r0, r8
 800409c:	4798      	blx	r3
 800409e:	2800      	cmp	r0, #0
 80040a0:	d0d0      	beq.n	8004044 <_scanf_chars+0x30>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	f013 0310 	ands.w	r3, r3, #16
 80040a8:	d105      	bne.n	80040b6 <_scanf_chars+0xa2>
 80040aa:	68e2      	ldr	r2, [r4, #12]
 80040ac:	3201      	adds	r2, #1
 80040ae:	60e2      	str	r2, [r4, #12]
 80040b0:	69a2      	ldr	r2, [r4, #24]
 80040b2:	b102      	cbz	r2, 80040b6 <_scanf_chars+0xa2>
 80040b4:	7033      	strb	r3, [r6, #0]
 80040b6:	6923      	ldr	r3, [r4, #16]
 80040b8:	443b      	add	r3, r7
 80040ba:	6123      	str	r3, [r4, #16]
 80040bc:	2000      	movs	r0, #0
 80040be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040c2:	bf00      	nop
 80040c4:	08004b6b 	.word	0x08004b6b

080040c8 <_scanf_i>:
 80040c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040cc:	4698      	mov	r8, r3
 80040ce:	4b74      	ldr	r3, [pc, #464]	; (80042a0 <_scanf_i+0x1d8>)
 80040d0:	460c      	mov	r4, r1
 80040d2:	4682      	mov	sl, r0
 80040d4:	4616      	mov	r6, r2
 80040d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80040da:	b087      	sub	sp, #28
 80040dc:	ab03      	add	r3, sp, #12
 80040de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80040e2:	4b70      	ldr	r3, [pc, #448]	; (80042a4 <_scanf_i+0x1dc>)
 80040e4:	69a1      	ldr	r1, [r4, #24]
 80040e6:	4a70      	ldr	r2, [pc, #448]	; (80042a8 <_scanf_i+0x1e0>)
 80040e8:	2903      	cmp	r1, #3
 80040ea:	bf18      	it	ne
 80040ec:	461a      	movne	r2, r3
 80040ee:	68a3      	ldr	r3, [r4, #8]
 80040f0:	9201      	str	r2, [sp, #4]
 80040f2:	1e5a      	subs	r2, r3, #1
 80040f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80040f8:	bf88      	it	hi
 80040fa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80040fe:	4627      	mov	r7, r4
 8004100:	bf82      	ittt	hi
 8004102:	eb03 0905 	addhi.w	r9, r3, r5
 8004106:	f240 135d 	movwhi	r3, #349	; 0x15d
 800410a:	60a3      	strhi	r3, [r4, #8]
 800410c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004110:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004114:	bf98      	it	ls
 8004116:	f04f 0900 	movls.w	r9, #0
 800411a:	6023      	str	r3, [r4, #0]
 800411c:	463d      	mov	r5, r7
 800411e:	f04f 0b00 	mov.w	fp, #0
 8004122:	6831      	ldr	r1, [r6, #0]
 8004124:	ab03      	add	r3, sp, #12
 8004126:	7809      	ldrb	r1, [r1, #0]
 8004128:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800412c:	2202      	movs	r2, #2
 800412e:	f7fc f867 	bl	8000200 <memchr>
 8004132:	b328      	cbz	r0, 8004180 <_scanf_i+0xb8>
 8004134:	f1bb 0f01 	cmp.w	fp, #1
 8004138:	d159      	bne.n	80041ee <_scanf_i+0x126>
 800413a:	6862      	ldr	r2, [r4, #4]
 800413c:	b92a      	cbnz	r2, 800414a <_scanf_i+0x82>
 800413e:	6822      	ldr	r2, [r4, #0]
 8004140:	2308      	movs	r3, #8
 8004142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004146:	6063      	str	r3, [r4, #4]
 8004148:	6022      	str	r2, [r4, #0]
 800414a:	6822      	ldr	r2, [r4, #0]
 800414c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004150:	6022      	str	r2, [r4, #0]
 8004152:	68a2      	ldr	r2, [r4, #8]
 8004154:	1e51      	subs	r1, r2, #1
 8004156:	60a1      	str	r1, [r4, #8]
 8004158:	b192      	cbz	r2, 8004180 <_scanf_i+0xb8>
 800415a:	6832      	ldr	r2, [r6, #0]
 800415c:	1c51      	adds	r1, r2, #1
 800415e:	6031      	str	r1, [r6, #0]
 8004160:	7812      	ldrb	r2, [r2, #0]
 8004162:	f805 2b01 	strb.w	r2, [r5], #1
 8004166:	6872      	ldr	r2, [r6, #4]
 8004168:	3a01      	subs	r2, #1
 800416a:	2a00      	cmp	r2, #0
 800416c:	6072      	str	r2, [r6, #4]
 800416e:	dc07      	bgt.n	8004180 <_scanf_i+0xb8>
 8004170:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004174:	4631      	mov	r1, r6
 8004176:	4650      	mov	r0, sl
 8004178:	4790      	blx	r2
 800417a:	2800      	cmp	r0, #0
 800417c:	f040 8085 	bne.w	800428a <_scanf_i+0x1c2>
 8004180:	f10b 0b01 	add.w	fp, fp, #1
 8004184:	f1bb 0f03 	cmp.w	fp, #3
 8004188:	d1cb      	bne.n	8004122 <_scanf_i+0x5a>
 800418a:	6863      	ldr	r3, [r4, #4]
 800418c:	b90b      	cbnz	r3, 8004192 <_scanf_i+0xca>
 800418e:	230a      	movs	r3, #10
 8004190:	6063      	str	r3, [r4, #4]
 8004192:	6863      	ldr	r3, [r4, #4]
 8004194:	4945      	ldr	r1, [pc, #276]	; (80042ac <_scanf_i+0x1e4>)
 8004196:	6960      	ldr	r0, [r4, #20]
 8004198:	1ac9      	subs	r1, r1, r3
 800419a:	f000 fa1f 	bl	80045dc <__sccl>
 800419e:	f04f 0b00 	mov.w	fp, #0
 80041a2:	68a3      	ldr	r3, [r4, #8]
 80041a4:	6822      	ldr	r2, [r4, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d03d      	beq.n	8004226 <_scanf_i+0x15e>
 80041aa:	6831      	ldr	r1, [r6, #0]
 80041ac:	6960      	ldr	r0, [r4, #20]
 80041ae:	f891 c000 	ldrb.w	ip, [r1]
 80041b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80041b6:	2800      	cmp	r0, #0
 80041b8:	d035      	beq.n	8004226 <_scanf_i+0x15e>
 80041ba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80041be:	d124      	bne.n	800420a <_scanf_i+0x142>
 80041c0:	0510      	lsls	r0, r2, #20
 80041c2:	d522      	bpl.n	800420a <_scanf_i+0x142>
 80041c4:	f10b 0b01 	add.w	fp, fp, #1
 80041c8:	f1b9 0f00 	cmp.w	r9, #0
 80041cc:	d003      	beq.n	80041d6 <_scanf_i+0x10e>
 80041ce:	3301      	adds	r3, #1
 80041d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80041d4:	60a3      	str	r3, [r4, #8]
 80041d6:	6873      	ldr	r3, [r6, #4]
 80041d8:	3b01      	subs	r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	6073      	str	r3, [r6, #4]
 80041de:	dd1b      	ble.n	8004218 <_scanf_i+0x150>
 80041e0:	6833      	ldr	r3, [r6, #0]
 80041e2:	3301      	adds	r3, #1
 80041e4:	6033      	str	r3, [r6, #0]
 80041e6:	68a3      	ldr	r3, [r4, #8]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	60a3      	str	r3, [r4, #8]
 80041ec:	e7d9      	b.n	80041a2 <_scanf_i+0xda>
 80041ee:	f1bb 0f02 	cmp.w	fp, #2
 80041f2:	d1ae      	bne.n	8004152 <_scanf_i+0x8a>
 80041f4:	6822      	ldr	r2, [r4, #0]
 80041f6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80041fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80041fe:	d1bf      	bne.n	8004180 <_scanf_i+0xb8>
 8004200:	2310      	movs	r3, #16
 8004202:	6063      	str	r3, [r4, #4]
 8004204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004208:	e7a2      	b.n	8004150 <_scanf_i+0x88>
 800420a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800420e:	6022      	str	r2, [r4, #0]
 8004210:	780b      	ldrb	r3, [r1, #0]
 8004212:	f805 3b01 	strb.w	r3, [r5], #1
 8004216:	e7de      	b.n	80041d6 <_scanf_i+0x10e>
 8004218:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800421c:	4631      	mov	r1, r6
 800421e:	4650      	mov	r0, sl
 8004220:	4798      	blx	r3
 8004222:	2800      	cmp	r0, #0
 8004224:	d0df      	beq.n	80041e6 <_scanf_i+0x11e>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	05d9      	lsls	r1, r3, #23
 800422a:	d50d      	bpl.n	8004248 <_scanf_i+0x180>
 800422c:	42bd      	cmp	r5, r7
 800422e:	d909      	bls.n	8004244 <_scanf_i+0x17c>
 8004230:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004234:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004238:	4632      	mov	r2, r6
 800423a:	4650      	mov	r0, sl
 800423c:	4798      	blx	r3
 800423e:	f105 39ff 	add.w	r9, r5, #4294967295
 8004242:	464d      	mov	r5, r9
 8004244:	42bd      	cmp	r5, r7
 8004246:	d028      	beq.n	800429a <_scanf_i+0x1d2>
 8004248:	6822      	ldr	r2, [r4, #0]
 800424a:	f012 0210 	ands.w	r2, r2, #16
 800424e:	d113      	bne.n	8004278 <_scanf_i+0x1b0>
 8004250:	702a      	strb	r2, [r5, #0]
 8004252:	6863      	ldr	r3, [r4, #4]
 8004254:	9e01      	ldr	r6, [sp, #4]
 8004256:	4639      	mov	r1, r7
 8004258:	4650      	mov	r0, sl
 800425a:	47b0      	blx	r6
 800425c:	f8d8 3000 	ldr.w	r3, [r8]
 8004260:	6821      	ldr	r1, [r4, #0]
 8004262:	1d1a      	adds	r2, r3, #4
 8004264:	f8c8 2000 	str.w	r2, [r8]
 8004268:	f011 0f20 	tst.w	r1, #32
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	d00f      	beq.n	8004290 <_scanf_i+0x1c8>
 8004270:	6018      	str	r0, [r3, #0]
 8004272:	68e3      	ldr	r3, [r4, #12]
 8004274:	3301      	adds	r3, #1
 8004276:	60e3      	str	r3, [r4, #12]
 8004278:	6923      	ldr	r3, [r4, #16]
 800427a:	1bed      	subs	r5, r5, r7
 800427c:	445d      	add	r5, fp
 800427e:	442b      	add	r3, r5
 8004280:	6123      	str	r3, [r4, #16]
 8004282:	2000      	movs	r0, #0
 8004284:	b007      	add	sp, #28
 8004286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800428a:	f04f 0b00 	mov.w	fp, #0
 800428e:	e7ca      	b.n	8004226 <_scanf_i+0x15e>
 8004290:	07ca      	lsls	r2, r1, #31
 8004292:	bf4c      	ite	mi
 8004294:	8018      	strhmi	r0, [r3, #0]
 8004296:	6018      	strpl	r0, [r3, #0]
 8004298:	e7eb      	b.n	8004272 <_scanf_i+0x1aa>
 800429a:	2001      	movs	r0, #1
 800429c:	e7f2      	b.n	8004284 <_scanf_i+0x1bc>
 800429e:	bf00      	nop
 80042a0:	08004af8 	.word	0x08004af8
 80042a4:	08004a99 	.word	0x08004a99
 80042a8:	080049b1 	.word	0x080049b1
 80042ac:	08004b5f 	.word	0x08004b5f

080042b0 <__sflush_r>:
 80042b0:	898a      	ldrh	r2, [r1, #12]
 80042b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b6:	4605      	mov	r5, r0
 80042b8:	0710      	lsls	r0, r2, #28
 80042ba:	460c      	mov	r4, r1
 80042bc:	d458      	bmi.n	8004370 <__sflush_r+0xc0>
 80042be:	684b      	ldr	r3, [r1, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	dc05      	bgt.n	80042d0 <__sflush_r+0x20>
 80042c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	dc02      	bgt.n	80042d0 <__sflush_r+0x20>
 80042ca:	2000      	movs	r0, #0
 80042cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042d2:	2e00      	cmp	r6, #0
 80042d4:	d0f9      	beq.n	80042ca <__sflush_r+0x1a>
 80042d6:	2300      	movs	r3, #0
 80042d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042dc:	682f      	ldr	r7, [r5, #0]
 80042de:	6a21      	ldr	r1, [r4, #32]
 80042e0:	602b      	str	r3, [r5, #0]
 80042e2:	d032      	beq.n	800434a <__sflush_r+0x9a>
 80042e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042e6:	89a3      	ldrh	r3, [r4, #12]
 80042e8:	075a      	lsls	r2, r3, #29
 80042ea:	d505      	bpl.n	80042f8 <__sflush_r+0x48>
 80042ec:	6863      	ldr	r3, [r4, #4]
 80042ee:	1ac0      	subs	r0, r0, r3
 80042f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042f2:	b10b      	cbz	r3, 80042f8 <__sflush_r+0x48>
 80042f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042f6:	1ac0      	subs	r0, r0, r3
 80042f8:	2300      	movs	r3, #0
 80042fa:	4602      	mov	r2, r0
 80042fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042fe:	6a21      	ldr	r1, [r4, #32]
 8004300:	4628      	mov	r0, r5
 8004302:	47b0      	blx	r6
 8004304:	1c43      	adds	r3, r0, #1
 8004306:	89a3      	ldrh	r3, [r4, #12]
 8004308:	d106      	bne.n	8004318 <__sflush_r+0x68>
 800430a:	6829      	ldr	r1, [r5, #0]
 800430c:	291d      	cmp	r1, #29
 800430e:	d82b      	bhi.n	8004368 <__sflush_r+0xb8>
 8004310:	4a29      	ldr	r2, [pc, #164]	; (80043b8 <__sflush_r+0x108>)
 8004312:	410a      	asrs	r2, r1
 8004314:	07d6      	lsls	r6, r2, #31
 8004316:	d427      	bmi.n	8004368 <__sflush_r+0xb8>
 8004318:	2200      	movs	r2, #0
 800431a:	6062      	str	r2, [r4, #4]
 800431c:	04d9      	lsls	r1, r3, #19
 800431e:	6922      	ldr	r2, [r4, #16]
 8004320:	6022      	str	r2, [r4, #0]
 8004322:	d504      	bpl.n	800432e <__sflush_r+0x7e>
 8004324:	1c42      	adds	r2, r0, #1
 8004326:	d101      	bne.n	800432c <__sflush_r+0x7c>
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	b903      	cbnz	r3, 800432e <__sflush_r+0x7e>
 800432c:	6560      	str	r0, [r4, #84]	; 0x54
 800432e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004330:	602f      	str	r7, [r5, #0]
 8004332:	2900      	cmp	r1, #0
 8004334:	d0c9      	beq.n	80042ca <__sflush_r+0x1a>
 8004336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800433a:	4299      	cmp	r1, r3
 800433c:	d002      	beq.n	8004344 <__sflush_r+0x94>
 800433e:	4628      	mov	r0, r5
 8004340:	f7ff f8de 	bl	8003500 <_free_r>
 8004344:	2000      	movs	r0, #0
 8004346:	6360      	str	r0, [r4, #52]	; 0x34
 8004348:	e7c0      	b.n	80042cc <__sflush_r+0x1c>
 800434a:	2301      	movs	r3, #1
 800434c:	4628      	mov	r0, r5
 800434e:	47b0      	blx	r6
 8004350:	1c41      	adds	r1, r0, #1
 8004352:	d1c8      	bne.n	80042e6 <__sflush_r+0x36>
 8004354:	682b      	ldr	r3, [r5, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0c5      	beq.n	80042e6 <__sflush_r+0x36>
 800435a:	2b1d      	cmp	r3, #29
 800435c:	d001      	beq.n	8004362 <__sflush_r+0xb2>
 800435e:	2b16      	cmp	r3, #22
 8004360:	d101      	bne.n	8004366 <__sflush_r+0xb6>
 8004362:	602f      	str	r7, [r5, #0]
 8004364:	e7b1      	b.n	80042ca <__sflush_r+0x1a>
 8004366:	89a3      	ldrh	r3, [r4, #12]
 8004368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800436c:	81a3      	strh	r3, [r4, #12]
 800436e:	e7ad      	b.n	80042cc <__sflush_r+0x1c>
 8004370:	690f      	ldr	r7, [r1, #16]
 8004372:	2f00      	cmp	r7, #0
 8004374:	d0a9      	beq.n	80042ca <__sflush_r+0x1a>
 8004376:	0793      	lsls	r3, r2, #30
 8004378:	680e      	ldr	r6, [r1, #0]
 800437a:	bf08      	it	eq
 800437c:	694b      	ldreq	r3, [r1, #20]
 800437e:	600f      	str	r7, [r1, #0]
 8004380:	bf18      	it	ne
 8004382:	2300      	movne	r3, #0
 8004384:	eba6 0807 	sub.w	r8, r6, r7
 8004388:	608b      	str	r3, [r1, #8]
 800438a:	f1b8 0f00 	cmp.w	r8, #0
 800438e:	dd9c      	ble.n	80042ca <__sflush_r+0x1a>
 8004390:	6a21      	ldr	r1, [r4, #32]
 8004392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004394:	4643      	mov	r3, r8
 8004396:	463a      	mov	r2, r7
 8004398:	4628      	mov	r0, r5
 800439a:	47b0      	blx	r6
 800439c:	2800      	cmp	r0, #0
 800439e:	dc06      	bgt.n	80043ae <__sflush_r+0xfe>
 80043a0:	89a3      	ldrh	r3, [r4, #12]
 80043a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043a6:	81a3      	strh	r3, [r4, #12]
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ac:	e78e      	b.n	80042cc <__sflush_r+0x1c>
 80043ae:	4407      	add	r7, r0
 80043b0:	eba8 0800 	sub.w	r8, r8, r0
 80043b4:	e7e9      	b.n	800438a <__sflush_r+0xda>
 80043b6:	bf00      	nop
 80043b8:	dfbffffe 	.word	0xdfbffffe

080043bc <_fflush_r>:
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	690b      	ldr	r3, [r1, #16]
 80043c0:	4605      	mov	r5, r0
 80043c2:	460c      	mov	r4, r1
 80043c4:	b913      	cbnz	r3, 80043cc <_fflush_r+0x10>
 80043c6:	2500      	movs	r5, #0
 80043c8:	4628      	mov	r0, r5
 80043ca:	bd38      	pop	{r3, r4, r5, pc}
 80043cc:	b118      	cbz	r0, 80043d6 <_fflush_r+0x1a>
 80043ce:	6a03      	ldr	r3, [r0, #32]
 80043d0:	b90b      	cbnz	r3, 80043d6 <_fflush_r+0x1a>
 80043d2:	f7fe fddf 	bl	8002f94 <__sinit>
 80043d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f3      	beq.n	80043c6 <_fflush_r+0xa>
 80043de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043e0:	07d0      	lsls	r0, r2, #31
 80043e2:	d404      	bmi.n	80043ee <_fflush_r+0x32>
 80043e4:	0599      	lsls	r1, r3, #22
 80043e6:	d402      	bmi.n	80043ee <_fflush_r+0x32>
 80043e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043ea:	f7ff f887 	bl	80034fc <__retarget_lock_acquire_recursive>
 80043ee:	4628      	mov	r0, r5
 80043f0:	4621      	mov	r1, r4
 80043f2:	f7ff ff5d 	bl	80042b0 <__sflush_r>
 80043f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043f8:	07da      	lsls	r2, r3, #31
 80043fa:	4605      	mov	r5, r0
 80043fc:	d4e4      	bmi.n	80043c8 <_fflush_r+0xc>
 80043fe:	89a3      	ldrh	r3, [r4, #12]
 8004400:	059b      	lsls	r3, r3, #22
 8004402:	d4e1      	bmi.n	80043c8 <_fflush_r+0xc>
 8004404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004406:	f7ff f87a 	bl	80034fe <__retarget_lock_release_recursive>
 800440a:	e7dd      	b.n	80043c8 <_fflush_r+0xc>

0800440c <__swhatbuf_r>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	460c      	mov	r4, r1
 8004410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004414:	2900      	cmp	r1, #0
 8004416:	b096      	sub	sp, #88	; 0x58
 8004418:	4615      	mov	r5, r2
 800441a:	461e      	mov	r6, r3
 800441c:	da0d      	bge.n	800443a <__swhatbuf_r+0x2e>
 800441e:	89a3      	ldrh	r3, [r4, #12]
 8004420:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004424:	f04f 0100 	mov.w	r1, #0
 8004428:	bf0c      	ite	eq
 800442a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800442e:	2340      	movne	r3, #64	; 0x40
 8004430:	2000      	movs	r0, #0
 8004432:	6031      	str	r1, [r6, #0]
 8004434:	602b      	str	r3, [r5, #0]
 8004436:	b016      	add	sp, #88	; 0x58
 8004438:	bd70      	pop	{r4, r5, r6, pc}
 800443a:	466a      	mov	r2, sp
 800443c:	f000 f9c6 	bl	80047cc <_fstat_r>
 8004440:	2800      	cmp	r0, #0
 8004442:	dbec      	blt.n	800441e <__swhatbuf_r+0x12>
 8004444:	9901      	ldr	r1, [sp, #4]
 8004446:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800444a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800444e:	4259      	negs	r1, r3
 8004450:	4159      	adcs	r1, r3
 8004452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004456:	e7eb      	b.n	8004430 <__swhatbuf_r+0x24>

08004458 <__smakebuf_r>:
 8004458:	898b      	ldrh	r3, [r1, #12]
 800445a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800445c:	079d      	lsls	r5, r3, #30
 800445e:	4606      	mov	r6, r0
 8004460:	460c      	mov	r4, r1
 8004462:	d507      	bpl.n	8004474 <__smakebuf_r+0x1c>
 8004464:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	6123      	str	r3, [r4, #16]
 800446c:	2301      	movs	r3, #1
 800446e:	6163      	str	r3, [r4, #20]
 8004470:	b002      	add	sp, #8
 8004472:	bd70      	pop	{r4, r5, r6, pc}
 8004474:	ab01      	add	r3, sp, #4
 8004476:	466a      	mov	r2, sp
 8004478:	f7ff ffc8 	bl	800440c <__swhatbuf_r>
 800447c:	9900      	ldr	r1, [sp, #0]
 800447e:	4605      	mov	r5, r0
 8004480:	4630      	mov	r0, r6
 8004482:	f7ff f8b1 	bl	80035e8 <_malloc_r>
 8004486:	b948      	cbnz	r0, 800449c <__smakebuf_r+0x44>
 8004488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800448c:	059a      	lsls	r2, r3, #22
 800448e:	d4ef      	bmi.n	8004470 <__smakebuf_r+0x18>
 8004490:	f023 0303 	bic.w	r3, r3, #3
 8004494:	f043 0302 	orr.w	r3, r3, #2
 8004498:	81a3      	strh	r3, [r4, #12]
 800449a:	e7e3      	b.n	8004464 <__smakebuf_r+0xc>
 800449c:	89a3      	ldrh	r3, [r4, #12]
 800449e:	6020      	str	r0, [r4, #0]
 80044a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a4:	81a3      	strh	r3, [r4, #12]
 80044a6:	9b00      	ldr	r3, [sp, #0]
 80044a8:	6163      	str	r3, [r4, #20]
 80044aa:	9b01      	ldr	r3, [sp, #4]
 80044ac:	6120      	str	r0, [r4, #16]
 80044ae:	b15b      	cbz	r3, 80044c8 <__smakebuf_r+0x70>
 80044b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044b4:	4630      	mov	r0, r6
 80044b6:	f000 f99b 	bl	80047f0 <_isatty_r>
 80044ba:	b128      	cbz	r0, 80044c8 <__smakebuf_r+0x70>
 80044bc:	89a3      	ldrh	r3, [r4, #12]
 80044be:	f023 0303 	bic.w	r3, r3, #3
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	81a3      	strh	r3, [r4, #12]
 80044c8:	89a3      	ldrh	r3, [r4, #12]
 80044ca:	431d      	orrs	r5, r3
 80044cc:	81a5      	strh	r5, [r4, #12]
 80044ce:	e7cf      	b.n	8004470 <__smakebuf_r+0x18>

080044d0 <lflush>:
 80044d0:	898b      	ldrh	r3, [r1, #12]
 80044d2:	f003 0309 	and.w	r3, r3, #9
 80044d6:	2b09      	cmp	r3, #9
 80044d8:	d103      	bne.n	80044e2 <lflush+0x12>
 80044da:	4b03      	ldr	r3, [pc, #12]	; (80044e8 <lflush+0x18>)
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	f7ff bf6d 	b.w	80043bc <_fflush_r>
 80044e2:	2000      	movs	r0, #0
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	20000068 	.word	0x20000068

080044ec <__srefill_r>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	460c      	mov	r4, r1
 80044f0:	4605      	mov	r5, r0
 80044f2:	b118      	cbz	r0, 80044fc <__srefill_r+0x10>
 80044f4:	6a03      	ldr	r3, [r0, #32]
 80044f6:	b90b      	cbnz	r3, 80044fc <__srefill_r+0x10>
 80044f8:	f7fe fd4c 	bl	8002f94 <__sinit>
 80044fc:	2300      	movs	r3, #0
 80044fe:	6063      	str	r3, [r4, #4]
 8004500:	89a3      	ldrh	r3, [r4, #12]
 8004502:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004506:	069e      	lsls	r6, r3, #26
 8004508:	d502      	bpl.n	8004510 <__srefill_r+0x24>
 800450a:	f04f 30ff 	mov.w	r0, #4294967295
 800450e:	e05c      	b.n	80045ca <__srefill_r+0xde>
 8004510:	0758      	lsls	r0, r3, #29
 8004512:	d448      	bmi.n	80045a6 <__srefill_r+0xba>
 8004514:	06d9      	lsls	r1, r3, #27
 8004516:	d405      	bmi.n	8004524 <__srefill_r+0x38>
 8004518:	2309      	movs	r3, #9
 800451a:	602b      	str	r3, [r5, #0]
 800451c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004520:	81a3      	strh	r3, [r4, #12]
 8004522:	e7f2      	b.n	800450a <__srefill_r+0x1e>
 8004524:	071a      	lsls	r2, r3, #28
 8004526:	d50b      	bpl.n	8004540 <__srefill_r+0x54>
 8004528:	4621      	mov	r1, r4
 800452a:	4628      	mov	r0, r5
 800452c:	f7ff ff46 	bl	80043bc <_fflush_r>
 8004530:	2800      	cmp	r0, #0
 8004532:	d1ea      	bne.n	800450a <__srefill_r+0x1e>
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	60a0      	str	r0, [r4, #8]
 8004538:	f023 0308 	bic.w	r3, r3, #8
 800453c:	81a3      	strh	r3, [r4, #12]
 800453e:	61a0      	str	r0, [r4, #24]
 8004540:	89a3      	ldrh	r3, [r4, #12]
 8004542:	f043 0304 	orr.w	r3, r3, #4
 8004546:	81a3      	strh	r3, [r4, #12]
 8004548:	6923      	ldr	r3, [r4, #16]
 800454a:	b91b      	cbnz	r3, 8004554 <__srefill_r+0x68>
 800454c:	4621      	mov	r1, r4
 800454e:	4628      	mov	r0, r5
 8004550:	f7ff ff82 	bl	8004458 <__smakebuf_r>
 8004554:	89a6      	ldrh	r6, [r4, #12]
 8004556:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800455a:	07b3      	lsls	r3, r6, #30
 800455c:	d00f      	beq.n	800457e <__srefill_r+0x92>
 800455e:	2301      	movs	r3, #1
 8004560:	4a1b      	ldr	r2, [pc, #108]	; (80045d0 <__srefill_r+0xe4>)
 8004562:	491c      	ldr	r1, [pc, #112]	; (80045d4 <__srefill_r+0xe8>)
 8004564:	481c      	ldr	r0, [pc, #112]	; (80045d8 <__srefill_r+0xec>)
 8004566:	81a3      	strh	r3, [r4, #12]
 8004568:	f006 0609 	and.w	r6, r6, #9
 800456c:	f7fe fd2a 	bl	8002fc4 <_fwalk_sglue>
 8004570:	2e09      	cmp	r6, #9
 8004572:	81a7      	strh	r7, [r4, #12]
 8004574:	d103      	bne.n	800457e <__srefill_r+0x92>
 8004576:	4621      	mov	r1, r4
 8004578:	4628      	mov	r0, r5
 800457a:	f7ff fe99 	bl	80042b0 <__sflush_r>
 800457e:	6922      	ldr	r2, [r4, #16]
 8004580:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004582:	6963      	ldr	r3, [r4, #20]
 8004584:	6a21      	ldr	r1, [r4, #32]
 8004586:	6022      	str	r2, [r4, #0]
 8004588:	4628      	mov	r0, r5
 800458a:	47b0      	blx	r6
 800458c:	2800      	cmp	r0, #0
 800458e:	6060      	str	r0, [r4, #4]
 8004590:	dc1c      	bgt.n	80045cc <__srefill_r+0xe0>
 8004592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004596:	bf17      	itett	ne
 8004598:	2200      	movne	r2, #0
 800459a:	f043 0320 	orreq.w	r3, r3, #32
 800459e:	6062      	strne	r2, [r4, #4]
 80045a0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80045a4:	e7bc      	b.n	8004520 <__srefill_r+0x34>
 80045a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045a8:	2900      	cmp	r1, #0
 80045aa:	d0cd      	beq.n	8004548 <__srefill_r+0x5c>
 80045ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045b0:	4299      	cmp	r1, r3
 80045b2:	d002      	beq.n	80045ba <__srefill_r+0xce>
 80045b4:	4628      	mov	r0, r5
 80045b6:	f7fe ffa3 	bl	8003500 <_free_r>
 80045ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045bc:	6063      	str	r3, [r4, #4]
 80045be:	2000      	movs	r0, #0
 80045c0:	6360      	str	r0, [r4, #52]	; 0x34
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0c0      	beq.n	8004548 <__srefill_r+0x5c>
 80045c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045cc:	2000      	movs	r0, #0
 80045ce:	e7fc      	b.n	80045ca <__srefill_r+0xde>
 80045d0:	20000010 	.word	0x20000010
 80045d4:	080044d1 	.word	0x080044d1
 80045d8:	2000001c 	.word	0x2000001c

080045dc <__sccl>:
 80045dc:	b570      	push	{r4, r5, r6, lr}
 80045de:	780b      	ldrb	r3, [r1, #0]
 80045e0:	4604      	mov	r4, r0
 80045e2:	2b5e      	cmp	r3, #94	; 0x5e
 80045e4:	bf0b      	itete	eq
 80045e6:	784b      	ldrbeq	r3, [r1, #1]
 80045e8:	1c4a      	addne	r2, r1, #1
 80045ea:	1c8a      	addeq	r2, r1, #2
 80045ec:	2100      	movne	r1, #0
 80045ee:	bf08      	it	eq
 80045f0:	2101      	moveq	r1, #1
 80045f2:	3801      	subs	r0, #1
 80045f4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80045f8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80045fc:	42a8      	cmp	r0, r5
 80045fe:	d1fb      	bne.n	80045f8 <__sccl+0x1c>
 8004600:	b90b      	cbnz	r3, 8004606 <__sccl+0x2a>
 8004602:	1e50      	subs	r0, r2, #1
 8004604:	bd70      	pop	{r4, r5, r6, pc}
 8004606:	f081 0101 	eor.w	r1, r1, #1
 800460a:	54e1      	strb	r1, [r4, r3]
 800460c:	4610      	mov	r0, r2
 800460e:	4602      	mov	r2, r0
 8004610:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004614:	2d2d      	cmp	r5, #45	; 0x2d
 8004616:	d005      	beq.n	8004624 <__sccl+0x48>
 8004618:	2d5d      	cmp	r5, #93	; 0x5d
 800461a:	d016      	beq.n	800464a <__sccl+0x6e>
 800461c:	2d00      	cmp	r5, #0
 800461e:	d0f1      	beq.n	8004604 <__sccl+0x28>
 8004620:	462b      	mov	r3, r5
 8004622:	e7f2      	b.n	800460a <__sccl+0x2e>
 8004624:	7846      	ldrb	r6, [r0, #1]
 8004626:	2e5d      	cmp	r6, #93	; 0x5d
 8004628:	d0fa      	beq.n	8004620 <__sccl+0x44>
 800462a:	42b3      	cmp	r3, r6
 800462c:	dcf8      	bgt.n	8004620 <__sccl+0x44>
 800462e:	3002      	adds	r0, #2
 8004630:	461a      	mov	r2, r3
 8004632:	3201      	adds	r2, #1
 8004634:	4296      	cmp	r6, r2
 8004636:	54a1      	strb	r1, [r4, r2]
 8004638:	dcfb      	bgt.n	8004632 <__sccl+0x56>
 800463a:	1af2      	subs	r2, r6, r3
 800463c:	3a01      	subs	r2, #1
 800463e:	1c5d      	adds	r5, r3, #1
 8004640:	42b3      	cmp	r3, r6
 8004642:	bfa8      	it	ge
 8004644:	2200      	movge	r2, #0
 8004646:	18ab      	adds	r3, r5, r2
 8004648:	e7e1      	b.n	800460e <__sccl+0x32>
 800464a:	4610      	mov	r0, r2
 800464c:	e7da      	b.n	8004604 <__sccl+0x28>

0800464e <__submore>:
 800464e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004652:	460c      	mov	r4, r1
 8004654:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004656:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800465a:	4299      	cmp	r1, r3
 800465c:	d11d      	bne.n	800469a <__submore+0x4c>
 800465e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004662:	f7fe ffc1 	bl	80035e8 <_malloc_r>
 8004666:	b918      	cbnz	r0, 8004670 <__submore+0x22>
 8004668:	f04f 30ff 	mov.w	r0, #4294967295
 800466c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004674:	63a3      	str	r3, [r4, #56]	; 0x38
 8004676:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800467a:	6360      	str	r0, [r4, #52]	; 0x34
 800467c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004680:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004684:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004688:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800468c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004690:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004694:	6020      	str	r0, [r4, #0]
 8004696:	2000      	movs	r0, #0
 8004698:	e7e8      	b.n	800466c <__submore+0x1e>
 800469a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800469c:	0077      	lsls	r7, r6, #1
 800469e:	463a      	mov	r2, r7
 80046a0:	f000 f8d4 	bl	800484c <_realloc_r>
 80046a4:	4605      	mov	r5, r0
 80046a6:	2800      	cmp	r0, #0
 80046a8:	d0de      	beq.n	8004668 <__submore+0x1a>
 80046aa:	eb00 0806 	add.w	r8, r0, r6
 80046ae:	4601      	mov	r1, r0
 80046b0:	4632      	mov	r2, r6
 80046b2:	4640      	mov	r0, r8
 80046b4:	f000 f8bc 	bl	8004830 <memcpy>
 80046b8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80046bc:	f8c4 8000 	str.w	r8, [r4]
 80046c0:	e7e9      	b.n	8004696 <__submore+0x48>

080046c2 <_ungetc_r>:
 80046c2:	b570      	push	{r4, r5, r6, lr}
 80046c4:	4614      	mov	r4, r2
 80046c6:	1c4a      	adds	r2, r1, #1
 80046c8:	4606      	mov	r6, r0
 80046ca:	460d      	mov	r5, r1
 80046cc:	d103      	bne.n	80046d6 <_ungetc_r+0x14>
 80046ce:	f04f 35ff 	mov.w	r5, #4294967295
 80046d2:	4628      	mov	r0, r5
 80046d4:	bd70      	pop	{r4, r5, r6, pc}
 80046d6:	b118      	cbz	r0, 80046e0 <_ungetc_r+0x1e>
 80046d8:	6a03      	ldr	r3, [r0, #32]
 80046da:	b90b      	cbnz	r3, 80046e0 <_ungetc_r+0x1e>
 80046dc:	f7fe fc5a 	bl	8002f94 <__sinit>
 80046e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046e2:	07db      	lsls	r3, r3, #31
 80046e4:	d405      	bmi.n	80046f2 <_ungetc_r+0x30>
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	0598      	lsls	r0, r3, #22
 80046ea:	d402      	bmi.n	80046f2 <_ungetc_r+0x30>
 80046ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046ee:	f7fe ff05 	bl	80034fc <__retarget_lock_acquire_recursive>
 80046f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046f6:	f023 0320 	bic.w	r3, r3, #32
 80046fa:	0759      	lsls	r1, r3, #29
 80046fc:	81a3      	strh	r3, [r4, #12]
 80046fe:	b29a      	uxth	r2, r3
 8004700:	d423      	bmi.n	800474a <_ungetc_r+0x88>
 8004702:	06d3      	lsls	r3, r2, #27
 8004704:	d409      	bmi.n	800471a <_ungetc_r+0x58>
 8004706:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004708:	07dd      	lsls	r5, r3, #31
 800470a:	d4e0      	bmi.n	80046ce <_ungetc_r+0xc>
 800470c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004710:	d1dd      	bne.n	80046ce <_ungetc_r+0xc>
 8004712:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004714:	f7fe fef3 	bl	80034fe <__retarget_lock_release_recursive>
 8004718:	e7d9      	b.n	80046ce <_ungetc_r+0xc>
 800471a:	0710      	lsls	r0, r2, #28
 800471c:	d511      	bpl.n	8004742 <_ungetc_r+0x80>
 800471e:	4621      	mov	r1, r4
 8004720:	4630      	mov	r0, r6
 8004722:	f7ff fe4b 	bl	80043bc <_fflush_r>
 8004726:	b130      	cbz	r0, 8004736 <_ungetc_r+0x74>
 8004728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800472a:	07d9      	lsls	r1, r3, #31
 800472c:	d4cf      	bmi.n	80046ce <_ungetc_r+0xc>
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004734:	e7ec      	b.n	8004710 <_ungetc_r+0x4e>
 8004736:	89a3      	ldrh	r3, [r4, #12]
 8004738:	60a0      	str	r0, [r4, #8]
 800473a:	f023 0308 	bic.w	r3, r3, #8
 800473e:	81a3      	strh	r3, [r4, #12]
 8004740:	61a0      	str	r0, [r4, #24]
 8004742:	89a3      	ldrh	r3, [r4, #12]
 8004744:	f043 0304 	orr.w	r3, r3, #4
 8004748:	81a3      	strh	r3, [r4, #12]
 800474a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800474c:	6862      	ldr	r2, [r4, #4]
 800474e:	b2ed      	uxtb	r5, r5
 8004750:	b1d3      	cbz	r3, 8004788 <_ungetc_r+0xc6>
 8004752:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004754:	4293      	cmp	r3, r2
 8004756:	dc05      	bgt.n	8004764 <_ungetc_r+0xa2>
 8004758:	4621      	mov	r1, r4
 800475a:	4630      	mov	r0, r6
 800475c:	f7ff ff77 	bl	800464e <__submore>
 8004760:	2800      	cmp	r0, #0
 8004762:	d1e1      	bne.n	8004728 <_ungetc_r+0x66>
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	1e5a      	subs	r2, r3, #1
 8004768:	6022      	str	r2, [r4, #0]
 800476a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800476e:	6863      	ldr	r3, [r4, #4]
 8004770:	3301      	adds	r3, #1
 8004772:	6063      	str	r3, [r4, #4]
 8004774:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004776:	07da      	lsls	r2, r3, #31
 8004778:	d4ab      	bmi.n	80046d2 <_ungetc_r+0x10>
 800477a:	89a3      	ldrh	r3, [r4, #12]
 800477c:	059b      	lsls	r3, r3, #22
 800477e:	d4a8      	bmi.n	80046d2 <_ungetc_r+0x10>
 8004780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004782:	f7fe febc 	bl	80034fe <__retarget_lock_release_recursive>
 8004786:	e7a4      	b.n	80046d2 <_ungetc_r+0x10>
 8004788:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800478a:	6920      	ldr	r0, [r4, #16]
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	f001 0101 	and.w	r1, r1, #1
 8004792:	b160      	cbz	r0, 80047ae <_ungetc_r+0xec>
 8004794:	4298      	cmp	r0, r3
 8004796:	d20a      	bcs.n	80047ae <_ungetc_r+0xec>
 8004798:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800479c:	42a8      	cmp	r0, r5
 800479e:	d106      	bne.n	80047ae <_ungetc_r+0xec>
 80047a0:	3b01      	subs	r3, #1
 80047a2:	3201      	adds	r2, #1
 80047a4:	6023      	str	r3, [r4, #0]
 80047a6:	6062      	str	r2, [r4, #4]
 80047a8:	2900      	cmp	r1, #0
 80047aa:	d192      	bne.n	80046d2 <_ungetc_r+0x10>
 80047ac:	e7e5      	b.n	800477a <_ungetc_r+0xb8>
 80047ae:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80047b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047b6:	6363      	str	r3, [r4, #52]	; 0x34
 80047b8:	2303      	movs	r3, #3
 80047ba:	63a3      	str	r3, [r4, #56]	; 0x38
 80047bc:	4623      	mov	r3, r4
 80047be:	f803 5f46 	strb.w	r5, [r3, #70]!
 80047c2:	6023      	str	r3, [r4, #0]
 80047c4:	2301      	movs	r3, #1
 80047c6:	6063      	str	r3, [r4, #4]
 80047c8:	e7ee      	b.n	80047a8 <_ungetc_r+0xe6>
	...

080047cc <_fstat_r>:
 80047cc:	b538      	push	{r3, r4, r5, lr}
 80047ce:	4d07      	ldr	r5, [pc, #28]	; (80047ec <_fstat_r+0x20>)
 80047d0:	2300      	movs	r3, #0
 80047d2:	4604      	mov	r4, r0
 80047d4:	4608      	mov	r0, r1
 80047d6:	4611      	mov	r1, r2
 80047d8:	602b      	str	r3, [r5, #0]
 80047da:	f7fc f94a 	bl	8000a72 <_fstat>
 80047de:	1c43      	adds	r3, r0, #1
 80047e0:	d102      	bne.n	80047e8 <_fstat_r+0x1c>
 80047e2:	682b      	ldr	r3, [r5, #0]
 80047e4:	b103      	cbz	r3, 80047e8 <_fstat_r+0x1c>
 80047e6:	6023      	str	r3, [r4, #0]
 80047e8:	bd38      	pop	{r3, r4, r5, pc}
 80047ea:	bf00      	nop
 80047ec:	2000025c 	.word	0x2000025c

080047f0 <_isatty_r>:
 80047f0:	b538      	push	{r3, r4, r5, lr}
 80047f2:	4d06      	ldr	r5, [pc, #24]	; (800480c <_isatty_r+0x1c>)
 80047f4:	2300      	movs	r3, #0
 80047f6:	4604      	mov	r4, r0
 80047f8:	4608      	mov	r0, r1
 80047fa:	602b      	str	r3, [r5, #0]
 80047fc:	f7fc f949 	bl	8000a92 <_isatty>
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	d102      	bne.n	800480a <_isatty_r+0x1a>
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	b103      	cbz	r3, 800480a <_isatty_r+0x1a>
 8004808:	6023      	str	r3, [r4, #0]
 800480a:	bd38      	pop	{r3, r4, r5, pc}
 800480c:	2000025c 	.word	0x2000025c

08004810 <_sbrk_r>:
 8004810:	b538      	push	{r3, r4, r5, lr}
 8004812:	4d06      	ldr	r5, [pc, #24]	; (800482c <_sbrk_r+0x1c>)
 8004814:	2300      	movs	r3, #0
 8004816:	4604      	mov	r4, r0
 8004818:	4608      	mov	r0, r1
 800481a:	602b      	str	r3, [r5, #0]
 800481c:	f7fc f952 	bl	8000ac4 <_sbrk>
 8004820:	1c43      	adds	r3, r0, #1
 8004822:	d102      	bne.n	800482a <_sbrk_r+0x1a>
 8004824:	682b      	ldr	r3, [r5, #0]
 8004826:	b103      	cbz	r3, 800482a <_sbrk_r+0x1a>
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	bd38      	pop	{r3, r4, r5, pc}
 800482c:	2000025c 	.word	0x2000025c

08004830 <memcpy>:
 8004830:	440a      	add	r2, r1
 8004832:	4291      	cmp	r1, r2
 8004834:	f100 33ff 	add.w	r3, r0, #4294967295
 8004838:	d100      	bne.n	800483c <memcpy+0xc>
 800483a:	4770      	bx	lr
 800483c:	b510      	push	{r4, lr}
 800483e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004846:	4291      	cmp	r1, r2
 8004848:	d1f9      	bne.n	800483e <memcpy+0xe>
 800484a:	bd10      	pop	{r4, pc}

0800484c <_realloc_r>:
 800484c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004850:	4680      	mov	r8, r0
 8004852:	4614      	mov	r4, r2
 8004854:	460e      	mov	r6, r1
 8004856:	b921      	cbnz	r1, 8004862 <_realloc_r+0x16>
 8004858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800485c:	4611      	mov	r1, r2
 800485e:	f7fe bec3 	b.w	80035e8 <_malloc_r>
 8004862:	b92a      	cbnz	r2, 8004870 <_realloc_r+0x24>
 8004864:	f7fe fe4c 	bl	8003500 <_free_r>
 8004868:	4625      	mov	r5, r4
 800486a:	4628      	mov	r0, r5
 800486c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004870:	f000 f914 	bl	8004a9c <_malloc_usable_size_r>
 8004874:	4284      	cmp	r4, r0
 8004876:	4607      	mov	r7, r0
 8004878:	d802      	bhi.n	8004880 <_realloc_r+0x34>
 800487a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800487e:	d812      	bhi.n	80048a6 <_realloc_r+0x5a>
 8004880:	4621      	mov	r1, r4
 8004882:	4640      	mov	r0, r8
 8004884:	f7fe feb0 	bl	80035e8 <_malloc_r>
 8004888:	4605      	mov	r5, r0
 800488a:	2800      	cmp	r0, #0
 800488c:	d0ed      	beq.n	800486a <_realloc_r+0x1e>
 800488e:	42bc      	cmp	r4, r7
 8004890:	4622      	mov	r2, r4
 8004892:	4631      	mov	r1, r6
 8004894:	bf28      	it	cs
 8004896:	463a      	movcs	r2, r7
 8004898:	f7ff ffca 	bl	8004830 <memcpy>
 800489c:	4631      	mov	r1, r6
 800489e:	4640      	mov	r0, r8
 80048a0:	f7fe fe2e 	bl	8003500 <_free_r>
 80048a4:	e7e1      	b.n	800486a <_realloc_r+0x1e>
 80048a6:	4635      	mov	r5, r6
 80048a8:	e7df      	b.n	800486a <_realloc_r+0x1e>
	...

080048ac <_strtol_l.constprop.0>:
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b2:	d001      	beq.n	80048b8 <_strtol_l.constprop.0+0xc>
 80048b4:	2b24      	cmp	r3, #36	; 0x24
 80048b6:	d906      	bls.n	80048c6 <_strtol_l.constprop.0+0x1a>
 80048b8:	f7fe fdf6 	bl	80034a8 <__errno>
 80048bc:	2316      	movs	r3, #22
 80048be:	6003      	str	r3, [r0, #0]
 80048c0:	2000      	movs	r0, #0
 80048c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80049ac <_strtol_l.constprop.0+0x100>
 80048ca:	460d      	mov	r5, r1
 80048cc:	462e      	mov	r6, r5
 80048ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048d2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80048d6:	f017 0708 	ands.w	r7, r7, #8
 80048da:	d1f7      	bne.n	80048cc <_strtol_l.constprop.0+0x20>
 80048dc:	2c2d      	cmp	r4, #45	; 0x2d
 80048de:	d132      	bne.n	8004946 <_strtol_l.constprop.0+0x9a>
 80048e0:	782c      	ldrb	r4, [r5, #0]
 80048e2:	2701      	movs	r7, #1
 80048e4:	1cb5      	adds	r5, r6, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d05b      	beq.n	80049a2 <_strtol_l.constprop.0+0xf6>
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d109      	bne.n	8004902 <_strtol_l.constprop.0+0x56>
 80048ee:	2c30      	cmp	r4, #48	; 0x30
 80048f0:	d107      	bne.n	8004902 <_strtol_l.constprop.0+0x56>
 80048f2:	782c      	ldrb	r4, [r5, #0]
 80048f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80048f8:	2c58      	cmp	r4, #88	; 0x58
 80048fa:	d14d      	bne.n	8004998 <_strtol_l.constprop.0+0xec>
 80048fc:	786c      	ldrb	r4, [r5, #1]
 80048fe:	2310      	movs	r3, #16
 8004900:	3502      	adds	r5, #2
 8004902:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004906:	f108 38ff 	add.w	r8, r8, #4294967295
 800490a:	f04f 0e00 	mov.w	lr, #0
 800490e:	fbb8 f9f3 	udiv	r9, r8, r3
 8004912:	4676      	mov	r6, lr
 8004914:	fb03 8a19 	mls	sl, r3, r9, r8
 8004918:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800491c:	f1bc 0f09 	cmp.w	ip, #9
 8004920:	d816      	bhi.n	8004950 <_strtol_l.constprop.0+0xa4>
 8004922:	4664      	mov	r4, ip
 8004924:	42a3      	cmp	r3, r4
 8004926:	dd24      	ble.n	8004972 <_strtol_l.constprop.0+0xc6>
 8004928:	f1be 3fff 	cmp.w	lr, #4294967295
 800492c:	d008      	beq.n	8004940 <_strtol_l.constprop.0+0x94>
 800492e:	45b1      	cmp	r9, r6
 8004930:	d31c      	bcc.n	800496c <_strtol_l.constprop.0+0xc0>
 8004932:	d101      	bne.n	8004938 <_strtol_l.constprop.0+0x8c>
 8004934:	45a2      	cmp	sl, r4
 8004936:	db19      	blt.n	800496c <_strtol_l.constprop.0+0xc0>
 8004938:	fb06 4603 	mla	r6, r6, r3, r4
 800493c:	f04f 0e01 	mov.w	lr, #1
 8004940:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004944:	e7e8      	b.n	8004918 <_strtol_l.constprop.0+0x6c>
 8004946:	2c2b      	cmp	r4, #43	; 0x2b
 8004948:	bf04      	itt	eq
 800494a:	782c      	ldrbeq	r4, [r5, #0]
 800494c:	1cb5      	addeq	r5, r6, #2
 800494e:	e7ca      	b.n	80048e6 <_strtol_l.constprop.0+0x3a>
 8004950:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004954:	f1bc 0f19 	cmp.w	ip, #25
 8004958:	d801      	bhi.n	800495e <_strtol_l.constprop.0+0xb2>
 800495a:	3c37      	subs	r4, #55	; 0x37
 800495c:	e7e2      	b.n	8004924 <_strtol_l.constprop.0+0x78>
 800495e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004962:	f1bc 0f19 	cmp.w	ip, #25
 8004966:	d804      	bhi.n	8004972 <_strtol_l.constprop.0+0xc6>
 8004968:	3c57      	subs	r4, #87	; 0x57
 800496a:	e7db      	b.n	8004924 <_strtol_l.constprop.0+0x78>
 800496c:	f04f 3eff 	mov.w	lr, #4294967295
 8004970:	e7e6      	b.n	8004940 <_strtol_l.constprop.0+0x94>
 8004972:	f1be 3fff 	cmp.w	lr, #4294967295
 8004976:	d105      	bne.n	8004984 <_strtol_l.constprop.0+0xd8>
 8004978:	2322      	movs	r3, #34	; 0x22
 800497a:	6003      	str	r3, [r0, #0]
 800497c:	4646      	mov	r6, r8
 800497e:	b942      	cbnz	r2, 8004992 <_strtol_l.constprop.0+0xe6>
 8004980:	4630      	mov	r0, r6
 8004982:	e79e      	b.n	80048c2 <_strtol_l.constprop.0+0x16>
 8004984:	b107      	cbz	r7, 8004988 <_strtol_l.constprop.0+0xdc>
 8004986:	4276      	negs	r6, r6
 8004988:	2a00      	cmp	r2, #0
 800498a:	d0f9      	beq.n	8004980 <_strtol_l.constprop.0+0xd4>
 800498c:	f1be 0f00 	cmp.w	lr, #0
 8004990:	d000      	beq.n	8004994 <_strtol_l.constprop.0+0xe8>
 8004992:	1e69      	subs	r1, r5, #1
 8004994:	6011      	str	r1, [r2, #0]
 8004996:	e7f3      	b.n	8004980 <_strtol_l.constprop.0+0xd4>
 8004998:	2430      	movs	r4, #48	; 0x30
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1b1      	bne.n	8004902 <_strtol_l.constprop.0+0x56>
 800499e:	2308      	movs	r3, #8
 80049a0:	e7af      	b.n	8004902 <_strtol_l.constprop.0+0x56>
 80049a2:	2c30      	cmp	r4, #48	; 0x30
 80049a4:	d0a5      	beq.n	80048f2 <_strtol_l.constprop.0+0x46>
 80049a6:	230a      	movs	r3, #10
 80049a8:	e7ab      	b.n	8004902 <_strtol_l.constprop.0+0x56>
 80049aa:	bf00      	nop
 80049ac:	08004b6b 	.word	0x08004b6b

080049b0 <_strtol_r>:
 80049b0:	f7ff bf7c 	b.w	80048ac <_strtol_l.constprop.0>

080049b4 <_strtoul_l.constprop.0>:
 80049b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049b8:	4f36      	ldr	r7, [pc, #216]	; (8004a94 <_strtoul_l.constprop.0+0xe0>)
 80049ba:	4686      	mov	lr, r0
 80049bc:	460d      	mov	r5, r1
 80049be:	4628      	mov	r0, r5
 80049c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80049c4:	5d3e      	ldrb	r6, [r7, r4]
 80049c6:	f016 0608 	ands.w	r6, r6, #8
 80049ca:	d1f8      	bne.n	80049be <_strtoul_l.constprop.0+0xa>
 80049cc:	2c2d      	cmp	r4, #45	; 0x2d
 80049ce:	d130      	bne.n	8004a32 <_strtoul_l.constprop.0+0x7e>
 80049d0:	782c      	ldrb	r4, [r5, #0]
 80049d2:	2601      	movs	r6, #1
 80049d4:	1c85      	adds	r5, r0, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d057      	beq.n	8004a8a <_strtoul_l.constprop.0+0xd6>
 80049da:	2b10      	cmp	r3, #16
 80049dc:	d109      	bne.n	80049f2 <_strtoul_l.constprop.0+0x3e>
 80049de:	2c30      	cmp	r4, #48	; 0x30
 80049e0:	d107      	bne.n	80049f2 <_strtoul_l.constprop.0+0x3e>
 80049e2:	7828      	ldrb	r0, [r5, #0]
 80049e4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80049e8:	2858      	cmp	r0, #88	; 0x58
 80049ea:	d149      	bne.n	8004a80 <_strtoul_l.constprop.0+0xcc>
 80049ec:	786c      	ldrb	r4, [r5, #1]
 80049ee:	2310      	movs	r3, #16
 80049f0:	3502      	adds	r5, #2
 80049f2:	f04f 38ff 	mov.w	r8, #4294967295
 80049f6:	2700      	movs	r7, #0
 80049f8:	fbb8 f8f3 	udiv	r8, r8, r3
 80049fc:	fb03 f908 	mul.w	r9, r3, r8
 8004a00:	ea6f 0909 	mvn.w	r9, r9
 8004a04:	4638      	mov	r0, r7
 8004a06:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004a0a:	f1bc 0f09 	cmp.w	ip, #9
 8004a0e:	d815      	bhi.n	8004a3c <_strtoul_l.constprop.0+0x88>
 8004a10:	4664      	mov	r4, ip
 8004a12:	42a3      	cmp	r3, r4
 8004a14:	dd23      	ble.n	8004a5e <_strtoul_l.constprop.0+0xaa>
 8004a16:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004a1a:	d007      	beq.n	8004a2c <_strtoul_l.constprop.0+0x78>
 8004a1c:	4580      	cmp	r8, r0
 8004a1e:	d31b      	bcc.n	8004a58 <_strtoul_l.constprop.0+0xa4>
 8004a20:	d101      	bne.n	8004a26 <_strtoul_l.constprop.0+0x72>
 8004a22:	45a1      	cmp	r9, r4
 8004a24:	db18      	blt.n	8004a58 <_strtoul_l.constprop.0+0xa4>
 8004a26:	fb00 4003 	mla	r0, r0, r3, r4
 8004a2a:	2701      	movs	r7, #1
 8004a2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a30:	e7e9      	b.n	8004a06 <_strtoul_l.constprop.0+0x52>
 8004a32:	2c2b      	cmp	r4, #43	; 0x2b
 8004a34:	bf04      	itt	eq
 8004a36:	782c      	ldrbeq	r4, [r5, #0]
 8004a38:	1c85      	addeq	r5, r0, #2
 8004a3a:	e7cc      	b.n	80049d6 <_strtoul_l.constprop.0+0x22>
 8004a3c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004a40:	f1bc 0f19 	cmp.w	ip, #25
 8004a44:	d801      	bhi.n	8004a4a <_strtoul_l.constprop.0+0x96>
 8004a46:	3c37      	subs	r4, #55	; 0x37
 8004a48:	e7e3      	b.n	8004a12 <_strtoul_l.constprop.0+0x5e>
 8004a4a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004a4e:	f1bc 0f19 	cmp.w	ip, #25
 8004a52:	d804      	bhi.n	8004a5e <_strtoul_l.constprop.0+0xaa>
 8004a54:	3c57      	subs	r4, #87	; 0x57
 8004a56:	e7dc      	b.n	8004a12 <_strtoul_l.constprop.0+0x5e>
 8004a58:	f04f 37ff 	mov.w	r7, #4294967295
 8004a5c:	e7e6      	b.n	8004a2c <_strtoul_l.constprop.0+0x78>
 8004a5e:	1c7b      	adds	r3, r7, #1
 8004a60:	d106      	bne.n	8004a70 <_strtoul_l.constprop.0+0xbc>
 8004a62:	2322      	movs	r3, #34	; 0x22
 8004a64:	f8ce 3000 	str.w	r3, [lr]
 8004a68:	4638      	mov	r0, r7
 8004a6a:	b932      	cbnz	r2, 8004a7a <_strtoul_l.constprop.0+0xc6>
 8004a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a70:	b106      	cbz	r6, 8004a74 <_strtoul_l.constprop.0+0xc0>
 8004a72:	4240      	negs	r0, r0
 8004a74:	2a00      	cmp	r2, #0
 8004a76:	d0f9      	beq.n	8004a6c <_strtoul_l.constprop.0+0xb8>
 8004a78:	b107      	cbz	r7, 8004a7c <_strtoul_l.constprop.0+0xc8>
 8004a7a:	1e69      	subs	r1, r5, #1
 8004a7c:	6011      	str	r1, [r2, #0]
 8004a7e:	e7f5      	b.n	8004a6c <_strtoul_l.constprop.0+0xb8>
 8004a80:	2430      	movs	r4, #48	; 0x30
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1b5      	bne.n	80049f2 <_strtoul_l.constprop.0+0x3e>
 8004a86:	2308      	movs	r3, #8
 8004a88:	e7b3      	b.n	80049f2 <_strtoul_l.constprop.0+0x3e>
 8004a8a:	2c30      	cmp	r4, #48	; 0x30
 8004a8c:	d0a9      	beq.n	80049e2 <_strtoul_l.constprop.0+0x2e>
 8004a8e:	230a      	movs	r3, #10
 8004a90:	e7af      	b.n	80049f2 <_strtoul_l.constprop.0+0x3e>
 8004a92:	bf00      	nop
 8004a94:	08004b6b 	.word	0x08004b6b

08004a98 <_strtoul_r>:
 8004a98:	f7ff bf8c 	b.w	80049b4 <_strtoul_l.constprop.0>

08004a9c <_malloc_usable_size_r>:
 8004a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aa0:	1f18      	subs	r0, r3, #4
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	bfbc      	itt	lt
 8004aa6:	580b      	ldrlt	r3, [r1, r0]
 8004aa8:	18c0      	addlt	r0, r0, r3
 8004aaa:	4770      	bx	lr

08004aac <_init>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	bf00      	nop
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr

08004ab8 <_fini>:
 8004ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aba:	bf00      	nop
 8004abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004abe:	bc08      	pop	{r3}
 8004ac0:	469e      	mov	lr, r3
 8004ac2:	4770      	bx	lr
