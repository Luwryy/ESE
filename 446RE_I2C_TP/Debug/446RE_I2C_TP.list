
446RE_I2C_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004520  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004818  08004818  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004818  08004818  00014818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004820  08004820  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004820  08004820  00014820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004824  08004824  00014824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000068  08004890  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08004890  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b827  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c4f  00000000  00000000  0002b902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  0002d558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000808  00000000  00000000  0002dfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022413  00000000  00000000  0002e7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e42d  00000000  00000000  00050bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc442  00000000  00000000  0005eff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031fc  00000000  00000000  0012b434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0012e630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080046d8 	.word	0x080046d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080046d8 	.word	0x080046d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	e00b      	b.n	80005d6 <_write+0x2a>
		HAL_UART_Transmit(&huart2, (uint8_t *) ptr++, 1, HAL_MAX_DELAY);
 80005be:	68b9      	ldr	r1, [r7, #8]
 80005c0:	1c4b      	adds	r3, r1, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
 80005c8:	2201      	movs	r2, #1
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <_write+0x3c>)
 80005cc:	f002 fc23 	bl	8002e16 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	3301      	adds	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	429a      	cmp	r2, r3
 80005dc:	dbef      	blt.n	80005be <_write+0x12>
	}
	return len;
 80005de:	687b      	ldr	r3, [r7, #4]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000d8 	.word	0x200000d8

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fb1c 	bl	8000c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f83a 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f8fe 	bl	80007f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f8d2 	bl	80007a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000600:	f000 f8a2 	bl	8000748 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("test\r\n");
 8000604:	4813      	ldr	r0, [pc, #76]	; (8000654 <main+0x68>)
 8000606:	f003 f9ff 	bl	8003a08 <puts>
  bmp_reset(&bmp280);
 800060a:	4813      	ldr	r0, [pc, #76]	; (8000658 <main+0x6c>)
 800060c:	f002 ff78 	bl	8003500 <bmp_reset>
  printf("reset done\r\n");
 8000610:	4812      	ldr	r0, [pc, #72]	; (800065c <main+0x70>)
 8000612:	f003 f9f9 	bl	8003a08 <puts>
  bmp_id(&bmp280);
 8000616:	4810      	ldr	r0, [pc, #64]	; (8000658 <main+0x6c>)
 8000618:	f002 ff98 	bl	800354c <bmp_id>
  printf("id done\r\n");
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <main+0x74>)
 800061e:	f003 f9f3 	bl	8003a08 <puts>
  bmp_config(&bmp280);
 8000622:	480d      	ldr	r0, [pc, #52]	; (8000658 <main+0x6c>)
 8000624:	f002 ffcc 	bl	80035c0 <bmp_config>
  printf("config done\r\n");
 8000628:	480e      	ldr	r0, [pc, #56]	; (8000664 <main+0x78>)
 800062a:	f003 f9ed 	bl	8003a08 <puts>
  HAL_Delay(500);
 800062e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000632:	f000 fb6d 	bl	8000d10 <HAL_Delay>
  bmp_calib_read(&bmp280);
 8000636:	4808      	ldr	r0, [pc, #32]	; (8000658 <main+0x6c>)
 8000638:	f002 fffe 	bl	8003638 <bmp_calib_read>
  printf("calib done\r\n");
 800063c:	480a      	ldr	r0, [pc, #40]	; (8000668 <main+0x7c>)
 800063e:	f003 f9e3 	bl	8003a08 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  bmp_temp_read(&bmp280);
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <main+0x6c>)
 8000644:	f003 f832 	bl	80036ac <bmp_temp_read>
	  HAL_Delay(1000);
 8000648:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064c:	f000 fb60 	bl	8000d10 <HAL_Delay>
	  bmp_temp_read(&bmp280);
 8000650:	e7f7      	b.n	8000642 <main+0x56>
 8000652:	bf00      	nop
 8000654:	080046f0 	.word	0x080046f0
 8000658:	2000011c 	.word	0x2000011c
 800065c:	080046f8 	.word	0x080046f8
 8000660:	08004704 	.word	0x08004704
 8000664:	08004710 	.word	0x08004710
 8000668:	08004720 	.word	0x08004720

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	2234      	movs	r2, #52	; 0x34
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 faa4 	bl	8003bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <SystemClock_Config+0xd4>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a29      	ldr	r2, [pc, #164]	; (8000740 <SystemClock_Config+0xd4>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b27      	ldr	r3, [pc, #156]	; (8000740 <SystemClock_Config+0xd4>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ac:	2300      	movs	r3, #0
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4b24      	ldr	r3, [pc, #144]	; (8000744 <SystemClock_Config+0xd8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b8:	4a22      	ldr	r2, [pc, #136]	; (8000744 <SystemClock_Config+0xd8>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b20      	ldr	r3, [pc, #128]	; (8000744 <SystemClock_Config+0xd8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2310      	movs	r3, #16
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006e0:	2310      	movs	r3, #16
 80006e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ea:	2304      	movs	r3, #4
 80006ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 f8a0 	bl	8002840 <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000706:	f000 f8e5 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2302      	movs	r3, #2
 8000710:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2102      	movs	r1, #2
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fd40 	bl	80021ac <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000732:	f000 f8cf 	bl	80008d4 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	; 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2C1_Init+0x50>)
 800074e:	4a13      	ldr	r2, [pc, #76]	; (800079c <MX_I2C1_Init+0x54>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_I2C1_Init+0x50>)
 8000754:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_I2C1_Init+0x58>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_I2C1_Init+0x50>)
 8000766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800076a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_I2C1_Init+0x50>)
 8000786:	f000 fd7b 	bl	8001280 <HAL_I2C_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000790:	f000 f8a0 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000084 	.word	0x20000084
 800079c:	40005400 	.word	0x40005400
 80007a0:	000186a0 	.word	0x000186a0

080007a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <MX_USART2_UART_Init+0x50>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007dc:	f002 face 	bl	8002d7c <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e6:	f000 f875 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000d8 	.word	0x200000d8
 80007f4:	40004400 	.word	0x40004400

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a2c      	ldr	r2, [pc, #176]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a25      	ldr	r2, [pc, #148]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_GPIO_Init+0xd0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a1e      	ldr	r2, [pc, #120]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <MX_GPIO_Init+0xd0>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_GPIO_Init+0xd0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2120      	movs	r1, #32
 8000882:	4812      	ldr	r0, [pc, #72]	; (80008cc <MX_GPIO_Init+0xd4>)
 8000884:	f000 fce2 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800088e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MX_GPIO_Init+0xd8>)
 80008a0:	f000 fb40 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a4:	2320      	movs	r3, #32
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <MX_GPIO_Init+0xd4>)
 80008bc:	f000 fb32 	bl	8000f24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40020800 	.word	0x40020800

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <HAL_MspInit+0x4c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	4a0f      	ldr	r2, [pc, #60]	; (800092c <HAL_MspInit+0x4c>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f4:	6453      	str	r3, [r2, #68]	; 0x44
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <HAL_MspInit+0x4c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <HAL_MspInit+0x4c>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800091e:	2007      	movs	r0, #7
 8000920:	f000 facc 	bl	8000ebc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800

08000930 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <HAL_I2C_MspInit+0x84>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d12c      	bne.n	80009ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <HAL_I2C_MspInit+0x88>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <HAL_I2C_MspInit+0x88>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_I2C_MspInit+0x88>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800096e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000974:	2312      	movs	r3, #18
 8000976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000980:	2304      	movs	r3, #4
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	480c      	ldr	r0, [pc, #48]	; (80009bc <HAL_I2C_MspInit+0x8c>)
 800098c:	f000 faca 	bl	8000f24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_I2C_MspInit+0x88>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <HAL_I2C_MspInit+0x88>)
 800099a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800099e:	6413      	str	r3, [r2, #64]	; 0x40
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_I2C_MspInit+0x88>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	; 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40005400 	.word	0x40005400
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020400 	.word	0x40020400

080009c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a19      	ldr	r2, [pc, #100]	; (8000a44 <HAL_UART_MspInit+0x84>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d12b      	bne.n	8000a3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <HAL_UART_MspInit+0x88>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <HAL_UART_MspInit+0x88>)
 80009ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_UART_MspInit+0x88>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_UART_MspInit+0x88>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <HAL_UART_MspInit+0x88>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_UART_MspInit+0x88>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a1a:	230c      	movs	r3, #12
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a2a:	2307      	movs	r3, #7
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <HAL_UART_MspInit+0x8c>)
 8000a36:	f000 fa75 	bl	8000f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a3a:	bf00      	nop
 8000a3c:	3728      	adds	r7, #40	; 0x28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40004400 	.word	0x40004400
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020000 	.word	0x40020000

08000a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <NMI_Handler+0x4>

08000a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <HardFault_Handler+0x4>

08000a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <MemManage_Handler+0x4>

08000a62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <BusFault_Handler+0x4>

08000a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <UsageFault_Handler+0x4>

08000a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9c:	f000 f918 	bl	8000cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	e00a      	b.n	8000acc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ab6:	f3af 8000 	nop.w
 8000aba:	4601      	mov	r1, r0
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	b2ca      	uxtb	r2, r1
 8000ac4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	dbf0      	blt.n	8000ab6 <_read+0x12>
  }

  return len;
 8000ad4:	687b      	ldr	r3, [r7, #4]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
 8000afe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b06:	605a      	str	r2, [r3, #4]
  return 0;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <_isatty>:

int _isatty(int file)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b50:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <_sbrk+0x5c>)
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <_sbrk+0x60>)
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d102      	bne.n	8000b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <_sbrk+0x64>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <_sbrk+0x68>)
 8000b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d207      	bcs.n	8000b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b78:	f003 f874 	bl	8003c64 <__errno>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	220c      	movs	r2, #12
 8000b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	e009      	b.n	8000b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <_sbrk+0x64>)
 8000b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20020000 	.word	0x20020000
 8000ba8:	00000400 	.word	0x00000400
 8000bac:	20000158 	.word	0x20000158
 8000bb0:	200002b0 	.word	0x200002b0

08000bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <SystemInit+0x20>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <SystemInit+0x20>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bde:	490e      	ldr	r1, [pc, #56]	; (8000c18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be0:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be4:	e002      	b.n	8000bec <LoopCopyDataInit>

08000be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bea:	3304      	adds	r3, #4

08000bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf0:	d3f9      	bcc.n	8000be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf4:	4c0b      	ldr	r4, [pc, #44]	; (8000c24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf8:	e001      	b.n	8000bfe <LoopFillZerobss>

08000bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bfc:	3204      	adds	r2, #4

08000bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c00:	d3fb      	bcc.n	8000bfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c02:	f7ff ffd7 	bl	8000bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c06:	f003 f833 	bl	8003c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0a:	f7ff fcef 	bl	80005ec <main>
  bx  lr    
 8000c0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c1c:	08004828 	.word	0x08004828
  ldr r2, =_sbss
 8000c20:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c24:	200002ac 	.word	0x200002ac

08000c28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC_IRQHandler>
	...

08000c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <HAL_Init+0x40>)
 8000c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_Init+0x40>)
 8000c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_Init+0x40>)
 8000c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c54:	2003      	movs	r0, #3
 8000c56:	f000 f931 	bl	8000ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f000 f808 	bl	8000c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c60:	f7ff fe3e 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023c00 	.word	0x40023c00

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_InitTick+0x54>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x58>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f93b 	bl	8000f0a <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00e      	b.n	8000cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d80a      	bhi.n	8000cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f000 f911 	bl	8000ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_InitTick+0x5c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	2000015c 	.word	0x2000015c

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	2000015c 	.word	0x2000015c

08000d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d18:	f7ff ffee 	bl	8000cf8 <HAL_GetTick>
 8000d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d28:	d005      	beq.n	8000d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_Delay+0x44>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d36:	bf00      	nop
 8000d38:	f7ff ffde 	bl	8000cf8 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d8f7      	bhi.n	8000d38 <HAL_Delay+0x28>
  {
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e88:	d301      	bcc.n	8000e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00f      	b.n	8000eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <SysTick_Config+0x40>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e96:	210f      	movs	r1, #15
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f7ff ff8e 	bl	8000dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	e000e010 	.word	0xe000e010

08000ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff47 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee4:	f7ff ff5c 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f7ff ff8e 	bl	8000e10 <NVIC_EncodePriority>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff5d 	bl	8000dbc <__NVIC_SetPriority>
}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ffb0 	bl	8000e78 <SysTick_Config>
 8000f18:	4603      	mov	r3, r0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
 8000f3e:	e165      	b.n	800120c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f40:	2201      	movs	r2, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	f040 8154 	bne.w	8001206 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d005      	beq.n	8000f76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d130      	bne.n	8000fd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fac:	2201      	movs	r2, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	f003 0201 	and.w	r2, r3, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d017      	beq.n	8001014 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d123      	bne.n	8001068 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	220f      	movs	r2, #15
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	691a      	ldr	r2, [r3, #16]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	69b9      	ldr	r1, [r7, #24]
 8001064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0203 	and.w	r2, r3, #3
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 80ae 	beq.w	8001206 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b5d      	ldr	r3, [pc, #372]	; (8001224 <HAL_GPIO_Init+0x300>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a5c      	ldr	r2, [pc, #368]	; (8001224 <HAL_GPIO_Init+0x300>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ba:	4b5a      	ldr	r3, [pc, #360]	; (8001224 <HAL_GPIO_Init+0x300>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010c6:	4a58      	ldr	r2, [pc, #352]	; (8001228 <HAL_GPIO_Init+0x304>)
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	3302      	adds	r3, #2
 80010ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4f      	ldr	r2, [pc, #316]	; (800122c <HAL_GPIO_Init+0x308>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d025      	beq.n	800113e <HAL_GPIO_Init+0x21a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4e      	ldr	r2, [pc, #312]	; (8001230 <HAL_GPIO_Init+0x30c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d01f      	beq.n	800113a <HAL_GPIO_Init+0x216>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4d      	ldr	r2, [pc, #308]	; (8001234 <HAL_GPIO_Init+0x310>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d019      	beq.n	8001136 <HAL_GPIO_Init+0x212>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4c      	ldr	r2, [pc, #304]	; (8001238 <HAL_GPIO_Init+0x314>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0x20e>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4b      	ldr	r2, [pc, #300]	; (800123c <HAL_GPIO_Init+0x318>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00d      	beq.n	800112e <HAL_GPIO_Init+0x20a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4a      	ldr	r2, [pc, #296]	; (8001240 <HAL_GPIO_Init+0x31c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d007      	beq.n	800112a <HAL_GPIO_Init+0x206>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a49      	ldr	r2, [pc, #292]	; (8001244 <HAL_GPIO_Init+0x320>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d101      	bne.n	8001126 <HAL_GPIO_Init+0x202>
 8001122:	2306      	movs	r3, #6
 8001124:	e00c      	b.n	8001140 <HAL_GPIO_Init+0x21c>
 8001126:	2307      	movs	r3, #7
 8001128:	e00a      	b.n	8001140 <HAL_GPIO_Init+0x21c>
 800112a:	2305      	movs	r3, #5
 800112c:	e008      	b.n	8001140 <HAL_GPIO_Init+0x21c>
 800112e:	2304      	movs	r3, #4
 8001130:	e006      	b.n	8001140 <HAL_GPIO_Init+0x21c>
 8001132:	2303      	movs	r3, #3
 8001134:	e004      	b.n	8001140 <HAL_GPIO_Init+0x21c>
 8001136:	2302      	movs	r3, #2
 8001138:	e002      	b.n	8001140 <HAL_GPIO_Init+0x21c>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <HAL_GPIO_Init+0x21c>
 800113e:	2300      	movs	r3, #0
 8001140:	69fa      	ldr	r2, [r7, #28]
 8001142:	f002 0203 	and.w	r2, r2, #3
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	4093      	lsls	r3, r2
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001150:	4935      	ldr	r1, [pc, #212]	; (8001228 <HAL_GPIO_Init+0x304>)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115e:	4b3a      	ldr	r3, [pc, #232]	; (8001248 <HAL_GPIO_Init+0x324>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001182:	4a31      	ldr	r2, [pc, #196]	; (8001248 <HAL_GPIO_Init+0x324>)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001188:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <HAL_GPIO_Init+0x324>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ac:	4a26      	ldr	r2, [pc, #152]	; (8001248 <HAL_GPIO_Init+0x324>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011b2:	4b25      	ldr	r3, [pc, #148]	; (8001248 <HAL_GPIO_Init+0x324>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d6:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <HAL_GPIO_Init+0x324>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011dc:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <HAL_GPIO_Init+0x324>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001200:	4a11      	ldr	r2, [pc, #68]	; (8001248 <HAL_GPIO_Init+0x324>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3301      	adds	r3, #1
 800120a:	61fb      	str	r3, [r7, #28]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	2b0f      	cmp	r3, #15
 8001210:	f67f ae96 	bls.w	8000f40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40013800 	.word	0x40013800
 800122c:	40020000 	.word	0x40020000
 8001230:	40020400 	.word	0x40020400
 8001234:	40020800 	.word	0x40020800
 8001238:	40020c00 	.word	0x40020c00
 800123c:	40021000 	.word	0x40021000
 8001240:	40021400 	.word	0x40021400
 8001244:	40021800 	.word	0x40021800
 8001248:	40013c00 	.word	0x40013c00

0800124c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
 8001258:	4613      	mov	r3, r2
 800125a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001268:	e003      	b.n	8001272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	041a      	lsls	r2, r3, #16
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	619a      	str	r2, [r3, #24]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e12b      	b.n	80014ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d106      	bne.n	80012ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fb42 	bl	8000930 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2224      	movs	r2, #36	; 0x24
 80012b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0201 	bic.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012e4:	f001 f854 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 80012e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4a81      	ldr	r2, [pc, #516]	; (80014f4 <HAL_I2C_Init+0x274>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d807      	bhi.n	8001304 <HAL_I2C_Init+0x84>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4a80      	ldr	r2, [pc, #512]	; (80014f8 <HAL_I2C_Init+0x278>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	bf94      	ite	ls
 80012fc:	2301      	movls	r3, #1
 80012fe:	2300      	movhi	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	e006      	b.n	8001312 <HAL_I2C_Init+0x92>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4a7d      	ldr	r2, [pc, #500]	; (80014fc <HAL_I2C_Init+0x27c>)
 8001308:	4293      	cmp	r3, r2
 800130a:	bf94      	ite	ls
 800130c:	2301      	movls	r3, #1
 800130e:	2300      	movhi	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e0e7      	b.n	80014ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4a78      	ldr	r2, [pc, #480]	; (8001500 <HAL_I2C_Init+0x280>)
 800131e:	fba2 2303 	umull	r2, r3, r2, r3
 8001322:	0c9b      	lsrs	r3, r3, #18
 8001324:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	430a      	orrs	r2, r1
 8001338:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4a6a      	ldr	r2, [pc, #424]	; (80014f4 <HAL_I2C_Init+0x274>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d802      	bhi.n	8001354 <HAL_I2C_Init+0xd4>
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	3301      	adds	r3, #1
 8001352:	e009      	b.n	8001368 <HAL_I2C_Init+0xe8>
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	4a69      	ldr	r2, [pc, #420]	; (8001504 <HAL_I2C_Init+0x284>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	099b      	lsrs	r3, r3, #6
 8001366:	3301      	adds	r3, #1
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	430b      	orrs	r3, r1
 800136e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800137a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	495c      	ldr	r1, [pc, #368]	; (80014f4 <HAL_I2C_Init+0x274>)
 8001384:	428b      	cmp	r3, r1
 8001386:	d819      	bhi.n	80013bc <HAL_I2C_Init+0x13c>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	1e59      	subs	r1, r3, #1
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	fbb1 f3f3 	udiv	r3, r1, r3
 8001396:	1c59      	adds	r1, r3, #1
 8001398:	f640 73fc 	movw	r3, #4092	; 0xffc
 800139c:	400b      	ands	r3, r1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00a      	beq.n	80013b8 <HAL_I2C_Init+0x138>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	1e59      	subs	r1, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80013b0:	3301      	adds	r3, #1
 80013b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013b6:	e051      	b.n	800145c <HAL_I2C_Init+0x1dc>
 80013b8:	2304      	movs	r3, #4
 80013ba:	e04f      	b.n	800145c <HAL_I2C_Init+0x1dc>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d111      	bne.n	80013e8 <HAL_I2C_Init+0x168>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	1e58      	subs	r0, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	440b      	add	r3, r1
 80013d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013d6:	3301      	adds	r3, #1
 80013d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bf0c      	ite	eq
 80013e0:	2301      	moveq	r3, #1
 80013e2:	2300      	movne	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	e012      	b.n	800140e <HAL_I2C_Init+0x18e>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1e58      	subs	r0, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6859      	ldr	r1, [r3, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	0099      	lsls	r1, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80013fe:	3301      	adds	r3, #1
 8001400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001404:	2b00      	cmp	r3, #0
 8001406:	bf0c      	ite	eq
 8001408:	2301      	moveq	r3, #1
 800140a:	2300      	movne	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_I2C_Init+0x196>
 8001412:	2301      	movs	r3, #1
 8001414:	e022      	b.n	800145c <HAL_I2C_Init+0x1dc>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10e      	bne.n	800143c <HAL_I2C_Init+0x1bc>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1e58      	subs	r0, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6859      	ldr	r1, [r3, #4]
 8001426:	460b      	mov	r3, r1
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	440b      	add	r3, r1
 800142c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001430:	3301      	adds	r3, #1
 8001432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800143a:	e00f      	b.n	800145c <HAL_I2C_Init+0x1dc>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1e58      	subs	r0, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6859      	ldr	r1, [r3, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	0099      	lsls	r1, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001452:	3301      	adds	r3, #1
 8001454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001458:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	6809      	ldr	r1, [r1, #0]
 8001460:	4313      	orrs	r3, r2
 8001462:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69da      	ldr	r2, [r3, #28]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800148a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6911      	ldr	r1, [r2, #16]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68d2      	ldr	r2, [r2, #12]
 8001496:	4311      	orrs	r1, r2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	430b      	orrs	r3, r1
 800149e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695a      	ldr	r2, [r3, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2220      	movs	r2, #32
 80014d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	000186a0 	.word	0x000186a0
 80014f8:	001e847f 	.word	0x001e847f
 80014fc:	003d08ff 	.word	0x003d08ff
 8001500:	431bde83 	.word	0x431bde83
 8001504:	10624dd3 	.word	0x10624dd3

08001508 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af02      	add	r7, sp, #8
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	461a      	mov	r2, r3
 8001514:	460b      	mov	r3, r1
 8001516:	817b      	strh	r3, [r7, #10]
 8001518:	4613      	mov	r3, r2
 800151a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff fbec 	bl	8000cf8 <HAL_GetTick>
 8001520:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b20      	cmp	r3, #32
 800152c:	f040 80e0 	bne.w	80016f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2319      	movs	r3, #25
 8001536:	2201      	movs	r2, #1
 8001538:	4970      	ldr	r1, [pc, #448]	; (80016fc <HAL_I2C_Master_Transmit+0x1f4>)
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f000 fc58 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001546:	2302      	movs	r3, #2
 8001548:	e0d3      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_I2C_Master_Transmit+0x50>
 8001554:	2302      	movs	r3, #2
 8001556:	e0cc      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1ea>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b01      	cmp	r3, #1
 800156c:	d007      	beq.n	800157e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f042 0201 	orr.w	r2, r2, #1
 800157c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800158c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2221      	movs	r2, #33	; 0x21
 8001592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2210      	movs	r2, #16
 800159a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	893a      	ldrh	r2, [r7, #8]
 80015ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4a50      	ldr	r2, [pc, #320]	; (8001700 <HAL_I2C_Master_Transmit+0x1f8>)
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015c0:	8979      	ldrh	r1, [r7, #10]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	6a3a      	ldr	r2, [r7, #32]
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f000 fac2 	bl	8001b50 <I2C_MasterRequestWrite>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e08d      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015ec:	e066      	b.n	80016bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	6a39      	ldr	r1, [r7, #32]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f000 fcd2 	bl	8001f9c <I2C_WaitOnTXEFlagUntilTimeout>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00d      	beq.n	800161a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	2b04      	cmp	r3, #4
 8001604:	d107      	bne.n	8001616 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001614:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e06b      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	781a      	ldrb	r2, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001634:	b29b      	uxth	r3, r3
 8001636:	3b01      	subs	r3, #1
 8001638:	b29a      	uxth	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001642:	3b01      	subs	r3, #1
 8001644:	b29a      	uxth	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b04      	cmp	r3, #4
 8001656:	d11b      	bne.n	8001690 <HAL_I2C_Master_Transmit+0x188>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165c:	2b00      	cmp	r3, #0
 800165e:	d017      	beq.n	8001690 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	781a      	ldrb	r2, [r3, #0]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167a:	b29b      	uxth	r3, r3
 800167c:	3b01      	subs	r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001688:	3b01      	subs	r3, #1
 800168a:	b29a      	uxth	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	6a39      	ldr	r1, [r7, #32]
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f000 fcc2 	bl	800201e <I2C_WaitOnBTFFlagUntilTimeout>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00d      	beq.n	80016bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d107      	bne.n	80016b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e01a      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d194      	bne.n	80015ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2220      	movs	r2, #32
 80016d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e000      	b.n	80016f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016f0:	2302      	movs	r3, #2
  }
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	00100002 	.word	0x00100002
 8001700:	ffff0000 	.word	0xffff0000

08001704 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	; 0x30
 8001708:	af02      	add	r7, sp, #8
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	461a      	mov	r2, r3
 8001710:	460b      	mov	r3, r1
 8001712:	817b      	strh	r3, [r7, #10]
 8001714:	4613      	mov	r3, r2
 8001716:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff faee 	bl	8000cf8 <HAL_GetTick>
 800171c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b20      	cmp	r3, #32
 8001728:	f040 820b 	bne.w	8001b42 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2319      	movs	r3, #25
 8001732:	2201      	movs	r2, #1
 8001734:	497c      	ldr	r1, [pc, #496]	; (8001928 <HAL_I2C_Master_Receive+0x224>)
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 fb5a 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001742:	2302      	movs	r3, #2
 8001744:	e1fe      	b.n	8001b44 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_I2C_Master_Receive+0x50>
 8001750:	2302      	movs	r3, #2
 8001752:	e1f7      	b.n	8001b44 <HAL_I2C_Master_Receive+0x440>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b01      	cmp	r3, #1
 8001768:	d007      	beq.n	800177a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0201 	orr.w	r2, r2, #1
 8001778:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001788:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2222      	movs	r2, #34	; 0x22
 800178e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2210      	movs	r2, #16
 8001796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	893a      	ldrh	r2, [r7, #8]
 80017aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4a5c      	ldr	r2, [pc, #368]	; (800192c <HAL_I2C_Master_Receive+0x228>)
 80017ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017bc:	8979      	ldrh	r1, [r7, #10]
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 fa46 	bl	8001c54 <I2C_MasterRequestRead>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e1b8      	b.n	8001b44 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d113      	bne.n	8001802 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	623b      	str	r3, [r7, #32]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	623b      	str	r3, [r7, #32]
 80017ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e18c      	b.n	8001b1c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001806:	2b01      	cmp	r3, #1
 8001808:	d11b      	bne.n	8001842 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001818:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	61fb      	str	r3, [r7, #28]
 800182e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	e16c      	b.n	8001b1c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001846:	2b02      	cmp	r3, #2
 8001848:	d11b      	bne.n	8001882 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001858:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001868:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	e14c      	b.n	8001b1c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001890:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80018a8:	e138      	b.n	8001b1c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	f200 80f1 	bhi.w	8001a96 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d123      	bne.n	8001904 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 fbed 	bl	80020a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e139      	b.n	8001b44 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001902:	e10b      	b.n	8001b1c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001908:	2b02      	cmp	r3, #2
 800190a:	d14e      	bne.n	80019aa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001912:	2200      	movs	r2, #0
 8001914:	4906      	ldr	r1, [pc, #24]	; (8001930 <HAL_I2C_Master_Receive+0x22c>)
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 fa6a 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d008      	beq.n	8001934 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e10e      	b.n	8001b44 <HAL_I2C_Master_Receive+0x440>
 8001926:	bf00      	nop
 8001928:	00100002 	.word	0x00100002
 800192c:	ffff0000 	.word	0xffff0000
 8001930:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001942:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691a      	ldr	r2, [r3, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001960:	3b01      	subs	r3, #1
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196c:	b29b      	uxth	r3, r3
 800196e:	3b01      	subs	r3, #1
 8001970:	b29a      	uxth	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001992:	3b01      	subs	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800199e:	b29b      	uxth	r3, r3
 80019a0:	3b01      	subs	r3, #1
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019a8:	e0b8      	b.n	8001b1c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b0:	2200      	movs	r2, #0
 80019b2:	4966      	ldr	r1, [pc, #408]	; (8001b4c <HAL_I2C_Master_Receive+0x448>)
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 fa1b 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0bf      	b.n	8001b44 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	691a      	ldr	r2, [r3, #16]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	494f      	ldr	r1, [pc, #316]	; (8001b4c <HAL_I2C_Master_Receive+0x448>)
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 f9ed 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e091      	b.n	8001b44 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691a      	ldr	r2, [r3, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a94:	e042      	b.n	8001b1c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 fb00 	bl	80020a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e04c      	b.n	8001b44 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d118      	bne.n	8001b1c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f47f aec2 	bne.w	80018aa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e000      	b.n	8001b44 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001b42:	2302      	movs	r3, #2
  }
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3728      	adds	r7, #40	; 0x28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	00010004 	.word	0x00010004

08001b50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d006      	beq.n	8001b7a <I2C_MasterRequestWrite+0x2a>
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d003      	beq.n	8001b7a <I2C_MasterRequestWrite+0x2a>
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b78:	d108      	bne.n	8001b8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	e00b      	b.n	8001ba4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b90:	2b12      	cmp	r3, #18
 8001b92:	d107      	bne.n	8001ba4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ba2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 f91d 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00d      	beq.n	8001bd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bca:	d103      	bne.n	8001bd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e035      	b.n	8001c44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001be0:	d108      	bne.n	8001bf4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001be2:	897b      	ldrh	r3, [r7, #10]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001bf0:	611a      	str	r2, [r3, #16]
 8001bf2:	e01b      	b.n	8001c2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bf4:	897b      	ldrh	r3, [r7, #10]
 8001bf6:	11db      	asrs	r3, r3, #7
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f003 0306 	and.w	r3, r3, #6
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f063 030f 	orn	r3, r3, #15
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	490e      	ldr	r1, [pc, #56]	; (8001c4c <I2C_MasterRequestWrite+0xfc>)
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f943 	bl	8001e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e010      	b.n	8001c44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c22:	897b      	ldrh	r3, [r7, #10]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	4907      	ldr	r1, [pc, #28]	; (8001c50 <I2C_MasterRequestWrite+0x100>)
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f933 	bl	8001e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	00010008 	.word	0x00010008
 8001c50:	00010002 	.word	0x00010002

08001c54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	460b      	mov	r3, r1
 8001c62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d006      	beq.n	8001c8e <I2C_MasterRequestRead+0x3a>
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d003      	beq.n	8001c8e <I2C_MasterRequestRead+0x3a>
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c8c:	d108      	bne.n	8001ca0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	e00b      	b.n	8001cb8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	2b11      	cmp	r3, #17
 8001ca6:	d107      	bne.n	8001cb8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 f893 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00d      	beq.n	8001cec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cde:	d103      	bne.n	8001ce8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ce6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e079      	b.n	8001de0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cf4:	d108      	bne.n	8001d08 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001cf6:	897b      	ldrh	r3, [r7, #10]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	611a      	str	r2, [r3, #16]
 8001d06:	e05f      	b.n	8001dc8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d08:	897b      	ldrh	r3, [r7, #10]
 8001d0a:	11db      	asrs	r3, r3, #7
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f003 0306 	and.w	r3, r3, #6
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f063 030f 	orn	r3, r3, #15
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	4930      	ldr	r1, [pc, #192]	; (8001de8 <I2C_MasterRequestRead+0x194>)
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f8b9 	bl	8001e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e054      	b.n	8001de0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d36:	897b      	ldrh	r3, [r7, #10]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4929      	ldr	r1, [pc, #164]	; (8001dec <I2C_MasterRequestRead+0x198>)
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f8a9 	bl	8001e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e044      	b.n	8001de0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 f831 	bl	8001df0 <I2C_WaitOnFlagUntilTimeout>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00d      	beq.n	8001db0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da2:	d103      	bne.n	8001dac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e017      	b.n	8001de0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001db0:	897b      	ldrh	r3, [r7, #10]
 8001db2:	11db      	asrs	r3, r3, #7
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f003 0306 	and.w	r3, r3, #6
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f063 030e 	orn	r3, r3, #14
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4907      	ldr	r1, [pc, #28]	; (8001dec <I2C_MasterRequestRead+0x198>)
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f865 	bl	8001e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	00010008 	.word	0x00010008
 8001dec:	00010002 	.word	0x00010002

08001df0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e00:	e025      	b.n	8001e4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d021      	beq.n	8001e4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e0a:	f7fe ff75 	bl	8000cf8 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d302      	bcc.n	8001e20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d116      	bne.n	8001e4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f043 0220 	orr.w	r2, r3, #32
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e023      	b.n	8001e96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	0c1b      	lsrs	r3, r3, #16
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d10d      	bne.n	8001e74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4013      	ands	r3, r2
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	bf0c      	ite	eq
 8001e6a:	2301      	moveq	r3, #1
 8001e6c:	2300      	movne	r3, #0
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	e00c      	b.n	8001e8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	bf0c      	ite	eq
 8001e86:	2301      	moveq	r3, #1
 8001e88:	2300      	movne	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d0b6      	beq.n	8001e02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001eac:	e051      	b.n	8001f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ebc:	d123      	bne.n	8001f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ecc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ed6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f043 0204 	orr.w	r2, r3, #4
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e046      	b.n	8001f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0c:	d021      	beq.n	8001f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0e:	f7fe fef3 	bl	8000cf8 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d302      	bcc.n	8001f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d116      	bne.n	8001f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f043 0220 	orr.w	r2, r3, #32
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e020      	b.n	8001f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	0c1b      	lsrs	r3, r3, #16
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d10c      	bne.n	8001f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4013      	ands	r3, r2
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	bf14      	ite	ne
 8001f6e:	2301      	movne	r3, #1
 8001f70:	2300      	moveq	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	e00b      	b.n	8001f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	43da      	mvns	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	4013      	ands	r3, r2
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf14      	ite	ne
 8001f88:	2301      	movne	r3, #1
 8001f8a:	2300      	moveq	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d18d      	bne.n	8001eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fa8:	e02d      	b.n	8002006 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f8ce 	bl	800214c <I2C_IsAcknowledgeFailed>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e02d      	b.n	8002016 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d021      	beq.n	8002006 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc2:	f7fe fe99 	bl	8000cf8 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d302      	bcc.n	8001fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d116      	bne.n	8002006 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f043 0220 	orr.w	r2, r3, #32
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e007      	b.n	8002016 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002010:	2b80      	cmp	r3, #128	; 0x80
 8002012:	d1ca      	bne.n	8001faa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800202a:	e02d      	b.n	8002088 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 f88d 	bl	800214c <I2C_IsAcknowledgeFailed>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e02d      	b.n	8002098 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002042:	d021      	beq.n	8002088 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002044:	f7fe fe58 	bl	8000cf8 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	429a      	cmp	r2, r3
 8002052:	d302      	bcc.n	800205a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d116      	bne.n	8002088 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f043 0220 	orr.w	r2, r3, #32
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e007      	b.n	8002098 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b04      	cmp	r3, #4
 8002094:	d1ca      	bne.n	800202c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020ac:	e042      	b.n	8002134 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	2b10      	cmp	r3, #16
 80020ba:	d119      	bne.n	80020f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0210 	mvn.w	r2, #16
 80020c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2220      	movs	r2, #32
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e029      	b.n	8002144 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f0:	f7fe fe02 	bl	8000cf8 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d302      	bcc.n	8002106 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d116      	bne.n	8002134 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	f043 0220 	orr.w	r2, r3, #32
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e007      	b.n	8002144 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213e:	2b40      	cmp	r3, #64	; 0x40
 8002140:	d1b5      	bne.n	80020ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002162:	d11b      	bne.n	800219c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800216c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f043 0204 	orr.w	r2, r3, #4
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0cc      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021c0:	4b68      	ldr	r3, [pc, #416]	; (8002364 <HAL_RCC_ClockConfig+0x1b8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d90c      	bls.n	80021e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b65      	ldr	r3, [pc, #404]	; (8002364 <HAL_RCC_ClockConfig+0x1b8>)
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	4b63      	ldr	r3, [pc, #396]	; (8002364 <HAL_RCC_ClockConfig+0x1b8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0b8      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d020      	beq.n	8002236 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002200:	4b59      	ldr	r3, [pc, #356]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4a58      	ldr	r2, [pc, #352]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800220a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002218:	4b53      	ldr	r3, [pc, #332]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4a52      	ldr	r2, [pc, #328]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002222:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002224:	4b50      	ldr	r3, [pc, #320]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	494d      	ldr	r1, [pc, #308]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d044      	beq.n	80022cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d119      	bne.n	800228a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e07f      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d003      	beq.n	800226a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002266:	2b03      	cmp	r3, #3
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226a:	4b3f      	ldr	r3, [pc, #252]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e06f      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227a:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e067      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800228a:	4b37      	ldr	r3, [pc, #220]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f023 0203 	bic.w	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4934      	ldr	r1, [pc, #208]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	4313      	orrs	r3, r2
 800229a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800229c:	f7fe fd2c 	bl	8000cf8 <HAL_GetTick>
 80022a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	e00a      	b.n	80022ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a4:	f7fe fd28 	bl	8000cf8 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e04f      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ba:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 020c 	and.w	r2, r3, #12
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d1eb      	bne.n	80022a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022cc:	4b25      	ldr	r3, [pc, #148]	; (8002364 <HAL_RCC_ClockConfig+0x1b8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d20c      	bcs.n	80022f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b22      	ldr	r3, [pc, #136]	; (8002364 <HAL_RCC_ClockConfig+0x1b8>)
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <HAL_RCC_ClockConfig+0x1b8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e032      	b.n	800235a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4916      	ldr	r1, [pc, #88]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	490e      	ldr	r1, [pc, #56]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002332:	f000 f855 	bl	80023e0 <HAL_RCC_GetSysClockFreq>
 8002336:	4602      	mov	r2, r0
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	490a      	ldr	r1, [pc, #40]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	5ccb      	ldrb	r3, [r1, r3]
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	4a09      	ldr	r2, [pc, #36]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_RCC_ClockConfig+0x1c8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fc8c 	bl	8000c70 <HAL_InitTick>

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40023c00 	.word	0x40023c00
 8002368:	40023800 	.word	0x40023800
 800236c:	080047cc 	.word	0x080047cc
 8002370:	20000000 	.word	0x20000000
 8002374:	20000004 	.word	0x20000004

08002378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <HAL_RCC_GetHCLKFreq+0x14>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000000 	.word	0x20000000

08002390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002394:	f7ff fff0 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 8002398:	4602      	mov	r2, r0
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	0a9b      	lsrs	r3, r3, #10
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4903      	ldr	r1, [pc, #12]	; (80023b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a6:	5ccb      	ldrb	r3, [r1, r3]
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40023800 	.word	0x40023800
 80023b4:	080047dc 	.word	0x080047dc

080023b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023bc:	f7ff ffdc 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 80023c0:	4602      	mov	r2, r0
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	0b5b      	lsrs	r3, r3, #13
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	4903      	ldr	r1, [pc, #12]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ce:	5ccb      	ldrb	r3, [r1, r3]
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40023800 	.word	0x40023800
 80023dc:	080047dc 	.word	0x080047dc

080023e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e4:	b0ae      	sub	sp, #184	; 0xb8
 80023e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002406:	4bcb      	ldr	r3, [pc, #812]	; (8002734 <HAL_RCC_GetSysClockFreq+0x354>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b0c      	cmp	r3, #12
 8002410:	f200 8206 	bhi.w	8002820 <HAL_RCC_GetSysClockFreq+0x440>
 8002414:	a201      	add	r2, pc, #4	; (adr r2, 800241c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241a:	bf00      	nop
 800241c:	08002451 	.word	0x08002451
 8002420:	08002821 	.word	0x08002821
 8002424:	08002821 	.word	0x08002821
 8002428:	08002821 	.word	0x08002821
 800242c:	08002459 	.word	0x08002459
 8002430:	08002821 	.word	0x08002821
 8002434:	08002821 	.word	0x08002821
 8002438:	08002821 	.word	0x08002821
 800243c:	08002461 	.word	0x08002461
 8002440:	08002821 	.word	0x08002821
 8002444:	08002821 	.word	0x08002821
 8002448:	08002821 	.word	0x08002821
 800244c:	08002651 	.word	0x08002651
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002450:	4bb9      	ldr	r3, [pc, #740]	; (8002738 <HAL_RCC_GetSysClockFreq+0x358>)
 8002452:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002456:	e1e7      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002458:	4bb8      	ldr	r3, [pc, #736]	; (800273c <HAL_RCC_GetSysClockFreq+0x35c>)
 800245a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800245e:	e1e3      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002460:	4bb4      	ldr	r3, [pc, #720]	; (8002734 <HAL_RCC_GetSysClockFreq+0x354>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800246c:	4bb1      	ldr	r3, [pc, #708]	; (8002734 <HAL_RCC_GetSysClockFreq+0x354>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d071      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002478:	4bae      	ldr	r3, [pc, #696]	; (8002734 <HAL_RCC_GetSysClockFreq+0x354>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	099b      	lsrs	r3, r3, #6
 800247e:	2200      	movs	r2, #0
 8002480:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002484:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800248c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002490:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800249a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800249e:	4622      	mov	r2, r4
 80024a0:	462b      	mov	r3, r5
 80024a2:	f04f 0000 	mov.w	r0, #0
 80024a6:	f04f 0100 	mov.w	r1, #0
 80024aa:	0159      	lsls	r1, r3, #5
 80024ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024b0:	0150      	lsls	r0, r2, #5
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4621      	mov	r1, r4
 80024b8:	1a51      	subs	r1, r2, r1
 80024ba:	6439      	str	r1, [r7, #64]	; 0x40
 80024bc:	4629      	mov	r1, r5
 80024be:	eb63 0301 	sbc.w	r3, r3, r1
 80024c2:	647b      	str	r3, [r7, #68]	; 0x44
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80024d0:	4649      	mov	r1, r9
 80024d2:	018b      	lsls	r3, r1, #6
 80024d4:	4641      	mov	r1, r8
 80024d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024da:	4641      	mov	r1, r8
 80024dc:	018a      	lsls	r2, r1, #6
 80024de:	4641      	mov	r1, r8
 80024e0:	1a51      	subs	r1, r2, r1
 80024e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80024e4:	4649      	mov	r1, r9
 80024e6:	eb63 0301 	sbc.w	r3, r3, r1
 80024ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80024f8:	4649      	mov	r1, r9
 80024fa:	00cb      	lsls	r3, r1, #3
 80024fc:	4641      	mov	r1, r8
 80024fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002502:	4641      	mov	r1, r8
 8002504:	00ca      	lsls	r2, r1, #3
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	4603      	mov	r3, r0
 800250c:	4622      	mov	r2, r4
 800250e:	189b      	adds	r3, r3, r2
 8002510:	633b      	str	r3, [r7, #48]	; 0x30
 8002512:	462b      	mov	r3, r5
 8002514:	460a      	mov	r2, r1
 8002516:	eb42 0303 	adc.w	r3, r2, r3
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002528:	4629      	mov	r1, r5
 800252a:	024b      	lsls	r3, r1, #9
 800252c:	4621      	mov	r1, r4
 800252e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002532:	4621      	mov	r1, r4
 8002534:	024a      	lsls	r2, r1, #9
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800253e:	2200      	movs	r2, #0
 8002540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002544:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002548:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800254c:	f7fd feb0 	bl	80002b0 <__aeabi_uldivmod>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4613      	mov	r3, r2
 8002556:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800255a:	e067      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255c:	4b75      	ldr	r3, [pc, #468]	; (8002734 <HAL_RCC_GetSysClockFreq+0x354>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	099b      	lsrs	r3, r3, #6
 8002562:	2200      	movs	r2, #0
 8002564:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002568:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800256c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002574:	67bb      	str	r3, [r7, #120]	; 0x78
 8002576:	2300      	movs	r3, #0
 8002578:	67fb      	str	r3, [r7, #124]	; 0x7c
 800257a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800257e:	4622      	mov	r2, r4
 8002580:	462b      	mov	r3, r5
 8002582:	f04f 0000 	mov.w	r0, #0
 8002586:	f04f 0100 	mov.w	r1, #0
 800258a:	0159      	lsls	r1, r3, #5
 800258c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002590:	0150      	lsls	r0, r2, #5
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4621      	mov	r1, r4
 8002598:	1a51      	subs	r1, r2, r1
 800259a:	62b9      	str	r1, [r7, #40]	; 0x28
 800259c:	4629      	mov	r1, r5
 800259e:	eb63 0301 	sbc.w	r3, r3, r1
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80025b0:	4649      	mov	r1, r9
 80025b2:	018b      	lsls	r3, r1, #6
 80025b4:	4641      	mov	r1, r8
 80025b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ba:	4641      	mov	r1, r8
 80025bc:	018a      	lsls	r2, r1, #6
 80025be:	4641      	mov	r1, r8
 80025c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80025c4:	4649      	mov	r1, r9
 80025c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025de:	4692      	mov	sl, r2
 80025e0:	469b      	mov	fp, r3
 80025e2:	4623      	mov	r3, r4
 80025e4:	eb1a 0303 	adds.w	r3, sl, r3
 80025e8:	623b      	str	r3, [r7, #32]
 80025ea:	462b      	mov	r3, r5
 80025ec:	eb4b 0303 	adc.w	r3, fp, r3
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80025fe:	4629      	mov	r1, r5
 8002600:	028b      	lsls	r3, r1, #10
 8002602:	4621      	mov	r1, r4
 8002604:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002608:	4621      	mov	r1, r4
 800260a:	028a      	lsls	r2, r1, #10
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002614:	2200      	movs	r2, #0
 8002616:	673b      	str	r3, [r7, #112]	; 0x70
 8002618:	677a      	str	r2, [r7, #116]	; 0x74
 800261a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800261e:	f7fd fe47 	bl	80002b0 <__aeabi_uldivmod>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4613      	mov	r3, r2
 8002628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800262c:	4b41      	ldr	r3, [pc, #260]	; (8002734 <HAL_RCC_GetSysClockFreq+0x354>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	0c1b      	lsrs	r3, r3, #16
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	3301      	adds	r3, #1
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800263e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002646:	fbb2 f3f3 	udiv	r3, r2, r3
 800264a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800264e:	e0eb      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002650:	4b38      	ldr	r3, [pc, #224]	; (8002734 <HAL_RCC_GetSysClockFreq+0x354>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800265c:	4b35      	ldr	r3, [pc, #212]	; (8002734 <HAL_RCC_GetSysClockFreq+0x354>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d06b      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002668:	4b32      	ldr	r3, [pc, #200]	; (8002734 <HAL_RCC_GetSysClockFreq+0x354>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	099b      	lsrs	r3, r3, #6
 800266e:	2200      	movs	r2, #0
 8002670:	66bb      	str	r3, [r7, #104]	; 0x68
 8002672:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002674:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800267a:	663b      	str	r3, [r7, #96]	; 0x60
 800267c:	2300      	movs	r3, #0
 800267e:	667b      	str	r3, [r7, #100]	; 0x64
 8002680:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002684:	4622      	mov	r2, r4
 8002686:	462b      	mov	r3, r5
 8002688:	f04f 0000 	mov.w	r0, #0
 800268c:	f04f 0100 	mov.w	r1, #0
 8002690:	0159      	lsls	r1, r3, #5
 8002692:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002696:	0150      	lsls	r0, r2, #5
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4621      	mov	r1, r4
 800269e:	1a51      	subs	r1, r2, r1
 80026a0:	61b9      	str	r1, [r7, #24]
 80026a2:	4629      	mov	r1, r5
 80026a4:	eb63 0301 	sbc.w	r3, r3, r1
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026b6:	4659      	mov	r1, fp
 80026b8:	018b      	lsls	r3, r1, #6
 80026ba:	4651      	mov	r1, sl
 80026bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026c0:	4651      	mov	r1, sl
 80026c2:	018a      	lsls	r2, r1, #6
 80026c4:	4651      	mov	r1, sl
 80026c6:	ebb2 0801 	subs.w	r8, r2, r1
 80026ca:	4659      	mov	r1, fp
 80026cc:	eb63 0901 	sbc.w	r9, r3, r1
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026e4:	4690      	mov	r8, r2
 80026e6:	4699      	mov	r9, r3
 80026e8:	4623      	mov	r3, r4
 80026ea:	eb18 0303 	adds.w	r3, r8, r3
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	462b      	mov	r3, r5
 80026f2:	eb49 0303 	adc.w	r3, r9, r3
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002704:	4629      	mov	r1, r5
 8002706:	024b      	lsls	r3, r1, #9
 8002708:	4621      	mov	r1, r4
 800270a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800270e:	4621      	mov	r1, r4
 8002710:	024a      	lsls	r2, r1, #9
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800271a:	2200      	movs	r2, #0
 800271c:	65bb      	str	r3, [r7, #88]	; 0x58
 800271e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002720:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002724:	f7fd fdc4 	bl	80002b0 <__aeabi_uldivmod>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4613      	mov	r3, r2
 800272e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002732:	e065      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x420>
 8002734:	40023800 	.word	0x40023800
 8002738:	00f42400 	.word	0x00f42400
 800273c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002740:	4b3d      	ldr	r3, [pc, #244]	; (8002838 <HAL_RCC_GetSysClockFreq+0x458>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	099b      	lsrs	r3, r3, #6
 8002746:	2200      	movs	r2, #0
 8002748:	4618      	mov	r0, r3
 800274a:	4611      	mov	r1, r2
 800274c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002750:	653b      	str	r3, [r7, #80]	; 0x50
 8002752:	2300      	movs	r3, #0
 8002754:	657b      	str	r3, [r7, #84]	; 0x54
 8002756:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800275a:	4642      	mov	r2, r8
 800275c:	464b      	mov	r3, r9
 800275e:	f04f 0000 	mov.w	r0, #0
 8002762:	f04f 0100 	mov.w	r1, #0
 8002766:	0159      	lsls	r1, r3, #5
 8002768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800276c:	0150      	lsls	r0, r2, #5
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4641      	mov	r1, r8
 8002774:	1a51      	subs	r1, r2, r1
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	4649      	mov	r1, r9
 800277a:	eb63 0301 	sbc.w	r3, r3, r1
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800278c:	4659      	mov	r1, fp
 800278e:	018b      	lsls	r3, r1, #6
 8002790:	4651      	mov	r1, sl
 8002792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002796:	4651      	mov	r1, sl
 8002798:	018a      	lsls	r2, r1, #6
 800279a:	4651      	mov	r1, sl
 800279c:	1a54      	subs	r4, r2, r1
 800279e:	4659      	mov	r1, fp
 80027a0:	eb63 0501 	sbc.w	r5, r3, r1
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	00eb      	lsls	r3, r5, #3
 80027ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027b2:	00e2      	lsls	r2, r4, #3
 80027b4:	4614      	mov	r4, r2
 80027b6:	461d      	mov	r5, r3
 80027b8:	4643      	mov	r3, r8
 80027ba:	18e3      	adds	r3, r4, r3
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	464b      	mov	r3, r9
 80027c0:	eb45 0303 	adc.w	r3, r5, r3
 80027c4:	607b      	str	r3, [r7, #4]
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027d2:	4629      	mov	r1, r5
 80027d4:	028b      	lsls	r3, r1, #10
 80027d6:	4621      	mov	r1, r4
 80027d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027dc:	4621      	mov	r1, r4
 80027de:	028a      	lsls	r2, r1, #10
 80027e0:	4610      	mov	r0, r2
 80027e2:	4619      	mov	r1, r3
 80027e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027e8:	2200      	movs	r2, #0
 80027ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80027ec:	64fa      	str	r2, [r7, #76]	; 0x4c
 80027ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027f2:	f7fd fd5d 	bl	80002b0 <__aeabi_uldivmod>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4613      	mov	r3, r2
 80027fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002800:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <HAL_RCC_GetSysClockFreq+0x458>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	0f1b      	lsrs	r3, r3, #28
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800280e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002812:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002816:	fbb2 f3f3 	udiv	r3, r2, r3
 800281a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800281e:	e003      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002822:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002826:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002828:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800282c:	4618      	mov	r0, r3
 800282e:	37b8      	adds	r7, #184	; 0xb8
 8002830:	46bd      	mov	sp, r7
 8002832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800
 800283c:	00f42400 	.word	0x00f42400

08002840 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e28d      	b.n	8002d6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8083 	beq.w	8002966 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002860:	4b94      	ldr	r3, [pc, #592]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 030c 	and.w	r3, r3, #12
 8002868:	2b04      	cmp	r3, #4
 800286a:	d019      	beq.n	80028a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800286c:	4b91      	ldr	r3, [pc, #580]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002874:	2b08      	cmp	r3, #8
 8002876:	d106      	bne.n	8002886 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002878:	4b8e      	ldr	r3, [pc, #568]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002884:	d00c      	beq.n	80028a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002886:	4b8b      	ldr	r3, [pc, #556]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800288e:	2b0c      	cmp	r3, #12
 8002890:	d112      	bne.n	80028b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002892:	4b88      	ldr	r3, [pc, #544]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800289e:	d10b      	bne.n	80028b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a0:	4b84      	ldr	r3, [pc, #528]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d05b      	beq.n	8002964 <HAL_RCC_OscConfig+0x124>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d157      	bne.n	8002964 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e25a      	b.n	8002d6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c0:	d106      	bne.n	80028d0 <HAL_RCC_OscConfig+0x90>
 80028c2:	4b7c      	ldr	r3, [pc, #496]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a7b      	ldr	r2, [pc, #492]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80028c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e01d      	b.n	800290c <HAL_RCC_OscConfig+0xcc>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0xb4>
 80028da:	4b76      	ldr	r3, [pc, #472]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a75      	ldr	r2, [pc, #468]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80028e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b73      	ldr	r3, [pc, #460]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a72      	ldr	r2, [pc, #456]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e00b      	b.n	800290c <HAL_RCC_OscConfig+0xcc>
 80028f4:	4b6f      	ldr	r3, [pc, #444]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a6e      	ldr	r2, [pc, #440]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80028fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b6c      	ldr	r3, [pc, #432]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a6b      	ldr	r2, [pc, #428]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d013      	beq.n	800293c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe f9f0 	bl	8000cf8 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800291c:	f7fe f9ec 	bl	8000cf8 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	; 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e21f      	b.n	8002d6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292e:	4b61      	ldr	r3, [pc, #388]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0xdc>
 800293a:	e014      	b.n	8002966 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe f9dc 	bl	8000cf8 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002944:	f7fe f9d8 	bl	8000cf8 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	; 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e20b      	b.n	8002d6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002956:	4b57      	ldr	r3, [pc, #348]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x104>
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d06f      	beq.n	8002a52 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002972:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b00      	cmp	r3, #0
 800297c:	d017      	beq.n	80029ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800297e:	4b4d      	ldr	r3, [pc, #308]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002986:	2b08      	cmp	r3, #8
 8002988:	d105      	bne.n	8002996 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800298a:	4b4a      	ldr	r3, [pc, #296]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002996:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800299e:	2b0c      	cmp	r3, #12
 80029a0:	d11c      	bne.n	80029dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a2:	4b44      	ldr	r3, [pc, #272]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d116      	bne.n	80029dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_RCC_OscConfig+0x186>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e1d3      	b.n	8002d6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4937      	ldr	r1, [pc, #220]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	e03a      	b.n	8002a52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d020      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e4:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <HAL_RCC_OscConfig+0x278>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7fe f985 	bl	8000cf8 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f2:	f7fe f981 	bl	8000cf8 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1b4      	b.n	8002d6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4925      	ldr	r1, [pc, #148]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]
 8002a24:	e015      	b.n	8002a52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <HAL_RCC_OscConfig+0x278>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe f964 	bl	8000cf8 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a34:	f7fe f960 	bl	8000cf8 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e193      	b.n	8002d6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d036      	beq.n	8002acc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d016      	beq.n	8002a94 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a66:	4b15      	ldr	r3, [pc, #84]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7fe f944 	bl	8000cf8 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a74:	f7fe f940 	bl	8000cf8 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e173      	b.n	8002d6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x234>
 8002a92:	e01b      	b.n	8002acc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9a:	f7fe f92d 	bl	8000cf8 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	e00e      	b.n	8002ac0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa2:	f7fe f929 	bl	8000cf8 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d907      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e15c      	b.n	8002d6e <HAL_RCC_OscConfig+0x52e>
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	42470000 	.word	0x42470000
 8002abc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac0:	4b8a      	ldr	r3, [pc, #552]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1ea      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8097 	beq.w	8002c08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ada:	2300      	movs	r3, #0
 8002adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ade:	4b83      	ldr	r3, [pc, #524]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10f      	bne.n	8002b0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	4b7f      	ldr	r3, [pc, #508]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	4a7e      	ldr	r2, [pc, #504]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af8:	6413      	str	r3, [r2, #64]	; 0x40
 8002afa:	4b7c      	ldr	r3, [pc, #496]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b06:	2301      	movs	r3, #1
 8002b08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0a:	4b79      	ldr	r3, [pc, #484]	; (8002cf0 <HAL_RCC_OscConfig+0x4b0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d118      	bne.n	8002b48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b16:	4b76      	ldr	r3, [pc, #472]	; (8002cf0 <HAL_RCC_OscConfig+0x4b0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a75      	ldr	r2, [pc, #468]	; (8002cf0 <HAL_RCC_OscConfig+0x4b0>)
 8002b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b22:	f7fe f8e9 	bl	8000cf8 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2a:	f7fe f8e5 	bl	8000cf8 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e118      	b.n	8002d6e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	4b6c      	ldr	r3, [pc, #432]	; (8002cf0 <HAL_RCC_OscConfig+0x4b0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCC_OscConfig+0x31e>
 8002b50:	4b66      	ldr	r3, [pc, #408]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	4a65      	ldr	r2, [pc, #404]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5c:	e01c      	b.n	8002b98 <HAL_RCC_OscConfig+0x358>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b05      	cmp	r3, #5
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x340>
 8002b66:	4b61      	ldr	r3, [pc, #388]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a60      	ldr	r2, [pc, #384]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
 8002b72:	4b5e      	ldr	r3, [pc, #376]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	4a5d      	ldr	r2, [pc, #372]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7e:	e00b      	b.n	8002b98 <HAL_RCC_OscConfig+0x358>
 8002b80:	4b5a      	ldr	r3, [pc, #360]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b84:	4a59      	ldr	r2, [pc, #356]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8c:	4b57      	ldr	r3, [pc, #348]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b90:	4a56      	ldr	r2, [pc, #344]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002b92:	f023 0304 	bic.w	r3, r3, #4
 8002b96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fe f8aa 	bl	8000cf8 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fe f8a6 	bl	8000cf8 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0d7      	b.n	8002d6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbe:	4b4b      	ldr	r3, [pc, #300]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0ee      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x368>
 8002bca:	e014      	b.n	8002bf6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bcc:	f7fe f894 	bl	8000cf8 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd4:	f7fe f890 	bl	8000cf8 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e0c1      	b.n	8002d6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bea:	4b40      	ldr	r3, [pc, #256]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1ee      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d105      	bne.n	8002c08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfc:	4b3b      	ldr	r3, [pc, #236]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	4a3a      	ldr	r2, [pc, #232]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80ad 	beq.w	8002d6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c12:	4b36      	ldr	r3, [pc, #216]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d060      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d145      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c26:	4b33      	ldr	r3, [pc, #204]	; (8002cf4 <HAL_RCC_OscConfig+0x4b4>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe f864 	bl	8000cf8 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe f860 	bl	8000cf8 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e093      	b.n	8002d6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	4b29      	ldr	r3, [pc, #164]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69da      	ldr	r2, [r3, #28]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	019b      	lsls	r3, r3, #6
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	071b      	lsls	r3, r3, #28
 8002c7e:	491b      	ldr	r1, [pc, #108]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c84:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <HAL_RCC_OscConfig+0x4b4>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8a:	f7fe f835 	bl	8000cf8 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c92:	f7fe f831 	bl	8000cf8 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e064      	b.n	8002d6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x452>
 8002cb0:	e05c      	b.n	8002d6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb2:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <HAL_RCC_OscConfig+0x4b4>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe f81e 	bl	8000cf8 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fe f81a 	bl	8000cf8 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e04d      	b.n	8002d6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_RCC_OscConfig+0x4ac>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x480>
 8002cde:	e045      	b.n	8002d6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e040      	b.n	8002d6e <HAL_RCC_OscConfig+0x52e>
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40007000 	.word	0x40007000
 8002cf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf8:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <HAL_RCC_OscConfig+0x538>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d030      	beq.n	8002d68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d129      	bne.n	8002d68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d122      	bne.n	8002d68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d28:	4013      	ands	r3, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d119      	bne.n	8002d68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	3b01      	subs	r3, #1
 8002d42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d10f      	bne.n	8002d68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d107      	bne.n	8002d68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800

08002d7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e03f      	b.n	8002e0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fd fe0c 	bl	80009c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2224      	movs	r2, #36	; 0x24
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f929 	bl	8003018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002de4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002df4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b08a      	sub	sp, #40	; 0x28
 8002e1a:	af02      	add	r7, sp, #8
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	4613      	mov	r3, r2
 8002e24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	d17c      	bne.n	8002f30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_UART_Transmit+0x2c>
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e075      	b.n	8002f32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_UART_Transmit+0x3e>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e06e      	b.n	8002f32 <HAL_UART_Transmit+0x11c>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2221      	movs	r2, #33	; 0x21
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e6a:	f7fd ff45 	bl	8000cf8 <HAL_GetTick>
 8002e6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	88fa      	ldrh	r2, [r7, #6]
 8002e74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	88fa      	ldrh	r2, [r7, #6]
 8002e7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e84:	d108      	bne.n	8002e98 <HAL_UART_Transmit+0x82>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d104      	bne.n	8002e98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	e003      	b.n	8002ea0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ea8:	e02a      	b.n	8002f00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2180      	movs	r1, #128	; 0x80
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f840 	bl	8002f3a <UART_WaitOnFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e036      	b.n	8002f32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10b      	bne.n	8002ee2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ed8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	3302      	adds	r3, #2
 8002ede:	61bb      	str	r3, [r7, #24]
 8002ee0:	e007      	b.n	8002ef2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	781a      	ldrb	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1cf      	bne.n	8002eaa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f810 	bl	8002f3a <UART_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e006      	b.n	8002f32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e000      	b.n	8002f32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f30:	2302      	movs	r3, #2
  }
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3720      	adds	r7, #32
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b090      	sub	sp, #64	; 0x40
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	603b      	str	r3, [r7, #0]
 8002f46:	4613      	mov	r3, r2
 8002f48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f4a:	e050      	b.n	8002fee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f52:	d04c      	beq.n	8002fee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <UART_WaitOnFlagUntilTimeout+0x30>
 8002f5a:	f7fd fecd 	bl	8000cf8 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d241      	bcs.n	8002fee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	330c      	adds	r3, #12
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f74:	e853 3f00 	ldrex	r3, [r3]
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	330c      	adds	r3, #12
 8002f88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f8a:	637a      	str	r2, [r7, #52]	; 0x34
 8002f8c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f92:	e841 2300 	strex	r3, r2, [r1]
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1e5      	bne.n	8002f6a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3314      	adds	r3, #20
 8002fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	e853 3f00 	ldrex	r3, [r3]
 8002fac:	613b      	str	r3, [r7, #16]
   return(result);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3314      	adds	r3, #20
 8002fbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fbe:	623a      	str	r2, [r7, #32]
 8002fc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	69f9      	ldr	r1, [r7, #28]
 8002fc4:	6a3a      	ldr	r2, [r7, #32]
 8002fc6:	e841 2300 	strex	r3, r2, [r1]
 8002fca:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e5      	bne.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e00f      	b.n	800300e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	bf0c      	ite	eq
 8002ffe:	2301      	moveq	r3, #1
 8003000:	2300      	movne	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	429a      	cmp	r2, r3
 800300a:	d09f      	beq.n	8002f4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3740      	adds	r7, #64	; 0x40
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800301c:	b0c0      	sub	sp, #256	; 0x100
 800301e:	af00      	add	r7, sp, #0
 8003020:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003034:	68d9      	ldr	r1, [r3, #12]
 8003036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	ea40 0301 	orr.w	r3, r0, r1
 8003040:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	431a      	orrs	r2, r3
 8003050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	431a      	orrs	r2, r3
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003070:	f021 010c 	bic.w	r1, r1, #12
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800307e:	430b      	orrs	r3, r1
 8003080:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800308e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003092:	6999      	ldr	r1, [r3, #24]
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	ea40 0301 	orr.w	r3, r0, r1
 800309e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4b8f      	ldr	r3, [pc, #572]	; (80032e4 <UART_SetConfig+0x2cc>)
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d005      	beq.n	80030b8 <UART_SetConfig+0xa0>
 80030ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4b8d      	ldr	r3, [pc, #564]	; (80032e8 <UART_SetConfig+0x2d0>)
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d104      	bne.n	80030c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030b8:	f7ff f97e 	bl	80023b8 <HAL_RCC_GetPCLK2Freq>
 80030bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030c0:	e003      	b.n	80030ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030c2:	f7ff f965 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 80030c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d4:	f040 810c 	bne.w	80032f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030dc:	2200      	movs	r2, #0
 80030de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030ea:	4622      	mov	r2, r4
 80030ec:	462b      	mov	r3, r5
 80030ee:	1891      	adds	r1, r2, r2
 80030f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80030f2:	415b      	adcs	r3, r3
 80030f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030fa:	4621      	mov	r1, r4
 80030fc:	eb12 0801 	adds.w	r8, r2, r1
 8003100:	4629      	mov	r1, r5
 8003102:	eb43 0901 	adc.w	r9, r3, r1
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800311a:	4690      	mov	r8, r2
 800311c:	4699      	mov	r9, r3
 800311e:	4623      	mov	r3, r4
 8003120:	eb18 0303 	adds.w	r3, r8, r3
 8003124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003128:	462b      	mov	r3, r5
 800312a:	eb49 0303 	adc.w	r3, r9, r3
 800312e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800313e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003142:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003146:	460b      	mov	r3, r1
 8003148:	18db      	adds	r3, r3, r3
 800314a:	653b      	str	r3, [r7, #80]	; 0x50
 800314c:	4613      	mov	r3, r2
 800314e:	eb42 0303 	adc.w	r3, r2, r3
 8003152:	657b      	str	r3, [r7, #84]	; 0x54
 8003154:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003158:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800315c:	f7fd f8a8 	bl	80002b0 <__aeabi_uldivmod>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4b61      	ldr	r3, [pc, #388]	; (80032ec <UART_SetConfig+0x2d4>)
 8003166:	fba3 2302 	umull	r2, r3, r3, r2
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	011c      	lsls	r4, r3, #4
 800316e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003172:	2200      	movs	r2, #0
 8003174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003178:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800317c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003180:	4642      	mov	r2, r8
 8003182:	464b      	mov	r3, r9
 8003184:	1891      	adds	r1, r2, r2
 8003186:	64b9      	str	r1, [r7, #72]	; 0x48
 8003188:	415b      	adcs	r3, r3
 800318a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800318c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003190:	4641      	mov	r1, r8
 8003192:	eb12 0a01 	adds.w	sl, r2, r1
 8003196:	4649      	mov	r1, r9
 8003198:	eb43 0b01 	adc.w	fp, r3, r1
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031b0:	4692      	mov	sl, r2
 80031b2:	469b      	mov	fp, r3
 80031b4:	4643      	mov	r3, r8
 80031b6:	eb1a 0303 	adds.w	r3, sl, r3
 80031ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031be:	464b      	mov	r3, r9
 80031c0:	eb4b 0303 	adc.w	r3, fp, r3
 80031c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031dc:	460b      	mov	r3, r1
 80031de:	18db      	adds	r3, r3, r3
 80031e0:	643b      	str	r3, [r7, #64]	; 0x40
 80031e2:	4613      	mov	r3, r2
 80031e4:	eb42 0303 	adc.w	r3, r2, r3
 80031e8:	647b      	str	r3, [r7, #68]	; 0x44
 80031ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031f2:	f7fd f85d 	bl	80002b0 <__aeabi_uldivmod>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4611      	mov	r1, r2
 80031fc:	4b3b      	ldr	r3, [pc, #236]	; (80032ec <UART_SetConfig+0x2d4>)
 80031fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	2264      	movs	r2, #100	; 0x64
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	1acb      	subs	r3, r1, r3
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003212:	4b36      	ldr	r3, [pc, #216]	; (80032ec <UART_SetConfig+0x2d4>)
 8003214:	fba3 2302 	umull	r2, r3, r3, r2
 8003218:	095b      	lsrs	r3, r3, #5
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003220:	441c      	add	r4, r3
 8003222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003226:	2200      	movs	r2, #0
 8003228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800322c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003230:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003234:	4642      	mov	r2, r8
 8003236:	464b      	mov	r3, r9
 8003238:	1891      	adds	r1, r2, r2
 800323a:	63b9      	str	r1, [r7, #56]	; 0x38
 800323c:	415b      	adcs	r3, r3
 800323e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003244:	4641      	mov	r1, r8
 8003246:	1851      	adds	r1, r2, r1
 8003248:	6339      	str	r1, [r7, #48]	; 0x30
 800324a:	4649      	mov	r1, r9
 800324c:	414b      	adcs	r3, r1
 800324e:	637b      	str	r3, [r7, #52]	; 0x34
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800325c:	4659      	mov	r1, fp
 800325e:	00cb      	lsls	r3, r1, #3
 8003260:	4651      	mov	r1, sl
 8003262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003266:	4651      	mov	r1, sl
 8003268:	00ca      	lsls	r2, r1, #3
 800326a:	4610      	mov	r0, r2
 800326c:	4619      	mov	r1, r3
 800326e:	4603      	mov	r3, r0
 8003270:	4642      	mov	r2, r8
 8003272:	189b      	adds	r3, r3, r2
 8003274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003278:	464b      	mov	r3, r9
 800327a:	460a      	mov	r2, r1
 800327c:	eb42 0303 	adc.w	r3, r2, r3
 8003280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003290:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003294:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003298:	460b      	mov	r3, r1
 800329a:	18db      	adds	r3, r3, r3
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
 800329e:	4613      	mov	r3, r2
 80032a0:	eb42 0303 	adc.w	r3, r2, r3
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032ae:	f7fc ffff 	bl	80002b0 <__aeabi_uldivmod>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <UART_SetConfig+0x2d4>)
 80032b8:	fba3 1302 	umull	r1, r3, r3, r2
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	2164      	movs	r1, #100	; 0x64
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	3332      	adds	r3, #50	; 0x32
 80032ca:	4a08      	ldr	r2, [pc, #32]	; (80032ec <UART_SetConfig+0x2d4>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	f003 0207 	and.w	r2, r3, #7
 80032d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4422      	add	r2, r4
 80032de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032e0:	e106      	b.n	80034f0 <UART_SetConfig+0x4d8>
 80032e2:	bf00      	nop
 80032e4:	40011000 	.word	0x40011000
 80032e8:	40011400 	.word	0x40011400
 80032ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032f4:	2200      	movs	r2, #0
 80032f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003302:	4642      	mov	r2, r8
 8003304:	464b      	mov	r3, r9
 8003306:	1891      	adds	r1, r2, r2
 8003308:	6239      	str	r1, [r7, #32]
 800330a:	415b      	adcs	r3, r3
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
 800330e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003312:	4641      	mov	r1, r8
 8003314:	1854      	adds	r4, r2, r1
 8003316:	4649      	mov	r1, r9
 8003318:	eb43 0501 	adc.w	r5, r3, r1
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	00eb      	lsls	r3, r5, #3
 8003326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800332a:	00e2      	lsls	r2, r4, #3
 800332c:	4614      	mov	r4, r2
 800332e:	461d      	mov	r5, r3
 8003330:	4643      	mov	r3, r8
 8003332:	18e3      	adds	r3, r4, r3
 8003334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003338:	464b      	mov	r3, r9
 800333a:	eb45 0303 	adc.w	r3, r5, r3
 800333e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800334e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800335e:	4629      	mov	r1, r5
 8003360:	008b      	lsls	r3, r1, #2
 8003362:	4621      	mov	r1, r4
 8003364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003368:	4621      	mov	r1, r4
 800336a:	008a      	lsls	r2, r1, #2
 800336c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003370:	f7fc ff9e 	bl	80002b0 <__aeabi_uldivmod>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4b60      	ldr	r3, [pc, #384]	; (80034fc <UART_SetConfig+0x4e4>)
 800337a:	fba3 2302 	umull	r2, r3, r3, r2
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	011c      	lsls	r4, r3, #4
 8003382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003386:	2200      	movs	r2, #0
 8003388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800338c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003390:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003394:	4642      	mov	r2, r8
 8003396:	464b      	mov	r3, r9
 8003398:	1891      	adds	r1, r2, r2
 800339a:	61b9      	str	r1, [r7, #24]
 800339c:	415b      	adcs	r3, r3
 800339e:	61fb      	str	r3, [r7, #28]
 80033a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033a4:	4641      	mov	r1, r8
 80033a6:	1851      	adds	r1, r2, r1
 80033a8:	6139      	str	r1, [r7, #16]
 80033aa:	4649      	mov	r1, r9
 80033ac:	414b      	adcs	r3, r1
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033bc:	4659      	mov	r1, fp
 80033be:	00cb      	lsls	r3, r1, #3
 80033c0:	4651      	mov	r1, sl
 80033c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033c6:	4651      	mov	r1, sl
 80033c8:	00ca      	lsls	r2, r1, #3
 80033ca:	4610      	mov	r0, r2
 80033cc:	4619      	mov	r1, r3
 80033ce:	4603      	mov	r3, r0
 80033d0:	4642      	mov	r2, r8
 80033d2:	189b      	adds	r3, r3, r2
 80033d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033d8:	464b      	mov	r3, r9
 80033da:	460a      	mov	r2, r1
 80033dc:	eb42 0303 	adc.w	r3, r2, r3
 80033e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80033ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033fc:	4649      	mov	r1, r9
 80033fe:	008b      	lsls	r3, r1, #2
 8003400:	4641      	mov	r1, r8
 8003402:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003406:	4641      	mov	r1, r8
 8003408:	008a      	lsls	r2, r1, #2
 800340a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800340e:	f7fc ff4f 	bl	80002b0 <__aeabi_uldivmod>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4611      	mov	r1, r2
 8003418:	4b38      	ldr	r3, [pc, #224]	; (80034fc <UART_SetConfig+0x4e4>)
 800341a:	fba3 2301 	umull	r2, r3, r3, r1
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	2264      	movs	r2, #100	; 0x64
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	1acb      	subs	r3, r1, r3
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	3332      	adds	r3, #50	; 0x32
 800342c:	4a33      	ldr	r2, [pc, #204]	; (80034fc <UART_SetConfig+0x4e4>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003438:	441c      	add	r4, r3
 800343a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800343e:	2200      	movs	r2, #0
 8003440:	673b      	str	r3, [r7, #112]	; 0x70
 8003442:	677a      	str	r2, [r7, #116]	; 0x74
 8003444:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003448:	4642      	mov	r2, r8
 800344a:	464b      	mov	r3, r9
 800344c:	1891      	adds	r1, r2, r2
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	415b      	adcs	r3, r3
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003458:	4641      	mov	r1, r8
 800345a:	1851      	adds	r1, r2, r1
 800345c:	6039      	str	r1, [r7, #0]
 800345e:	4649      	mov	r1, r9
 8003460:	414b      	adcs	r3, r1
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003470:	4659      	mov	r1, fp
 8003472:	00cb      	lsls	r3, r1, #3
 8003474:	4651      	mov	r1, sl
 8003476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800347a:	4651      	mov	r1, sl
 800347c:	00ca      	lsls	r2, r1, #3
 800347e:	4610      	mov	r0, r2
 8003480:	4619      	mov	r1, r3
 8003482:	4603      	mov	r3, r0
 8003484:	4642      	mov	r2, r8
 8003486:	189b      	adds	r3, r3, r2
 8003488:	66bb      	str	r3, [r7, #104]	; 0x68
 800348a:	464b      	mov	r3, r9
 800348c:	460a      	mov	r2, r1
 800348e:	eb42 0303 	adc.w	r3, r2, r3
 8003492:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	663b      	str	r3, [r7, #96]	; 0x60
 800349e:	667a      	str	r2, [r7, #100]	; 0x64
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034ac:	4649      	mov	r1, r9
 80034ae:	008b      	lsls	r3, r1, #2
 80034b0:	4641      	mov	r1, r8
 80034b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034b6:	4641      	mov	r1, r8
 80034b8:	008a      	lsls	r2, r1, #2
 80034ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034be:	f7fc fef7 	bl	80002b0 <__aeabi_uldivmod>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <UART_SetConfig+0x4e4>)
 80034c8:	fba3 1302 	umull	r1, r3, r3, r2
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	2164      	movs	r1, #100	; 0x64
 80034d0:	fb01 f303 	mul.w	r3, r1, r3
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	3332      	adds	r3, #50	; 0x32
 80034da:	4a08      	ldr	r2, [pc, #32]	; (80034fc <UART_SetConfig+0x4e4>)
 80034dc:	fba2 2303 	umull	r2, r3, r2, r3
 80034e0:	095b      	lsrs	r3, r3, #5
 80034e2:	f003 020f 	and.w	r2, r3, #15
 80034e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4422      	add	r2, r4
 80034ee:	609a      	str	r2, [r3, #8]
}
 80034f0:	bf00      	nop
 80034f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034f6:	46bd      	mov	sp, r7
 80034f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034fc:	51eb851f 	.word	0x51eb851f

08003500 <bmp_reset>:
#include "bmp280.h"
#include "main.h"
#include <stdio.h>

void bmp_reset(h_bmp280_t * bmp280){
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af02      	add	r7, sp, #8
 8003506:	6078      	str	r0, [r7, #4]
	bmp280->registre = reset;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	22e0      	movs	r2, #224	; 0xe0
 800350c:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	781a      	ldrb	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	705a      	strb	r2, [r3, #1]
	bmp280->buf[1]= BMP280_RESET;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	22b6      	movs	r2, #182	; 0xb6
 800351a:	709a      	strb	r2, [r3, #2]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 2, HAL_MAX_DELAY)){
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	f04f 33ff 	mov.w	r3, #4294967295
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	2302      	movs	r3, #2
 8003528:	21ee      	movs	r1, #238	; 0xee
 800352a:	4806      	ldr	r0, [pc, #24]	; (8003544 <bmp_reset+0x44>)
 800352c:	f7fd ffec 	bl	8001508 <HAL_I2C_Master_Transmit>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <bmp_reset+0x3c>
		printf("echec du reset\r\n");
 8003536:	4804      	ldr	r0, [pc, #16]	; (8003548 <bmp_reset+0x48>)
 8003538:	f000 fa66 	bl	8003a08 <puts>
	}
}
 800353c:	bf00      	nop
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000084 	.word	0x20000084
 8003548:	0800472c 	.word	0x0800472c

0800354c <bmp_id>:

void bmp_id(h_bmp280_t * bmp280){
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af02      	add	r7, sp, #8
 8003552:	6078      	str	r0, [r7, #4]
	bmp280->registre = id;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	22d0      	movs	r2, #208	; 0xd0
 8003558:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	781a      	ldrb	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	f04f 33ff 	mov.w	r3, #4294967295
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	2301      	movs	r3, #1
 800356e:	21ee      	movs	r1, #238	; 0xee
 8003570:	4810      	ldr	r0, [pc, #64]	; (80035b4 <bmp_id+0x68>)
 8003572:	f7fd ffc9 	bl	8001508 <HAL_I2C_Master_Transmit>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <bmp_id+0x36>
		printf("echec de l'id\r\n");
 800357c:	480e      	ldr	r0, [pc, #56]	; (80035b8 <bmp_id+0x6c>)
 800357e:	f000 fa43 	bl	8003a08 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, &bmp280->id, 1, 1000)){
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f103 021b 	add.w	r2, r3, #27
 8003588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	2301      	movs	r3, #1
 8003590:	21ee      	movs	r1, #238	; 0xee
 8003592:	4808      	ldr	r0, [pc, #32]	; (80035b4 <bmp_id+0x68>)
 8003594:	f7fe f8b6 	bl	8001704 <HAL_I2C_Master_Receive>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d105      	bne.n	80035aa <bmp_id+0x5e>
		printf("val id : %x\r\n",bmp280->id);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	7edb      	ldrb	r3, [r3, #27]
 80035a2:	4619      	mov	r1, r3
 80035a4:	4805      	ldr	r0, [pc, #20]	; (80035bc <bmp_id+0x70>)
 80035a6:	f000 f9c9 	bl	800393c <iprintf>
	}
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000084 	.word	0x20000084
 80035b8:	0800473c 	.word	0x0800473c
 80035bc:	0800474c 	.word	0x0800474c

080035c0 <bmp_config>:
		printf("echec de l'id\r\n");
	}
	printf("val id : %x\r\n",bmp280->id);
}*/

void bmp_config(h_bmp280_t * bmp280){
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	6078      	str	r0, [r7, #4]
	bmp280->registre = ctrl_mes;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	22f4      	movs	r2, #244	; 0xf4
 80035cc:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	781a      	ldrb	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	705a      	strb	r2, [r3, #1]
	bmp280->buf[1]= 0b01010111;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2257      	movs	r2, #87	; 0x57
 80035da:	709a      	strb	r2, [r3, #2]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 2, HAL_MAX_DELAY)){
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	f04f 33ff 	mov.w	r3, #4294967295
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	2302      	movs	r3, #2
 80035e8:	21ee      	movs	r1, #238	; 0xee
 80035ea:	4810      	ldr	r0, [pc, #64]	; (800362c <bmp_config+0x6c>)
 80035ec:	f7fd ff8c 	bl	8001508 <HAL_I2C_Master_Transmit>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <bmp_config+0x3c>
		printf("echec de config\r\n");
 80035f6:	480e      	ldr	r0, [pc, #56]	; (8003630 <bmp_config+0x70>)
 80035f8:	f000 fa06 	bl	8003a08 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, &bmp280->config, 1, 1000)){
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f103 021c 	add.w	r2, r3, #28
 8003602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	2301      	movs	r3, #1
 800360a:	21ee      	movs	r1, #238	; 0xee
 800360c:	4807      	ldr	r0, [pc, #28]	; (800362c <bmp_config+0x6c>)
 800360e:	f7fe f879 	bl	8001704 <HAL_I2C_Master_Receive>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d105      	bne.n	8003624 <bmp_config+0x64>
		printf("config value : %x\r\n",bmp280->config);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	7f1b      	ldrb	r3, [r3, #28]
 800361c:	4619      	mov	r1, r3
 800361e:	4805      	ldr	r0, [pc, #20]	; (8003634 <bmp_config+0x74>)
 8003620:	f000 f98c 	bl	800393c <iprintf>
	}
	//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
}
 8003624:	bf00      	nop
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000084 	.word	0x20000084
 8003630:	0800475c 	.word	0x0800475c
 8003634:	08004770 	.word	0x08004770

08003638 <bmp_calib_read>:

void bmp_calib_read(h_bmp280_t * bmp280){
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af02      	add	r7, sp, #8
 800363e:	6078      	str	r0, [r7, #4]
	bmp280->registre = calib00;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2288      	movs	r2, #136	; 0x88
 8003644:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	781a      	ldrb	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	f04f 33ff 	mov.w	r3, #4294967295
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	2301      	movs	r3, #1
 800365a:	21ee      	movs	r1, #238	; 0xee
 800365c:	4810      	ldr	r0, [pc, #64]	; (80036a0 <bmp_calib_read+0x68>)
 800365e:	f7fd ff53 	bl	8001508 <HAL_I2C_Master_Transmit>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <bmp_calib_read+0x36>
		printf("echec de calib\r\n");
 8003668:	480e      	ldr	r0, [pc, #56]	; (80036a4 <bmp_calib_read+0x6c>)
 800366a:	f000 f9cd 	bl	8003a08 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->calib, 25, HAL_MAX_DELAY)){
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f103 021d 	add.w	r2, r3, #29
 8003674:	f04f 33ff 	mov.w	r3, #4294967295
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	2319      	movs	r3, #25
 800367c:	21ee      	movs	r1, #238	; 0xee
 800367e:	4808      	ldr	r0, [pc, #32]	; (80036a0 <bmp_calib_read+0x68>)
 8003680:	f7fe f840 	bl	8001704 <HAL_I2C_Master_Receive>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d105      	bne.n	8003696 <bmp_calib_read+0x5e>
		printf("calib values : %s\r\n",bmp280->calib);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	331d      	adds	r3, #29
 800368e:	4619      	mov	r1, r3
 8003690:	4805      	ldr	r0, [pc, #20]	; (80036a8 <bmp_calib_read+0x70>)
 8003692:	f000 f953 	bl	800393c <iprintf>
	}
	//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000084 	.word	0x20000084
 80036a4:	08004784 	.word	0x08004784
 80036a8:	08004794 	.word	0x08004794

080036ac <bmp_temp_read>:

void bmp_temp_read(h_bmp280_t * bmp280){
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	6078      	str	r0, [r7, #4]
	bmp280->registre = temp_xlsb;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	22fc      	movs	r2, #252	; 0xfc
 80036b8:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	2301      	movs	r3, #1
 80036ce:	21ee      	movs	r1, #238	; 0xee
 80036d0:	483f      	ldr	r0, [pc, #252]	; (80037d0 <bmp_temp_read+0x124>)
 80036d2:	f7fd ff19 	bl	8001508 <HAL_I2C_Master_Transmit>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <bmp_temp_read+0x36>
		printf("echec de temp read\r\n");
 80036dc:	483d      	ldr	r0, [pc, #244]	; (80037d4 <bmp_temp_read+0x128>)
 80036de:	f000 f993 	bl	8003a08 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	2301      	movs	r3, #1
 80036ee:	21ee      	movs	r1, #238	; 0xee
 80036f0:	4837      	ldr	r0, [pc, #220]	; (80037d0 <bmp_temp_read+0x124>)
 80036f2:	f7fe f807 	bl	8001704 <HAL_I2C_Master_Receive>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d106      	bne.n	800370a <bmp_temp_read+0x5e>
		bmp280->temp = (int32_t)((bmp280->buf[0]) >>4);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	785b      	ldrb	r3, [r3, #1]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	639a      	str	r2, [r3, #56]	; 0x38
		bmp280->temp = ((int32_t)bmp280->buf[0]>>4) + ((int32_t)bmp280->buf[1]<<4) + ((int32_t)bmp280->buf[2]<<12);
		printf("temp brute : %ld\r\n",bmp280->temp);
		bmp280->temp = bmp_compensate_T(bmp280);
		printf("temp : %ld\r\n",bmp280->temp);*/
	}
	bmp280->registre = temp_lsb;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	22fb      	movs	r2, #251	; 0xfb
 800370e:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	f04f 33ff 	mov.w	r3, #4294967295
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	2301      	movs	r3, #1
 8003724:	21ee      	movs	r1, #238	; 0xee
 8003726:	482a      	ldr	r0, [pc, #168]	; (80037d0 <bmp_temp_read+0x124>)
 8003728:	f7fd feee 	bl	8001508 <HAL_I2C_Master_Transmit>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <bmp_temp_read+0x8c>
		printf("echec de temp read\r\n");
 8003732:	4828      	ldr	r0, [pc, #160]	; (80037d4 <bmp_temp_read+0x128>)
 8003734:	f000 f968 	bl	8003a08 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	f04f 33ff 	mov.w	r3, #4294967295
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	2301      	movs	r3, #1
 8003744:	21ee      	movs	r1, #238	; 0xee
 8003746:	4822      	ldr	r0, [pc, #136]	; (80037d0 <bmp_temp_read+0x124>)
 8003748:	f7fd ffdc 	bl	8001704 <HAL_I2C_Master_Receive>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d107      	bne.n	8003762 <bmp_temp_read+0xb6>
		bmp280->temp += ((int32_t)(bmp280->buf[0]))<<4;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	785b      	ldrb	r3, [r3, #1]
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	441a      	add	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	639a      	str	r2, [r3, #56]	; 0x38
	}
	bmp280->registre = temp_msb;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	22fa      	movs	r2, #250	; 0xfa
 8003766:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	781a      	ldrb	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	f04f 33ff 	mov.w	r3, #4294967295
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	2301      	movs	r3, #1
 800377c:	21ee      	movs	r1, #238	; 0xee
 800377e:	4814      	ldr	r0, [pc, #80]	; (80037d0 <bmp_temp_read+0x124>)
 8003780:	f7fd fec2 	bl	8001508 <HAL_I2C_Master_Transmit>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <bmp_temp_read+0xe4>
		printf("echec de temp read\r\n");
 800378a:	4812      	ldr	r0, [pc, #72]	; (80037d4 <bmp_temp_read+0x128>)
 800378c:	f000 f93c 	bl	8003a08 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	f04f 33ff 	mov.w	r3, #4294967295
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	2301      	movs	r3, #1
 800379c:	21ee      	movs	r1, #238	; 0xee
 800379e:	480c      	ldr	r0, [pc, #48]	; (80037d0 <bmp_temp_read+0x124>)
 80037a0:	f7fd ffb0 	bl	8001704 <HAL_I2C_Master_Receive>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d107      	bne.n	80037ba <bmp_temp_read+0x10e>
		bmp280->temp += ((int32_t)(bmp280->buf[0]))<<12;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	785b      	ldrb	r3, [r3, #1]
 80037b2:	031b      	lsls	r3, r3, #12
 80037b4:	441a      	add	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	printf("temp : %ld\r\n",bmp280->temp);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	4619      	mov	r1, r3
 80037c0:	4805      	ldr	r0, [pc, #20]	; (80037d8 <bmp_temp_read+0x12c>)
 80037c2:	f000 f8bb 	bl	800393c <iprintf>
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000084 	.word	0x20000084
 80037d4:	080047a8 	.word	0x080047a8
 80037d8:	080047bc 	.word	0x080047bc

080037dc <std>:
 80037dc:	2300      	movs	r3, #0
 80037de:	b510      	push	{r4, lr}
 80037e0:	4604      	mov	r4, r0
 80037e2:	e9c0 3300 	strd	r3, r3, [r0]
 80037e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037ea:	6083      	str	r3, [r0, #8]
 80037ec:	8181      	strh	r1, [r0, #12]
 80037ee:	6643      	str	r3, [r0, #100]	; 0x64
 80037f0:	81c2      	strh	r2, [r0, #14]
 80037f2:	6183      	str	r3, [r0, #24]
 80037f4:	4619      	mov	r1, r3
 80037f6:	2208      	movs	r2, #8
 80037f8:	305c      	adds	r0, #92	; 0x5c
 80037fa:	f000 f9e5 	bl	8003bc8 <memset>
 80037fe:	4b05      	ldr	r3, [pc, #20]	; (8003814 <std+0x38>)
 8003800:	6263      	str	r3, [r4, #36]	; 0x24
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <std+0x3c>)
 8003804:	62a3      	str	r3, [r4, #40]	; 0x28
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <std+0x40>)
 8003808:	62e3      	str	r3, [r4, #44]	; 0x2c
 800380a:	4b05      	ldr	r3, [pc, #20]	; (8003820 <std+0x44>)
 800380c:	6224      	str	r4, [r4, #32]
 800380e:	6323      	str	r3, [r4, #48]	; 0x30
 8003810:	bd10      	pop	{r4, pc}
 8003812:	bf00      	nop
 8003814:	08003a19 	.word	0x08003a19
 8003818:	08003a3b 	.word	0x08003a3b
 800381c:	08003a73 	.word	0x08003a73
 8003820:	08003a97 	.word	0x08003a97

08003824 <stdio_exit_handler>:
 8003824:	4a02      	ldr	r2, [pc, #8]	; (8003830 <stdio_exit_handler+0xc>)
 8003826:	4903      	ldr	r1, [pc, #12]	; (8003834 <stdio_exit_handler+0x10>)
 8003828:	4803      	ldr	r0, [pc, #12]	; (8003838 <stdio_exit_handler+0x14>)
 800382a:	f000 b869 	b.w	8003900 <_fwalk_sglue>
 800382e:	bf00      	nop
 8003830:	2000000c 	.word	0x2000000c
 8003834:	08004561 	.word	0x08004561
 8003838:	20000018 	.word	0x20000018

0800383c <cleanup_stdio>:
 800383c:	6841      	ldr	r1, [r0, #4]
 800383e:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <cleanup_stdio+0x34>)
 8003840:	4299      	cmp	r1, r3
 8003842:	b510      	push	{r4, lr}
 8003844:	4604      	mov	r4, r0
 8003846:	d001      	beq.n	800384c <cleanup_stdio+0x10>
 8003848:	f000 fe8a 	bl	8004560 <_fflush_r>
 800384c:	68a1      	ldr	r1, [r4, #8]
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <cleanup_stdio+0x38>)
 8003850:	4299      	cmp	r1, r3
 8003852:	d002      	beq.n	800385a <cleanup_stdio+0x1e>
 8003854:	4620      	mov	r0, r4
 8003856:	f000 fe83 	bl	8004560 <_fflush_r>
 800385a:	68e1      	ldr	r1, [r4, #12]
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <cleanup_stdio+0x3c>)
 800385e:	4299      	cmp	r1, r3
 8003860:	d004      	beq.n	800386c <cleanup_stdio+0x30>
 8003862:	4620      	mov	r0, r4
 8003864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003868:	f000 be7a 	b.w	8004560 <_fflush_r>
 800386c:	bd10      	pop	{r4, pc}
 800386e:	bf00      	nop
 8003870:	20000160 	.word	0x20000160
 8003874:	200001c8 	.word	0x200001c8
 8003878:	20000230 	.word	0x20000230

0800387c <global_stdio_init.part.0>:
 800387c:	b510      	push	{r4, lr}
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <global_stdio_init.part.0+0x30>)
 8003880:	4c0b      	ldr	r4, [pc, #44]	; (80038b0 <global_stdio_init.part.0+0x34>)
 8003882:	4a0c      	ldr	r2, [pc, #48]	; (80038b4 <global_stdio_init.part.0+0x38>)
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	4620      	mov	r0, r4
 8003888:	2200      	movs	r2, #0
 800388a:	2104      	movs	r1, #4
 800388c:	f7ff ffa6 	bl	80037dc <std>
 8003890:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003894:	2201      	movs	r2, #1
 8003896:	2109      	movs	r1, #9
 8003898:	f7ff ffa0 	bl	80037dc <std>
 800389c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80038a0:	2202      	movs	r2, #2
 80038a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038a6:	2112      	movs	r1, #18
 80038a8:	f7ff bf98 	b.w	80037dc <std>
 80038ac:	20000298 	.word	0x20000298
 80038b0:	20000160 	.word	0x20000160
 80038b4:	08003825 	.word	0x08003825

080038b8 <__sfp_lock_acquire>:
 80038b8:	4801      	ldr	r0, [pc, #4]	; (80038c0 <__sfp_lock_acquire+0x8>)
 80038ba:	f000 b9fd 	b.w	8003cb8 <__retarget_lock_acquire_recursive>
 80038be:	bf00      	nop
 80038c0:	200002a1 	.word	0x200002a1

080038c4 <__sfp_lock_release>:
 80038c4:	4801      	ldr	r0, [pc, #4]	; (80038cc <__sfp_lock_release+0x8>)
 80038c6:	f000 b9f8 	b.w	8003cba <__retarget_lock_release_recursive>
 80038ca:	bf00      	nop
 80038cc:	200002a1 	.word	0x200002a1

080038d0 <__sinit>:
 80038d0:	b510      	push	{r4, lr}
 80038d2:	4604      	mov	r4, r0
 80038d4:	f7ff fff0 	bl	80038b8 <__sfp_lock_acquire>
 80038d8:	6a23      	ldr	r3, [r4, #32]
 80038da:	b11b      	cbz	r3, 80038e4 <__sinit+0x14>
 80038dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038e0:	f7ff bff0 	b.w	80038c4 <__sfp_lock_release>
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <__sinit+0x28>)
 80038e6:	6223      	str	r3, [r4, #32]
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <__sinit+0x2c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f5      	bne.n	80038dc <__sinit+0xc>
 80038f0:	f7ff ffc4 	bl	800387c <global_stdio_init.part.0>
 80038f4:	e7f2      	b.n	80038dc <__sinit+0xc>
 80038f6:	bf00      	nop
 80038f8:	0800383d 	.word	0x0800383d
 80038fc:	20000298 	.word	0x20000298

08003900 <_fwalk_sglue>:
 8003900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003904:	4607      	mov	r7, r0
 8003906:	4688      	mov	r8, r1
 8003908:	4614      	mov	r4, r2
 800390a:	2600      	movs	r6, #0
 800390c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003910:	f1b9 0901 	subs.w	r9, r9, #1
 8003914:	d505      	bpl.n	8003922 <_fwalk_sglue+0x22>
 8003916:	6824      	ldr	r4, [r4, #0]
 8003918:	2c00      	cmp	r4, #0
 800391a:	d1f7      	bne.n	800390c <_fwalk_sglue+0xc>
 800391c:	4630      	mov	r0, r6
 800391e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003922:	89ab      	ldrh	r3, [r5, #12]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d907      	bls.n	8003938 <_fwalk_sglue+0x38>
 8003928:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800392c:	3301      	adds	r3, #1
 800392e:	d003      	beq.n	8003938 <_fwalk_sglue+0x38>
 8003930:	4629      	mov	r1, r5
 8003932:	4638      	mov	r0, r7
 8003934:	47c0      	blx	r8
 8003936:	4306      	orrs	r6, r0
 8003938:	3568      	adds	r5, #104	; 0x68
 800393a:	e7e9      	b.n	8003910 <_fwalk_sglue+0x10>

0800393c <iprintf>:
 800393c:	b40f      	push	{r0, r1, r2, r3}
 800393e:	b507      	push	{r0, r1, r2, lr}
 8003940:	4906      	ldr	r1, [pc, #24]	; (800395c <iprintf+0x20>)
 8003942:	ab04      	add	r3, sp, #16
 8003944:	6808      	ldr	r0, [r1, #0]
 8003946:	f853 2b04 	ldr.w	r2, [r3], #4
 800394a:	6881      	ldr	r1, [r0, #8]
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	f000 fad7 	bl	8003f00 <_vfiprintf_r>
 8003952:	b003      	add	sp, #12
 8003954:	f85d eb04 	ldr.w	lr, [sp], #4
 8003958:	b004      	add	sp, #16
 800395a:	4770      	bx	lr
 800395c:	20000064 	.word	0x20000064

08003960 <_puts_r>:
 8003960:	6a03      	ldr	r3, [r0, #32]
 8003962:	b570      	push	{r4, r5, r6, lr}
 8003964:	6884      	ldr	r4, [r0, #8]
 8003966:	4605      	mov	r5, r0
 8003968:	460e      	mov	r6, r1
 800396a:	b90b      	cbnz	r3, 8003970 <_puts_r+0x10>
 800396c:	f7ff ffb0 	bl	80038d0 <__sinit>
 8003970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003972:	07db      	lsls	r3, r3, #31
 8003974:	d405      	bmi.n	8003982 <_puts_r+0x22>
 8003976:	89a3      	ldrh	r3, [r4, #12]
 8003978:	0598      	lsls	r0, r3, #22
 800397a:	d402      	bmi.n	8003982 <_puts_r+0x22>
 800397c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800397e:	f000 f99b 	bl	8003cb8 <__retarget_lock_acquire_recursive>
 8003982:	89a3      	ldrh	r3, [r4, #12]
 8003984:	0719      	lsls	r1, r3, #28
 8003986:	d513      	bpl.n	80039b0 <_puts_r+0x50>
 8003988:	6923      	ldr	r3, [r4, #16]
 800398a:	b18b      	cbz	r3, 80039b0 <_puts_r+0x50>
 800398c:	3e01      	subs	r6, #1
 800398e:	68a3      	ldr	r3, [r4, #8]
 8003990:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003994:	3b01      	subs	r3, #1
 8003996:	60a3      	str	r3, [r4, #8]
 8003998:	b9e9      	cbnz	r1, 80039d6 <_puts_r+0x76>
 800399a:	2b00      	cmp	r3, #0
 800399c:	da2e      	bge.n	80039fc <_puts_r+0x9c>
 800399e:	4622      	mov	r2, r4
 80039a0:	210a      	movs	r1, #10
 80039a2:	4628      	mov	r0, r5
 80039a4:	f000 f87b 	bl	8003a9e <__swbuf_r>
 80039a8:	3001      	adds	r0, #1
 80039aa:	d007      	beq.n	80039bc <_puts_r+0x5c>
 80039ac:	250a      	movs	r5, #10
 80039ae:	e007      	b.n	80039c0 <_puts_r+0x60>
 80039b0:	4621      	mov	r1, r4
 80039b2:	4628      	mov	r0, r5
 80039b4:	f000 f8b0 	bl	8003b18 <__swsetup_r>
 80039b8:	2800      	cmp	r0, #0
 80039ba:	d0e7      	beq.n	800398c <_puts_r+0x2c>
 80039bc:	f04f 35ff 	mov.w	r5, #4294967295
 80039c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039c2:	07da      	lsls	r2, r3, #31
 80039c4:	d405      	bmi.n	80039d2 <_puts_r+0x72>
 80039c6:	89a3      	ldrh	r3, [r4, #12]
 80039c8:	059b      	lsls	r3, r3, #22
 80039ca:	d402      	bmi.n	80039d2 <_puts_r+0x72>
 80039cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039ce:	f000 f974 	bl	8003cba <__retarget_lock_release_recursive>
 80039d2:	4628      	mov	r0, r5
 80039d4:	bd70      	pop	{r4, r5, r6, pc}
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	da04      	bge.n	80039e4 <_puts_r+0x84>
 80039da:	69a2      	ldr	r2, [r4, #24]
 80039dc:	429a      	cmp	r2, r3
 80039de:	dc06      	bgt.n	80039ee <_puts_r+0x8e>
 80039e0:	290a      	cmp	r1, #10
 80039e2:	d004      	beq.n	80039ee <_puts_r+0x8e>
 80039e4:	6823      	ldr	r3, [r4, #0]
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	6022      	str	r2, [r4, #0]
 80039ea:	7019      	strb	r1, [r3, #0]
 80039ec:	e7cf      	b.n	800398e <_puts_r+0x2e>
 80039ee:	4622      	mov	r2, r4
 80039f0:	4628      	mov	r0, r5
 80039f2:	f000 f854 	bl	8003a9e <__swbuf_r>
 80039f6:	3001      	adds	r0, #1
 80039f8:	d1c9      	bne.n	800398e <_puts_r+0x2e>
 80039fa:	e7df      	b.n	80039bc <_puts_r+0x5c>
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	250a      	movs	r5, #10
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	6022      	str	r2, [r4, #0]
 8003a04:	701d      	strb	r5, [r3, #0]
 8003a06:	e7db      	b.n	80039c0 <_puts_r+0x60>

08003a08 <puts>:
 8003a08:	4b02      	ldr	r3, [pc, #8]	; (8003a14 <puts+0xc>)
 8003a0a:	4601      	mov	r1, r0
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	f7ff bfa7 	b.w	8003960 <_puts_r>
 8003a12:	bf00      	nop
 8003a14:	20000064 	.word	0x20000064

08003a18 <__sread>:
 8003a18:	b510      	push	{r4, lr}
 8003a1a:	460c      	mov	r4, r1
 8003a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a20:	f000 f8fc 	bl	8003c1c <_read_r>
 8003a24:	2800      	cmp	r0, #0
 8003a26:	bfab      	itete	ge
 8003a28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a2a:	89a3      	ldrhlt	r3, [r4, #12]
 8003a2c:	181b      	addge	r3, r3, r0
 8003a2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a32:	bfac      	ite	ge
 8003a34:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a36:	81a3      	strhlt	r3, [r4, #12]
 8003a38:	bd10      	pop	{r4, pc}

08003a3a <__swrite>:
 8003a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a3e:	461f      	mov	r7, r3
 8003a40:	898b      	ldrh	r3, [r1, #12]
 8003a42:	05db      	lsls	r3, r3, #23
 8003a44:	4605      	mov	r5, r0
 8003a46:	460c      	mov	r4, r1
 8003a48:	4616      	mov	r6, r2
 8003a4a:	d505      	bpl.n	8003a58 <__swrite+0x1e>
 8003a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a50:	2302      	movs	r3, #2
 8003a52:	2200      	movs	r2, #0
 8003a54:	f000 f8d0 	bl	8003bf8 <_lseek_r>
 8003a58:	89a3      	ldrh	r3, [r4, #12]
 8003a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a62:	81a3      	strh	r3, [r4, #12]
 8003a64:	4632      	mov	r2, r6
 8003a66:	463b      	mov	r3, r7
 8003a68:	4628      	mov	r0, r5
 8003a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a6e:	f000 b8e7 	b.w	8003c40 <_write_r>

08003a72 <__sseek>:
 8003a72:	b510      	push	{r4, lr}
 8003a74:	460c      	mov	r4, r1
 8003a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a7a:	f000 f8bd 	bl	8003bf8 <_lseek_r>
 8003a7e:	1c43      	adds	r3, r0, #1
 8003a80:	89a3      	ldrh	r3, [r4, #12]
 8003a82:	bf15      	itete	ne
 8003a84:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a8e:	81a3      	strheq	r3, [r4, #12]
 8003a90:	bf18      	it	ne
 8003a92:	81a3      	strhne	r3, [r4, #12]
 8003a94:	bd10      	pop	{r4, pc}

08003a96 <__sclose>:
 8003a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a9a:	f000 b89d 	b.w	8003bd8 <_close_r>

08003a9e <__swbuf_r>:
 8003a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa0:	460e      	mov	r6, r1
 8003aa2:	4614      	mov	r4, r2
 8003aa4:	4605      	mov	r5, r0
 8003aa6:	b118      	cbz	r0, 8003ab0 <__swbuf_r+0x12>
 8003aa8:	6a03      	ldr	r3, [r0, #32]
 8003aaa:	b90b      	cbnz	r3, 8003ab0 <__swbuf_r+0x12>
 8003aac:	f7ff ff10 	bl	80038d0 <__sinit>
 8003ab0:	69a3      	ldr	r3, [r4, #24]
 8003ab2:	60a3      	str	r3, [r4, #8]
 8003ab4:	89a3      	ldrh	r3, [r4, #12]
 8003ab6:	071a      	lsls	r2, r3, #28
 8003ab8:	d525      	bpl.n	8003b06 <__swbuf_r+0x68>
 8003aba:	6923      	ldr	r3, [r4, #16]
 8003abc:	b31b      	cbz	r3, 8003b06 <__swbuf_r+0x68>
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	6922      	ldr	r2, [r4, #16]
 8003ac2:	1a98      	subs	r0, r3, r2
 8003ac4:	6963      	ldr	r3, [r4, #20]
 8003ac6:	b2f6      	uxtb	r6, r6
 8003ac8:	4283      	cmp	r3, r0
 8003aca:	4637      	mov	r7, r6
 8003acc:	dc04      	bgt.n	8003ad8 <__swbuf_r+0x3a>
 8003ace:	4621      	mov	r1, r4
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	f000 fd45 	bl	8004560 <_fflush_r>
 8003ad6:	b9e0      	cbnz	r0, 8003b12 <__swbuf_r+0x74>
 8003ad8:	68a3      	ldr	r3, [r4, #8]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	60a3      	str	r3, [r4, #8]
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	6022      	str	r2, [r4, #0]
 8003ae4:	701e      	strb	r6, [r3, #0]
 8003ae6:	6962      	ldr	r2, [r4, #20]
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d004      	beq.n	8003af8 <__swbuf_r+0x5a>
 8003aee:	89a3      	ldrh	r3, [r4, #12]
 8003af0:	07db      	lsls	r3, r3, #31
 8003af2:	d506      	bpl.n	8003b02 <__swbuf_r+0x64>
 8003af4:	2e0a      	cmp	r6, #10
 8003af6:	d104      	bne.n	8003b02 <__swbuf_r+0x64>
 8003af8:	4621      	mov	r1, r4
 8003afa:	4628      	mov	r0, r5
 8003afc:	f000 fd30 	bl	8004560 <_fflush_r>
 8003b00:	b938      	cbnz	r0, 8003b12 <__swbuf_r+0x74>
 8003b02:	4638      	mov	r0, r7
 8003b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b06:	4621      	mov	r1, r4
 8003b08:	4628      	mov	r0, r5
 8003b0a:	f000 f805 	bl	8003b18 <__swsetup_r>
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d0d5      	beq.n	8003abe <__swbuf_r+0x20>
 8003b12:	f04f 37ff 	mov.w	r7, #4294967295
 8003b16:	e7f4      	b.n	8003b02 <__swbuf_r+0x64>

08003b18 <__swsetup_r>:
 8003b18:	b538      	push	{r3, r4, r5, lr}
 8003b1a:	4b2a      	ldr	r3, [pc, #168]	; (8003bc4 <__swsetup_r+0xac>)
 8003b1c:	4605      	mov	r5, r0
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	460c      	mov	r4, r1
 8003b22:	b118      	cbz	r0, 8003b2c <__swsetup_r+0x14>
 8003b24:	6a03      	ldr	r3, [r0, #32]
 8003b26:	b90b      	cbnz	r3, 8003b2c <__swsetup_r+0x14>
 8003b28:	f7ff fed2 	bl	80038d0 <__sinit>
 8003b2c:	89a3      	ldrh	r3, [r4, #12]
 8003b2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b32:	0718      	lsls	r0, r3, #28
 8003b34:	d422      	bmi.n	8003b7c <__swsetup_r+0x64>
 8003b36:	06d9      	lsls	r1, r3, #27
 8003b38:	d407      	bmi.n	8003b4a <__swsetup_r+0x32>
 8003b3a:	2309      	movs	r3, #9
 8003b3c:	602b      	str	r3, [r5, #0]
 8003b3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b42:	81a3      	strh	r3, [r4, #12]
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	e034      	b.n	8003bb4 <__swsetup_r+0x9c>
 8003b4a:	0758      	lsls	r0, r3, #29
 8003b4c:	d512      	bpl.n	8003b74 <__swsetup_r+0x5c>
 8003b4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b50:	b141      	cbz	r1, 8003b64 <__swsetup_r+0x4c>
 8003b52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b56:	4299      	cmp	r1, r3
 8003b58:	d002      	beq.n	8003b60 <__swsetup_r+0x48>
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	f000 f8ae 	bl	8003cbc <_free_r>
 8003b60:	2300      	movs	r3, #0
 8003b62:	6363      	str	r3, [r4, #52]	; 0x34
 8003b64:	89a3      	ldrh	r3, [r4, #12]
 8003b66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b6a:	81a3      	strh	r3, [r4, #12]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	6063      	str	r3, [r4, #4]
 8003b70:	6923      	ldr	r3, [r4, #16]
 8003b72:	6023      	str	r3, [r4, #0]
 8003b74:	89a3      	ldrh	r3, [r4, #12]
 8003b76:	f043 0308 	orr.w	r3, r3, #8
 8003b7a:	81a3      	strh	r3, [r4, #12]
 8003b7c:	6923      	ldr	r3, [r4, #16]
 8003b7e:	b94b      	cbnz	r3, 8003b94 <__swsetup_r+0x7c>
 8003b80:	89a3      	ldrh	r3, [r4, #12]
 8003b82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b8a:	d003      	beq.n	8003b94 <__swsetup_r+0x7c>
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	4628      	mov	r0, r5
 8003b90:	f000 fd34 	bl	80045fc <__smakebuf_r>
 8003b94:	89a0      	ldrh	r0, [r4, #12]
 8003b96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b9a:	f010 0301 	ands.w	r3, r0, #1
 8003b9e:	d00a      	beq.n	8003bb6 <__swsetup_r+0x9e>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60a3      	str	r3, [r4, #8]
 8003ba4:	6963      	ldr	r3, [r4, #20]
 8003ba6:	425b      	negs	r3, r3
 8003ba8:	61a3      	str	r3, [r4, #24]
 8003baa:	6923      	ldr	r3, [r4, #16]
 8003bac:	b943      	cbnz	r3, 8003bc0 <__swsetup_r+0xa8>
 8003bae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003bb2:	d1c4      	bne.n	8003b3e <__swsetup_r+0x26>
 8003bb4:	bd38      	pop	{r3, r4, r5, pc}
 8003bb6:	0781      	lsls	r1, r0, #30
 8003bb8:	bf58      	it	pl
 8003bba:	6963      	ldrpl	r3, [r4, #20]
 8003bbc:	60a3      	str	r3, [r4, #8]
 8003bbe:	e7f4      	b.n	8003baa <__swsetup_r+0x92>
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	e7f7      	b.n	8003bb4 <__swsetup_r+0x9c>
 8003bc4:	20000064 	.word	0x20000064

08003bc8 <memset>:
 8003bc8:	4402      	add	r2, r0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d100      	bne.n	8003bd2 <memset+0xa>
 8003bd0:	4770      	bx	lr
 8003bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bd6:	e7f9      	b.n	8003bcc <memset+0x4>

08003bd8 <_close_r>:
 8003bd8:	b538      	push	{r3, r4, r5, lr}
 8003bda:	4d06      	ldr	r5, [pc, #24]	; (8003bf4 <_close_r+0x1c>)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	4604      	mov	r4, r0
 8003be0:	4608      	mov	r0, r1
 8003be2:	602b      	str	r3, [r5, #0]
 8003be4:	f7fc ff7b 	bl	8000ade <_close>
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	d102      	bne.n	8003bf2 <_close_r+0x1a>
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	b103      	cbz	r3, 8003bf2 <_close_r+0x1a>
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	bd38      	pop	{r3, r4, r5, pc}
 8003bf4:	2000029c 	.word	0x2000029c

08003bf8 <_lseek_r>:
 8003bf8:	b538      	push	{r3, r4, r5, lr}
 8003bfa:	4d07      	ldr	r5, [pc, #28]	; (8003c18 <_lseek_r+0x20>)
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	4608      	mov	r0, r1
 8003c00:	4611      	mov	r1, r2
 8003c02:	2200      	movs	r2, #0
 8003c04:	602a      	str	r2, [r5, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	f7fc ff90 	bl	8000b2c <_lseek>
 8003c0c:	1c43      	adds	r3, r0, #1
 8003c0e:	d102      	bne.n	8003c16 <_lseek_r+0x1e>
 8003c10:	682b      	ldr	r3, [r5, #0]
 8003c12:	b103      	cbz	r3, 8003c16 <_lseek_r+0x1e>
 8003c14:	6023      	str	r3, [r4, #0]
 8003c16:	bd38      	pop	{r3, r4, r5, pc}
 8003c18:	2000029c 	.word	0x2000029c

08003c1c <_read_r>:
 8003c1c:	b538      	push	{r3, r4, r5, lr}
 8003c1e:	4d07      	ldr	r5, [pc, #28]	; (8003c3c <_read_r+0x20>)
 8003c20:	4604      	mov	r4, r0
 8003c22:	4608      	mov	r0, r1
 8003c24:	4611      	mov	r1, r2
 8003c26:	2200      	movs	r2, #0
 8003c28:	602a      	str	r2, [r5, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f7fc ff3a 	bl	8000aa4 <_read>
 8003c30:	1c43      	adds	r3, r0, #1
 8003c32:	d102      	bne.n	8003c3a <_read_r+0x1e>
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	b103      	cbz	r3, 8003c3a <_read_r+0x1e>
 8003c38:	6023      	str	r3, [r4, #0]
 8003c3a:	bd38      	pop	{r3, r4, r5, pc}
 8003c3c:	2000029c 	.word	0x2000029c

08003c40 <_write_r>:
 8003c40:	b538      	push	{r3, r4, r5, lr}
 8003c42:	4d07      	ldr	r5, [pc, #28]	; (8003c60 <_write_r+0x20>)
 8003c44:	4604      	mov	r4, r0
 8003c46:	4608      	mov	r0, r1
 8003c48:	4611      	mov	r1, r2
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	602a      	str	r2, [r5, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f7fc fcac 	bl	80005ac <_write>
 8003c54:	1c43      	adds	r3, r0, #1
 8003c56:	d102      	bne.n	8003c5e <_write_r+0x1e>
 8003c58:	682b      	ldr	r3, [r5, #0]
 8003c5a:	b103      	cbz	r3, 8003c5e <_write_r+0x1e>
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	bd38      	pop	{r3, r4, r5, pc}
 8003c60:	2000029c 	.word	0x2000029c

08003c64 <__errno>:
 8003c64:	4b01      	ldr	r3, [pc, #4]	; (8003c6c <__errno+0x8>)
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20000064 	.word	0x20000064

08003c70 <__libc_init_array>:
 8003c70:	b570      	push	{r4, r5, r6, lr}
 8003c72:	4d0d      	ldr	r5, [pc, #52]	; (8003ca8 <__libc_init_array+0x38>)
 8003c74:	4c0d      	ldr	r4, [pc, #52]	; (8003cac <__libc_init_array+0x3c>)
 8003c76:	1b64      	subs	r4, r4, r5
 8003c78:	10a4      	asrs	r4, r4, #2
 8003c7a:	2600      	movs	r6, #0
 8003c7c:	42a6      	cmp	r6, r4
 8003c7e:	d109      	bne.n	8003c94 <__libc_init_array+0x24>
 8003c80:	4d0b      	ldr	r5, [pc, #44]	; (8003cb0 <__libc_init_array+0x40>)
 8003c82:	4c0c      	ldr	r4, [pc, #48]	; (8003cb4 <__libc_init_array+0x44>)
 8003c84:	f000 fd28 	bl	80046d8 <_init>
 8003c88:	1b64      	subs	r4, r4, r5
 8003c8a:	10a4      	asrs	r4, r4, #2
 8003c8c:	2600      	movs	r6, #0
 8003c8e:	42a6      	cmp	r6, r4
 8003c90:	d105      	bne.n	8003c9e <__libc_init_array+0x2e>
 8003c92:	bd70      	pop	{r4, r5, r6, pc}
 8003c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c98:	4798      	blx	r3
 8003c9a:	3601      	adds	r6, #1
 8003c9c:	e7ee      	b.n	8003c7c <__libc_init_array+0xc>
 8003c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca2:	4798      	blx	r3
 8003ca4:	3601      	adds	r6, #1
 8003ca6:	e7f2      	b.n	8003c8e <__libc_init_array+0x1e>
 8003ca8:	08004820 	.word	0x08004820
 8003cac:	08004820 	.word	0x08004820
 8003cb0:	08004820 	.word	0x08004820
 8003cb4:	08004824 	.word	0x08004824

08003cb8 <__retarget_lock_acquire_recursive>:
 8003cb8:	4770      	bx	lr

08003cba <__retarget_lock_release_recursive>:
 8003cba:	4770      	bx	lr

08003cbc <_free_r>:
 8003cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cbe:	2900      	cmp	r1, #0
 8003cc0:	d044      	beq.n	8003d4c <_free_r+0x90>
 8003cc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cc6:	9001      	str	r0, [sp, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f1a1 0404 	sub.w	r4, r1, #4
 8003cce:	bfb8      	it	lt
 8003cd0:	18e4      	addlt	r4, r4, r3
 8003cd2:	f000 f8df 	bl	8003e94 <__malloc_lock>
 8003cd6:	4a1e      	ldr	r2, [pc, #120]	; (8003d50 <_free_r+0x94>)
 8003cd8:	9801      	ldr	r0, [sp, #4]
 8003cda:	6813      	ldr	r3, [r2, #0]
 8003cdc:	b933      	cbnz	r3, 8003cec <_free_r+0x30>
 8003cde:	6063      	str	r3, [r4, #4]
 8003ce0:	6014      	str	r4, [r2, #0]
 8003ce2:	b003      	add	sp, #12
 8003ce4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ce8:	f000 b8da 	b.w	8003ea0 <__malloc_unlock>
 8003cec:	42a3      	cmp	r3, r4
 8003cee:	d908      	bls.n	8003d02 <_free_r+0x46>
 8003cf0:	6825      	ldr	r5, [r4, #0]
 8003cf2:	1961      	adds	r1, r4, r5
 8003cf4:	428b      	cmp	r3, r1
 8003cf6:	bf01      	itttt	eq
 8003cf8:	6819      	ldreq	r1, [r3, #0]
 8003cfa:	685b      	ldreq	r3, [r3, #4]
 8003cfc:	1949      	addeq	r1, r1, r5
 8003cfe:	6021      	streq	r1, [r4, #0]
 8003d00:	e7ed      	b.n	8003cde <_free_r+0x22>
 8003d02:	461a      	mov	r2, r3
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	b10b      	cbz	r3, 8003d0c <_free_r+0x50>
 8003d08:	42a3      	cmp	r3, r4
 8003d0a:	d9fa      	bls.n	8003d02 <_free_r+0x46>
 8003d0c:	6811      	ldr	r1, [r2, #0]
 8003d0e:	1855      	adds	r5, r2, r1
 8003d10:	42a5      	cmp	r5, r4
 8003d12:	d10b      	bne.n	8003d2c <_free_r+0x70>
 8003d14:	6824      	ldr	r4, [r4, #0]
 8003d16:	4421      	add	r1, r4
 8003d18:	1854      	adds	r4, r2, r1
 8003d1a:	42a3      	cmp	r3, r4
 8003d1c:	6011      	str	r1, [r2, #0]
 8003d1e:	d1e0      	bne.n	8003ce2 <_free_r+0x26>
 8003d20:	681c      	ldr	r4, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	6053      	str	r3, [r2, #4]
 8003d26:	440c      	add	r4, r1
 8003d28:	6014      	str	r4, [r2, #0]
 8003d2a:	e7da      	b.n	8003ce2 <_free_r+0x26>
 8003d2c:	d902      	bls.n	8003d34 <_free_r+0x78>
 8003d2e:	230c      	movs	r3, #12
 8003d30:	6003      	str	r3, [r0, #0]
 8003d32:	e7d6      	b.n	8003ce2 <_free_r+0x26>
 8003d34:	6825      	ldr	r5, [r4, #0]
 8003d36:	1961      	adds	r1, r4, r5
 8003d38:	428b      	cmp	r3, r1
 8003d3a:	bf04      	itt	eq
 8003d3c:	6819      	ldreq	r1, [r3, #0]
 8003d3e:	685b      	ldreq	r3, [r3, #4]
 8003d40:	6063      	str	r3, [r4, #4]
 8003d42:	bf04      	itt	eq
 8003d44:	1949      	addeq	r1, r1, r5
 8003d46:	6021      	streq	r1, [r4, #0]
 8003d48:	6054      	str	r4, [r2, #4]
 8003d4a:	e7ca      	b.n	8003ce2 <_free_r+0x26>
 8003d4c:	b003      	add	sp, #12
 8003d4e:	bd30      	pop	{r4, r5, pc}
 8003d50:	200002a4 	.word	0x200002a4

08003d54 <sbrk_aligned>:
 8003d54:	b570      	push	{r4, r5, r6, lr}
 8003d56:	4e0e      	ldr	r6, [pc, #56]	; (8003d90 <sbrk_aligned+0x3c>)
 8003d58:	460c      	mov	r4, r1
 8003d5a:	6831      	ldr	r1, [r6, #0]
 8003d5c:	4605      	mov	r5, r0
 8003d5e:	b911      	cbnz	r1, 8003d66 <sbrk_aligned+0x12>
 8003d60:	f000 fcaa 	bl	80046b8 <_sbrk_r>
 8003d64:	6030      	str	r0, [r6, #0]
 8003d66:	4621      	mov	r1, r4
 8003d68:	4628      	mov	r0, r5
 8003d6a:	f000 fca5 	bl	80046b8 <_sbrk_r>
 8003d6e:	1c43      	adds	r3, r0, #1
 8003d70:	d00a      	beq.n	8003d88 <sbrk_aligned+0x34>
 8003d72:	1cc4      	adds	r4, r0, #3
 8003d74:	f024 0403 	bic.w	r4, r4, #3
 8003d78:	42a0      	cmp	r0, r4
 8003d7a:	d007      	beq.n	8003d8c <sbrk_aligned+0x38>
 8003d7c:	1a21      	subs	r1, r4, r0
 8003d7e:	4628      	mov	r0, r5
 8003d80:	f000 fc9a 	bl	80046b8 <_sbrk_r>
 8003d84:	3001      	adds	r0, #1
 8003d86:	d101      	bne.n	8003d8c <sbrk_aligned+0x38>
 8003d88:	f04f 34ff 	mov.w	r4, #4294967295
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	bd70      	pop	{r4, r5, r6, pc}
 8003d90:	200002a8 	.word	0x200002a8

08003d94 <_malloc_r>:
 8003d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d98:	1ccd      	adds	r5, r1, #3
 8003d9a:	f025 0503 	bic.w	r5, r5, #3
 8003d9e:	3508      	adds	r5, #8
 8003da0:	2d0c      	cmp	r5, #12
 8003da2:	bf38      	it	cc
 8003da4:	250c      	movcc	r5, #12
 8003da6:	2d00      	cmp	r5, #0
 8003da8:	4607      	mov	r7, r0
 8003daa:	db01      	blt.n	8003db0 <_malloc_r+0x1c>
 8003dac:	42a9      	cmp	r1, r5
 8003dae:	d905      	bls.n	8003dbc <_malloc_r+0x28>
 8003db0:	230c      	movs	r3, #12
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	2600      	movs	r6, #0
 8003db6:	4630      	mov	r0, r6
 8003db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003e90 <_malloc_r+0xfc>
 8003dc0:	f000 f868 	bl	8003e94 <__malloc_lock>
 8003dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8003dc8:	461c      	mov	r4, r3
 8003dca:	bb5c      	cbnz	r4, 8003e24 <_malloc_r+0x90>
 8003dcc:	4629      	mov	r1, r5
 8003dce:	4638      	mov	r0, r7
 8003dd0:	f7ff ffc0 	bl	8003d54 <sbrk_aligned>
 8003dd4:	1c43      	adds	r3, r0, #1
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	d155      	bne.n	8003e86 <_malloc_r+0xf2>
 8003dda:	f8d8 4000 	ldr.w	r4, [r8]
 8003dde:	4626      	mov	r6, r4
 8003de0:	2e00      	cmp	r6, #0
 8003de2:	d145      	bne.n	8003e70 <_malloc_r+0xdc>
 8003de4:	2c00      	cmp	r4, #0
 8003de6:	d048      	beq.n	8003e7a <_malloc_r+0xe6>
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	4631      	mov	r1, r6
 8003dec:	4638      	mov	r0, r7
 8003dee:	eb04 0903 	add.w	r9, r4, r3
 8003df2:	f000 fc61 	bl	80046b8 <_sbrk_r>
 8003df6:	4581      	cmp	r9, r0
 8003df8:	d13f      	bne.n	8003e7a <_malloc_r+0xe6>
 8003dfa:	6821      	ldr	r1, [r4, #0]
 8003dfc:	1a6d      	subs	r5, r5, r1
 8003dfe:	4629      	mov	r1, r5
 8003e00:	4638      	mov	r0, r7
 8003e02:	f7ff ffa7 	bl	8003d54 <sbrk_aligned>
 8003e06:	3001      	adds	r0, #1
 8003e08:	d037      	beq.n	8003e7a <_malloc_r+0xe6>
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	442b      	add	r3, r5
 8003e0e:	6023      	str	r3, [r4, #0]
 8003e10:	f8d8 3000 	ldr.w	r3, [r8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d038      	beq.n	8003e8a <_malloc_r+0xf6>
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	42a2      	cmp	r2, r4
 8003e1c:	d12b      	bne.n	8003e76 <_malloc_r+0xe2>
 8003e1e:	2200      	movs	r2, #0
 8003e20:	605a      	str	r2, [r3, #4]
 8003e22:	e00f      	b.n	8003e44 <_malloc_r+0xb0>
 8003e24:	6822      	ldr	r2, [r4, #0]
 8003e26:	1b52      	subs	r2, r2, r5
 8003e28:	d41f      	bmi.n	8003e6a <_malloc_r+0xd6>
 8003e2a:	2a0b      	cmp	r2, #11
 8003e2c:	d917      	bls.n	8003e5e <_malloc_r+0xca>
 8003e2e:	1961      	adds	r1, r4, r5
 8003e30:	42a3      	cmp	r3, r4
 8003e32:	6025      	str	r5, [r4, #0]
 8003e34:	bf18      	it	ne
 8003e36:	6059      	strne	r1, [r3, #4]
 8003e38:	6863      	ldr	r3, [r4, #4]
 8003e3a:	bf08      	it	eq
 8003e3c:	f8c8 1000 	streq.w	r1, [r8]
 8003e40:	5162      	str	r2, [r4, r5]
 8003e42:	604b      	str	r3, [r1, #4]
 8003e44:	4638      	mov	r0, r7
 8003e46:	f104 060b 	add.w	r6, r4, #11
 8003e4a:	f000 f829 	bl	8003ea0 <__malloc_unlock>
 8003e4e:	f026 0607 	bic.w	r6, r6, #7
 8003e52:	1d23      	adds	r3, r4, #4
 8003e54:	1af2      	subs	r2, r6, r3
 8003e56:	d0ae      	beq.n	8003db6 <_malloc_r+0x22>
 8003e58:	1b9b      	subs	r3, r3, r6
 8003e5a:	50a3      	str	r3, [r4, r2]
 8003e5c:	e7ab      	b.n	8003db6 <_malloc_r+0x22>
 8003e5e:	42a3      	cmp	r3, r4
 8003e60:	6862      	ldr	r2, [r4, #4]
 8003e62:	d1dd      	bne.n	8003e20 <_malloc_r+0x8c>
 8003e64:	f8c8 2000 	str.w	r2, [r8]
 8003e68:	e7ec      	b.n	8003e44 <_malloc_r+0xb0>
 8003e6a:	4623      	mov	r3, r4
 8003e6c:	6864      	ldr	r4, [r4, #4]
 8003e6e:	e7ac      	b.n	8003dca <_malloc_r+0x36>
 8003e70:	4634      	mov	r4, r6
 8003e72:	6876      	ldr	r6, [r6, #4]
 8003e74:	e7b4      	b.n	8003de0 <_malloc_r+0x4c>
 8003e76:	4613      	mov	r3, r2
 8003e78:	e7cc      	b.n	8003e14 <_malloc_r+0x80>
 8003e7a:	230c      	movs	r3, #12
 8003e7c:	603b      	str	r3, [r7, #0]
 8003e7e:	4638      	mov	r0, r7
 8003e80:	f000 f80e 	bl	8003ea0 <__malloc_unlock>
 8003e84:	e797      	b.n	8003db6 <_malloc_r+0x22>
 8003e86:	6025      	str	r5, [r4, #0]
 8003e88:	e7dc      	b.n	8003e44 <_malloc_r+0xb0>
 8003e8a:	605b      	str	r3, [r3, #4]
 8003e8c:	deff      	udf	#255	; 0xff
 8003e8e:	bf00      	nop
 8003e90:	200002a4 	.word	0x200002a4

08003e94 <__malloc_lock>:
 8003e94:	4801      	ldr	r0, [pc, #4]	; (8003e9c <__malloc_lock+0x8>)
 8003e96:	f7ff bf0f 	b.w	8003cb8 <__retarget_lock_acquire_recursive>
 8003e9a:	bf00      	nop
 8003e9c:	200002a0 	.word	0x200002a0

08003ea0 <__malloc_unlock>:
 8003ea0:	4801      	ldr	r0, [pc, #4]	; (8003ea8 <__malloc_unlock+0x8>)
 8003ea2:	f7ff bf0a 	b.w	8003cba <__retarget_lock_release_recursive>
 8003ea6:	bf00      	nop
 8003ea8:	200002a0 	.word	0x200002a0

08003eac <__sfputc_r>:
 8003eac:	6893      	ldr	r3, [r2, #8]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	b410      	push	{r4}
 8003eb4:	6093      	str	r3, [r2, #8]
 8003eb6:	da08      	bge.n	8003eca <__sfputc_r+0x1e>
 8003eb8:	6994      	ldr	r4, [r2, #24]
 8003eba:	42a3      	cmp	r3, r4
 8003ebc:	db01      	blt.n	8003ec2 <__sfputc_r+0x16>
 8003ebe:	290a      	cmp	r1, #10
 8003ec0:	d103      	bne.n	8003eca <__sfputc_r+0x1e>
 8003ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ec6:	f7ff bdea 	b.w	8003a9e <__swbuf_r>
 8003eca:	6813      	ldr	r3, [r2, #0]
 8003ecc:	1c58      	adds	r0, r3, #1
 8003ece:	6010      	str	r0, [r2, #0]
 8003ed0:	7019      	strb	r1, [r3, #0]
 8003ed2:	4608      	mov	r0, r1
 8003ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <__sfputs_r>:
 8003eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003edc:	4606      	mov	r6, r0
 8003ede:	460f      	mov	r7, r1
 8003ee0:	4614      	mov	r4, r2
 8003ee2:	18d5      	adds	r5, r2, r3
 8003ee4:	42ac      	cmp	r4, r5
 8003ee6:	d101      	bne.n	8003eec <__sfputs_r+0x12>
 8003ee8:	2000      	movs	r0, #0
 8003eea:	e007      	b.n	8003efc <__sfputs_r+0x22>
 8003eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ef0:	463a      	mov	r2, r7
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	f7ff ffda 	bl	8003eac <__sfputc_r>
 8003ef8:	1c43      	adds	r3, r0, #1
 8003efa:	d1f3      	bne.n	8003ee4 <__sfputs_r+0xa>
 8003efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f00 <_vfiprintf_r>:
 8003f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f04:	460d      	mov	r5, r1
 8003f06:	b09d      	sub	sp, #116	; 0x74
 8003f08:	4614      	mov	r4, r2
 8003f0a:	4698      	mov	r8, r3
 8003f0c:	4606      	mov	r6, r0
 8003f0e:	b118      	cbz	r0, 8003f18 <_vfiprintf_r+0x18>
 8003f10:	6a03      	ldr	r3, [r0, #32]
 8003f12:	b90b      	cbnz	r3, 8003f18 <_vfiprintf_r+0x18>
 8003f14:	f7ff fcdc 	bl	80038d0 <__sinit>
 8003f18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f1a:	07d9      	lsls	r1, r3, #31
 8003f1c:	d405      	bmi.n	8003f2a <_vfiprintf_r+0x2a>
 8003f1e:	89ab      	ldrh	r3, [r5, #12]
 8003f20:	059a      	lsls	r2, r3, #22
 8003f22:	d402      	bmi.n	8003f2a <_vfiprintf_r+0x2a>
 8003f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f26:	f7ff fec7 	bl	8003cb8 <__retarget_lock_acquire_recursive>
 8003f2a:	89ab      	ldrh	r3, [r5, #12]
 8003f2c:	071b      	lsls	r3, r3, #28
 8003f2e:	d501      	bpl.n	8003f34 <_vfiprintf_r+0x34>
 8003f30:	692b      	ldr	r3, [r5, #16]
 8003f32:	b99b      	cbnz	r3, 8003f5c <_vfiprintf_r+0x5c>
 8003f34:	4629      	mov	r1, r5
 8003f36:	4630      	mov	r0, r6
 8003f38:	f7ff fdee 	bl	8003b18 <__swsetup_r>
 8003f3c:	b170      	cbz	r0, 8003f5c <_vfiprintf_r+0x5c>
 8003f3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f40:	07dc      	lsls	r4, r3, #31
 8003f42:	d504      	bpl.n	8003f4e <_vfiprintf_r+0x4e>
 8003f44:	f04f 30ff 	mov.w	r0, #4294967295
 8003f48:	b01d      	add	sp, #116	; 0x74
 8003f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f4e:	89ab      	ldrh	r3, [r5, #12]
 8003f50:	0598      	lsls	r0, r3, #22
 8003f52:	d4f7      	bmi.n	8003f44 <_vfiprintf_r+0x44>
 8003f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f56:	f7ff feb0 	bl	8003cba <__retarget_lock_release_recursive>
 8003f5a:	e7f3      	b.n	8003f44 <_vfiprintf_r+0x44>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f60:	2320      	movs	r3, #32
 8003f62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f66:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f6a:	2330      	movs	r3, #48	; 0x30
 8003f6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004120 <_vfiprintf_r+0x220>
 8003f70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f74:	f04f 0901 	mov.w	r9, #1
 8003f78:	4623      	mov	r3, r4
 8003f7a:	469a      	mov	sl, r3
 8003f7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f80:	b10a      	cbz	r2, 8003f86 <_vfiprintf_r+0x86>
 8003f82:	2a25      	cmp	r2, #37	; 0x25
 8003f84:	d1f9      	bne.n	8003f7a <_vfiprintf_r+0x7a>
 8003f86:	ebba 0b04 	subs.w	fp, sl, r4
 8003f8a:	d00b      	beq.n	8003fa4 <_vfiprintf_r+0xa4>
 8003f8c:	465b      	mov	r3, fp
 8003f8e:	4622      	mov	r2, r4
 8003f90:	4629      	mov	r1, r5
 8003f92:	4630      	mov	r0, r6
 8003f94:	f7ff ffa1 	bl	8003eda <__sfputs_r>
 8003f98:	3001      	adds	r0, #1
 8003f9a:	f000 80a9 	beq.w	80040f0 <_vfiprintf_r+0x1f0>
 8003f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fa0:	445a      	add	r2, fp
 8003fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8003fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80a1 	beq.w	80040f0 <_vfiprintf_r+0x1f0>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fb8:	f10a 0a01 	add.w	sl, sl, #1
 8003fbc:	9304      	str	r3, [sp, #16]
 8003fbe:	9307      	str	r3, [sp, #28]
 8003fc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fc4:	931a      	str	r3, [sp, #104]	; 0x68
 8003fc6:	4654      	mov	r4, sl
 8003fc8:	2205      	movs	r2, #5
 8003fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fce:	4854      	ldr	r0, [pc, #336]	; (8004120 <_vfiprintf_r+0x220>)
 8003fd0:	f7fc f91e 	bl	8000210 <memchr>
 8003fd4:	9a04      	ldr	r2, [sp, #16]
 8003fd6:	b9d8      	cbnz	r0, 8004010 <_vfiprintf_r+0x110>
 8003fd8:	06d1      	lsls	r1, r2, #27
 8003fda:	bf44      	itt	mi
 8003fdc:	2320      	movmi	r3, #32
 8003fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fe2:	0713      	lsls	r3, r2, #28
 8003fe4:	bf44      	itt	mi
 8003fe6:	232b      	movmi	r3, #43	; 0x2b
 8003fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fec:	f89a 3000 	ldrb.w	r3, [sl]
 8003ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ff2:	d015      	beq.n	8004020 <_vfiprintf_r+0x120>
 8003ff4:	9a07      	ldr	r2, [sp, #28]
 8003ff6:	4654      	mov	r4, sl
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	f04f 0c0a 	mov.w	ip, #10
 8003ffe:	4621      	mov	r1, r4
 8004000:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004004:	3b30      	subs	r3, #48	; 0x30
 8004006:	2b09      	cmp	r3, #9
 8004008:	d94d      	bls.n	80040a6 <_vfiprintf_r+0x1a6>
 800400a:	b1b0      	cbz	r0, 800403a <_vfiprintf_r+0x13a>
 800400c:	9207      	str	r2, [sp, #28]
 800400e:	e014      	b.n	800403a <_vfiprintf_r+0x13a>
 8004010:	eba0 0308 	sub.w	r3, r0, r8
 8004014:	fa09 f303 	lsl.w	r3, r9, r3
 8004018:	4313      	orrs	r3, r2
 800401a:	9304      	str	r3, [sp, #16]
 800401c:	46a2      	mov	sl, r4
 800401e:	e7d2      	b.n	8003fc6 <_vfiprintf_r+0xc6>
 8004020:	9b03      	ldr	r3, [sp, #12]
 8004022:	1d19      	adds	r1, r3, #4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	9103      	str	r1, [sp, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	bfbb      	ittet	lt
 800402c:	425b      	neglt	r3, r3
 800402e:	f042 0202 	orrlt.w	r2, r2, #2
 8004032:	9307      	strge	r3, [sp, #28]
 8004034:	9307      	strlt	r3, [sp, #28]
 8004036:	bfb8      	it	lt
 8004038:	9204      	strlt	r2, [sp, #16]
 800403a:	7823      	ldrb	r3, [r4, #0]
 800403c:	2b2e      	cmp	r3, #46	; 0x2e
 800403e:	d10c      	bne.n	800405a <_vfiprintf_r+0x15a>
 8004040:	7863      	ldrb	r3, [r4, #1]
 8004042:	2b2a      	cmp	r3, #42	; 0x2a
 8004044:	d134      	bne.n	80040b0 <_vfiprintf_r+0x1b0>
 8004046:	9b03      	ldr	r3, [sp, #12]
 8004048:	1d1a      	adds	r2, r3, #4
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	9203      	str	r2, [sp, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	bfb8      	it	lt
 8004052:	f04f 33ff 	movlt.w	r3, #4294967295
 8004056:	3402      	adds	r4, #2
 8004058:	9305      	str	r3, [sp, #20]
 800405a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004130 <_vfiprintf_r+0x230>
 800405e:	7821      	ldrb	r1, [r4, #0]
 8004060:	2203      	movs	r2, #3
 8004062:	4650      	mov	r0, sl
 8004064:	f7fc f8d4 	bl	8000210 <memchr>
 8004068:	b138      	cbz	r0, 800407a <_vfiprintf_r+0x17a>
 800406a:	9b04      	ldr	r3, [sp, #16]
 800406c:	eba0 000a 	sub.w	r0, r0, sl
 8004070:	2240      	movs	r2, #64	; 0x40
 8004072:	4082      	lsls	r2, r0
 8004074:	4313      	orrs	r3, r2
 8004076:	3401      	adds	r4, #1
 8004078:	9304      	str	r3, [sp, #16]
 800407a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800407e:	4829      	ldr	r0, [pc, #164]	; (8004124 <_vfiprintf_r+0x224>)
 8004080:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004084:	2206      	movs	r2, #6
 8004086:	f7fc f8c3 	bl	8000210 <memchr>
 800408a:	2800      	cmp	r0, #0
 800408c:	d03f      	beq.n	800410e <_vfiprintf_r+0x20e>
 800408e:	4b26      	ldr	r3, [pc, #152]	; (8004128 <_vfiprintf_r+0x228>)
 8004090:	bb1b      	cbnz	r3, 80040da <_vfiprintf_r+0x1da>
 8004092:	9b03      	ldr	r3, [sp, #12]
 8004094:	3307      	adds	r3, #7
 8004096:	f023 0307 	bic.w	r3, r3, #7
 800409a:	3308      	adds	r3, #8
 800409c:	9303      	str	r3, [sp, #12]
 800409e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040a0:	443b      	add	r3, r7
 80040a2:	9309      	str	r3, [sp, #36]	; 0x24
 80040a4:	e768      	b.n	8003f78 <_vfiprintf_r+0x78>
 80040a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80040aa:	460c      	mov	r4, r1
 80040ac:	2001      	movs	r0, #1
 80040ae:	e7a6      	b.n	8003ffe <_vfiprintf_r+0xfe>
 80040b0:	2300      	movs	r3, #0
 80040b2:	3401      	adds	r4, #1
 80040b4:	9305      	str	r3, [sp, #20]
 80040b6:	4619      	mov	r1, r3
 80040b8:	f04f 0c0a 	mov.w	ip, #10
 80040bc:	4620      	mov	r0, r4
 80040be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040c2:	3a30      	subs	r2, #48	; 0x30
 80040c4:	2a09      	cmp	r2, #9
 80040c6:	d903      	bls.n	80040d0 <_vfiprintf_r+0x1d0>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0c6      	beq.n	800405a <_vfiprintf_r+0x15a>
 80040cc:	9105      	str	r1, [sp, #20]
 80040ce:	e7c4      	b.n	800405a <_vfiprintf_r+0x15a>
 80040d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80040d4:	4604      	mov	r4, r0
 80040d6:	2301      	movs	r3, #1
 80040d8:	e7f0      	b.n	80040bc <_vfiprintf_r+0x1bc>
 80040da:	ab03      	add	r3, sp, #12
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	462a      	mov	r2, r5
 80040e0:	4b12      	ldr	r3, [pc, #72]	; (800412c <_vfiprintf_r+0x22c>)
 80040e2:	a904      	add	r1, sp, #16
 80040e4:	4630      	mov	r0, r6
 80040e6:	f3af 8000 	nop.w
 80040ea:	4607      	mov	r7, r0
 80040ec:	1c78      	adds	r0, r7, #1
 80040ee:	d1d6      	bne.n	800409e <_vfiprintf_r+0x19e>
 80040f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040f2:	07d9      	lsls	r1, r3, #31
 80040f4:	d405      	bmi.n	8004102 <_vfiprintf_r+0x202>
 80040f6:	89ab      	ldrh	r3, [r5, #12]
 80040f8:	059a      	lsls	r2, r3, #22
 80040fa:	d402      	bmi.n	8004102 <_vfiprintf_r+0x202>
 80040fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040fe:	f7ff fddc 	bl	8003cba <__retarget_lock_release_recursive>
 8004102:	89ab      	ldrh	r3, [r5, #12]
 8004104:	065b      	lsls	r3, r3, #25
 8004106:	f53f af1d 	bmi.w	8003f44 <_vfiprintf_r+0x44>
 800410a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800410c:	e71c      	b.n	8003f48 <_vfiprintf_r+0x48>
 800410e:	ab03      	add	r3, sp, #12
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	462a      	mov	r2, r5
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <_vfiprintf_r+0x22c>)
 8004116:	a904      	add	r1, sp, #16
 8004118:	4630      	mov	r0, r6
 800411a:	f000 f879 	bl	8004210 <_printf_i>
 800411e:	e7e4      	b.n	80040ea <_vfiprintf_r+0x1ea>
 8004120:	080047e4 	.word	0x080047e4
 8004124:	080047ee 	.word	0x080047ee
 8004128:	00000000 	.word	0x00000000
 800412c:	08003edb 	.word	0x08003edb
 8004130:	080047ea 	.word	0x080047ea

08004134 <_printf_common>:
 8004134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004138:	4616      	mov	r6, r2
 800413a:	4699      	mov	r9, r3
 800413c:	688a      	ldr	r2, [r1, #8]
 800413e:	690b      	ldr	r3, [r1, #16]
 8004140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004144:	4293      	cmp	r3, r2
 8004146:	bfb8      	it	lt
 8004148:	4613      	movlt	r3, r2
 800414a:	6033      	str	r3, [r6, #0]
 800414c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004150:	4607      	mov	r7, r0
 8004152:	460c      	mov	r4, r1
 8004154:	b10a      	cbz	r2, 800415a <_printf_common+0x26>
 8004156:	3301      	adds	r3, #1
 8004158:	6033      	str	r3, [r6, #0]
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	0699      	lsls	r1, r3, #26
 800415e:	bf42      	ittt	mi
 8004160:	6833      	ldrmi	r3, [r6, #0]
 8004162:	3302      	addmi	r3, #2
 8004164:	6033      	strmi	r3, [r6, #0]
 8004166:	6825      	ldr	r5, [r4, #0]
 8004168:	f015 0506 	ands.w	r5, r5, #6
 800416c:	d106      	bne.n	800417c <_printf_common+0x48>
 800416e:	f104 0a19 	add.w	sl, r4, #25
 8004172:	68e3      	ldr	r3, [r4, #12]
 8004174:	6832      	ldr	r2, [r6, #0]
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	42ab      	cmp	r3, r5
 800417a:	dc26      	bgt.n	80041ca <_printf_common+0x96>
 800417c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004180:	1e13      	subs	r3, r2, #0
 8004182:	6822      	ldr	r2, [r4, #0]
 8004184:	bf18      	it	ne
 8004186:	2301      	movne	r3, #1
 8004188:	0692      	lsls	r2, r2, #26
 800418a:	d42b      	bmi.n	80041e4 <_printf_common+0xb0>
 800418c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004190:	4649      	mov	r1, r9
 8004192:	4638      	mov	r0, r7
 8004194:	47c0      	blx	r8
 8004196:	3001      	adds	r0, #1
 8004198:	d01e      	beq.n	80041d8 <_printf_common+0xa4>
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	6922      	ldr	r2, [r4, #16]
 800419e:	f003 0306 	and.w	r3, r3, #6
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	bf02      	ittt	eq
 80041a6:	68e5      	ldreq	r5, [r4, #12]
 80041a8:	6833      	ldreq	r3, [r6, #0]
 80041aa:	1aed      	subeq	r5, r5, r3
 80041ac:	68a3      	ldr	r3, [r4, #8]
 80041ae:	bf0c      	ite	eq
 80041b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041b4:	2500      	movne	r5, #0
 80041b6:	4293      	cmp	r3, r2
 80041b8:	bfc4      	itt	gt
 80041ba:	1a9b      	subgt	r3, r3, r2
 80041bc:	18ed      	addgt	r5, r5, r3
 80041be:	2600      	movs	r6, #0
 80041c0:	341a      	adds	r4, #26
 80041c2:	42b5      	cmp	r5, r6
 80041c4:	d11a      	bne.n	80041fc <_printf_common+0xc8>
 80041c6:	2000      	movs	r0, #0
 80041c8:	e008      	b.n	80041dc <_printf_common+0xa8>
 80041ca:	2301      	movs	r3, #1
 80041cc:	4652      	mov	r2, sl
 80041ce:	4649      	mov	r1, r9
 80041d0:	4638      	mov	r0, r7
 80041d2:	47c0      	blx	r8
 80041d4:	3001      	adds	r0, #1
 80041d6:	d103      	bne.n	80041e0 <_printf_common+0xac>
 80041d8:	f04f 30ff 	mov.w	r0, #4294967295
 80041dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e0:	3501      	adds	r5, #1
 80041e2:	e7c6      	b.n	8004172 <_printf_common+0x3e>
 80041e4:	18e1      	adds	r1, r4, r3
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	2030      	movs	r0, #48	; 0x30
 80041ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041ee:	4422      	add	r2, r4
 80041f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041f8:	3302      	adds	r3, #2
 80041fa:	e7c7      	b.n	800418c <_printf_common+0x58>
 80041fc:	2301      	movs	r3, #1
 80041fe:	4622      	mov	r2, r4
 8004200:	4649      	mov	r1, r9
 8004202:	4638      	mov	r0, r7
 8004204:	47c0      	blx	r8
 8004206:	3001      	adds	r0, #1
 8004208:	d0e6      	beq.n	80041d8 <_printf_common+0xa4>
 800420a:	3601      	adds	r6, #1
 800420c:	e7d9      	b.n	80041c2 <_printf_common+0x8e>
	...

08004210 <_printf_i>:
 8004210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004214:	7e0f      	ldrb	r7, [r1, #24]
 8004216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004218:	2f78      	cmp	r7, #120	; 0x78
 800421a:	4691      	mov	r9, r2
 800421c:	4680      	mov	r8, r0
 800421e:	460c      	mov	r4, r1
 8004220:	469a      	mov	sl, r3
 8004222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004226:	d807      	bhi.n	8004238 <_printf_i+0x28>
 8004228:	2f62      	cmp	r7, #98	; 0x62
 800422a:	d80a      	bhi.n	8004242 <_printf_i+0x32>
 800422c:	2f00      	cmp	r7, #0
 800422e:	f000 80d4 	beq.w	80043da <_printf_i+0x1ca>
 8004232:	2f58      	cmp	r7, #88	; 0x58
 8004234:	f000 80c0 	beq.w	80043b8 <_printf_i+0x1a8>
 8004238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800423c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004240:	e03a      	b.n	80042b8 <_printf_i+0xa8>
 8004242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004246:	2b15      	cmp	r3, #21
 8004248:	d8f6      	bhi.n	8004238 <_printf_i+0x28>
 800424a:	a101      	add	r1, pc, #4	; (adr r1, 8004250 <_printf_i+0x40>)
 800424c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004250:	080042a9 	.word	0x080042a9
 8004254:	080042bd 	.word	0x080042bd
 8004258:	08004239 	.word	0x08004239
 800425c:	08004239 	.word	0x08004239
 8004260:	08004239 	.word	0x08004239
 8004264:	08004239 	.word	0x08004239
 8004268:	080042bd 	.word	0x080042bd
 800426c:	08004239 	.word	0x08004239
 8004270:	08004239 	.word	0x08004239
 8004274:	08004239 	.word	0x08004239
 8004278:	08004239 	.word	0x08004239
 800427c:	080043c1 	.word	0x080043c1
 8004280:	080042e9 	.word	0x080042e9
 8004284:	0800437b 	.word	0x0800437b
 8004288:	08004239 	.word	0x08004239
 800428c:	08004239 	.word	0x08004239
 8004290:	080043e3 	.word	0x080043e3
 8004294:	08004239 	.word	0x08004239
 8004298:	080042e9 	.word	0x080042e9
 800429c:	08004239 	.word	0x08004239
 80042a0:	08004239 	.word	0x08004239
 80042a4:	08004383 	.word	0x08004383
 80042a8:	682b      	ldr	r3, [r5, #0]
 80042aa:	1d1a      	adds	r2, r3, #4
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	602a      	str	r2, [r5, #0]
 80042b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042b8:	2301      	movs	r3, #1
 80042ba:	e09f      	b.n	80043fc <_printf_i+0x1ec>
 80042bc:	6820      	ldr	r0, [r4, #0]
 80042be:	682b      	ldr	r3, [r5, #0]
 80042c0:	0607      	lsls	r7, r0, #24
 80042c2:	f103 0104 	add.w	r1, r3, #4
 80042c6:	6029      	str	r1, [r5, #0]
 80042c8:	d501      	bpl.n	80042ce <_printf_i+0xbe>
 80042ca:	681e      	ldr	r6, [r3, #0]
 80042cc:	e003      	b.n	80042d6 <_printf_i+0xc6>
 80042ce:	0646      	lsls	r6, r0, #25
 80042d0:	d5fb      	bpl.n	80042ca <_printf_i+0xba>
 80042d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80042d6:	2e00      	cmp	r6, #0
 80042d8:	da03      	bge.n	80042e2 <_printf_i+0xd2>
 80042da:	232d      	movs	r3, #45	; 0x2d
 80042dc:	4276      	negs	r6, r6
 80042de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042e2:	485a      	ldr	r0, [pc, #360]	; (800444c <_printf_i+0x23c>)
 80042e4:	230a      	movs	r3, #10
 80042e6:	e012      	b.n	800430e <_printf_i+0xfe>
 80042e8:	682b      	ldr	r3, [r5, #0]
 80042ea:	6820      	ldr	r0, [r4, #0]
 80042ec:	1d19      	adds	r1, r3, #4
 80042ee:	6029      	str	r1, [r5, #0]
 80042f0:	0605      	lsls	r5, r0, #24
 80042f2:	d501      	bpl.n	80042f8 <_printf_i+0xe8>
 80042f4:	681e      	ldr	r6, [r3, #0]
 80042f6:	e002      	b.n	80042fe <_printf_i+0xee>
 80042f8:	0641      	lsls	r1, r0, #25
 80042fa:	d5fb      	bpl.n	80042f4 <_printf_i+0xe4>
 80042fc:	881e      	ldrh	r6, [r3, #0]
 80042fe:	4853      	ldr	r0, [pc, #332]	; (800444c <_printf_i+0x23c>)
 8004300:	2f6f      	cmp	r7, #111	; 0x6f
 8004302:	bf0c      	ite	eq
 8004304:	2308      	moveq	r3, #8
 8004306:	230a      	movne	r3, #10
 8004308:	2100      	movs	r1, #0
 800430a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800430e:	6865      	ldr	r5, [r4, #4]
 8004310:	60a5      	str	r5, [r4, #8]
 8004312:	2d00      	cmp	r5, #0
 8004314:	bfa2      	ittt	ge
 8004316:	6821      	ldrge	r1, [r4, #0]
 8004318:	f021 0104 	bicge.w	r1, r1, #4
 800431c:	6021      	strge	r1, [r4, #0]
 800431e:	b90e      	cbnz	r6, 8004324 <_printf_i+0x114>
 8004320:	2d00      	cmp	r5, #0
 8004322:	d04b      	beq.n	80043bc <_printf_i+0x1ac>
 8004324:	4615      	mov	r5, r2
 8004326:	fbb6 f1f3 	udiv	r1, r6, r3
 800432a:	fb03 6711 	mls	r7, r3, r1, r6
 800432e:	5dc7      	ldrb	r7, [r0, r7]
 8004330:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004334:	4637      	mov	r7, r6
 8004336:	42bb      	cmp	r3, r7
 8004338:	460e      	mov	r6, r1
 800433a:	d9f4      	bls.n	8004326 <_printf_i+0x116>
 800433c:	2b08      	cmp	r3, #8
 800433e:	d10b      	bne.n	8004358 <_printf_i+0x148>
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	07de      	lsls	r6, r3, #31
 8004344:	d508      	bpl.n	8004358 <_printf_i+0x148>
 8004346:	6923      	ldr	r3, [r4, #16]
 8004348:	6861      	ldr	r1, [r4, #4]
 800434a:	4299      	cmp	r1, r3
 800434c:	bfde      	ittt	le
 800434e:	2330      	movle	r3, #48	; 0x30
 8004350:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004354:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004358:	1b52      	subs	r2, r2, r5
 800435a:	6122      	str	r2, [r4, #16]
 800435c:	f8cd a000 	str.w	sl, [sp]
 8004360:	464b      	mov	r3, r9
 8004362:	aa03      	add	r2, sp, #12
 8004364:	4621      	mov	r1, r4
 8004366:	4640      	mov	r0, r8
 8004368:	f7ff fee4 	bl	8004134 <_printf_common>
 800436c:	3001      	adds	r0, #1
 800436e:	d14a      	bne.n	8004406 <_printf_i+0x1f6>
 8004370:	f04f 30ff 	mov.w	r0, #4294967295
 8004374:	b004      	add	sp, #16
 8004376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	f043 0320 	orr.w	r3, r3, #32
 8004380:	6023      	str	r3, [r4, #0]
 8004382:	4833      	ldr	r0, [pc, #204]	; (8004450 <_printf_i+0x240>)
 8004384:	2778      	movs	r7, #120	; 0x78
 8004386:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	6829      	ldr	r1, [r5, #0]
 800438e:	061f      	lsls	r7, r3, #24
 8004390:	f851 6b04 	ldr.w	r6, [r1], #4
 8004394:	d402      	bmi.n	800439c <_printf_i+0x18c>
 8004396:	065f      	lsls	r7, r3, #25
 8004398:	bf48      	it	mi
 800439a:	b2b6      	uxthmi	r6, r6
 800439c:	07df      	lsls	r7, r3, #31
 800439e:	bf48      	it	mi
 80043a0:	f043 0320 	orrmi.w	r3, r3, #32
 80043a4:	6029      	str	r1, [r5, #0]
 80043a6:	bf48      	it	mi
 80043a8:	6023      	strmi	r3, [r4, #0]
 80043aa:	b91e      	cbnz	r6, 80043b4 <_printf_i+0x1a4>
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	f023 0320 	bic.w	r3, r3, #32
 80043b2:	6023      	str	r3, [r4, #0]
 80043b4:	2310      	movs	r3, #16
 80043b6:	e7a7      	b.n	8004308 <_printf_i+0xf8>
 80043b8:	4824      	ldr	r0, [pc, #144]	; (800444c <_printf_i+0x23c>)
 80043ba:	e7e4      	b.n	8004386 <_printf_i+0x176>
 80043bc:	4615      	mov	r5, r2
 80043be:	e7bd      	b.n	800433c <_printf_i+0x12c>
 80043c0:	682b      	ldr	r3, [r5, #0]
 80043c2:	6826      	ldr	r6, [r4, #0]
 80043c4:	6961      	ldr	r1, [r4, #20]
 80043c6:	1d18      	adds	r0, r3, #4
 80043c8:	6028      	str	r0, [r5, #0]
 80043ca:	0635      	lsls	r5, r6, #24
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	d501      	bpl.n	80043d4 <_printf_i+0x1c4>
 80043d0:	6019      	str	r1, [r3, #0]
 80043d2:	e002      	b.n	80043da <_printf_i+0x1ca>
 80043d4:	0670      	lsls	r0, r6, #25
 80043d6:	d5fb      	bpl.n	80043d0 <_printf_i+0x1c0>
 80043d8:	8019      	strh	r1, [r3, #0]
 80043da:	2300      	movs	r3, #0
 80043dc:	6123      	str	r3, [r4, #16]
 80043de:	4615      	mov	r5, r2
 80043e0:	e7bc      	b.n	800435c <_printf_i+0x14c>
 80043e2:	682b      	ldr	r3, [r5, #0]
 80043e4:	1d1a      	adds	r2, r3, #4
 80043e6:	602a      	str	r2, [r5, #0]
 80043e8:	681d      	ldr	r5, [r3, #0]
 80043ea:	6862      	ldr	r2, [r4, #4]
 80043ec:	2100      	movs	r1, #0
 80043ee:	4628      	mov	r0, r5
 80043f0:	f7fb ff0e 	bl	8000210 <memchr>
 80043f4:	b108      	cbz	r0, 80043fa <_printf_i+0x1ea>
 80043f6:	1b40      	subs	r0, r0, r5
 80043f8:	6060      	str	r0, [r4, #4]
 80043fa:	6863      	ldr	r3, [r4, #4]
 80043fc:	6123      	str	r3, [r4, #16]
 80043fe:	2300      	movs	r3, #0
 8004400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004404:	e7aa      	b.n	800435c <_printf_i+0x14c>
 8004406:	6923      	ldr	r3, [r4, #16]
 8004408:	462a      	mov	r2, r5
 800440a:	4649      	mov	r1, r9
 800440c:	4640      	mov	r0, r8
 800440e:	47d0      	blx	sl
 8004410:	3001      	adds	r0, #1
 8004412:	d0ad      	beq.n	8004370 <_printf_i+0x160>
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	079b      	lsls	r3, r3, #30
 8004418:	d413      	bmi.n	8004442 <_printf_i+0x232>
 800441a:	68e0      	ldr	r0, [r4, #12]
 800441c:	9b03      	ldr	r3, [sp, #12]
 800441e:	4298      	cmp	r0, r3
 8004420:	bfb8      	it	lt
 8004422:	4618      	movlt	r0, r3
 8004424:	e7a6      	b.n	8004374 <_printf_i+0x164>
 8004426:	2301      	movs	r3, #1
 8004428:	4632      	mov	r2, r6
 800442a:	4649      	mov	r1, r9
 800442c:	4640      	mov	r0, r8
 800442e:	47d0      	blx	sl
 8004430:	3001      	adds	r0, #1
 8004432:	d09d      	beq.n	8004370 <_printf_i+0x160>
 8004434:	3501      	adds	r5, #1
 8004436:	68e3      	ldr	r3, [r4, #12]
 8004438:	9903      	ldr	r1, [sp, #12]
 800443a:	1a5b      	subs	r3, r3, r1
 800443c:	42ab      	cmp	r3, r5
 800443e:	dcf2      	bgt.n	8004426 <_printf_i+0x216>
 8004440:	e7eb      	b.n	800441a <_printf_i+0x20a>
 8004442:	2500      	movs	r5, #0
 8004444:	f104 0619 	add.w	r6, r4, #25
 8004448:	e7f5      	b.n	8004436 <_printf_i+0x226>
 800444a:	bf00      	nop
 800444c:	080047f5 	.word	0x080047f5
 8004450:	08004806 	.word	0x08004806

08004454 <__sflush_r>:
 8004454:	898a      	ldrh	r2, [r1, #12]
 8004456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800445a:	4605      	mov	r5, r0
 800445c:	0710      	lsls	r0, r2, #28
 800445e:	460c      	mov	r4, r1
 8004460:	d458      	bmi.n	8004514 <__sflush_r+0xc0>
 8004462:	684b      	ldr	r3, [r1, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	dc05      	bgt.n	8004474 <__sflush_r+0x20>
 8004468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	dc02      	bgt.n	8004474 <__sflush_r+0x20>
 800446e:	2000      	movs	r0, #0
 8004470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004476:	2e00      	cmp	r6, #0
 8004478:	d0f9      	beq.n	800446e <__sflush_r+0x1a>
 800447a:	2300      	movs	r3, #0
 800447c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004480:	682f      	ldr	r7, [r5, #0]
 8004482:	6a21      	ldr	r1, [r4, #32]
 8004484:	602b      	str	r3, [r5, #0]
 8004486:	d032      	beq.n	80044ee <__sflush_r+0x9a>
 8004488:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800448a:	89a3      	ldrh	r3, [r4, #12]
 800448c:	075a      	lsls	r2, r3, #29
 800448e:	d505      	bpl.n	800449c <__sflush_r+0x48>
 8004490:	6863      	ldr	r3, [r4, #4]
 8004492:	1ac0      	subs	r0, r0, r3
 8004494:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004496:	b10b      	cbz	r3, 800449c <__sflush_r+0x48>
 8004498:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800449a:	1ac0      	subs	r0, r0, r3
 800449c:	2300      	movs	r3, #0
 800449e:	4602      	mov	r2, r0
 80044a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044a2:	6a21      	ldr	r1, [r4, #32]
 80044a4:	4628      	mov	r0, r5
 80044a6:	47b0      	blx	r6
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	89a3      	ldrh	r3, [r4, #12]
 80044ac:	d106      	bne.n	80044bc <__sflush_r+0x68>
 80044ae:	6829      	ldr	r1, [r5, #0]
 80044b0:	291d      	cmp	r1, #29
 80044b2:	d82b      	bhi.n	800450c <__sflush_r+0xb8>
 80044b4:	4a29      	ldr	r2, [pc, #164]	; (800455c <__sflush_r+0x108>)
 80044b6:	410a      	asrs	r2, r1
 80044b8:	07d6      	lsls	r6, r2, #31
 80044ba:	d427      	bmi.n	800450c <__sflush_r+0xb8>
 80044bc:	2200      	movs	r2, #0
 80044be:	6062      	str	r2, [r4, #4]
 80044c0:	04d9      	lsls	r1, r3, #19
 80044c2:	6922      	ldr	r2, [r4, #16]
 80044c4:	6022      	str	r2, [r4, #0]
 80044c6:	d504      	bpl.n	80044d2 <__sflush_r+0x7e>
 80044c8:	1c42      	adds	r2, r0, #1
 80044ca:	d101      	bne.n	80044d0 <__sflush_r+0x7c>
 80044cc:	682b      	ldr	r3, [r5, #0]
 80044ce:	b903      	cbnz	r3, 80044d2 <__sflush_r+0x7e>
 80044d0:	6560      	str	r0, [r4, #84]	; 0x54
 80044d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044d4:	602f      	str	r7, [r5, #0]
 80044d6:	2900      	cmp	r1, #0
 80044d8:	d0c9      	beq.n	800446e <__sflush_r+0x1a>
 80044da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044de:	4299      	cmp	r1, r3
 80044e0:	d002      	beq.n	80044e8 <__sflush_r+0x94>
 80044e2:	4628      	mov	r0, r5
 80044e4:	f7ff fbea 	bl	8003cbc <_free_r>
 80044e8:	2000      	movs	r0, #0
 80044ea:	6360      	str	r0, [r4, #52]	; 0x34
 80044ec:	e7c0      	b.n	8004470 <__sflush_r+0x1c>
 80044ee:	2301      	movs	r3, #1
 80044f0:	4628      	mov	r0, r5
 80044f2:	47b0      	blx	r6
 80044f4:	1c41      	adds	r1, r0, #1
 80044f6:	d1c8      	bne.n	800448a <__sflush_r+0x36>
 80044f8:	682b      	ldr	r3, [r5, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0c5      	beq.n	800448a <__sflush_r+0x36>
 80044fe:	2b1d      	cmp	r3, #29
 8004500:	d001      	beq.n	8004506 <__sflush_r+0xb2>
 8004502:	2b16      	cmp	r3, #22
 8004504:	d101      	bne.n	800450a <__sflush_r+0xb6>
 8004506:	602f      	str	r7, [r5, #0]
 8004508:	e7b1      	b.n	800446e <__sflush_r+0x1a>
 800450a:	89a3      	ldrh	r3, [r4, #12]
 800450c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004510:	81a3      	strh	r3, [r4, #12]
 8004512:	e7ad      	b.n	8004470 <__sflush_r+0x1c>
 8004514:	690f      	ldr	r7, [r1, #16]
 8004516:	2f00      	cmp	r7, #0
 8004518:	d0a9      	beq.n	800446e <__sflush_r+0x1a>
 800451a:	0793      	lsls	r3, r2, #30
 800451c:	680e      	ldr	r6, [r1, #0]
 800451e:	bf08      	it	eq
 8004520:	694b      	ldreq	r3, [r1, #20]
 8004522:	600f      	str	r7, [r1, #0]
 8004524:	bf18      	it	ne
 8004526:	2300      	movne	r3, #0
 8004528:	eba6 0807 	sub.w	r8, r6, r7
 800452c:	608b      	str	r3, [r1, #8]
 800452e:	f1b8 0f00 	cmp.w	r8, #0
 8004532:	dd9c      	ble.n	800446e <__sflush_r+0x1a>
 8004534:	6a21      	ldr	r1, [r4, #32]
 8004536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004538:	4643      	mov	r3, r8
 800453a:	463a      	mov	r2, r7
 800453c:	4628      	mov	r0, r5
 800453e:	47b0      	blx	r6
 8004540:	2800      	cmp	r0, #0
 8004542:	dc06      	bgt.n	8004552 <__sflush_r+0xfe>
 8004544:	89a3      	ldrh	r3, [r4, #12]
 8004546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800454a:	81a3      	strh	r3, [r4, #12]
 800454c:	f04f 30ff 	mov.w	r0, #4294967295
 8004550:	e78e      	b.n	8004470 <__sflush_r+0x1c>
 8004552:	4407      	add	r7, r0
 8004554:	eba8 0800 	sub.w	r8, r8, r0
 8004558:	e7e9      	b.n	800452e <__sflush_r+0xda>
 800455a:	bf00      	nop
 800455c:	dfbffffe 	.word	0xdfbffffe

08004560 <_fflush_r>:
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	690b      	ldr	r3, [r1, #16]
 8004564:	4605      	mov	r5, r0
 8004566:	460c      	mov	r4, r1
 8004568:	b913      	cbnz	r3, 8004570 <_fflush_r+0x10>
 800456a:	2500      	movs	r5, #0
 800456c:	4628      	mov	r0, r5
 800456e:	bd38      	pop	{r3, r4, r5, pc}
 8004570:	b118      	cbz	r0, 800457a <_fflush_r+0x1a>
 8004572:	6a03      	ldr	r3, [r0, #32]
 8004574:	b90b      	cbnz	r3, 800457a <_fflush_r+0x1a>
 8004576:	f7ff f9ab 	bl	80038d0 <__sinit>
 800457a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f3      	beq.n	800456a <_fflush_r+0xa>
 8004582:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004584:	07d0      	lsls	r0, r2, #31
 8004586:	d404      	bmi.n	8004592 <_fflush_r+0x32>
 8004588:	0599      	lsls	r1, r3, #22
 800458a:	d402      	bmi.n	8004592 <_fflush_r+0x32>
 800458c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800458e:	f7ff fb93 	bl	8003cb8 <__retarget_lock_acquire_recursive>
 8004592:	4628      	mov	r0, r5
 8004594:	4621      	mov	r1, r4
 8004596:	f7ff ff5d 	bl	8004454 <__sflush_r>
 800459a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800459c:	07da      	lsls	r2, r3, #31
 800459e:	4605      	mov	r5, r0
 80045a0:	d4e4      	bmi.n	800456c <_fflush_r+0xc>
 80045a2:	89a3      	ldrh	r3, [r4, #12]
 80045a4:	059b      	lsls	r3, r3, #22
 80045a6:	d4e1      	bmi.n	800456c <_fflush_r+0xc>
 80045a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045aa:	f7ff fb86 	bl	8003cba <__retarget_lock_release_recursive>
 80045ae:	e7dd      	b.n	800456c <_fflush_r+0xc>

080045b0 <__swhatbuf_r>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	460c      	mov	r4, r1
 80045b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b8:	2900      	cmp	r1, #0
 80045ba:	b096      	sub	sp, #88	; 0x58
 80045bc:	4615      	mov	r5, r2
 80045be:	461e      	mov	r6, r3
 80045c0:	da0d      	bge.n	80045de <__swhatbuf_r+0x2e>
 80045c2:	89a3      	ldrh	r3, [r4, #12]
 80045c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80045c8:	f04f 0100 	mov.w	r1, #0
 80045cc:	bf0c      	ite	eq
 80045ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80045d2:	2340      	movne	r3, #64	; 0x40
 80045d4:	2000      	movs	r0, #0
 80045d6:	6031      	str	r1, [r6, #0]
 80045d8:	602b      	str	r3, [r5, #0]
 80045da:	b016      	add	sp, #88	; 0x58
 80045dc:	bd70      	pop	{r4, r5, r6, pc}
 80045de:	466a      	mov	r2, sp
 80045e0:	f000 f848 	bl	8004674 <_fstat_r>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	dbec      	blt.n	80045c2 <__swhatbuf_r+0x12>
 80045e8:	9901      	ldr	r1, [sp, #4]
 80045ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80045ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80045f2:	4259      	negs	r1, r3
 80045f4:	4159      	adcs	r1, r3
 80045f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045fa:	e7eb      	b.n	80045d4 <__swhatbuf_r+0x24>

080045fc <__smakebuf_r>:
 80045fc:	898b      	ldrh	r3, [r1, #12]
 80045fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004600:	079d      	lsls	r5, r3, #30
 8004602:	4606      	mov	r6, r0
 8004604:	460c      	mov	r4, r1
 8004606:	d507      	bpl.n	8004618 <__smakebuf_r+0x1c>
 8004608:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800460c:	6023      	str	r3, [r4, #0]
 800460e:	6123      	str	r3, [r4, #16]
 8004610:	2301      	movs	r3, #1
 8004612:	6163      	str	r3, [r4, #20]
 8004614:	b002      	add	sp, #8
 8004616:	bd70      	pop	{r4, r5, r6, pc}
 8004618:	ab01      	add	r3, sp, #4
 800461a:	466a      	mov	r2, sp
 800461c:	f7ff ffc8 	bl	80045b0 <__swhatbuf_r>
 8004620:	9900      	ldr	r1, [sp, #0]
 8004622:	4605      	mov	r5, r0
 8004624:	4630      	mov	r0, r6
 8004626:	f7ff fbb5 	bl	8003d94 <_malloc_r>
 800462a:	b948      	cbnz	r0, 8004640 <__smakebuf_r+0x44>
 800462c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004630:	059a      	lsls	r2, r3, #22
 8004632:	d4ef      	bmi.n	8004614 <__smakebuf_r+0x18>
 8004634:	f023 0303 	bic.w	r3, r3, #3
 8004638:	f043 0302 	orr.w	r3, r3, #2
 800463c:	81a3      	strh	r3, [r4, #12]
 800463e:	e7e3      	b.n	8004608 <__smakebuf_r+0xc>
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	6020      	str	r0, [r4, #0]
 8004644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004648:	81a3      	strh	r3, [r4, #12]
 800464a:	9b00      	ldr	r3, [sp, #0]
 800464c:	6163      	str	r3, [r4, #20]
 800464e:	9b01      	ldr	r3, [sp, #4]
 8004650:	6120      	str	r0, [r4, #16]
 8004652:	b15b      	cbz	r3, 800466c <__smakebuf_r+0x70>
 8004654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004658:	4630      	mov	r0, r6
 800465a:	f000 f81d 	bl	8004698 <_isatty_r>
 800465e:	b128      	cbz	r0, 800466c <__smakebuf_r+0x70>
 8004660:	89a3      	ldrh	r3, [r4, #12]
 8004662:	f023 0303 	bic.w	r3, r3, #3
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	81a3      	strh	r3, [r4, #12]
 800466c:	89a3      	ldrh	r3, [r4, #12]
 800466e:	431d      	orrs	r5, r3
 8004670:	81a5      	strh	r5, [r4, #12]
 8004672:	e7cf      	b.n	8004614 <__smakebuf_r+0x18>

08004674 <_fstat_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	4d07      	ldr	r5, [pc, #28]	; (8004694 <_fstat_r+0x20>)
 8004678:	2300      	movs	r3, #0
 800467a:	4604      	mov	r4, r0
 800467c:	4608      	mov	r0, r1
 800467e:	4611      	mov	r1, r2
 8004680:	602b      	str	r3, [r5, #0]
 8004682:	f7fc fa38 	bl	8000af6 <_fstat>
 8004686:	1c43      	adds	r3, r0, #1
 8004688:	d102      	bne.n	8004690 <_fstat_r+0x1c>
 800468a:	682b      	ldr	r3, [r5, #0]
 800468c:	b103      	cbz	r3, 8004690 <_fstat_r+0x1c>
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	bd38      	pop	{r3, r4, r5, pc}
 8004692:	bf00      	nop
 8004694:	2000029c 	.word	0x2000029c

08004698 <_isatty_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	4d06      	ldr	r5, [pc, #24]	; (80046b4 <_isatty_r+0x1c>)
 800469c:	2300      	movs	r3, #0
 800469e:	4604      	mov	r4, r0
 80046a0:	4608      	mov	r0, r1
 80046a2:	602b      	str	r3, [r5, #0]
 80046a4:	f7fc fa37 	bl	8000b16 <_isatty>
 80046a8:	1c43      	adds	r3, r0, #1
 80046aa:	d102      	bne.n	80046b2 <_isatty_r+0x1a>
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	b103      	cbz	r3, 80046b2 <_isatty_r+0x1a>
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	bd38      	pop	{r3, r4, r5, pc}
 80046b4:	2000029c 	.word	0x2000029c

080046b8 <_sbrk_r>:
 80046b8:	b538      	push	{r3, r4, r5, lr}
 80046ba:	4d06      	ldr	r5, [pc, #24]	; (80046d4 <_sbrk_r+0x1c>)
 80046bc:	2300      	movs	r3, #0
 80046be:	4604      	mov	r4, r0
 80046c0:	4608      	mov	r0, r1
 80046c2:	602b      	str	r3, [r5, #0]
 80046c4:	f7fc fa40 	bl	8000b48 <_sbrk>
 80046c8:	1c43      	adds	r3, r0, #1
 80046ca:	d102      	bne.n	80046d2 <_sbrk_r+0x1a>
 80046cc:	682b      	ldr	r3, [r5, #0]
 80046ce:	b103      	cbz	r3, 80046d2 <_sbrk_r+0x1a>
 80046d0:	6023      	str	r3, [r4, #0]
 80046d2:	bd38      	pop	{r3, r4, r5, pc}
 80046d4:	2000029c 	.word	0x2000029c

080046d8 <_init>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	bf00      	nop
 80046dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046de:	bc08      	pop	{r3}
 80046e0:	469e      	mov	lr, r3
 80046e2:	4770      	bx	lr

080046e4 <_fini>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	bf00      	nop
 80046e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ea:	bc08      	pop	{r3}
 80046ec:	469e      	mov	lr, r3
 80046ee:	4770      	bx	lr
