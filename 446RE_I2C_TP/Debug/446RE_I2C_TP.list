
446RE_I2C_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006550  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  08006720  08006720  00016720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aa4  08006aa4  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  08006aa4  08006aa4  00016aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006aac  08006aac  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006aac  08006aac  00016aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ab0  08006ab0  00016ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08006ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000012c  08006be0  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08006be0  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df18  00000000  00000000  0002019f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026c1  00000000  00000000  0002e0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b88  00000000  00000000  00030778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e6  00000000  00000000  00031300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f69  00000000  00000000  00031be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011602  00000000  00000000  00054b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cca9b  00000000  00000000  00066151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003af4  00000000  00000000  00132bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001366e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000012c 	.word	0x2000012c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006708 	.word	0x08006708

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000130 	.word	0x20000130
 800020c:	08006708 	.word	0x08006708

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295
 80002fe:	f000 b9bb 	b.w	8000678 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	4b2d      	ldr	r3, [pc, #180]	; (800074c <MX_GPIO_Init+0xd0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a2c      	ldr	r2, [pc, #176]	; (800074c <MX_GPIO_Init+0xd0>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b2a      	ldr	r3, [pc, #168]	; (800074c <MX_GPIO_Init+0xd0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <MX_GPIO_Init+0xd0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a25      	ldr	r2, [pc, #148]	; (800074c <MX_GPIO_Init+0xd0>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <MX_GPIO_Init+0xd0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_GPIO_Init+0xd0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a1e      	ldr	r2, [pc, #120]	; (800074c <MX_GPIO_Init+0xd0>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_GPIO_Init+0xd0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a17      	ldr	r2, [pc, #92]	; (800074c <MX_GPIO_Init+0xd0>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2120      	movs	r1, #32
 8000706:	4812      	ldr	r0, [pc, #72]	; (8000750 <MX_GPIO_Init+0xd4>)
 8000708:	f000 ff9e 	bl	8001648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800070c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000712:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	480c      	ldr	r0, [pc, #48]	; (8000754 <MX_GPIO_Init+0xd8>)
 8000724:	f000 fde4 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000728:	2320      	movs	r3, #32
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	2301      	movs	r3, #1
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_GPIO_Init+0xd4>)
 8000740:	f000 fdd6 	bl	80012f0 <HAL_GPIO_Init>

}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800
 8000750:	40020000 	.word	0x40020000
 8000754:	40020800 	.word	0x40020800

08000758 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2C1_Init+0x50>)
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <MX_I2C1_Init+0x54>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_I2C1_Init+0x58>)
 8000766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800077a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000796:	f000 ff71 	bl	800167c <HAL_I2C_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a0:	f000 f93a 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000148 	.word	0x20000148
 80007ac:	40005400 	.word	0x40005400
 80007b0:	000186a0 	.word	0x000186a0

080007b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a19      	ldr	r2, [pc, #100]	; (8000838 <HAL_I2C_MspInit+0x84>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d12b      	bne.n	800082e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_I2C_MspInit+0x88>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <HAL_I2C_MspInit+0x88>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_I2C_MspInit+0x88>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007f2:	23c0      	movs	r3, #192	; 0xc0
 80007f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f6:	2312      	movs	r3, #18
 80007f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000802:	2304      	movs	r3, #4
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <HAL_I2C_MspInit+0x8c>)
 800080e:	f000 fd6f 	bl	80012f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_I2C_MspInit+0x88>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_I2C_MspInit+0x88>)
 800081c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000820:	6413      	str	r3, [r2, #64]	; 0x40
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_I2C_MspInit+0x88>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	; 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40005400 	.word	0x40005400
 800083c:	40023800 	.word	0x40023800
 8000840:	40020400 	.word	0x40020400

08000844 <_write>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e00b      	b.n	800086e <_write+0x2a>
		HAL_UART_Transmit(&huart2, (uint8_t *) ptr++, 1, HAL_MAX_DELAY);
 8000856:	68b9      	ldr	r1, [r7, #8]
 8000858:	1c4b      	adds	r3, r1, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	f04f 33ff 	mov.w	r3, #4294967295
 8000860:	2201      	movs	r2, #1
 8000862:	4811      	ldr	r0, [pc, #68]	; (80008a8 <_write+0x64>)
 8000864:	f002 fcd5 	bl	8003212 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	697a      	ldr	r2, [r7, #20]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	429a      	cmp	r2, r3
 8000874:	dbef      	blt.n	8000856 <_write+0x12>
	}
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	e00b      	b.n	8000894 <_write+0x50>
		HAL_UART_Transmit(&huart1, (uint8_t *) ptr++, 1, HAL_MAX_DELAY);
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	1c4b      	adds	r3, r1, #1
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	2201      	movs	r2, #1
 8000888:	4808      	ldr	r0, [pc, #32]	; (80008ac <_write+0x68>)
 800088a:	f002 fcc2 	bl	8003212 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	3301      	adds	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697a      	ldr	r2, [r7, #20]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	429a      	cmp	r2, r3
 800089a:	dbef      	blt.n	800087c <_write+0x38>
	}

	return len;
 800089c:	687b      	ldr	r3, [r7, #4]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000224 	.word	0x20000224
 80008ac:	200001e0 	.word	0x200001e0

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b4:	f000 fae2 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b8:	f000 f840 	bl	800093c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008bc:	f7ff fede 	bl	800067c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008c0:	f000 f9fc 	bl	8000cbc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008c4:	f7ff ff48 	bl	8000758 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80008c8:	f000 f9ce 	bl	8000c68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("test\r\n");
 80008cc:	4814      	ldr	r0, [pc, #80]	; (8000920 <main+0x70>)
 80008ce:	f004 fde9 	bl	80054a4 <puts>
  bmp_reset(&bmp280);
 80008d2:	4814      	ldr	r0, [pc, #80]	; (8000924 <main+0x74>)
 80008d4:	f003 fcc8 	bl	8004268 <bmp_reset>
  printf("reset done\r\n");
 80008d8:	4813      	ldr	r0, [pc, #76]	; (8000928 <main+0x78>)
 80008da:	f004 fde3 	bl	80054a4 <puts>
  bmp_id(&bmp280);
 80008de:	4811      	ldr	r0, [pc, #68]	; (8000924 <main+0x74>)
 80008e0:	f003 fce8 	bl	80042b4 <bmp_id>
  printf("id done\r\n");
 80008e4:	4811      	ldr	r0, [pc, #68]	; (800092c <main+0x7c>)
 80008e6:	f004 fddd 	bl	80054a4 <puts>
  bmp_config(&bmp280);
 80008ea:	480e      	ldr	r0, [pc, #56]	; (8000924 <main+0x74>)
 80008ec:	f003 fd1c 	bl	8004328 <bmp_config>
  printf("config done\r\n");
 80008f0:	480f      	ldr	r0, [pc, #60]	; (8000930 <main+0x80>)
 80008f2:	f004 fdd7 	bl	80054a4 <puts>
  HAL_Delay(500);
 80008f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008fa:	f000 fb31 	bl	8000f60 <HAL_Delay>
  bmp_calib_read(&bmp280);
 80008fe:	4809      	ldr	r0, [pc, #36]	; (8000924 <main+0x74>)
 8000900:	f003 fd4e 	bl	80043a0 <bmp_calib_read>
  printf("calib done\r\n");
 8000904:	480b      	ldr	r0, [pc, #44]	; (8000934 <main+0x84>)
 8000906:	f004 fdcd 	bl	80054a4 <puts>
  Shell_Init();
 800090a:	f004 f9e3 	bl	8004cd4 <Shell_Init>
  while (1)
  {
	  /*bmp_temp_read(&bmp280);
	  bmp_press_read(&bmp280);
	  HAL_Delay(1000);*/
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 800090e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000912:	4809      	ldr	r0, [pc, #36]	; (8000938 <main+0x88>)
 8000914:	f000 fe80 	bl	8001618 <HAL_GPIO_ReadPin>

	  }
	  Shell_Loop();
 8000918:	f004 fa22 	bl	8004d60 <Shell_Loop>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 800091c:	e7f7      	b.n	800090e <main+0x5e>
 800091e:	bf00      	nop
 8000920:	08006720 	.word	0x08006720
 8000924:	2000019c 	.word	0x2000019c
 8000928:	08006728 	.word	0x08006728
 800092c:	08006734 	.word	0x08006734
 8000930:	08006740 	.word	0x08006740
 8000934:	08006750 	.word	0x08006750
 8000938:	40020800 	.word	0x40020800

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	; 0x50
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2234      	movs	r2, #52	; 0x34
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f004 febe 	bl	80056cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <SystemClock_Config+0xd4>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	4a29      	ldr	r2, [pc, #164]	; (8000a10 <SystemClock_Config+0xd4>)
 800096a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096e:	6413      	str	r3, [r2, #64]	; 0x40
 8000970:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <SystemClock_Config+0xd4>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800097c:	2300      	movs	r3, #0
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <SystemClock_Config+0xd8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000988:	4a22      	ldr	r2, [pc, #136]	; (8000a14 <SystemClock_Config+0xd8>)
 800098a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <SystemClock_Config+0xd8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800099c:	2302      	movs	r3, #2
 800099e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a0:	2301      	movs	r3, #1
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a4:	2310      	movs	r3, #16
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a8:	2302      	movs	r3, #2
 80009aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ac:	2300      	movs	r3, #0
 80009ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009b0:	2310      	movs	r3, #16
 80009b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ba:	2304      	movs	r3, #4
 80009bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009be:	2302      	movs	r3, #2
 80009c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 f936 	bl	8002c3c <HAL_RCC_OscConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009d6:	f000 f81f 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009da:	230f      	movs	r3, #15
 80009dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009de:	2302      	movs	r3, #2
 80009e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	2102      	movs	r1, #2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fdd6 	bl	80025a8 <HAL_RCC_ClockConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a02:	f000 f809 	bl	8000a18 <Error_Handler>
  }
}
 8000a06:	bf00      	nop
 8000a08:	3750      	adds	r7, #80	; 0x50
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40007000 	.word	0x40007000

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a62:	2007      	movs	r0, #7
 8000a64:	f000 fb70 	bl	8001148 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <NMI_Handler+0x4>

08000a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <MemManage_Handler+0x4>

08000a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 fa2e 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <USART1_IRQHandler+0x10>)
 8000ace:	f002 fc63 	bl	8003398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200001e0 	.word	0x200001e0

08000adc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <USART2_IRQHandler+0x10>)
 8000ae2:	f002 fc59 	bl	8003398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000224 	.word	0x20000224

08000af0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return 1;
 8000af4:	2301      	movs	r3, #1
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <_kill>:

int _kill(int pid, int sig)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b0a:	f004 fe89 	bl	8005820 <__errno>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2216      	movs	r2, #22
 8000b12:	601a      	str	r2, [r3, #0]
  return -1;
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <_exit>:

void _exit (int status)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b28:	f04f 31ff 	mov.w	r1, #4294967295
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff ffe7 	bl	8000b00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b32:	e7fe      	b.n	8000b32 <_exit+0x12>

08000b34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	e00a      	b.n	8000b5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b46:	f3af 8000 	nop.w
 8000b4a:	4601      	mov	r1, r0
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	60ba      	str	r2, [r7, #8]
 8000b52:	b2ca      	uxtb	r2, r1
 8000b54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf0      	blt.n	8000b46 <_read+0x12>
  }

  return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b96:	605a      	str	r2, [r3, #4]
  return 0;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_isatty>:

int _isatty(int file)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be0:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <_sbrk+0x5c>)
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <_sbrk+0x60>)
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <_sbrk+0x64>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <_sbrk+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d207      	bcs.n	8000c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c08:	f004 fe0a 	bl	8005820 <__errno>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	220c      	movs	r2, #12
 8000c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e009      	b.n	8000c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <_sbrk+0x64>)
 8000c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20020000 	.word	0x20020000
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	200001dc 	.word	0x200001dc
 8000c40:	20000480 	.word	0x20000480

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <MX_USART1_UART_Init+0x50>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000ca0:	f002 fa6a 	bl	8003178 <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000caa:	f7ff feb5 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200001e0 	.word	0x200001e0
 8000cb8:	40011000 	.word	0x40011000

08000cbc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <MX_USART2_UART_Init+0x50>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	f002 fa40 	bl	8003178 <HAL_UART_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cfe:	f7ff fe8b 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000224 	.word	0x20000224
 8000d0c:	40004400 	.word	0x40004400

08000d10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08c      	sub	sp, #48	; 0x30
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a3a      	ldr	r2, [pc, #232]	; (8000e18 <HAL_UART_MspInit+0x108>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d135      	bne.n	8000d9e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
 8000d36:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <HAL_UART_MspInit+0x10c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a38      	ldr	r2, [pc, #224]	; (8000e1c <HAL_UART_MspInit+0x10c>)
 8000d3c:	f043 0310 	orr.w	r3, r3, #16
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <HAL_UART_MspInit+0x10c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f003 0310 	and.w	r3, r3, #16
 8000d4a:	61bb      	str	r3, [r7, #24]
 8000d4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	4b32      	ldr	r3, [pc, #200]	; (8000e1c <HAL_UART_MspInit+0x10c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a31      	ldr	r2, [pc, #196]	; (8000e1c <HAL_UART_MspInit+0x10c>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b2f      	ldr	r3, [pc, #188]	; (8000e1c <HAL_UART_MspInit+0x10c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PI_TX_Pin|PI_RX_Pin;
 8000d6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	4826      	ldr	r0, [pc, #152]	; (8000e20 <HAL_UART_MspInit+0x110>)
 8000d88:	f000 fab2 	bl	80012f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2025      	movs	r0, #37	; 0x25
 8000d92:	f000 f9e4 	bl	800115e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d96:	2025      	movs	r0, #37	; 0x25
 8000d98:	f000 f9fd 	bl	8001196 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d9c:	e038      	b.n	8000e10 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a20      	ldr	r2, [pc, #128]	; (8000e24 <HAL_UART_MspInit+0x114>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d133      	bne.n	8000e10 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <HAL_UART_MspInit+0x10c>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	4a1a      	ldr	r2, [pc, #104]	; (8000e1c <HAL_UART_MspInit+0x10c>)
 8000db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db6:	6413      	str	r3, [r2, #64]	; 0x40
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_UART_MspInit+0x10c>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_UART_MspInit+0x10c>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <HAL_UART_MspInit+0x10c>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_UART_MspInit+0x10c>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000de0:	230c      	movs	r3, #12
 8000de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df0:	2307      	movs	r3, #7
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4809      	ldr	r0, [pc, #36]	; (8000e20 <HAL_UART_MspInit+0x110>)
 8000dfc:	f000 fa78 	bl	80012f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	2026      	movs	r0, #38	; 0x26
 8000e06:	f000 f9aa 	bl	800115e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e0a:	2026      	movs	r0, #38	; 0x26
 8000e0c:	f000 f9c3 	bl	8001196 <HAL_NVIC_EnableIRQ>
}
 8000e10:	bf00      	nop
 8000e12:	3730      	adds	r7, #48	; 0x30
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40011000 	.word	0x40011000
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40004400 	.word	0x40004400

08000e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e2c:	480d      	ldr	r0, [pc, #52]	; (8000e64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e2e:	490e      	ldr	r1, [pc, #56]	; (8000e68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e30:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e44:	4c0b      	ldr	r4, [pc, #44]	; (8000e74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e52:	f7ff fef7 	bl	8000c44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e56:	f004 fce9 	bl	800582c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5a:	f7ff fd29 	bl	80008b0 <main>
  bx  lr    
 8000e5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8000e6c:	08006ab4 	.word	0x08006ab4
  ldr r2, =_sbss
 8000e70:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8000e74:	2000047c 	.word	0x2000047c

08000e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <HAL_Init+0x40>)
 8000e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <HAL_Init+0x40>)
 8000e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <HAL_Init+0x40>)
 8000e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 f94f 	bl	8001148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 f808 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fdb8 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023c00 	.word	0x40023c00

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x54>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f967 	bl	80011b2 <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f000 f92f 	bl	800115e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <HAL_InitTick+0x5c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000004 	.word	0x20000004

08000f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000268 	.word	0x20000268

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000268 	.word	0x20000268

08000f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f68:	f7ff ffee 	bl	8000f48 <HAL_GetTick>
 8000f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f78:	d005      	beq.n	8000f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_Delay+0x44>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f86:	bf00      	nop
 8000f88:	f7ff ffde 	bl	8000f48 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d8f7      	bhi.n	8000f88 <HAL_Delay+0x28>
  {
  }
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008

08000fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0307 	and.w	r3, r3, #7
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	db0b      	blt.n	8001036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 021f 	and.w	r2, r3, #31
 8001024:	4907      	ldr	r1, [pc, #28]	; (8001044 <__NVIC_EnableIRQ+0x38>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	2001      	movs	r0, #1
 800102e:	fa00 f202 	lsl.w	r2, r0, r2
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000e100 	.word	0xe000e100

08001048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db0a      	blt.n	8001072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	490c      	ldr	r1, [pc, #48]	; (8001094 <__NVIC_SetPriority+0x4c>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001070:	e00a      	b.n	8001088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4908      	ldr	r1, [pc, #32]	; (8001098 <__NVIC_SetPriority+0x50>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	3b04      	subs	r3, #4
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	440b      	add	r3, r1
 8001086:	761a      	strb	r2, [r3, #24]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f1c3 0307 	rsb	r3, r3, #7
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf28      	it	cs
 80010ba:	2304      	movcs	r3, #4
 80010bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3304      	adds	r3, #4
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d902      	bls.n	80010cc <NVIC_EncodePriority+0x30>
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3b03      	subs	r3, #3
 80010ca:	e000      	b.n	80010ce <NVIC_EncodePriority+0x32>
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	4313      	orrs	r3, r2
         );
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	; 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001114:	d301      	bcc.n	800111a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001116:	2301      	movs	r3, #1
 8001118:	e00f      	b.n	800113a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <SysTick_Config+0x40>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001122:	210f      	movs	r1, #15
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f7ff ff8e 	bl	8001048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <SysTick_Config+0x40>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SysTick_Config+0x40>)
 8001134:	2207      	movs	r2, #7
 8001136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	e000e010 	.word	0xe000e010

08001148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff29 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001170:	f7ff ff3e 	bl	8000ff0 <__NVIC_GetPriorityGrouping>
 8001174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff ff8e 	bl	800109c <NVIC_EncodePriority>
 8001180:	4602      	mov	r2, r0
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff5d 	bl	8001048 <__NVIC_SetPriority>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff31 	bl	800100c <__NVIC_EnableIRQ>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffa2 	bl	8001104 <SysTick_Config>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff feb6 	bl	8000f48 <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d008      	beq.n	80011fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2280      	movs	r2, #128	; 0x80
 80011ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e052      	b.n	80012a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0216 	bic.w	r2, r2, #22
 800120a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800121a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	2b00      	cmp	r3, #0
 8001222:	d103      	bne.n	800122c <HAL_DMA_Abort+0x62>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001228:	2b00      	cmp	r3, #0
 800122a:	d007      	beq.n	800123c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0208 	bic.w	r2, r2, #8
 800123a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0201 	bic.w	r2, r2, #1
 800124a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800124c:	e013      	b.n	8001276 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800124e:	f7ff fe7b 	bl	8000f48 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b05      	cmp	r3, #5
 800125a:	d90c      	bls.n	8001276 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2220      	movs	r2, #32
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2203      	movs	r2, #3
 8001266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e015      	b.n	80012a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1e4      	bne.n	800124e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001288:	223f      	movs	r2, #63	; 0x3f
 800128a:	409a      	lsls	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d004      	beq.n	80012c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2280      	movs	r2, #128	; 0x80
 80012c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e00c      	b.n	80012e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2205      	movs	r2, #5
 80012cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0201 	bic.w	r2, r2, #1
 80012de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	e165      	b.n	80015d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800130c:	2201      	movs	r2, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	429a      	cmp	r2, r3
 8001326:	f040 8154 	bne.w	80015d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b01      	cmp	r3, #1
 8001334:	d005      	beq.n	8001342 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800133e:	2b02      	cmp	r3, #2
 8001340:	d130      	bne.n	80013a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001378:	2201      	movs	r2, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	f003 0201 	and.w	r2, r3, #1
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d017      	beq.n	80013e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d123      	bne.n	8001434 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	08da      	lsrs	r2, r3, #3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3208      	adds	r2, #8
 80013f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	220f      	movs	r2, #15
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	08da      	lsrs	r2, r3, #3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3208      	adds	r2, #8
 800142e:	69b9      	ldr	r1, [r7, #24]
 8001430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	2203      	movs	r2, #3
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0203 	and.w	r2, r3, #3
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001470:	2b00      	cmp	r3, #0
 8001472:	f000 80ae 	beq.w	80015d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b5d      	ldr	r3, [pc, #372]	; (80015f0 <HAL_GPIO_Init+0x300>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	4a5c      	ldr	r2, [pc, #368]	; (80015f0 <HAL_GPIO_Init+0x300>)
 8001480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001484:	6453      	str	r3, [r2, #68]	; 0x44
 8001486:	4b5a      	ldr	r3, [pc, #360]	; (80015f0 <HAL_GPIO_Init+0x300>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001492:	4a58      	ldr	r2, [pc, #352]	; (80015f4 <HAL_GPIO_Init+0x304>)
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3302      	adds	r3, #2
 800149a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	220f      	movs	r2, #15
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4f      	ldr	r2, [pc, #316]	; (80015f8 <HAL_GPIO_Init+0x308>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d025      	beq.n	800150a <HAL_GPIO_Init+0x21a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4e      	ldr	r2, [pc, #312]	; (80015fc <HAL_GPIO_Init+0x30c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d01f      	beq.n	8001506 <HAL_GPIO_Init+0x216>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4d      	ldr	r2, [pc, #308]	; (8001600 <HAL_GPIO_Init+0x310>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d019      	beq.n	8001502 <HAL_GPIO_Init+0x212>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4c      	ldr	r2, [pc, #304]	; (8001604 <HAL_GPIO_Init+0x314>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_GPIO_Init+0x20e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4b      	ldr	r2, [pc, #300]	; (8001608 <HAL_GPIO_Init+0x318>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d00d      	beq.n	80014fa <HAL_GPIO_Init+0x20a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4a      	ldr	r2, [pc, #296]	; (800160c <HAL_GPIO_Init+0x31c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d007      	beq.n	80014f6 <HAL_GPIO_Init+0x206>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a49      	ldr	r2, [pc, #292]	; (8001610 <HAL_GPIO_Init+0x320>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d101      	bne.n	80014f2 <HAL_GPIO_Init+0x202>
 80014ee:	2306      	movs	r3, #6
 80014f0:	e00c      	b.n	800150c <HAL_GPIO_Init+0x21c>
 80014f2:	2307      	movs	r3, #7
 80014f4:	e00a      	b.n	800150c <HAL_GPIO_Init+0x21c>
 80014f6:	2305      	movs	r3, #5
 80014f8:	e008      	b.n	800150c <HAL_GPIO_Init+0x21c>
 80014fa:	2304      	movs	r3, #4
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x21c>
 80014fe:	2303      	movs	r3, #3
 8001500:	e004      	b.n	800150c <HAL_GPIO_Init+0x21c>
 8001502:	2302      	movs	r3, #2
 8001504:	e002      	b.n	800150c <HAL_GPIO_Init+0x21c>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_GPIO_Init+0x21c>
 800150a:	2300      	movs	r3, #0
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	f002 0203 	and.w	r2, r2, #3
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	4093      	lsls	r3, r2
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800151c:	4935      	ldr	r1, [pc, #212]	; (80015f4 <HAL_GPIO_Init+0x304>)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3302      	adds	r3, #2
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800152a:	4b3a      	ldr	r3, [pc, #232]	; (8001614 <HAL_GPIO_Init+0x324>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800154e:	4a31      	ldr	r2, [pc, #196]	; (8001614 <HAL_GPIO_Init+0x324>)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001554:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <HAL_GPIO_Init+0x324>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001578:	4a26      	ldr	r2, [pc, #152]	; (8001614 <HAL_GPIO_Init+0x324>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800157e:	4b25      	ldr	r3, [pc, #148]	; (8001614 <HAL_GPIO_Init+0x324>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015a2:	4a1c      	ldr	r2, [pc, #112]	; (8001614 <HAL_GPIO_Init+0x324>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <HAL_GPIO_Init+0x324>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015cc:	4a11      	ldr	r2, [pc, #68]	; (8001614 <HAL_GPIO_Init+0x324>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3301      	adds	r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	2b0f      	cmp	r3, #15
 80015dc:	f67f ae96 	bls.w	800130c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40013800 	.word	0x40013800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400
 8001600:	40020800 	.word	0x40020800
 8001604:	40020c00 	.word	0x40020c00
 8001608:	40021000 	.word	0x40021000
 800160c:	40021400 	.word	0x40021400
 8001610:	40021800 	.word	0x40021800
 8001614:	40013c00 	.word	0x40013c00

08001618 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691a      	ldr	r2, [r3, #16]
 8001628:	887b      	ldrh	r3, [r7, #2]
 800162a:	4013      	ands	r3, r2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d002      	beq.n	8001636 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	e001      	b.n	800163a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	807b      	strh	r3, [r7, #2]
 8001654:	4613      	mov	r3, r2
 8001656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001658:	787b      	ldrb	r3, [r7, #1]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800165e:	887a      	ldrh	r2, [r7, #2]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001664:	e003      	b.n	800166e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001666:	887b      	ldrh	r3, [r7, #2]
 8001668:	041a      	lsls	r2, r3, #16
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	619a      	str	r2, [r3, #24]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e12b      	b.n	80018e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d106      	bne.n	80016a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff f886 	bl	80007b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2224      	movs	r2, #36	; 0x24
 80016ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0201 	bic.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016e0:	f001 f854 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 80016e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4a81      	ldr	r2, [pc, #516]	; (80018f0 <HAL_I2C_Init+0x274>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d807      	bhi.n	8001700 <HAL_I2C_Init+0x84>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4a80      	ldr	r2, [pc, #512]	; (80018f4 <HAL_I2C_Init+0x278>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	bf94      	ite	ls
 80016f8:	2301      	movls	r3, #1
 80016fa:	2300      	movhi	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	e006      	b.n	800170e <HAL_I2C_Init+0x92>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4a7d      	ldr	r2, [pc, #500]	; (80018f8 <HAL_I2C_Init+0x27c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	bf94      	ite	ls
 8001708:	2301      	movls	r3, #1
 800170a:	2300      	movhi	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e0e7      	b.n	80018e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4a78      	ldr	r2, [pc, #480]	; (80018fc <HAL_I2C_Init+0x280>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	0c9b      	lsrs	r3, r3, #18
 8001720:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68ba      	ldr	r2, [r7, #8]
 8001732:	430a      	orrs	r2, r1
 8001734:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4a6a      	ldr	r2, [pc, #424]	; (80018f0 <HAL_I2C_Init+0x274>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d802      	bhi.n	8001750 <HAL_I2C_Init+0xd4>
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	3301      	adds	r3, #1
 800174e:	e009      	b.n	8001764 <HAL_I2C_Init+0xe8>
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	4a69      	ldr	r2, [pc, #420]	; (8001900 <HAL_I2C_Init+0x284>)
 800175c:	fba2 2303 	umull	r2, r3, r2, r3
 8001760:	099b      	lsrs	r3, r3, #6
 8001762:	3301      	adds	r3, #1
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	430b      	orrs	r3, r1
 800176a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001776:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	495c      	ldr	r1, [pc, #368]	; (80018f0 <HAL_I2C_Init+0x274>)
 8001780:	428b      	cmp	r3, r1
 8001782:	d819      	bhi.n	80017b8 <HAL_I2C_Init+0x13c>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1e59      	subs	r1, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001792:	1c59      	adds	r1, r3, #1
 8001794:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001798:	400b      	ands	r3, r1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00a      	beq.n	80017b4 <HAL_I2C_Init+0x138>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1e59      	subs	r1, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ac:	3301      	adds	r3, #1
 80017ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b2:	e051      	b.n	8001858 <HAL_I2C_Init+0x1dc>
 80017b4:	2304      	movs	r3, #4
 80017b6:	e04f      	b.n	8001858 <HAL_I2C_Init+0x1dc>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d111      	bne.n	80017e4 <HAL_I2C_Init+0x168>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1e58      	subs	r0, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6859      	ldr	r1, [r3, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	440b      	add	r3, r1
 80017ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d2:	3301      	adds	r3, #1
 80017d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf0c      	ite	eq
 80017dc:	2301      	moveq	r3, #1
 80017de:	2300      	movne	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	e012      	b.n	800180a <HAL_I2C_Init+0x18e>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1e58      	subs	r0, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	0099      	lsls	r1, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017fa:	3301      	adds	r3, #1
 80017fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_I2C_Init+0x196>
 800180e:	2301      	movs	r3, #1
 8001810:	e022      	b.n	8001858 <HAL_I2C_Init+0x1dc>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10e      	bne.n	8001838 <HAL_I2C_Init+0x1bc>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1e58      	subs	r0, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6859      	ldr	r1, [r3, #4]
 8001822:	460b      	mov	r3, r1
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	440b      	add	r3, r1
 8001828:	fbb0 f3f3 	udiv	r3, r0, r3
 800182c:	3301      	adds	r3, #1
 800182e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001836:	e00f      	b.n	8001858 <HAL_I2C_Init+0x1dc>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1e58      	subs	r0, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	0099      	lsls	r1, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	fbb0 f3f3 	udiv	r3, r0, r3
 800184e:	3301      	adds	r3, #1
 8001850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001854:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	6809      	ldr	r1, [r1, #0]
 800185c:	4313      	orrs	r3, r2
 800185e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69da      	ldr	r2, [r3, #28]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001886:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6911      	ldr	r1, [r2, #16]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68d2      	ldr	r2, [r2, #12]
 8001892:	4311      	orrs	r1, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	430b      	orrs	r3, r1
 800189a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695a      	ldr	r2, [r3, #20]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0201 	orr.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2220      	movs	r2, #32
 80018d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	000186a0 	.word	0x000186a0
 80018f4:	001e847f 	.word	0x001e847f
 80018f8:	003d08ff 	.word	0x003d08ff
 80018fc:	431bde83 	.word	0x431bde83
 8001900:	10624dd3 	.word	0x10624dd3

08001904 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af02      	add	r7, sp, #8
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	461a      	mov	r2, r3
 8001910:	460b      	mov	r3, r1
 8001912:	817b      	strh	r3, [r7, #10]
 8001914:	4613      	mov	r3, r2
 8001916:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001918:	f7ff fb16 	bl	8000f48 <HAL_GetTick>
 800191c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b20      	cmp	r3, #32
 8001928:	f040 80e0 	bne.w	8001aec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2319      	movs	r3, #25
 8001932:	2201      	movs	r2, #1
 8001934:	4970      	ldr	r1, [pc, #448]	; (8001af8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 fc58 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001942:	2302      	movs	r3, #2
 8001944:	e0d3      	b.n	8001aee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_I2C_Master_Transmit+0x50>
 8001950:	2302      	movs	r3, #2
 8001952:	e0cc      	b.n	8001aee <HAL_I2C_Master_Transmit+0x1ea>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b01      	cmp	r3, #1
 8001968:	d007      	beq.n	800197a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f042 0201 	orr.w	r2, r2, #1
 8001978:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001988:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2221      	movs	r2, #33	; 0x21
 800198e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2210      	movs	r2, #16
 8001996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	893a      	ldrh	r2, [r7, #8]
 80019aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4a50      	ldr	r2, [pc, #320]	; (8001afc <HAL_I2C_Master_Transmit+0x1f8>)
 80019ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019bc:	8979      	ldrh	r1, [r7, #10]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	6a3a      	ldr	r2, [r7, #32]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 fac2 	bl	8001f4c <I2C_MasterRequestWrite>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e08d      	b.n	8001aee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019e8:	e066      	b.n	8001ab8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	6a39      	ldr	r1, [r7, #32]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 fcd2 	bl	8002398 <I2C_WaitOnTXEFlagUntilTimeout>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00d      	beq.n	8001a16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d107      	bne.n	8001a12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e06b      	b.n	8001aee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	781a      	ldrb	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d11b      	bne.n	8001a8c <HAL_I2C_Master_Transmit+0x188>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d017      	beq.n	8001a8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	781a      	ldrb	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a84:	3b01      	subs	r3, #1
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	6a39      	ldr	r1, [r7, #32]
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 fcc2 	bl	800241a <I2C_WaitOnBTFFlagUntilTimeout>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00d      	beq.n	8001ab8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d107      	bne.n	8001ab4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ab2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e01a      	b.n	8001aee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d194      	bne.n	80019ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e000      	b.n	8001aee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001aec:	2302      	movs	r3, #2
  }
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	00100002 	.word	0x00100002
 8001afc:	ffff0000 	.word	0xffff0000

08001b00 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08c      	sub	sp, #48	; 0x30
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	817b      	strh	r3, [r7, #10]
 8001b10:	4613      	mov	r3, r2
 8001b12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b14:	f7ff fa18 	bl	8000f48 <HAL_GetTick>
 8001b18:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	f040 820b 	bne.w	8001f3e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2319      	movs	r3, #25
 8001b2e:	2201      	movs	r2, #1
 8001b30:	497c      	ldr	r1, [pc, #496]	; (8001d24 <HAL_I2C_Master_Receive+0x224>)
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 fb5a 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e1fe      	b.n	8001f40 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_I2C_Master_Receive+0x50>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e1f7      	b.n	8001f40 <HAL_I2C_Master_Receive+0x440>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d007      	beq.n	8001b76 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2222      	movs	r2, #34	; 0x22
 8001b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2210      	movs	r2, #16
 8001b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	893a      	ldrh	r2, [r7, #8]
 8001ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4a5c      	ldr	r2, [pc, #368]	; (8001d28 <HAL_I2C_Master_Receive+0x228>)
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bb8:	8979      	ldrh	r1, [r7, #10]
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 fa46 	bl	8002050 <I2C_MasterRequestRead>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e1b8      	b.n	8001f40 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d113      	bne.n	8001bfe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	623b      	str	r3, [r7, #32]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	623b      	str	r3, [r7, #32]
 8001bea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	e18c      	b.n	8001f18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d11b      	bne.n	8001c3e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	e16c      	b.n	8001f18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d11b      	bne.n	8001c7e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	61bb      	str	r3, [r7, #24]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	e14c      	b.n	8001f18 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ca4:	e138      	b.n	8001f18 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	f200 80f1 	bhi.w	8001e92 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d123      	bne.n	8001d00 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 fbed 	bl	800249c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e139      	b.n	8001f40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691a      	ldr	r2, [r3, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cfe:	e10b      	b.n	8001f18 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d14e      	bne.n	8001da6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0e:	2200      	movs	r2, #0
 8001d10:	4906      	ldr	r1, [pc, #24]	; (8001d2c <HAL_I2C_Master_Receive+0x22c>)
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 fa6a 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d008      	beq.n	8001d30 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e10e      	b.n	8001f40 <HAL_I2C_Master_Receive+0x440>
 8001d22:	bf00      	nop
 8001d24:	00100002 	.word	0x00100002
 8001d28:	ffff0000 	.word	0xffff0000
 8001d2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691a      	ldr	r2, [r3, #16]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001da4:	e0b8      	b.n	8001f18 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dac:	2200      	movs	r2, #0
 8001dae:	4966      	ldr	r1, [pc, #408]	; (8001f48 <HAL_I2C_Master_Receive+0x448>)
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 fa1b 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0bf      	b.n	8001f40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	2200      	movs	r2, #0
 8001e0a:	494f      	ldr	r1, [pc, #316]	; (8001f48 <HAL_I2C_Master_Receive+0x448>)
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f9ed 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e091      	b.n	8001f40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e90:	e042      	b.n	8001f18 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 fb00 	bl	800249c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e04c      	b.n	8001f40 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d118      	bne.n	8001f18 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f47f aec2 	bne.w	8001ca6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2220      	movs	r2, #32
 8001f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001f3e:	2302      	movs	r3, #2
  }
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3728      	adds	r7, #40	; 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	00010004 	.word	0x00010004

08001f4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d006      	beq.n	8001f76 <I2C_MasterRequestWrite+0x2a>
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d003      	beq.n	8001f76 <I2C_MasterRequestWrite+0x2a>
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f74:	d108      	bne.n	8001f88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	e00b      	b.n	8001fa0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	2b12      	cmp	r3, #18
 8001f8e:	d107      	bne.n	8001fa0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 f91d 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00d      	beq.n	8001fd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc6:	d103      	bne.n	8001fd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e035      	b.n	8002040 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fdc:	d108      	bne.n	8001ff0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fde:	897b      	ldrh	r3, [r7, #10]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fec:	611a      	str	r2, [r3, #16]
 8001fee:	e01b      	b.n	8002028 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ff0:	897b      	ldrh	r3, [r7, #10]
 8001ff2:	11db      	asrs	r3, r3, #7
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f003 0306 	and.w	r3, r3, #6
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f063 030f 	orn	r3, r3, #15
 8002000:	b2da      	uxtb	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	490e      	ldr	r1, [pc, #56]	; (8002048 <I2C_MasterRequestWrite+0xfc>)
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f943 	bl	800229a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e010      	b.n	8002040 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800201e:	897b      	ldrh	r3, [r7, #10]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4907      	ldr	r1, [pc, #28]	; (800204c <I2C_MasterRequestWrite+0x100>)
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f933 	bl	800229a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	00010008 	.word	0x00010008
 800204c:	00010002 	.word	0x00010002

08002050 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af02      	add	r7, sp, #8
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	460b      	mov	r3, r1
 800205e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002074:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2b08      	cmp	r3, #8
 800207a:	d006      	beq.n	800208a <I2C_MasterRequestRead+0x3a>
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d003      	beq.n	800208a <I2C_MasterRequestRead+0x3a>
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002088:	d108      	bne.n	800209c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e00b      	b.n	80020b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	2b11      	cmp	r3, #17
 80020a2:	d107      	bne.n	80020b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 f893 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00d      	beq.n	80020e8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020da:	d103      	bne.n	80020e4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e079      	b.n	80021dc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020f0:	d108      	bne.n	8002104 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80020f2:	897b      	ldrh	r3, [r7, #10]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	611a      	str	r2, [r3, #16]
 8002102:	e05f      	b.n	80021c4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002104:	897b      	ldrh	r3, [r7, #10]
 8002106:	11db      	asrs	r3, r3, #7
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f003 0306 	and.w	r3, r3, #6
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f063 030f 	orn	r3, r3, #15
 8002114:	b2da      	uxtb	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4930      	ldr	r1, [pc, #192]	; (80021e4 <I2C_MasterRequestRead+0x194>)
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f8b9 	bl	800229a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e054      	b.n	80021dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002132:	897b      	ldrh	r3, [r7, #10]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4929      	ldr	r1, [pc, #164]	; (80021e8 <I2C_MasterRequestRead+0x198>)
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f8a9 	bl	800229a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e044      	b.n	80021dc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002176:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f831 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00d      	beq.n	80021ac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800219e:	d103      	bne.n	80021a8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e017      	b.n	80021dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80021ac:	897b      	ldrh	r3, [r7, #10]
 80021ae:	11db      	asrs	r3, r3, #7
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	f003 0306 	and.w	r3, r3, #6
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f063 030e 	orn	r3, r3, #14
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	4907      	ldr	r1, [pc, #28]	; (80021e8 <I2C_MasterRequestRead+0x198>)
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f865 	bl	800229a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	00010008 	.word	0x00010008
 80021e8:	00010002 	.word	0x00010002

080021ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	4613      	mov	r3, r2
 80021fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021fc:	e025      	b.n	800224a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d021      	beq.n	800224a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002206:	f7fe fe9f 	bl	8000f48 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d302      	bcc.n	800221c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d116      	bne.n	800224a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2220      	movs	r2, #32
 8002226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f043 0220 	orr.w	r2, r3, #32
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e023      	b.n	8002292 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b01      	cmp	r3, #1
 8002252:	d10d      	bne.n	8002270 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	43da      	mvns	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4013      	ands	r3, r2
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	bf0c      	ite	eq
 8002266:	2301      	moveq	r3, #1
 8002268:	2300      	movne	r3, #0
 800226a:	b2db      	uxtb	r3, r3
 800226c:	461a      	mov	r2, r3
 800226e:	e00c      	b.n	800228a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4013      	ands	r3, r2
 800227c:	b29b      	uxth	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	bf0c      	ite	eq
 8002282:	2301      	moveq	r3, #1
 8002284:	2300      	movne	r3, #0
 8002286:	b2db      	uxtb	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	429a      	cmp	r2, r3
 800228e:	d0b6      	beq.n	80021fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022a8:	e051      	b.n	800234e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b8:	d123      	bne.n	8002302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2220      	movs	r2, #32
 80022de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f043 0204 	orr.w	r2, r3, #4
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e046      	b.n	8002390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002308:	d021      	beq.n	800234e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230a:	f7fe fe1d 	bl	8000f48 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	429a      	cmp	r2, r3
 8002318:	d302      	bcc.n	8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d116      	bne.n	800234e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f043 0220 	orr.w	r2, r3, #32
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e020      	b.n	8002390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	0c1b      	lsrs	r3, r3, #16
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b01      	cmp	r3, #1
 8002356:	d10c      	bne.n	8002372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	43da      	mvns	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4013      	ands	r3, r2
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	bf14      	ite	ne
 800236a:	2301      	movne	r3, #1
 800236c:	2300      	moveq	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	e00b      	b.n	800238a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	43da      	mvns	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	4013      	ands	r3, r2
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf14      	ite	ne
 8002384:	2301      	movne	r3, #1
 8002386:	2300      	moveq	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d18d      	bne.n	80022aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023a4:	e02d      	b.n	8002402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f8ce 	bl	8002548 <I2C_IsAcknowledgeFailed>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e02d      	b.n	8002412 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d021      	beq.n	8002402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023be:	f7fe fdc3 	bl	8000f48 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d302      	bcc.n	80023d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d116      	bne.n	8002402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2220      	movs	r2, #32
 80023de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f043 0220 	orr.w	r2, r3, #32
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e007      	b.n	8002412 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240c:	2b80      	cmp	r3, #128	; 0x80
 800240e:	d1ca      	bne.n	80023a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002426:	e02d      	b.n	8002484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f88d 	bl	8002548 <I2C_IsAcknowledgeFailed>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e02d      	b.n	8002494 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243e:	d021      	beq.n	8002484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002440:	f7fe fd82 	bl	8000f48 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	429a      	cmp	r2, r3
 800244e:	d302      	bcc.n	8002456 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d116      	bne.n	8002484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f043 0220 	orr.w	r2, r3, #32
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e007      	b.n	8002494 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b04      	cmp	r3, #4
 8002490:	d1ca      	bne.n	8002428 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024a8:	e042      	b.n	8002530 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b10      	cmp	r3, #16
 80024b6:	d119      	bne.n	80024ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0210 	mvn.w	r2, #16
 80024c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e029      	b.n	8002540 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ec:	f7fe fd2c 	bl	8000f48 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d302      	bcc.n	8002502 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d116      	bne.n	8002530 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f043 0220 	orr.w	r2, r3, #32
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e007      	b.n	8002540 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253a:	2b40      	cmp	r3, #64	; 0x40
 800253c:	d1b5      	bne.n	80024aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255e:	d11b      	bne.n	8002598 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002568:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	f043 0204 	orr.w	r2, r3, #4
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0cc      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025bc:	4b68      	ldr	r3, [pc, #416]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d90c      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b65      	ldr	r3, [pc, #404]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b63      	ldr	r3, [pc, #396]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0b8      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025fc:	4b59      	ldr	r3, [pc, #356]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a58      	ldr	r2, [pc, #352]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002614:	4b53      	ldr	r3, [pc, #332]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4a52      	ldr	r2, [pc, #328]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800261e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002620:	4b50      	ldr	r3, [pc, #320]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	494d      	ldr	r1, [pc, #308]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d044      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d119      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e07f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d003      	beq.n	8002666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002662:	2b03      	cmp	r3, #3
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002666:	4b3f      	ldr	r3, [pc, #252]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e06f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e067      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f023 0203 	bic.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4934      	ldr	r1, [pc, #208]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	4313      	orrs	r3, r2
 8002696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002698:	f7fe fc56 	bl	8000f48 <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7fe fc52 	bl	8000f48 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e04f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 020c 	and.w	r2, r3, #12
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d1eb      	bne.n	80026a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d20c      	bcs.n	80026f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e032      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4916      	ldr	r1, [pc, #88]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	490e      	ldr	r1, [pc, #56]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800272e:	f000 f855 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 8002732:	4602      	mov	r2, r0
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	490a      	ldr	r1, [pc, #40]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	5ccb      	ldrb	r3, [r1, r3]
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	4a09      	ldr	r2, [pc, #36]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fbb6 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023c00 	.word	0x40023c00
 8002764:	40023800 	.word	0x40023800
 8002768:	080068a8 	.word	0x080068a8
 800276c:	20000000 	.word	0x20000000
 8002770:	20000004 	.word	0x20000004

08002774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_RCC_GetHCLKFreq+0x14>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000000 	.word	0x20000000

0800278c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002790:	f7ff fff0 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	0a9b      	lsrs	r3, r3, #10
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4903      	ldr	r1, [pc, #12]	; (80027b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40023800 	.word	0x40023800
 80027b0:	080068b8 	.word	0x080068b8

080027b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027b8:	f7ff ffdc 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	0b5b      	lsrs	r3, r3, #13
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4903      	ldr	r1, [pc, #12]	; (80027d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	080068b8 	.word	0x080068b8

080027dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e0:	b0ae      	sub	sp, #184	; 0xb8
 80027e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002802:	4bcb      	ldr	r3, [pc, #812]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b0c      	cmp	r3, #12
 800280c:	f200 8206 	bhi.w	8002c1c <HAL_RCC_GetSysClockFreq+0x440>
 8002810:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	0800284d 	.word	0x0800284d
 800281c:	08002c1d 	.word	0x08002c1d
 8002820:	08002c1d 	.word	0x08002c1d
 8002824:	08002c1d 	.word	0x08002c1d
 8002828:	08002855 	.word	0x08002855
 800282c:	08002c1d 	.word	0x08002c1d
 8002830:	08002c1d 	.word	0x08002c1d
 8002834:	08002c1d 	.word	0x08002c1d
 8002838:	0800285d 	.word	0x0800285d
 800283c:	08002c1d 	.word	0x08002c1d
 8002840:	08002c1d 	.word	0x08002c1d
 8002844:	08002c1d 	.word	0x08002c1d
 8002848:	08002a4d 	.word	0x08002a4d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800284c:	4bb9      	ldr	r3, [pc, #740]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x358>)
 800284e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002852:	e1e7      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002854:	4bb8      	ldr	r3, [pc, #736]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002856:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800285a:	e1e3      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800285c:	4bb4      	ldr	r3, [pc, #720]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002868:	4bb1      	ldr	r3, [pc, #708]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d071      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002874:	4bae      	ldr	r3, [pc, #696]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	099b      	lsrs	r3, r3, #6
 800287a:	2200      	movs	r2, #0
 800287c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002880:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800288c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002890:	2300      	movs	r3, #0
 8002892:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002896:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800289a:	4622      	mov	r2, r4
 800289c:	462b      	mov	r3, r5
 800289e:	f04f 0000 	mov.w	r0, #0
 80028a2:	f04f 0100 	mov.w	r1, #0
 80028a6:	0159      	lsls	r1, r3, #5
 80028a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ac:	0150      	lsls	r0, r2, #5
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4621      	mov	r1, r4
 80028b4:	1a51      	subs	r1, r2, r1
 80028b6:	6439      	str	r1, [r7, #64]	; 0x40
 80028b8:	4629      	mov	r1, r5
 80028ba:	eb63 0301 	sbc.w	r3, r3, r1
 80028be:	647b      	str	r3, [r7, #68]	; 0x44
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80028cc:	4649      	mov	r1, r9
 80028ce:	018b      	lsls	r3, r1, #6
 80028d0:	4641      	mov	r1, r8
 80028d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028d6:	4641      	mov	r1, r8
 80028d8:	018a      	lsls	r2, r1, #6
 80028da:	4641      	mov	r1, r8
 80028dc:	1a51      	subs	r1, r2, r1
 80028de:	63b9      	str	r1, [r7, #56]	; 0x38
 80028e0:	4649      	mov	r1, r9
 80028e2:	eb63 0301 	sbc.w	r3, r3, r1
 80028e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80028f4:	4649      	mov	r1, r9
 80028f6:	00cb      	lsls	r3, r1, #3
 80028f8:	4641      	mov	r1, r8
 80028fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028fe:	4641      	mov	r1, r8
 8002900:	00ca      	lsls	r2, r1, #3
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	4603      	mov	r3, r0
 8002908:	4622      	mov	r2, r4
 800290a:	189b      	adds	r3, r3, r2
 800290c:	633b      	str	r3, [r7, #48]	; 0x30
 800290e:	462b      	mov	r3, r5
 8002910:	460a      	mov	r2, r1
 8002912:	eb42 0303 	adc.w	r3, r2, r3
 8002916:	637b      	str	r3, [r7, #52]	; 0x34
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002924:	4629      	mov	r1, r5
 8002926:	024b      	lsls	r3, r1, #9
 8002928:	4621      	mov	r1, r4
 800292a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800292e:	4621      	mov	r1, r4
 8002930:	024a      	lsls	r2, r1, #9
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800293a:	2200      	movs	r2, #0
 800293c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002940:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002944:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002948:	f7fd fd1a 	bl	8000380 <__aeabi_uldivmod>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4613      	mov	r3, r2
 8002952:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002956:	e067      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002958:	4b75      	ldr	r3, [pc, #468]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	099b      	lsrs	r3, r3, #6
 800295e:	2200      	movs	r2, #0
 8002960:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002964:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002968:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800296c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002970:	67bb      	str	r3, [r7, #120]	; 0x78
 8002972:	2300      	movs	r3, #0
 8002974:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002976:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800297a:	4622      	mov	r2, r4
 800297c:	462b      	mov	r3, r5
 800297e:	f04f 0000 	mov.w	r0, #0
 8002982:	f04f 0100 	mov.w	r1, #0
 8002986:	0159      	lsls	r1, r3, #5
 8002988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800298c:	0150      	lsls	r0, r2, #5
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4621      	mov	r1, r4
 8002994:	1a51      	subs	r1, r2, r1
 8002996:	62b9      	str	r1, [r7, #40]	; 0x28
 8002998:	4629      	mov	r1, r5
 800299a:	eb63 0301 	sbc.w	r3, r3, r1
 800299e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80029ac:	4649      	mov	r1, r9
 80029ae:	018b      	lsls	r3, r1, #6
 80029b0:	4641      	mov	r1, r8
 80029b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029b6:	4641      	mov	r1, r8
 80029b8:	018a      	lsls	r2, r1, #6
 80029ba:	4641      	mov	r1, r8
 80029bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80029c0:	4649      	mov	r1, r9
 80029c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029da:	4692      	mov	sl, r2
 80029dc:	469b      	mov	fp, r3
 80029de:	4623      	mov	r3, r4
 80029e0:	eb1a 0303 	adds.w	r3, sl, r3
 80029e4:	623b      	str	r3, [r7, #32]
 80029e6:	462b      	mov	r3, r5
 80029e8:	eb4b 0303 	adc.w	r3, fp, r3
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029fa:	4629      	mov	r1, r5
 80029fc:	028b      	lsls	r3, r1, #10
 80029fe:	4621      	mov	r1, r4
 8002a00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a04:	4621      	mov	r1, r4
 8002a06:	028a      	lsls	r2, r1, #10
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a10:	2200      	movs	r2, #0
 8002a12:	673b      	str	r3, [r7, #112]	; 0x70
 8002a14:	677a      	str	r2, [r7, #116]	; 0x74
 8002a16:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002a1a:	f7fd fcb1 	bl	8000380 <__aeabi_uldivmod>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4613      	mov	r3, r2
 8002a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a28:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	3301      	adds	r3, #1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002a3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a4a:	e0eb      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a4c:	4b38      	ldr	r3, [pc, #224]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a58:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d06b      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a64:	4b32      	ldr	r3, [pc, #200]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	099b      	lsrs	r3, r3, #6
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a76:	663b      	str	r3, [r7, #96]	; 0x60
 8002a78:	2300      	movs	r3, #0
 8002a7a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a7c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002a80:	4622      	mov	r2, r4
 8002a82:	462b      	mov	r3, r5
 8002a84:	f04f 0000 	mov.w	r0, #0
 8002a88:	f04f 0100 	mov.w	r1, #0
 8002a8c:	0159      	lsls	r1, r3, #5
 8002a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a92:	0150      	lsls	r0, r2, #5
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4621      	mov	r1, r4
 8002a9a:	1a51      	subs	r1, r2, r1
 8002a9c:	61b9      	str	r1, [r7, #24]
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	eb63 0301 	sbc.w	r3, r3, r1
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ab2:	4659      	mov	r1, fp
 8002ab4:	018b      	lsls	r3, r1, #6
 8002ab6:	4651      	mov	r1, sl
 8002ab8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002abc:	4651      	mov	r1, sl
 8002abe:	018a      	lsls	r2, r1, #6
 8002ac0:	4651      	mov	r1, sl
 8002ac2:	ebb2 0801 	subs.w	r8, r2, r1
 8002ac6:	4659      	mov	r1, fp
 8002ac8:	eb63 0901 	sbc.w	r9, r3, r1
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ad8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002adc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ae0:	4690      	mov	r8, r2
 8002ae2:	4699      	mov	r9, r3
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	eb18 0303 	adds.w	r3, r8, r3
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	462b      	mov	r3, r5
 8002aee:	eb49 0303 	adc.w	r3, r9, r3
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b00:	4629      	mov	r1, r5
 8002b02:	024b      	lsls	r3, r1, #9
 8002b04:	4621      	mov	r1, r4
 8002b06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	024a      	lsls	r2, r1, #9
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b16:	2200      	movs	r2, #0
 8002b18:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b1a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b20:	f7fd fc2e 	bl	8000380 <__aeabi_uldivmod>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4613      	mov	r3, r2
 8002b2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b2e:	e065      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x420>
 8002b30:	40023800 	.word	0x40023800
 8002b34:	00f42400 	.word	0x00f42400
 8002b38:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3c:	4b3d      	ldr	r3, [pc, #244]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	2200      	movs	r2, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	4611      	mov	r1, r2
 8002b48:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b4c:	653b      	str	r3, [r7, #80]	; 0x50
 8002b4e:	2300      	movs	r3, #0
 8002b50:	657b      	str	r3, [r7, #84]	; 0x54
 8002b52:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002b56:	4642      	mov	r2, r8
 8002b58:	464b      	mov	r3, r9
 8002b5a:	f04f 0000 	mov.w	r0, #0
 8002b5e:	f04f 0100 	mov.w	r1, #0
 8002b62:	0159      	lsls	r1, r3, #5
 8002b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b68:	0150      	lsls	r0, r2, #5
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4641      	mov	r1, r8
 8002b70:	1a51      	subs	r1, r2, r1
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	4649      	mov	r1, r9
 8002b76:	eb63 0301 	sbc.w	r3, r3, r1
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b88:	4659      	mov	r1, fp
 8002b8a:	018b      	lsls	r3, r1, #6
 8002b8c:	4651      	mov	r1, sl
 8002b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b92:	4651      	mov	r1, sl
 8002b94:	018a      	lsls	r2, r1, #6
 8002b96:	4651      	mov	r1, sl
 8002b98:	1a54      	subs	r4, r2, r1
 8002b9a:	4659      	mov	r1, fp
 8002b9c:	eb63 0501 	sbc.w	r5, r3, r1
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	00eb      	lsls	r3, r5, #3
 8002baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bae:	00e2      	lsls	r2, r4, #3
 8002bb0:	4614      	mov	r4, r2
 8002bb2:	461d      	mov	r5, r3
 8002bb4:	4643      	mov	r3, r8
 8002bb6:	18e3      	adds	r3, r4, r3
 8002bb8:	603b      	str	r3, [r7, #0]
 8002bba:	464b      	mov	r3, r9
 8002bbc:	eb45 0303 	adc.w	r3, r5, r3
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bce:	4629      	mov	r1, r5
 8002bd0:	028b      	lsls	r3, r1, #10
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bd8:	4621      	mov	r1, r4
 8002bda:	028a      	lsls	r2, r1, #10
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002be4:	2200      	movs	r2, #0
 8002be6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002be8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002bea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bee:	f7fd fbc7 	bl	8000380 <__aeabi_uldivmod>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bfc:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x458>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	0f1b      	lsrs	r3, r3, #28
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002c0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c1a:	e003      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	37b8      	adds	r7, #184	; 0xb8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800
 8002c38:	00f42400 	.word	0x00f42400

08002c3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e28d      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 8083 	beq.w	8002d62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c5c:	4b94      	ldr	r3, [pc, #592]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d019      	beq.n	8002c9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c68:	4b91      	ldr	r3, [pc, #580]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d106      	bne.n	8002c82 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c74:	4b8e      	ldr	r3, [pc, #568]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c80:	d00c      	beq.n	8002c9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c82:	4b8b      	ldr	r3, [pc, #556]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d112      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c8e:	4b88      	ldr	r3, [pc, #544]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9c:	4b84      	ldr	r3, [pc, #528]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d05b      	beq.n	8002d60 <HAL_RCC_OscConfig+0x124>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d157      	bne.n	8002d60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e25a      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbc:	d106      	bne.n	8002ccc <HAL_RCC_OscConfig+0x90>
 8002cbe:	4b7c      	ldr	r3, [pc, #496]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a7b      	ldr	r2, [pc, #492]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	e01d      	b.n	8002d08 <HAL_RCC_OscConfig+0xcc>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0xb4>
 8002cd6:	4b76      	ldr	r3, [pc, #472]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a75      	ldr	r2, [pc, #468]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b73      	ldr	r3, [pc, #460]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a72      	ldr	r2, [pc, #456]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e00b      	b.n	8002d08 <HAL_RCC_OscConfig+0xcc>
 8002cf0:	4b6f      	ldr	r3, [pc, #444]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a6e      	ldr	r2, [pc, #440]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b6c      	ldr	r3, [pc, #432]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a6b      	ldr	r2, [pc, #428]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d013      	beq.n	8002d38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fe f91a 	bl	8000f48 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d18:	f7fe f916 	bl	8000f48 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e21f      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	4b61      	ldr	r3, [pc, #388]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0xdc>
 8002d36:	e014      	b.n	8002d62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe f906 	bl	8000f48 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d40:	f7fe f902 	bl	8000f48 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e20b      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d52:	4b57      	ldr	r3, [pc, #348]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x104>
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d06f      	beq.n	8002e4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d6e:	4b50      	ldr	r3, [pc, #320]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d017      	beq.n	8002daa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d7a:	4b4d      	ldr	r3, [pc, #308]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d105      	bne.n	8002d92 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d86:	4b4a      	ldr	r3, [pc, #296]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d92:	4b47      	ldr	r3, [pc, #284]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d9a:	2b0c      	cmp	r3, #12
 8002d9c:	d11c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d9e:	4b44      	ldr	r3, [pc, #272]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d116      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	4b41      	ldr	r3, [pc, #260]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x186>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e1d3      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc2:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4937      	ldr	r1, [pc, #220]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	e03a      	b.n	8002e4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de0:	4b34      	ldr	r3, [pc, #208]	; (8002eb4 <HAL_RCC_OscConfig+0x278>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7fe f8af 	bl	8000f48 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dee:	f7fe f8ab 	bl	8000f48 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e1b4      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e00:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0c:	4b28      	ldr	r3, [pc, #160]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4925      	ldr	r1, [pc, #148]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]
 8002e20:	e015      	b.n	8002e4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e22:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <HAL_RCC_OscConfig+0x278>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe f88e 	bl	8000f48 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e30:	f7fe f88a 	bl	8000f48 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e193      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e42:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d036      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d016      	beq.n	8002e90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e68:	f7fe f86e 	bl	8000f48 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e70:	f7fe f86a 	bl	8000f48 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e173      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e82:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x234>
 8002e8e:	e01b      	b.n	8002ec8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e96:	f7fe f857 	bl	8000f48 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9c:	e00e      	b.n	8002ebc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e9e:	f7fe f853 	bl	8000f48 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d907      	bls.n	8002ebc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e15c      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	42470000 	.word	0x42470000
 8002eb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ebc:	4b8a      	ldr	r3, [pc, #552]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1ea      	bne.n	8002e9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8097 	beq.w	8003004 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eda:	4b83      	ldr	r3, [pc, #524]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10f      	bne.n	8002f06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	4b7f      	ldr	r3, [pc, #508]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	4a7e      	ldr	r2, [pc, #504]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef6:	4b7c      	ldr	r3, [pc, #496]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f02:	2301      	movs	r3, #1
 8002f04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f06:	4b79      	ldr	r3, [pc, #484]	; (80030ec <HAL_RCC_OscConfig+0x4b0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d118      	bne.n	8002f44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f12:	4b76      	ldr	r3, [pc, #472]	; (80030ec <HAL_RCC_OscConfig+0x4b0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a75      	ldr	r2, [pc, #468]	; (80030ec <HAL_RCC_OscConfig+0x4b0>)
 8002f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe f813 	bl	8000f48 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f26:	f7fe f80f 	bl	8000f48 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e118      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f38:	4b6c      	ldr	r3, [pc, #432]	; (80030ec <HAL_RCC_OscConfig+0x4b0>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCC_OscConfig+0x31e>
 8002f4c:	4b66      	ldr	r3, [pc, #408]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	4a65      	ldr	r2, [pc, #404]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6713      	str	r3, [r2, #112]	; 0x70
 8002f58:	e01c      	b.n	8002f94 <HAL_RCC_OscConfig+0x358>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b05      	cmp	r3, #5
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x340>
 8002f62:	4b61      	ldr	r3, [pc, #388]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	4a60      	ldr	r2, [pc, #384]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f68:	f043 0304 	orr.w	r3, r3, #4
 8002f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6e:	4b5e      	ldr	r3, [pc, #376]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a5d      	ldr	r2, [pc, #372]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCC_OscConfig+0x358>
 8002f7c:	4b5a      	ldr	r3, [pc, #360]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	4a59      	ldr	r2, [pc, #356]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f82:	f023 0301 	bic.w	r3, r3, #1
 8002f86:	6713      	str	r3, [r2, #112]	; 0x70
 8002f88:	4b57      	ldr	r3, [pc, #348]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	4a56      	ldr	r2, [pc, #344]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f8e:	f023 0304 	bic.w	r3, r3, #4
 8002f92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d015      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7fd ffd4 	bl	8000f48 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa4:	f7fd ffd0 	bl	8000f48 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0d7      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fba:	4b4b      	ldr	r3, [pc, #300]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0ee      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x368>
 8002fc6:	e014      	b.n	8002ff2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fd ffbe 	bl	8000f48 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fd ffba 	bl	8000f48 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e0c1      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe6:	4b40      	ldr	r3, [pc, #256]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1ee      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d105      	bne.n	8003004 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff8:	4b3b      	ldr	r3, [pc, #236]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	4a3a      	ldr	r2, [pc, #232]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003002:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80ad 	beq.w	8003168 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800300e:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b08      	cmp	r3, #8
 8003018:	d060      	beq.n	80030dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d145      	bne.n	80030ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003022:	4b33      	ldr	r3, [pc, #204]	; (80030f0 <HAL_RCC_OscConfig+0x4b4>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fd ff8e 	bl	8000f48 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003030:	f7fd ff8a 	bl	8000f48 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e093      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	4b29      	ldr	r3, [pc, #164]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	019b      	lsls	r3, r3, #6
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	085b      	lsrs	r3, r3, #1
 8003066:	3b01      	subs	r3, #1
 8003068:	041b      	lsls	r3, r3, #16
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	061b      	lsls	r3, r3, #24
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	071b      	lsls	r3, r3, #28
 800307a:	491b      	ldr	r1, [pc, #108]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003080:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <HAL_RCC_OscConfig+0x4b4>)
 8003082:	2201      	movs	r2, #1
 8003084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7fd ff5f 	bl	8000f48 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308e:	f7fd ff5b 	bl	8000f48 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e064      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a0:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0x452>
 80030ac:	e05c      	b.n	8003168 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ae:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <HAL_RCC_OscConfig+0x4b4>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fd ff48 	bl	8000f48 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fd ff44 	bl	8000f48 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e04d      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x480>
 80030da:	e045      	b.n	8003168 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d107      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e040      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40007000 	.word	0x40007000
 80030f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030f4:	4b1f      	ldr	r3, [pc, #124]	; (8003174 <HAL_RCC_OscConfig+0x538>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d030      	beq.n	8003164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d129      	bne.n	8003164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d122      	bne.n	8003164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003124:	4013      	ands	r3, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800312a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800312c:	4293      	cmp	r3, r2
 800312e:	d119      	bne.n	8003164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	085b      	lsrs	r3, r3, #1
 800313c:	3b01      	subs	r3, #1
 800313e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d10f      	bne.n	8003164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d107      	bne.n	8003164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800

08003178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e03f      	b.n	800320a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd fdb6 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2224      	movs	r2, #36	; 0x24
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fddf 	bl	8003d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b08a      	sub	sp, #40	; 0x28
 8003216:	af02      	add	r7, sp, #8
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	4613      	mov	r3, r2
 8003220:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b20      	cmp	r3, #32
 8003230:	d17c      	bne.n	800332c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_UART_Transmit+0x2c>
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e075      	b.n	800332e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_UART_Transmit+0x3e>
 800324c:	2302      	movs	r3, #2
 800324e:	e06e      	b.n	800332e <HAL_UART_Transmit+0x11c>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2221      	movs	r2, #33	; 0x21
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003266:	f7fd fe6f 	bl	8000f48 <HAL_GetTick>
 800326a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	88fa      	ldrh	r2, [r7, #6]
 8003270:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	88fa      	ldrh	r2, [r7, #6]
 8003276:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003280:	d108      	bne.n	8003294 <HAL_UART_Transmit+0x82>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d104      	bne.n	8003294 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	e003      	b.n	800329c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003298:	2300      	movs	r3, #0
 800329a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032a4:	e02a      	b.n	80032fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2200      	movs	r2, #0
 80032ae:	2180      	movs	r1, #128	; 0x80
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 fb1f 	bl	80038f4 <UART_WaitOnFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e036      	b.n	800332e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10b      	bne.n	80032de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	3302      	adds	r3, #2
 80032da:	61bb      	str	r3, [r7, #24]
 80032dc:	e007      	b.n	80032ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	781a      	ldrb	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	3301      	adds	r3, #1
 80032ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1cf      	bne.n	80032a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	2140      	movs	r1, #64	; 0x40
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 faef 	bl	80038f4 <UART_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e006      	b.n	800332e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	e000      	b.n	800332e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
  }
}
 800332e:	4618      	mov	r0, r3
 8003330:	3720      	adds	r7, #32
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	4613      	mov	r3, r2
 8003342:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b20      	cmp	r3, #32
 800334e:	d11d      	bne.n	800338c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_UART_Receive_IT+0x26>
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e016      	b.n	800338e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_UART_Receive_IT+0x38>
 800336a:	2302      	movs	r3, #2
 800336c:	e00f      	b.n	800338e <HAL_UART_Receive_IT+0x58>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	461a      	mov	r2, r3
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 fb24 	bl	80039d0 <UART_Start_Receive_IT>
 8003388:	4603      	mov	r3, r0
 800338a:	e000      	b.n	800338e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b0ba      	sub	sp, #232	; 0xe8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033be:	2300      	movs	r3, #0
 80033c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80033d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10f      	bne.n	80033fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <HAL_UART_IRQHandler+0x66>
 80033ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fc07 	bl	8003c0a <UART_Receive_IT>
      return;
 80033fc:	e256      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80de 	beq.w	80035c4 <HAL_UART_IRQHandler+0x22c>
 8003408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d106      	bne.n	8003422 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003418:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80d1 	beq.w	80035c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <HAL_UART_IRQHandler+0xae>
 800342e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f043 0201 	orr.w	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00b      	beq.n	800346a <HAL_UART_IRQHandler+0xd2>
 8003452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f043 0202 	orr.w	r2, r3, #2
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800346a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_UART_IRQHandler+0xf6>
 8003476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f043 0204 	orr.w	r2, r3, #4
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800348e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d011      	beq.n	80034be <HAL_UART_IRQHandler+0x126>
 800349a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d105      	bne.n	80034b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f043 0208 	orr.w	r2, r3, #8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 81ed 	beq.w	80038a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_UART_IRQHandler+0x14e>
 80034d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 fb92 	bl	8003c0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d103      	bne.n	8003512 <HAL_UART_IRQHandler+0x17a>
 800350a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800350e:	2b00      	cmp	r3, #0
 8003510:	d04f      	beq.n	80035b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa9a 	bl	8003a4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d141      	bne.n	80035aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3314      	adds	r3, #20
 800352c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003534:	e853 3f00 	ldrex	r3, [r3]
 8003538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800353c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3314      	adds	r3, #20
 800354e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003552:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800355e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800356a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1d9      	bne.n	8003526 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	2b00      	cmp	r3, #0
 8003578:	d013      	beq.n	80035a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	4a7d      	ldr	r2, [pc, #500]	; (8003774 <HAL_UART_IRQHandler+0x3dc>)
 8003580:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	4618      	mov	r0, r3
 8003588:	f7fd fe8f 	bl	80012aa <HAL_DMA_Abort_IT>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d016      	beq.n	80035c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800359c:	4610      	mov	r0, r2
 800359e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a0:	e00e      	b.n	80035c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f990 	bl	80038c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a8:	e00a      	b.n	80035c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f98c 	bl	80038c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b0:	e006      	b.n	80035c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f988 	bl	80038c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80035be:	e170      	b.n	80038a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c0:	bf00      	nop
    return;
 80035c2:	e16e      	b.n	80038a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	f040 814a 	bne.w	8003862 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8143 	beq.w	8003862 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 813c 	beq.w	8003862 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360a:	2b40      	cmp	r3, #64	; 0x40
 800360c:	f040 80b4 	bne.w	8003778 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800361c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8140 	beq.w	80038a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800362a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800362e:	429a      	cmp	r2, r3
 8003630:	f080 8139 	bcs.w	80038a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800363a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003646:	f000 8088 	beq.w	800375a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	330c      	adds	r3, #12
 8003650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003658:	e853 3f00 	ldrex	r3, [r3]
 800365c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003676:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800367a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003682:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800368e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1d9      	bne.n	800364a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3314      	adds	r3, #20
 800369c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a0:	e853 3f00 	ldrex	r3, [r3]
 80036a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3314      	adds	r3, #20
 80036b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e1      	bne.n	8003696 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3314      	adds	r3, #20
 80036d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3314      	adds	r3, #20
 80036f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036fe:	e841 2300 	strex	r3, r2, [r1]
 8003702:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1e3      	bne.n	80036d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	330c      	adds	r3, #12
 800371e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003722:	e853 3f00 	ldrex	r3, [r3]
 8003726:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800372a:	f023 0310 	bic.w	r3, r3, #16
 800372e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	330c      	adds	r3, #12
 8003738:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800373c:	65ba      	str	r2, [r7, #88]	; 0x58
 800373e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003742:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003744:	e841 2300 	strex	r3, r2, [r1]
 8003748:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800374a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e3      	bne.n	8003718 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	4618      	mov	r0, r3
 8003756:	f7fd fd38 	bl	80011ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003762:	b29b      	uxth	r3, r3
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	b29b      	uxth	r3, r3
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8b6 	bl	80038dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003770:	e099      	b.n	80038a6 <HAL_UART_IRQHandler+0x50e>
 8003772:	bf00      	nop
 8003774:	08003b13 	.word	0x08003b13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003780:	b29b      	uxth	r3, r3
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 808b 	beq.w	80038aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003794:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8086 	beq.w	80038aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	330c      	adds	r3, #12
 80037a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	330c      	adds	r3, #12
 80037be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037c2:	647a      	str	r2, [r7, #68]	; 0x44
 80037c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e3      	bne.n	800379e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3314      	adds	r3, #20
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	623b      	str	r3, [r7, #32]
   return(result);
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3314      	adds	r3, #20
 80037f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037fa:	633a      	str	r2, [r7, #48]	; 0x30
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003802:	e841 2300 	strex	r3, r2, [r1]
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1e3      	bne.n	80037d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	330c      	adds	r3, #12
 8003822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	e853 3f00 	ldrex	r3, [r3]
 800382a:	60fb      	str	r3, [r7, #12]
   return(result);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0310 	bic.w	r3, r3, #16
 8003832:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	330c      	adds	r3, #12
 800383c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003840:	61fa      	str	r2, [r7, #28]
 8003842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	69b9      	ldr	r1, [r7, #24]
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	e841 2300 	strex	r3, r2, [r1]
 800384c:	617b      	str	r3, [r7, #20]
   return(result);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e3      	bne.n	800381c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003854:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003858:	4619      	mov	r1, r3
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f83e 	bl	80038dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003860:	e023      	b.n	80038aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386a:	2b00      	cmp	r3, #0
 800386c:	d009      	beq.n	8003882 <HAL_UART_IRQHandler+0x4ea>
 800386e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f95d 	bl	8003b3a <UART_Transmit_IT>
    return;
 8003880:	e014      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00e      	beq.n	80038ac <HAL_UART_IRQHandler+0x514>
 800388e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f99d 	bl	8003bda <UART_EndTransmit_IT>
    return;
 80038a0:	e004      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
    return;
 80038a2:	bf00      	nop
 80038a4:	e002      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
      return;
 80038a6:	bf00      	nop
 80038a8:	e000      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
      return;
 80038aa:	bf00      	nop
  }
}
 80038ac:	37e8      	adds	r7, #232	; 0xe8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop

080038b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b090      	sub	sp, #64	; 0x40
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	603b      	str	r3, [r7, #0]
 8003900:	4613      	mov	r3, r2
 8003902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003904:	e050      	b.n	80039a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d04c      	beq.n	80039a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800390e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003910:	2b00      	cmp	r3, #0
 8003912:	d007      	beq.n	8003924 <UART_WaitOnFlagUntilTimeout+0x30>
 8003914:	f7fd fb18 	bl	8000f48 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003920:	429a      	cmp	r2, r3
 8003922:	d241      	bcs.n	80039a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	330c      	adds	r3, #12
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800393a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	330c      	adds	r3, #12
 8003942:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003944:	637a      	str	r2, [r7, #52]	; 0x34
 8003946:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800394a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800394c:	e841 2300 	strex	r3, r2, [r1]
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e5      	bne.n	8003924 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3314      	adds	r3, #20
 800395e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	e853 3f00 	ldrex	r3, [r3]
 8003966:	613b      	str	r3, [r7, #16]
   return(result);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f023 0301 	bic.w	r3, r3, #1
 800396e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3314      	adds	r3, #20
 8003976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003978:	623a      	str	r2, [r7, #32]
 800397a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	69f9      	ldr	r1, [r7, #28]
 800397e:	6a3a      	ldr	r2, [r7, #32]
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	61bb      	str	r3, [r7, #24]
   return(result);
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e5      	bne.n	8003958 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e00f      	b.n	80039c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4013      	ands	r3, r2
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	bf0c      	ite	eq
 80039b8:	2301      	moveq	r3, #1
 80039ba:	2300      	movne	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d09f      	beq.n	8003906 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3740      	adds	r7, #64	; 0x40
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	4613      	mov	r3, r2
 80039dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	88fa      	ldrh	r2, [r7, #6]
 80039ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2222      	movs	r2, #34	; 0x22
 80039fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a1c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0201 	orr.w	r2, r2, #1
 8003a2c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0220 	orr.w	r2, r2, #32
 8003a3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b095      	sub	sp, #84	; 0x54
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a74:	643a      	str	r2, [r7, #64]	; 0x40
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e5      	bne.n	8003a54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3314      	adds	r3, #20
 8003a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3314      	adds	r3, #20
 8003aa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab0:	e841 2300 	strex	r3, r2, [r1]
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e5      	bne.n	8003a88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d119      	bne.n	8003af8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f023 0310 	bic.w	r3, r3, #16
 8003ada:	647b      	str	r3, [r7, #68]	; 0x44
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ae4:	61ba      	str	r2, [r7, #24]
 8003ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6979      	ldr	r1, [r7, #20]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	613b      	str	r3, [r7, #16]
   return(result);
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e5      	bne.n	8003ac4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b06:	bf00      	nop
 8003b08:	3754      	adds	r7, #84	; 0x54
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f7ff fecb 	bl	80038c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b32:	bf00      	nop
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b085      	sub	sp, #20
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b21      	cmp	r3, #33	; 0x21
 8003b4c:	d13e      	bne.n	8003bcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b56:	d114      	bne.n	8003b82 <UART_Transmit_IT+0x48>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d110      	bne.n	8003b82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	1c9a      	adds	r2, r3, #2
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	621a      	str	r2, [r3, #32]
 8003b80:	e008      	b.n	8003b94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	1c59      	adds	r1, r3, #1
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6211      	str	r1, [r2, #32]
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10f      	bne.n	8003bc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e000      	b.n	8003bce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bcc:	2302      	movs	r3, #2
  }
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff fe5a 	bl	80038b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b08c      	sub	sp, #48	; 0x30
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b22      	cmp	r3, #34	; 0x22
 8003c1c:	f040 80ab 	bne.w	8003d76 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c28:	d117      	bne.n	8003c5a <UART_Receive_IT+0x50>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d113      	bne.n	8003c5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	1c9a      	adds	r2, r3, #2
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28
 8003c58:	e026      	b.n	8003ca8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6c:	d007      	beq.n	8003c7e <UART_Receive_IT+0x74>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <UART_Receive_IT+0x82>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	e008      	b.n	8003c9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d15a      	bne.n	8003d72 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0220 	bic.w	r2, r2, #32
 8003cca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d135      	bne.n	8003d68 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	613b      	str	r3, [r7, #16]
   return(result);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f023 0310 	bic.w	r3, r3, #16
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	330c      	adds	r3, #12
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	623a      	str	r2, [r7, #32]
 8003d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	69f9      	ldr	r1, [r7, #28]
 8003d28:	6a3a      	ldr	r2, [r7, #32]
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e5      	bne.n	8003d02 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d10a      	bne.n	8003d5a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff fdbb 	bl	80038dc <HAL_UARTEx_RxEventCallback>
 8003d66:	e002      	b.n	8003d6e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f001 f9c5 	bl	80050f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e002      	b.n	8003d78 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	e000      	b.n	8003d78 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003d76:	2302      	movs	r3, #2
  }
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3730      	adds	r7, #48	; 0x30
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d84:	b0c0      	sub	sp, #256	; 0x100
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9c:	68d9      	ldr	r1, [r3, #12]
 8003d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	ea40 0301 	orr.w	r3, r0, r1
 8003da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003dd8:	f021 010c 	bic.w	r1, r1, #12
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003de6:	430b      	orrs	r3, r1
 8003de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfa:	6999      	ldr	r1, [r3, #24]
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	ea40 0301 	orr.w	r3, r0, r1
 8003e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	4b8f      	ldr	r3, [pc, #572]	; (800404c <UART_SetConfig+0x2cc>)
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d005      	beq.n	8003e20 <UART_SetConfig+0xa0>
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4b8d      	ldr	r3, [pc, #564]	; (8004050 <UART_SetConfig+0x2d0>)
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d104      	bne.n	8003e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e20:	f7fe fcc8 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 8003e24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e28:	e003      	b.n	8003e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e2a:	f7fe fcaf 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 8003e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e3c:	f040 810c 	bne.w	8004058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e44:	2200      	movs	r2, #0
 8003e46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e52:	4622      	mov	r2, r4
 8003e54:	462b      	mov	r3, r5
 8003e56:	1891      	adds	r1, r2, r2
 8003e58:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e5a:	415b      	adcs	r3, r3
 8003e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e62:	4621      	mov	r1, r4
 8003e64:	eb12 0801 	adds.w	r8, r2, r1
 8003e68:	4629      	mov	r1, r5
 8003e6a:	eb43 0901 	adc.w	r9, r3, r1
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e82:	4690      	mov	r8, r2
 8003e84:	4699      	mov	r9, r3
 8003e86:	4623      	mov	r3, r4
 8003e88:	eb18 0303 	adds.w	r3, r8, r3
 8003e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e90:	462b      	mov	r3, r5
 8003e92:	eb49 0303 	adc.w	r3, r9, r3
 8003e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003eae:	460b      	mov	r3, r1
 8003eb0:	18db      	adds	r3, r3, r3
 8003eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	eb42 0303 	adc.w	r3, r2, r3
 8003eba:	657b      	str	r3, [r7, #84]	; 0x54
 8003ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ec4:	f7fc fa5c 	bl	8000380 <__aeabi_uldivmod>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4b61      	ldr	r3, [pc, #388]	; (8004054 <UART_SetConfig+0x2d4>)
 8003ece:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	011c      	lsls	r4, r3, #4
 8003ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ee8:	4642      	mov	r2, r8
 8003eea:	464b      	mov	r3, r9
 8003eec:	1891      	adds	r1, r2, r2
 8003eee:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ef0:	415b      	adcs	r3, r3
 8003ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ef8:	4641      	mov	r1, r8
 8003efa:	eb12 0a01 	adds.w	sl, r2, r1
 8003efe:	4649      	mov	r1, r9
 8003f00:	eb43 0b01 	adc.w	fp, r3, r1
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f18:	4692      	mov	sl, r2
 8003f1a:	469b      	mov	fp, r3
 8003f1c:	4643      	mov	r3, r8
 8003f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f26:	464b      	mov	r3, r9
 8003f28:	eb4b 0303 	adc.w	r3, fp, r3
 8003f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f44:	460b      	mov	r3, r1
 8003f46:	18db      	adds	r3, r3, r3
 8003f48:	643b      	str	r3, [r7, #64]	; 0x40
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	eb42 0303 	adc.w	r3, r2, r3
 8003f50:	647b      	str	r3, [r7, #68]	; 0x44
 8003f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f5a:	f7fc fa11 	bl	8000380 <__aeabi_uldivmod>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4611      	mov	r1, r2
 8003f64:	4b3b      	ldr	r3, [pc, #236]	; (8004054 <UART_SetConfig+0x2d4>)
 8003f66:	fba3 2301 	umull	r2, r3, r3, r1
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	2264      	movs	r2, #100	; 0x64
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	1acb      	subs	r3, r1, r3
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f7a:	4b36      	ldr	r3, [pc, #216]	; (8004054 <UART_SetConfig+0x2d4>)
 8003f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f88:	441c      	add	r4, r3
 8003f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	1891      	adds	r1, r2, r2
 8003fa2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fa4:	415b      	adcs	r3, r3
 8003fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fac:	4641      	mov	r1, r8
 8003fae:	1851      	adds	r1, r2, r1
 8003fb0:	6339      	str	r1, [r7, #48]	; 0x30
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	414b      	adcs	r3, r1
 8003fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fc4:	4659      	mov	r1, fp
 8003fc6:	00cb      	lsls	r3, r1, #3
 8003fc8:	4651      	mov	r1, sl
 8003fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fce:	4651      	mov	r1, sl
 8003fd0:	00ca      	lsls	r2, r1, #3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4642      	mov	r2, r8
 8003fda:	189b      	adds	r3, r3, r2
 8003fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fe0:	464b      	mov	r3, r9
 8003fe2:	460a      	mov	r2, r1
 8003fe4:	eb42 0303 	adc.w	r3, r2, r3
 8003fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004000:	460b      	mov	r3, r1
 8004002:	18db      	adds	r3, r3, r3
 8004004:	62bb      	str	r3, [r7, #40]	; 0x28
 8004006:	4613      	mov	r3, r2
 8004008:	eb42 0303 	adc.w	r3, r2, r3
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004016:	f7fc f9b3 	bl	8000380 <__aeabi_uldivmod>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <UART_SetConfig+0x2d4>)
 8004020:	fba3 1302 	umull	r1, r3, r3, r2
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	2164      	movs	r1, #100	; 0x64
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	3332      	adds	r3, #50	; 0x32
 8004032:	4a08      	ldr	r2, [pc, #32]	; (8004054 <UART_SetConfig+0x2d4>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	f003 0207 	and.w	r2, r3, #7
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4422      	add	r2, r4
 8004046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004048:	e106      	b.n	8004258 <UART_SetConfig+0x4d8>
 800404a:	bf00      	nop
 800404c:	40011000 	.word	0x40011000
 8004050:	40011400 	.word	0x40011400
 8004054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800405c:	2200      	movs	r2, #0
 800405e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004062:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800406a:	4642      	mov	r2, r8
 800406c:	464b      	mov	r3, r9
 800406e:	1891      	adds	r1, r2, r2
 8004070:	6239      	str	r1, [r7, #32]
 8004072:	415b      	adcs	r3, r3
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
 8004076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800407a:	4641      	mov	r1, r8
 800407c:	1854      	adds	r4, r2, r1
 800407e:	4649      	mov	r1, r9
 8004080:	eb43 0501 	adc.w	r5, r3, r1
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	00eb      	lsls	r3, r5, #3
 800408e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004092:	00e2      	lsls	r2, r4, #3
 8004094:	4614      	mov	r4, r2
 8004096:	461d      	mov	r5, r3
 8004098:	4643      	mov	r3, r8
 800409a:	18e3      	adds	r3, r4, r3
 800409c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040a0:	464b      	mov	r3, r9
 80040a2:	eb45 0303 	adc.w	r3, r5, r3
 80040a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040c6:	4629      	mov	r1, r5
 80040c8:	008b      	lsls	r3, r1, #2
 80040ca:	4621      	mov	r1, r4
 80040cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040d0:	4621      	mov	r1, r4
 80040d2:	008a      	lsls	r2, r1, #2
 80040d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040d8:	f7fc f952 	bl	8000380 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4b60      	ldr	r3, [pc, #384]	; (8004264 <UART_SetConfig+0x4e4>)
 80040e2:	fba3 2302 	umull	r2, r3, r3, r2
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	011c      	lsls	r4, r3, #4
 80040ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040fc:	4642      	mov	r2, r8
 80040fe:	464b      	mov	r3, r9
 8004100:	1891      	adds	r1, r2, r2
 8004102:	61b9      	str	r1, [r7, #24]
 8004104:	415b      	adcs	r3, r3
 8004106:	61fb      	str	r3, [r7, #28]
 8004108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800410c:	4641      	mov	r1, r8
 800410e:	1851      	adds	r1, r2, r1
 8004110:	6139      	str	r1, [r7, #16]
 8004112:	4649      	mov	r1, r9
 8004114:	414b      	adcs	r3, r1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004124:	4659      	mov	r1, fp
 8004126:	00cb      	lsls	r3, r1, #3
 8004128:	4651      	mov	r1, sl
 800412a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800412e:	4651      	mov	r1, sl
 8004130:	00ca      	lsls	r2, r1, #3
 8004132:	4610      	mov	r0, r2
 8004134:	4619      	mov	r1, r3
 8004136:	4603      	mov	r3, r0
 8004138:	4642      	mov	r2, r8
 800413a:	189b      	adds	r3, r3, r2
 800413c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004140:	464b      	mov	r3, r9
 8004142:	460a      	mov	r2, r1
 8004144:	eb42 0303 	adc.w	r3, r2, r3
 8004148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	67bb      	str	r3, [r7, #120]	; 0x78
 8004156:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004164:	4649      	mov	r1, r9
 8004166:	008b      	lsls	r3, r1, #2
 8004168:	4641      	mov	r1, r8
 800416a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800416e:	4641      	mov	r1, r8
 8004170:	008a      	lsls	r2, r1, #2
 8004172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004176:	f7fc f903 	bl	8000380 <__aeabi_uldivmod>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4611      	mov	r1, r2
 8004180:	4b38      	ldr	r3, [pc, #224]	; (8004264 <UART_SetConfig+0x4e4>)
 8004182:	fba3 2301 	umull	r2, r3, r3, r1
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2264      	movs	r2, #100	; 0x64
 800418a:	fb02 f303 	mul.w	r3, r2, r3
 800418e:	1acb      	subs	r3, r1, r3
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	3332      	adds	r3, #50	; 0x32
 8004194:	4a33      	ldr	r2, [pc, #204]	; (8004264 <UART_SetConfig+0x4e4>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041a0:	441c      	add	r4, r3
 80041a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a6:	2200      	movs	r2, #0
 80041a8:	673b      	str	r3, [r7, #112]	; 0x70
 80041aa:	677a      	str	r2, [r7, #116]	; 0x74
 80041ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041b0:	4642      	mov	r2, r8
 80041b2:	464b      	mov	r3, r9
 80041b4:	1891      	adds	r1, r2, r2
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	415b      	adcs	r3, r3
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041c0:	4641      	mov	r1, r8
 80041c2:	1851      	adds	r1, r2, r1
 80041c4:	6039      	str	r1, [r7, #0]
 80041c6:	4649      	mov	r1, r9
 80041c8:	414b      	adcs	r3, r1
 80041ca:	607b      	str	r3, [r7, #4]
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041d8:	4659      	mov	r1, fp
 80041da:	00cb      	lsls	r3, r1, #3
 80041dc:	4651      	mov	r1, sl
 80041de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041e2:	4651      	mov	r1, sl
 80041e4:	00ca      	lsls	r2, r1, #3
 80041e6:	4610      	mov	r0, r2
 80041e8:	4619      	mov	r1, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	4642      	mov	r2, r8
 80041ee:	189b      	adds	r3, r3, r2
 80041f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80041f2:	464b      	mov	r3, r9
 80041f4:	460a      	mov	r2, r1
 80041f6:	eb42 0303 	adc.w	r3, r2, r3
 80041fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	663b      	str	r3, [r7, #96]	; 0x60
 8004206:	667a      	str	r2, [r7, #100]	; 0x64
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004214:	4649      	mov	r1, r9
 8004216:	008b      	lsls	r3, r1, #2
 8004218:	4641      	mov	r1, r8
 800421a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800421e:	4641      	mov	r1, r8
 8004220:	008a      	lsls	r2, r1, #2
 8004222:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004226:	f7fc f8ab 	bl	8000380 <__aeabi_uldivmod>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <UART_SetConfig+0x4e4>)
 8004230:	fba3 1302 	umull	r1, r3, r3, r2
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	2164      	movs	r1, #100	; 0x64
 8004238:	fb01 f303 	mul.w	r3, r1, r3
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	3332      	adds	r3, #50	; 0x32
 8004242:	4a08      	ldr	r2, [pc, #32]	; (8004264 <UART_SetConfig+0x4e4>)
 8004244:	fba2 2303 	umull	r2, r3, r2, r3
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	f003 020f 	and.w	r2, r3, #15
 800424e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4422      	add	r2, r4
 8004256:	609a      	str	r2, [r3, #8]
}
 8004258:	bf00      	nop
 800425a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800425e:	46bd      	mov	sp, r7
 8004260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004264:	51eb851f 	.word	0x51eb851f

08004268 <bmp_reset>:
#include "main.h"
#include <stdio.h>

static int32_t t_fine; //Used by both temp and press functions (needs to be called by the temp funct at first)

void bmp_reset(h_bmp280_t * bmp280){
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af02      	add	r7, sp, #8
 800426e:	6078      	str	r0, [r7, #4]
	bmp280->registre = reset;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	22e0      	movs	r2, #224	; 0xe0
 8004274:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	781a      	ldrb	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	705a      	strb	r2, [r3, #1]
	bmp280->buf[1]= BMP280_RESET;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	22b6      	movs	r2, #182	; 0xb6
 8004282:	709a      	strb	r2, [r3, #2]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 2, HAL_MAX_DELAY)){
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	f04f 33ff 	mov.w	r3, #4294967295
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	2302      	movs	r3, #2
 8004290:	21ee      	movs	r1, #238	; 0xee
 8004292:	4806      	ldr	r0, [pc, #24]	; (80042ac <bmp_reset+0x44>)
 8004294:	f7fd fb36 	bl	8001904 <HAL_I2C_Master_Transmit>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <bmp_reset+0x3c>
		printf("echec du reset\r\n");
 800429e:	4804      	ldr	r0, [pc, #16]	; (80042b0 <bmp_reset+0x48>)
 80042a0:	f001 f900 	bl	80054a4 <puts>
	}
}
 80042a4:	bf00      	nop
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20000148 	.word	0x20000148
 80042b0:	0800675c 	.word	0x0800675c

080042b4 <bmp_id>:

void bmp_id(h_bmp280_t * bmp280){
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	6078      	str	r0, [r7, #4]
	bmp280->registre = id;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	22d0      	movs	r2, #208	; 0xd0
 80042c0:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	781a      	ldrb	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	2301      	movs	r3, #1
 80042d6:	21ee      	movs	r1, #238	; 0xee
 80042d8:	4810      	ldr	r0, [pc, #64]	; (800431c <bmp_id+0x68>)
 80042da:	f7fd fb13 	bl	8001904 <HAL_I2C_Master_Transmit>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <bmp_id+0x36>
		printf("echec de l'id\r\n");
 80042e4:	480e      	ldr	r0, [pc, #56]	; (8004320 <bmp_id+0x6c>)
 80042e6:	f001 f8dd 	bl	80054a4 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, &bmp280->id, 1, 1000)){
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f103 021b 	add.w	r2, r3, #27
 80042f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	2301      	movs	r3, #1
 80042f8:	21ee      	movs	r1, #238	; 0xee
 80042fa:	4808      	ldr	r0, [pc, #32]	; (800431c <bmp_id+0x68>)
 80042fc:	f7fd fc00 	bl	8001b00 <HAL_I2C_Master_Receive>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d105      	bne.n	8004312 <bmp_id+0x5e>
		printf("val id : %x\r\n",bmp280->id);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	7edb      	ldrb	r3, [r3, #27]
 800430a:	4619      	mov	r1, r3
 800430c:	4805      	ldr	r0, [pc, #20]	; (8004324 <bmp_id+0x70>)
 800430e:	f001 f863 	bl	80053d8 <iprintf>
	}
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000148 	.word	0x20000148
 8004320:	0800676c 	.word	0x0800676c
 8004324:	0800677c 	.word	0x0800677c

08004328 <bmp_config>:
		printf("echec de l'id\r\n");
	}
	printf("val id : %x\r\n",bmp280->id);
}*/

void bmp_config(h_bmp280_t * bmp280){
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af02      	add	r7, sp, #8
 800432e:	6078      	str	r0, [r7, #4]
	bmp280->registre = ctrl_mes;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	22f4      	movs	r2, #244	; 0xf4
 8004334:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	781a      	ldrb	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	705a      	strb	r2, [r3, #1]
	bmp280->buf[1]= 0b01010111;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2257      	movs	r2, #87	; 0x57
 8004342:	709a      	strb	r2, [r3, #2]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 2, HAL_MAX_DELAY)){
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	f04f 33ff 	mov.w	r3, #4294967295
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	2302      	movs	r3, #2
 8004350:	21ee      	movs	r1, #238	; 0xee
 8004352:	4810      	ldr	r0, [pc, #64]	; (8004394 <bmp_config+0x6c>)
 8004354:	f7fd fad6 	bl	8001904 <HAL_I2C_Master_Transmit>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <bmp_config+0x3c>
		printf("echec de config\r\n");
 800435e:	480e      	ldr	r0, [pc, #56]	; (8004398 <bmp_config+0x70>)
 8004360:	f001 f8a0 	bl	80054a4 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, &bmp280->config, 1, 1000)){
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f103 021c 	add.w	r2, r3, #28
 800436a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2301      	movs	r3, #1
 8004372:	21ee      	movs	r1, #238	; 0xee
 8004374:	4807      	ldr	r0, [pc, #28]	; (8004394 <bmp_config+0x6c>)
 8004376:	f7fd fbc3 	bl	8001b00 <HAL_I2C_Master_Receive>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d105      	bne.n	800438c <bmp_config+0x64>
		printf("config value : %x\r\n",bmp280->config);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	7f1b      	ldrb	r3, [r3, #28]
 8004384:	4619      	mov	r1, r3
 8004386:	4805      	ldr	r0, [pc, #20]	; (800439c <bmp_config+0x74>)
 8004388:	f001 f826 	bl	80053d8 <iprintf>
	}
	//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
}
 800438c:	bf00      	nop
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20000148 	.word	0x20000148
 8004398:	0800678c 	.word	0x0800678c
 800439c:	080067a0 	.word	0x080067a0

080043a0 <bmp_calib_read>:

void bmp_calib_read(h_bmp280_t * bmp280){
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	6078      	str	r0, [r7, #4]
	bmp280->registre = calib00;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2288      	movs	r2, #136	; 0x88
 80043ac:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	781a      	ldrb	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	f04f 33ff 	mov.w	r3, #4294967295
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	2301      	movs	r3, #1
 80043c2:	21ee      	movs	r1, #238	; 0xee
 80043c4:	4810      	ldr	r0, [pc, #64]	; (8004408 <bmp_calib_read+0x68>)
 80043c6:	f7fd fa9d 	bl	8001904 <HAL_I2C_Master_Transmit>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <bmp_calib_read+0x36>
		printf("echec de calib\r\n");
 80043d0:	480e      	ldr	r0, [pc, #56]	; (800440c <bmp_calib_read+0x6c>)
 80043d2:	f001 f867 	bl	80054a4 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->calib, 25, HAL_MAX_DELAY)){
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f103 021d 	add.w	r2, r3, #29
 80043dc:	f04f 33ff 	mov.w	r3, #4294967295
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	2319      	movs	r3, #25
 80043e4:	21ee      	movs	r1, #238	; 0xee
 80043e6:	4808      	ldr	r0, [pc, #32]	; (8004408 <bmp_calib_read+0x68>)
 80043e8:	f7fd fb8a 	bl	8001b00 <HAL_I2C_Master_Receive>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d105      	bne.n	80043fe <bmp_calib_read+0x5e>
		printf("calib values : %s\r\n",bmp280->calib);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	331d      	adds	r3, #29
 80043f6:	4619      	mov	r1, r3
 80043f8:	4805      	ldr	r0, [pc, #20]	; (8004410 <bmp_calib_read+0x70>)
 80043fa:	f000 ffed 	bl	80053d8 <iprintf>
	}
	//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000148 	.word	0x20000148
 800440c:	080067b4 	.word	0x080067b4
 8004410:	080067c4 	.word	0x080067c4

08004414 <bmp_temp_read>:

void bmp_temp_read(h_bmp280_t * bmp280){
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af02      	add	r7, sp, #8
 800441a:	6078      	str	r0, [r7, #4]
	bmp280->registre = temp_xlsb;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	22fc      	movs	r2, #252	; 0xfc
 8004420:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	781a      	ldrb	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	f04f 33ff 	mov.w	r3, #4294967295
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	2301      	movs	r3, #1
 8004436:	21ee      	movs	r1, #238	; 0xee
 8004438:	483f      	ldr	r0, [pc, #252]	; (8004538 <bmp_temp_read+0x124>)
 800443a:	f7fd fa63 	bl	8001904 <HAL_I2C_Master_Transmit>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <bmp_temp_read+0x36>
		printf("echec de temp read\r\n");
 8004444:	483d      	ldr	r0, [pc, #244]	; (800453c <bmp_temp_read+0x128>)
 8004446:	f001 f82d 	bl	80054a4 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	f04f 33ff 	mov.w	r3, #4294967295
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	2301      	movs	r3, #1
 8004456:	21ee      	movs	r1, #238	; 0xee
 8004458:	4837      	ldr	r0, [pc, #220]	; (8004538 <bmp_temp_read+0x124>)
 800445a:	f7fd fb51 	bl	8001b00 <HAL_I2C_Master_Receive>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d106      	bne.n	8004472 <bmp_temp_read+0x5e>
		bmp280->temp = (int32_t)((bmp280->buf[0]) >>4);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	091b      	lsrs	r3, r3, #4
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	639a      	str	r2, [r3, #56]	; 0x38
		bmp280->temp = ((int32_t)bmp280->buf[0]>>4) + ((int32_t)bmp280->buf[1]<<4) + ((int32_t)bmp280->buf[2]<<12);
		printf("temp brute : %ld\r\n",bmp280->temp);
		bmp280->temp = bmp_compensate_T(bmp280);
		printf("temp : %ld\r\n",bmp280->temp);*/
	}
	bmp280->registre = temp_lsb;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	22fb      	movs	r2, #251	; 0xfb
 8004476:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	781a      	ldrb	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	f04f 33ff 	mov.w	r3, #4294967295
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	2301      	movs	r3, #1
 800448c:	21ee      	movs	r1, #238	; 0xee
 800448e:	482a      	ldr	r0, [pc, #168]	; (8004538 <bmp_temp_read+0x124>)
 8004490:	f7fd fa38 	bl	8001904 <HAL_I2C_Master_Transmit>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <bmp_temp_read+0x8c>
		printf("echec de temp read\r\n");
 800449a:	4828      	ldr	r0, [pc, #160]	; (800453c <bmp_temp_read+0x128>)
 800449c:	f001 f802 	bl	80054a4 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	f04f 33ff 	mov.w	r3, #4294967295
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	2301      	movs	r3, #1
 80044ac:	21ee      	movs	r1, #238	; 0xee
 80044ae:	4822      	ldr	r0, [pc, #136]	; (8004538 <bmp_temp_read+0x124>)
 80044b0:	f7fd fb26 	bl	8001b00 <HAL_I2C_Master_Receive>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d107      	bne.n	80044ca <bmp_temp_read+0xb6>
		bmp280->temp += ((int32_t)(bmp280->buf[0]))<<4;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	785b      	ldrb	r3, [r3, #1]
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	441a      	add	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	bmp280->registre = temp_msb;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	22fa      	movs	r2, #250	; 0xfa
 80044ce:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	781a      	ldrb	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	f04f 33ff 	mov.w	r3, #4294967295
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	2301      	movs	r3, #1
 80044e4:	21ee      	movs	r1, #238	; 0xee
 80044e6:	4814      	ldr	r0, [pc, #80]	; (8004538 <bmp_temp_read+0x124>)
 80044e8:	f7fd fa0c 	bl	8001904 <HAL_I2C_Master_Transmit>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <bmp_temp_read+0xe4>
		printf("echec de temp read\r\n");
 80044f2:	4812      	ldr	r0, [pc, #72]	; (800453c <bmp_temp_read+0x128>)
 80044f4:	f000 ffd6 	bl	80054a4 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	2301      	movs	r3, #1
 8004504:	21ee      	movs	r1, #238	; 0xee
 8004506:	480c      	ldr	r0, [pc, #48]	; (8004538 <bmp_temp_read+0x124>)
 8004508:	f7fd fafa 	bl	8001b00 <HAL_I2C_Master_Receive>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d107      	bne.n	8004522 <bmp_temp_read+0x10e>
		bmp280->temp += ((int32_t)(bmp280->buf[0]))<<12;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	785b      	ldrb	r3, [r3, #1]
 800451a:	031b      	lsls	r3, r3, #12
 800451c:	441a      	add	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	639a      	str	r2, [r3, #56]	; 0x38
	}
	//printf("temp : %ld\r\n",bmp280->temp);

	bmp280->temp = bmp_compensate_T(bmp280);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f852 	bl	80045cc <bmp_compensate_T>
 8004528:	4602      	mov	r2, r0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	639a      	str	r2, [r3, #56]	; 0x38

	//printf("celcius temp : %ld\r\n",bmp280->temp);

}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000148 	.word	0x20000148
 800453c:	080067d8 	.word	0x080067d8

08004540 <bmp_press_read>:

void bmp_press_read(h_bmp280_t * bmp280){
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af02      	add	r7, sp, #8
 8004546:	6078      	str	r0, [r7, #4]
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
		bmp280->press += ((int32_t)(bmp280->buf[0]))<<12;
	}
	printf("press : %ld\r\n",bmp280->press);*/

	bmp280->registre = press_msb;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	22f7      	movs	r2, #247	; 0xf7
 800454c:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	781a      	ldrb	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	f04f 33ff 	mov.w	r3, #4294967295
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	2301      	movs	r3, #1
 8004562:	21ee      	movs	r1, #238	; 0xee
 8004564:	4817      	ldr	r0, [pc, #92]	; (80045c4 <bmp_press_read+0x84>)
 8004566:	f7fd f9cd 	bl	8001904 <HAL_I2C_Master_Transmit>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <bmp_press_read+0x36>
		printf("echec de press_xlsb read\r\n");
 8004570:	4815      	ldr	r0, [pc, #84]	; (80045c8 <bmp_press_read+0x88>)
 8004572:	f000 ff97 	bl	80054a4 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 3, HAL_MAX_DELAY)){
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	2303      	movs	r3, #3
 8004582:	21ee      	movs	r1, #238	; 0xee
 8004584:	480f      	ldr	r0, [pc, #60]	; (80045c4 <bmp_press_read+0x84>)
 8004586:	f7fd fabb 	bl	8001b00 <HAL_I2C_Master_Receive>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10e      	bne.n	80045ae <bmp_press_read+0x6e>
		bmp280->press = (int32_t)((bmp280->buf[2]) >>4) + ((int32_t)(bmp280->buf[1]) <<4) + ((int32_t)(bmp280->buf[0]) <<12);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	78db      	ldrb	r3, [r3, #3]
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	b2db      	uxtb	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	789b      	ldrb	r3, [r3, #2]
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	441a      	add	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	785b      	ldrb	r3, [r3, #1]
 80045a6:	031b      	lsls	r3, r3, #12
 80045a8:	441a      	add	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	//printf("press : %ld\r\n",bmp280->press);

	bmp280->press = bmp_compensate_P(bmp280);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f868 	bl	8004684 <bmp_compensate_P>
 80045b4:	4602      	mov	r2, r0
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	63da      	str	r2, [r3, #60]	; 0x3c

	//printf("corrected press : %ld\r\n",bmp280->press);

}
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000148 	.word	0x20000148
 80045c8:	080067ec 	.word	0x080067ec

080045cc <bmp_compensate_T>:

int32_t bmp_compensate_T(h_bmp280_t * bmp280){
 80045cc:	b480      	push	{r7}
 80045ce:	b089      	sub	sp, #36	; 0x24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
	int32_t adc_T = bmp280->temp;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	61fb      	str	r3, [r7, #28]

	//Extracting calibration values
	uint16_t dig_T1;
	int16_t	 dig_T2, dig_T3;
	dig_T1 =((uint16_t) bmp280->calib[0]) + (((uint16_t) bmp280->calib[1])<<8);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	7f5b      	ldrb	r3, [r3, #29]
 80045de:	b29a      	uxth	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	7f9b      	ldrb	r3, [r3, #30]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	021b      	lsls	r3, r3, #8
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	4413      	add	r3, r2
 80045ec:	837b      	strh	r3, [r7, #26]
	dig_T2 =((int16_t) bmp280->calib[2]) + (((int16_t) bmp280->calib[3])<<8);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	7fdb      	ldrb	r3, [r3, #31]
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	b29b      	uxth	r3, r3
 8004600:	4413      	add	r3, r2
 8004602:	b29b      	uxth	r3, r3
 8004604:	833b      	strh	r3, [r7, #24]
	dig_T3 =((int16_t) bmp280->calib[4]) + (((int16_t) bmp280->calib[5])<<8);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800460c:	b29a      	uxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004614:	b29b      	uxth	r3, r3
 8004616:	021b      	lsls	r3, r3, #8
 8004618:	b29b      	uxth	r3, r3
 800461a:	4413      	add	r3, r2
 800461c:	b29b      	uxth	r3, r3
 800461e:	82fb      	strh	r3, [r7, #22]

	//Temperature calculus (in 1/100th deg C)
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3)-((int32_t)dig_T1<<1)))*((int32_t)dig_T2))>>11;
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	10da      	asrs	r2, r3, #3
 8004624:	8b7b      	ldrh	r3, [r7, #26]
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800462e:	fb02 f303 	mul.w	r3, r2, r3
 8004632:	12db      	asrs	r3, r3, #11
 8004634:	613b      	str	r3, [r7, #16]
	var2 = (((((adc_T>>4)-((int32_t)dig_T1))*((adc_T>>4)-((int32_t)dig_T1)))>>12)*((int32_t)dig_T3))>>14;
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	111a      	asrs	r2, r3, #4
 800463a:	8b7b      	ldrh	r3, [r7, #26]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	1111      	asrs	r1, r2, #4
 8004642:	8b7a      	ldrh	r2, [r7, #26]
 8004644:	1a8a      	subs	r2, r1, r2
 8004646:	fb02 f303 	mul.w	r3, r2, r3
 800464a:	131b      	asrs	r3, r3, #12
 800464c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004650:	fb02 f303 	mul.w	r3, r2, r3
 8004654:	139b      	asrs	r3, r3, #14
 8004656:	60fb      	str	r3, [r7, #12]
	t_fine = var1+ var2;
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4413      	add	r3, r2
 800465e:	4a08      	ldr	r2, [pc, #32]	; (8004680 <bmp_compensate_T+0xb4>)
 8004660:	6013      	str	r3, [r2, #0]
	T = (t_fine*5 + 128)>>8;
 8004662:	4b07      	ldr	r3, [pc, #28]	; (8004680 <bmp_compensate_T+0xb4>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	3380      	adds	r3, #128	; 0x80
 800466e:	121b      	asrs	r3, r3, #8
 8004670:	60bb      	str	r3, [r7, #8]
	return T;
 8004672:	68bb      	ldr	r3, [r7, #8]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3724      	adds	r7, #36	; 0x24
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	2000026c 	.word	0x2000026c

08004684 <bmp_compensate_P>:

int32_t bmp_compensate_P(h_bmp280_t * bmp280){
 8004684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004688:	b0d0      	sub	sp, #320	; 0x140
 800468a:	af00      	add	r7, sp, #0
 800468c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	//Extracting calibration values
	uint16_t dig_P1;
	int16_t	 dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
	dig_P1 =((uint16_t) bmp280->calib[6])+ (((uint16_t) bmp280->calib[7])<<8);
 8004690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004694:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004698:	b29a      	uxth	r2, r3
 800469a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800469e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	4413      	add	r3, r2
 80046aa:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	dig_P2 =((int16_t) bmp280->calib[8]) + (((int16_t) bmp280->calib[9])<<8);
 80046ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046bc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	4413      	add	r3, r2
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	dig_P3 =((int16_t) bmp280->calib[10]) + (((int16_t) bmp280->calib[11])<<8);
 80046ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046d2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	021b      	lsls	r3, r3, #8
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	4413      	add	r3, r2
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
	dig_P4 =((int16_t) bmp280->calib[12]) + (((int16_t) bmp280->calib[13])<<8);
 80046ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046fc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	b29b      	uxth	r3, r3
 8004706:	4413      	add	r3, r2
 8004708:	b29b      	uxth	r3, r3
 800470a:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
	dig_P5 =((int16_t) bmp280->calib[14]) + (((int16_t) bmp280->calib[15])<<8);
 800470e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004712:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004716:	b29a      	uxth	r2, r3
 8004718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800471c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004720:	b29b      	uxth	r3, r3
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	b29b      	uxth	r3, r3
 8004726:	4413      	add	r3, r2
 8004728:	b29b      	uxth	r3, r3
 800472a:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	dig_P6 =((int16_t) bmp280->calib[16]) + (((int16_t) bmp280->calib[17])<<8);
 800472e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004732:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004736:	b29a      	uxth	r2, r3
 8004738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800473c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004740:	b29b      	uxth	r3, r3
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	b29b      	uxth	r3, r3
 8004746:	4413      	add	r3, r2
 8004748:	b29b      	uxth	r3, r3
 800474a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	dig_P7 =((int16_t) bmp280->calib[18]) + (((int16_t) bmp280->calib[19])<<8);
 800474e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004752:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004756:	b29a      	uxth	r2, r3
 8004758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800475c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004760:	b29b      	uxth	r3, r3
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	b29b      	uxth	r3, r3
 8004766:	4413      	add	r3, r2
 8004768:	b29b      	uxth	r3, r3
 800476a:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
	dig_P8 =((int16_t) bmp280->calib[20]) + (((int16_t) bmp280->calib[21])<<8);
 800476e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004772:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004776:	b29a      	uxth	r2, r3
 8004778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800477c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004780:	b29b      	uxth	r3, r3
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	b29b      	uxth	r3, r3
 8004786:	4413      	add	r3, r2
 8004788:	b29b      	uxth	r3, r3
 800478a:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
	dig_P9 =((int16_t) bmp280->calib[22]) + (((int16_t) bmp280->calib[23])<<8);
 800478e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004792:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004796:	b29a      	uxth	r2, r3
 8004798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800479c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	4413      	add	r3, r2
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e

	//Pressure calculus
	int64_t var1, var2, P;
	var1 = ((int64_t)t_fine) - 128000;
 80047ae:	4ba3      	ldr	r3, [pc, #652]	; (8004a3c <bmp_compensate_P+0x3b8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	17da      	asrs	r2, r3, #31
 80047b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047b8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80047bc:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80047c0:	460b      	mov	r3, r1
 80047c2:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 80047c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047c8:	4613      	mov	r3, r2
 80047ca:	f143 33ff 	adc.w	r3, r3, #4294967295
 80047ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047d4:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80047d8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80047dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047e0:	fb03 f102 	mul.w	r1, r3, r2
 80047e4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80047e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047ec:	fb02 f303 	mul.w	r3, r2, r3
 80047f0:	18ca      	adds	r2, r1, r3
 80047f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047f6:	fba3 4503 	umull	r4, r5, r3, r3
 80047fa:	1953      	adds	r3, r2, r5
 80047fc:	461d      	mov	r5, r3
 80047fe:	f9b7 3134 	ldrsh.w	r3, [r7, #308]	; 0x134
 8004802:	17da      	asrs	r2, r3, #31
 8004804:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004808:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800480c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004810:	4603      	mov	r3, r0
 8004812:	fb03 f205 	mul.w	r2, r3, r5
 8004816:	460b      	mov	r3, r1
 8004818:	fb04 f303 	mul.w	r3, r4, r3
 800481c:	4413      	add	r3, r2
 800481e:	4602      	mov	r2, r0
 8004820:	fba4 1202 	umull	r1, r2, r4, r2
 8004824:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004828:	460a      	mov	r2, r1
 800482a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800482e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004832:	4413      	add	r3, r2
 8004834:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004838:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800483c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8004840:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8004844:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8004848:	17da      	asrs	r2, r3, #31
 800484a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800484e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004852:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004856:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800485a:	462a      	mov	r2, r5
 800485c:	fb02 f203 	mul.w	r2, r2, r3
 8004860:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004864:	4621      	mov	r1, r4
 8004866:	fb01 f303 	mul.w	r3, r1, r3
 800486a:	441a      	add	r2, r3
 800486c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004870:	4621      	mov	r1, r4
 8004872:	fba3 ab01 	umull	sl, fp, r3, r1
 8004876:	eb02 030b 	add.w	r3, r2, fp
 800487a:	469b      	mov	fp, r3
 800487c:	f04f 0000 	mov.w	r0, #0
 8004880:	f04f 0100 	mov.w	r1, #0
 8004884:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8004888:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 800488c:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8004890:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8004894:	1814      	adds	r4, r2, r0
 8004896:	643c      	str	r4, [r7, #64]	; 0x40
 8004898:	414b      	adcs	r3, r1
 800489a:	647b      	str	r3, [r7, #68]	; 0x44
 800489c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80048a0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 80048a4:	f9b7 3138 	ldrsh.w	r3, [r7, #312]	; 0x138
 80048a8:	17da      	asrs	r2, r3, #31
 80048aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048ae:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80048b2:	f04f 0000 	mov.w	r0, #0
 80048b6:	f04f 0100 	mov.w	r1, #0
 80048ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80048be:	00d9      	lsls	r1, r3, #3
 80048c0:	2000      	movs	r0, #0
 80048c2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80048c6:	1814      	adds	r4, r2, r0
 80048c8:	63bc      	str	r4, [r7, #56]	; 0x38
 80048ca:	414b      	adcs	r3, r1
 80048cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ce:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80048d2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80048d6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80048da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80048de:	fb03 f102 	mul.w	r1, r3, r2
 80048e2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80048e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	18ca      	adds	r2, r1, r3
 80048f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80048f4:	fba3 8903 	umull	r8, r9, r3, r3
 80048f8:	eb02 0309 	add.w	r3, r2, r9
 80048fc:	4699      	mov	r9, r3
 80048fe:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	; 0x13a
 8004902:	17da      	asrs	r2, r3, #31
 8004904:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004908:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800490c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004910:	4603      	mov	r3, r0
 8004912:	fb03 f209 	mul.w	r2, r3, r9
 8004916:	460b      	mov	r3, r1
 8004918:	fb08 f303 	mul.w	r3, r8, r3
 800491c:	4413      	add	r3, r2
 800491e:	4602      	mov	r2, r0
 8004920:	fba8 1202 	umull	r1, r2, r8, r2
 8004924:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004928:	460a      	mov	r2, r1
 800492a:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 800492e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8004932:	4413      	add	r3, r2
 8004934:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004938:	f04f 0000 	mov.w	r0, #0
 800493c:	f04f 0100 	mov.w	r1, #0
 8004940:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8004944:	4623      	mov	r3, r4
 8004946:	0a18      	lsrs	r0, r3, #8
 8004948:	462b      	mov	r3, r5
 800494a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800494e:	462b      	mov	r3, r5
 8004950:	1219      	asrs	r1, r3, #8
 8004952:	f9b7 313c 	ldrsh.w	r3, [r7, #316]	; 0x13c
 8004956:	17da      	asrs	r2, r3, #31
 8004958:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800495c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004960:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004964:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004968:	464a      	mov	r2, r9
 800496a:	fb02 f203 	mul.w	r2, r2, r3
 800496e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004972:	4644      	mov	r4, r8
 8004974:	fb04 f303 	mul.w	r3, r4, r3
 8004978:	441a      	add	r2, r3
 800497a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800497e:	4644      	mov	r4, r8
 8004980:	fba3 4304 	umull	r4, r3, r3, r4
 8004984:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004988:	4623      	mov	r3, r4
 800498a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800498e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004992:	18d3      	adds	r3, r2, r3
 8004994:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80049a4:	464c      	mov	r4, r9
 80049a6:	0323      	lsls	r3, r4, #12
 80049a8:	4644      	mov	r4, r8
 80049aa:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80049ae:	4644      	mov	r4, r8
 80049b0:	0322      	lsls	r2, r4, #12
 80049b2:	1884      	adds	r4, r0, r2
 80049b4:	633c      	str	r4, [r7, #48]	; 0x30
 80049b6:	eb41 0303 	adc.w	r3, r1, r3
 80049ba:	637b      	str	r3, [r7, #52]	; 0x34
 80049bc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80049c0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47) + var1))*((int64_t)dig_P1)>>33;
 80049c4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80049c8:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80049cc:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 80049d0:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80049d4:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80049d8:	2200      	movs	r2, #0
 80049da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049e2:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80049e6:	462b      	mov	r3, r5
 80049e8:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80049ec:	4642      	mov	r2, r8
 80049ee:	fb02 f203 	mul.w	r2, r2, r3
 80049f2:	464b      	mov	r3, r9
 80049f4:	4621      	mov	r1, r4
 80049f6:	fb01 f303 	mul.w	r3, r1, r3
 80049fa:	4413      	add	r3, r2
 80049fc:	4622      	mov	r2, r4
 80049fe:	4641      	mov	r1, r8
 8004a00:	fba2 1201 	umull	r1, r2, r2, r1
 8004a04:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004a08:	460a      	mov	r2, r1
 8004a0a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8004a0e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004a12:	4413      	add	r3, r2
 8004a14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8004a24:	4629      	mov	r1, r5
 8004a26:	104a      	asrs	r2, r1, #1
 8004a28:	4629      	mov	r1, r5
 8004a2a:	17cb      	asrs	r3, r1, #31
 8004a2c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if(var1 == 0){
 8004a30:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8004a34:	4313      	orrs	r3, r2
 8004a36:	d103      	bne.n	8004a40 <bmp_compensate_P+0x3bc>
		return 0;  //avoid exception caused by division by zero
 8004a38:	2300      	movs	r3, #0
 8004a3a:	e144      	b.n	8004cc6 <bmp_compensate_P+0x642>
 8004a3c:	2000026c 	.word	0x2000026c
	}
	P = 1048576 - bmp280->press;
 8004a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a46:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8004a4a:	17da      	asrs	r2, r3, #31
 8004a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a50:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004a54:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	P = (((P<<31)-var2)*3125)/var1;
 8004a58:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a5c:	105b      	asrs	r3, r3, #1
 8004a5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004a62:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a66:	07db      	lsls	r3, r3, #31
 8004a68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a6c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8004a70:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8004a74:	4621      	mov	r1, r4
 8004a76:	1a89      	subs	r1, r1, r2
 8004a78:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004a7c:	4629      	mov	r1, r5
 8004a7e:	eb61 0303 	sbc.w	r3, r1, r3
 8004a82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a86:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	1891      	adds	r1, r2, r2
 8004a90:	6239      	str	r1, [r7, #32]
 8004a92:	415b      	adcs	r3, r3
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
 8004a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	1851      	adds	r1, r2, r1
 8004a9e:	61b9      	str	r1, [r7, #24]
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	414b      	adcs	r3, r1
 8004aa4:	61fb      	str	r3, [r7, #28]
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	018b      	lsls	r3, r1, #6
 8004ab6:	4641      	mov	r1, r8
 8004ab8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004abc:	4641      	mov	r1, r8
 8004abe:	018a      	lsls	r2, r1, #6
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	1889      	adds	r1, r1, r2
 8004ac4:	6139      	str	r1, [r7, #16]
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	eb43 0101 	adc.w	r1, r3, r1
 8004acc:	6179      	str	r1, [r7, #20]
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8004ada:	4649      	mov	r1, r9
 8004adc:	008b      	lsls	r3, r1, #2
 8004ade:	4641      	mov	r1, r8
 8004ae0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	008a      	lsls	r2, r1, #2
 8004ae8:	4610      	mov	r0, r2
 8004aea:	4619      	mov	r1, r3
 8004aec:	4603      	mov	r3, r0
 8004aee:	4622      	mov	r2, r4
 8004af0:	189b      	adds	r3, r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]
 8004af4:	460b      	mov	r3, r1
 8004af6:	462a      	mov	r2, r5
 8004af8:	eb42 0303 	adc.w	r3, r2, r3
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004b0a:	4649      	mov	r1, r9
 8004b0c:	008b      	lsls	r3, r1, #2
 8004b0e:	4641      	mov	r1, r8
 8004b10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b14:	4641      	mov	r1, r8
 8004b16:	008a      	lsls	r2, r1, #2
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	4622      	mov	r2, r4
 8004b20:	189b      	adds	r3, r3, r2
 8004b22:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b24:	462b      	mov	r3, r5
 8004b26:	460a      	mov	r2, r1
 8004b28:	eb42 0303 	adc.w	r3, r2, r3
 8004b2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b2e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8004b32:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004b36:	f7fb fbd3 	bl	80002e0 <__aeabi_ldivmod>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (P>>13) * (P>>13))>>25;
 8004b42:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 8004b46:	17da      	asrs	r2, r3, #31
 8004b48:	673b      	str	r3, [r7, #112]	; 0x70
 8004b4a:	677a      	str	r2, [r7, #116]	; 0x74
 8004b4c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8004b50:	f04f 0000 	mov.w	r0, #0
 8004b54:	f04f 0100 	mov.w	r1, #0
 8004b58:	0b50      	lsrs	r0, r2, #13
 8004b5a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004b5e:	1359      	asrs	r1, r3, #13
 8004b60:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8004b64:	462b      	mov	r3, r5
 8004b66:	fb00 f203 	mul.w	r2, r0, r3
 8004b6a:	4623      	mov	r3, r4
 8004b6c:	fb03 f301 	mul.w	r3, r3, r1
 8004b70:	4413      	add	r3, r2
 8004b72:	4622      	mov	r2, r4
 8004b74:	fba2 1200 	umull	r1, r2, r2, r0
 8004b78:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b7c:	460a      	mov	r2, r1
 8004b7e:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8004b82:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004b86:	4413      	add	r3, r2
 8004b88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004b8c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8004b90:	f04f 0000 	mov.w	r0, #0
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	0b50      	lsrs	r0, r2, #13
 8004b9a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004b9e:	1359      	asrs	r1, r3, #13
 8004ba0:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ba4:	462b      	mov	r3, r5
 8004ba6:	fb00 f203 	mul.w	r2, r0, r3
 8004baa:	4623      	mov	r3, r4
 8004bac:	fb03 f301 	mul.w	r3, r3, r1
 8004bb0:	4413      	add	r3, r2
 8004bb2:	4622      	mov	r2, r4
 8004bb4:	fba2 1200 	umull	r1, r2, r2, r0
 8004bb8:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8004bbc:	460a      	mov	r2, r1
 8004bbe:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8004bc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004bd8:	4621      	mov	r1, r4
 8004bda:	0e4a      	lsrs	r2, r1, #25
 8004bdc:	4629      	mov	r1, r5
 8004bde:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8004be2:	4629      	mov	r1, r5
 8004be4:	164b      	asrs	r3, r1, #25
 8004be6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * P)>>19;
 8004bea:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 8004bee:	17da      	asrs	r2, r3, #31
 8004bf0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bf4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004bf8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8004bfc:	462a      	mov	r2, r5
 8004bfe:	fb02 f203 	mul.w	r2, r2, r3
 8004c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c06:	4621      	mov	r1, r4
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004c12:	4621      	mov	r1, r4
 8004c14:	fba2 1201 	umull	r1, r2, r2, r1
 8004c18:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c1c:	460a      	mov	r2, r1
 8004c1e:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8004c22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004c26:	4413      	add	r3, r2
 8004c28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004c38:	4621      	mov	r1, r4
 8004c3a:	0cca      	lsrs	r2, r1, #19
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004c42:	4629      	mov	r1, r5
 8004c44:	14cb      	asrs	r3, r1, #19
 8004c46:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	P = ((P + var1 + var2)>>8) + (((int64_t)dig_P7)<<4);
 8004c4a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004c4e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8004c52:	1884      	adds	r4, r0, r2
 8004c54:	663c      	str	r4, [r7, #96]	; 0x60
 8004c56:	eb41 0303 	adc.w	r3, r1, r3
 8004c5a:	667b      	str	r3, [r7, #100]	; 0x64
 8004c5c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8004c60:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004c64:	4621      	mov	r1, r4
 8004c66:	1889      	adds	r1, r1, r2
 8004c68:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	eb43 0101 	adc.w	r1, r3, r1
 8004c70:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004c72:	f04f 0000 	mov.w	r0, #0
 8004c76:	f04f 0100 	mov.w	r1, #0
 8004c7a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8004c7e:	4623      	mov	r3, r4
 8004c80:	0a18      	lsrs	r0, r3, #8
 8004c82:	462b      	mov	r3, r5
 8004c84:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004c88:	462b      	mov	r3, r5
 8004c8a:	1219      	asrs	r1, r3, #8
 8004c8c:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 8004c90:	17da      	asrs	r2, r3, #31
 8004c92:	653b      	str	r3, [r7, #80]	; 0x50
 8004c94:	657a      	str	r2, [r7, #84]	; 0x54
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004ca2:	464c      	mov	r4, r9
 8004ca4:	0123      	lsls	r3, r4, #4
 8004ca6:	4644      	mov	r4, r8
 8004ca8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8004cac:	4644      	mov	r4, r8
 8004cae:	0122      	lsls	r2, r4, #4
 8004cb0:	1884      	adds	r4, r0, r2
 8004cb2:	603c      	str	r4, [r7, #0]
 8004cb4:	eb41 0303 	adc.w	r3, r1, r3
 8004cb8:	607b      	str	r3, [r7, #4]
 8004cba:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004cbe:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (int32_t) P;
 8004cc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cd2:	bf00      	nop

08004cd4 <Shell_Init>:
 * @brief Initializes the shell environment.
 *
 * This function initializes various buffers and sets up UART communication using
 * the HAL (Hardware Abstraction Layer) for STM32 microcontrollers.
 */
void Shell_Init(void){
 8004cd4:	b598      	push	{r3, r4, r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
	memset(argv,(int)NULL, MAX_ARGS*sizeof(char*));
 8004cd8:	2224      	movs	r2, #36	; 0x24
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4819      	ldr	r0, [pc, #100]	; (8004d44 <Shell_Init+0x70>)
 8004cde:	f000 fcf5 	bl	80056cc <memset>
	memset(cmdBuffer, (int)NULL, CMD_BUFFER_SIZE*sizeof(char));
 8004ce2:	2240      	movs	r2, #64	; 0x40
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4818      	ldr	r0, [pc, #96]	; (8004d48 <Shell_Init+0x74>)
 8004ce8:	f000 fcf0 	bl	80056cc <memset>
 8004cec:	4b17      	ldr	r3, [pc, #92]	; (8004d4c <Shell_Init+0x78>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,(int)NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,(int)NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8004cf2:	2240      	movs	r2, #64	; 0x40
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	4816      	ldr	r0, [pc, #88]	; (8004d50 <Shell_Init+0x7c>)
 8004cf8:	f000 fce8 	bl	80056cc <memset>

	HAL_UART_Receive_IT(uartShell, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8004cfc:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <Shell_Init+0x80>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2201      	movs	r2, #1
 8004d02:	4912      	ldr	r1, [pc, #72]	; (8004d4c <Shell_Init+0x78>)
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fe fb16 	bl	8003336 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(uartShell, started, strlen((char *)started), HAL_MAX_DELAY);
 8004d0a:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <Shell_Init+0x80>)
 8004d0c:	681c      	ldr	r4, [r3, #0]
 8004d0e:	4812      	ldr	r0, [pc, #72]	; (8004d58 <Shell_Init+0x84>)
 8004d10:	f7fb fa88 	bl	8000224 <strlen>
 8004d14:	4603      	mov	r3, r0
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1c:	490e      	ldr	r1, [pc, #56]	; (8004d58 <Shell_Init+0x84>)
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f7fe fa77 	bl	8003212 <HAL_UART_Transmit>
	HAL_UART_Transmit(uartShell, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8004d24:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <Shell_Init+0x80>)
 8004d26:	681c      	ldr	r4, [r3, #0]
 8004d28:	480c      	ldr	r0, [pc, #48]	; (8004d5c <Shell_Init+0x88>)
 8004d2a:	f7fb fa7b 	bl	8000224 <strlen>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	f04f 33ff 	mov.w	r3, #4294967295
 8004d36:	4909      	ldr	r1, [pc, #36]	; (8004d5c <Shell_Init+0x88>)
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f7fe fa6a 	bl	8003212 <HAL_UART_Transmit>
}
 8004d3e:	bf00      	nop
 8004d40:	bd98      	pop	{r3, r4, r7, pc}
 8004d42:	bf00      	nop
 8004d44:	200002fc 	.word	0x200002fc
 8004d48:	200002b8 	.word	0x200002b8
 8004d4c:	20000274 	.word	0x20000274
 8004d50:	20000278 	.word	0x20000278
 8004d54:	200000c8 	.word	0x200000c8
 8004d58:	20000028 	.word	0x20000028
 8004d5c:	2000000c 	.word	0x2000000c

08004d60 <Shell_Loop>:
 * - If the command is "help", it transmits a list of available functions.
 * - Otherwise, it transmits a "Command not found" message.
 *
 * After processing a command, it transmits the shell prompt for the next input.
 */
void Shell_Loop(void){
 8004d60:	b590      	push	{r4, r7, lr}
 8004d62:	b097      	sub	sp, #92	; 0x5c
 8004d64:	af02      	add	r7, sp, #8
	if(uartRxReceived){
 8004d66:	4ba6      	ldr	r3, [pc, #664]	; (8005000 <Shell_Loop+0x2a0>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d05e      	beq.n	8004e2c <Shell_Loop+0xcc>
		switch(uartRxBuffer[0]){
 8004d6e:	4ba5      	ldr	r3, [pc, #660]	; (8005004 <Shell_Loop+0x2a4>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d035      	beq.n	8004de2 <Shell_Loop+0x82>
 8004d76:	2b0d      	cmp	r3, #13
 8004d78:	d144      	bne.n	8004e04 <Shell_Loop+0xa4>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(uartShell, newline, sizeof(newline), HAL_MAX_DELAY);
 8004d7a:	4ba3      	ldr	r3, [pc, #652]	; (8005008 <Shell_Loop+0x2a8>)
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d82:	2203      	movs	r2, #3
 8004d84:	49a1      	ldr	r1, [pc, #644]	; (800500c <Shell_Loop+0x2ac>)
 8004d86:	f7fe fa44 	bl	8003212 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8004d8a:	4ba1      	ldr	r3, [pc, #644]	; (8005010 <Shell_Loop+0x2b0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4aa1      	ldr	r2, [pc, #644]	; (8005014 <Shell_Loop+0x2b4>)
 8004d90:	2100      	movs	r1, #0
 8004d92:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8004d94:	4ba0      	ldr	r3, [pc, #640]	; (8005018 <Shell_Loop+0x2b8>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " =");
 8004d9a:	49a0      	ldr	r1, [pc, #640]	; (800501c <Shell_Loop+0x2bc>)
 8004d9c:	489d      	ldr	r0, [pc, #628]	; (8005014 <Shell_Loop+0x2b4>)
 8004d9e:	f000 fc9d 	bl	80056dc <strtok>
 8004da2:	4603      	mov	r3, r0
 8004da4:	4a9e      	ldr	r2, [pc, #632]	; (8005020 <Shell_Loop+0x2c0>)
 8004da6:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8004da8:	e010      	b.n	8004dcc <Shell_Loop+0x6c>
				argv[argc++] = token;
 8004daa:	4b9b      	ldr	r3, [pc, #620]	; (8005018 <Shell_Loop+0x2b8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	4999      	ldr	r1, [pc, #612]	; (8005018 <Shell_Loop+0x2b8>)
 8004db2:	600a      	str	r2, [r1, #0]
 8004db4:	4a9a      	ldr	r2, [pc, #616]	; (8005020 <Shell_Loop+0x2c0>)
 8004db6:	6812      	ldr	r2, [r2, #0]
 8004db8:	499a      	ldr	r1, [pc, #616]	; (8005024 <Shell_Loop+0x2c4>)
 8004dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " =");
 8004dbe:	4997      	ldr	r1, [pc, #604]	; (800501c <Shell_Loop+0x2bc>)
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	f000 fc8b 	bl	80056dc <strtok>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	4a95      	ldr	r2, [pc, #596]	; (8005020 <Shell_Loop+0x2c0>)
 8004dca:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8004dcc:	4b94      	ldr	r3, [pc, #592]	; (8005020 <Shell_Loop+0x2c0>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1ea      	bne.n	8004daa <Shell_Loop+0x4a>
			}
			idx_cmd = 0;
 8004dd4:	4b8e      	ldr	r3, [pc, #568]	; (8005010 <Shell_Loop+0x2b0>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8004dda:	4b93      	ldr	r3, [pc, #588]	; (8005028 <Shell_Loop+0x2c8>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
			break;
 8004de0:	e021      	b.n	8004e26 <Shell_Loop+0xc6>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8004de2:	4b8b      	ldr	r3, [pc, #556]	; (8005010 <Shell_Loop+0x2b0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	1e5a      	subs	r2, r3, #1
 8004de8:	4989      	ldr	r1, [pc, #548]	; (8005010 <Shell_Loop+0x2b0>)
 8004dea:	600a      	str	r2, [r1, #0]
 8004dec:	4a89      	ldr	r2, [pc, #548]	; (8005014 <Shell_Loop+0x2b4>)
 8004dee:	2100      	movs	r1, #0
 8004df0:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(uartShell, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8004df2:	4b85      	ldr	r3, [pc, #532]	; (8005008 <Shell_Loop+0x2a8>)
 8004df4:	6818      	ldr	r0, [r3, #0]
 8004df6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	498b      	ldr	r1, [pc, #556]	; (800502c <Shell_Loop+0x2cc>)
 8004dfe:	f7fe fa08 	bl	8003212 <HAL_UART_Transmit>
			break;
 8004e02:	e010      	b.n	8004e26 <Shell_Loop+0xc6>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8004e04:	4b82      	ldr	r3, [pc, #520]	; (8005010 <Shell_Loop+0x2b0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	4981      	ldr	r1, [pc, #516]	; (8005010 <Shell_Loop+0x2b0>)
 8004e0c:	600a      	str	r2, [r1, #0]
 8004e0e:	4a7d      	ldr	r2, [pc, #500]	; (8005004 <Shell_Loop+0x2a4>)
 8004e10:	7811      	ldrb	r1, [r2, #0]
 8004e12:	4a80      	ldr	r2, [pc, #512]	; (8005014 <Shell_Loop+0x2b4>)
 8004e14:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(uartShell, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8004e16:	4b7c      	ldr	r3, [pc, #496]	; (8005008 <Shell_Loop+0x2a8>)
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e1e:	2201      	movs	r2, #1
 8004e20:	4978      	ldr	r1, [pc, #480]	; (8005004 <Shell_Loop+0x2a4>)
 8004e22:	f7fe f9f6 	bl	8003212 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8004e26:	4b76      	ldr	r3, [pc, #472]	; (8005000 <Shell_Loop+0x2a0>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8004e2c:	4b7e      	ldr	r3, [pc, #504]	; (8005028 <Shell_Loop+0x2c8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 814d 	beq.w	80050d0 <Shell_Loop+0x370>
		static int A=1, K=0;
		if(strcmp(argv[0],"WhereisBrian?")==0){
 8004e36:	4b7b      	ldr	r3, [pc, #492]	; (8005024 <Shell_Loop+0x2c4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	497d      	ldr	r1, [pc, #500]	; (8005030 <Shell_Loop+0x2d0>)
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fb f9e7 	bl	8000210 <strcmp>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d108      	bne.n	8004e5a <Shell_Loop+0xfa>
			HAL_UART_Transmit(uartShell, brian, sizeof(brian), HAL_MAX_DELAY);
 8004e48:	4b6f      	ldr	r3, [pc, #444]	; (8005008 <Shell_Loop+0x2a8>)
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e50:	221a      	movs	r2, #26
 8004e52:	4978      	ldr	r1, [pc, #480]	; (8005034 <Shell_Loop+0x2d4>)
 8004e54:	f7fe f9dd 	bl	8003212 <HAL_UART_Transmit>
 8004e58:	e12f      	b.n	80050ba <Shell_Loop+0x35a>
		}
		else if(strcmp(argv[0],"GET_T")==0){
 8004e5a:	4b72      	ldr	r3, [pc, #456]	; (8005024 <Shell_Loop+0x2c4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4976      	ldr	r1, [pc, #472]	; (8005038 <Shell_Loop+0x2d8>)
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fb f9d5 	bl	8000210 <strcmp>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d139      	bne.n	8004ee0 <Shell_Loop+0x180>
			bmp_temp_read(&bmp280);
 8004e6c:	4873      	ldr	r0, [pc, #460]	; (800503c <Shell_Loop+0x2dc>)
 8004e6e:	f7ff fad1 	bl	8004414 <bmp_temp_read>
			char pibuffer[11];
			uint16_t size = snprintf(pibuffer,11,"T=+%2d.%2d_C",(int)(bmp280.temp-(bmp280.temp%100))/100,(int)bmp280.temp%100);
 8004e72:	4b72      	ldr	r3, [pc, #456]	; (800503c <Shell_Loop+0x2dc>)
 8004e74:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004e76:	4b71      	ldr	r3, [pc, #452]	; (800503c <Shell_Loop+0x2dc>)
 8004e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e7a:	4b71      	ldr	r3, [pc, #452]	; (8005040 <Shell_Loop+0x2e0>)
 8004e7c:	fb83 0302 	smull	r0, r3, r3, r2
 8004e80:	1158      	asrs	r0, r3, #5
 8004e82:	17d3      	asrs	r3, r2, #31
 8004e84:	1ac3      	subs	r3, r0, r3
 8004e86:	2064      	movs	r0, #100	; 0x64
 8004e88:	fb00 f303 	mul.w	r3, r0, r3
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	1acb      	subs	r3, r1, r3
 8004e90:	4a6b      	ldr	r2, [pc, #428]	; (8005040 <Shell_Loop+0x2e0>)
 8004e92:	fb82 1203 	smull	r1, r2, r2, r3
 8004e96:	1152      	asrs	r2, r2, #5
 8004e98:	17db      	asrs	r3, r3, #31
 8004e9a:	1ad4      	subs	r4, r2, r3
 8004e9c:	4b67      	ldr	r3, [pc, #412]	; (800503c <Shell_Loop+0x2dc>)
 8004e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ea0:	4b67      	ldr	r3, [pc, #412]	; (8005040 <Shell_Loop+0x2e0>)
 8004ea2:	fb83 1302 	smull	r1, r3, r3, r2
 8004ea6:	1159      	asrs	r1, r3, #5
 8004ea8:	17d3      	asrs	r3, r2, #31
 8004eaa:	1acb      	subs	r3, r1, r3
 8004eac:	2164      	movs	r1, #100	; 0x64
 8004eae:	fb01 f303 	mul.w	r3, r1, r3
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	4623      	mov	r3, r4
 8004ebc:	4a61      	ldr	r2, [pc, #388]	; (8005044 <Shell_Loop+0x2e4>)
 8004ebe:	210b      	movs	r1, #11
 8004ec0:	f000 faf8 	bl	80054b4 <sniprintf>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			HAL_UART_Transmit(uartShell, pibuffer, size, HAL_MAX_DELAY);
 8004eca:	4b4f      	ldr	r3, [pc, #316]	; (8005008 <Shell_Loop+0x2a8>)
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8004ed2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8004ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eda:	f7fe f99a 	bl	8003212 <HAL_UART_Transmit>
 8004ede:	e0ec      	b.n	80050ba <Shell_Loop+0x35a>
		}
		else if(strcmp(argv[0],"GET_P")==0){
 8004ee0:	4b50      	ldr	r3, [pc, #320]	; (8005024 <Shell_Loop+0x2c4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4958      	ldr	r1, [pc, #352]	; (8005048 <Shell_Loop+0x2e8>)
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fb f992 	bl	8000210 <strcmp>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d123      	bne.n	8004f3a <Shell_Loop+0x1da>
			bmp_press_read(&bmp280);
 8004ef2:	4852      	ldr	r0, [pc, #328]	; (800503c <Shell_Loop+0x2dc>)
 8004ef4:	f7ff fb24 	bl	8004540 <bmp_press_read>
			char pibuffer[11];
			uint16_t size = snprintf(pibuffer,11,"P=%dPa",(int)(bmp280.press%10000000));
 8004ef8:	4b50      	ldr	r3, [pc, #320]	; (800503c <Shell_Loop+0x2dc>)
 8004efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efc:	4a53      	ldr	r2, [pc, #332]	; (800504c <Shell_Loop+0x2ec>)
 8004efe:	fb82 1203 	smull	r1, r2, r2, r3
 8004f02:	1591      	asrs	r1, r2, #22
 8004f04:	17da      	asrs	r2, r3, #31
 8004f06:	1a8a      	subs	r2, r1, r2
 8004f08:	4951      	ldr	r1, [pc, #324]	; (8005050 <Shell_Loop+0x2f0>)
 8004f0a:	fb01 f202 	mul.w	r2, r1, r2
 8004f0e:	1a9a      	subs	r2, r3, r2
 8004f10:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004f14:	4613      	mov	r3, r2
 8004f16:	4a4f      	ldr	r2, [pc, #316]	; (8005054 <Shell_Loop+0x2f4>)
 8004f18:	210b      	movs	r1, #11
 8004f1a:	f000 facb 	bl	80054b4 <sniprintf>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			HAL_UART_Transmit(uartShell, pibuffer, size, HAL_MAX_DELAY);
 8004f24:	4b38      	ldr	r3, [pc, #224]	; (8005008 <Shell_Loop+0x2a8>)
 8004f26:	6818      	ldr	r0, [r3, #0]
 8004f28:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8004f2c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004f30:	f04f 33ff 	mov.w	r3, #4294967295
 8004f34:	f7fe f96d 	bl	8003212 <HAL_UART_Transmit>
 8004f38:	e0bf      	b.n	80050ba <Shell_Loop+0x35a>
		}
		else if(strcmp(argv[0],"SET_K")==0){
 8004f3a:	4b3a      	ldr	r3, [pc, #232]	; (8005024 <Shell_Loop+0x2c4>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4946      	ldr	r1, [pc, #280]	; (8005058 <Shell_Loop+0x2f8>)
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fb f965 	bl	8000210 <strcmp>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d11c      	bne.n	8004f86 <Shell_Loop+0x226>
			K = number_interpretor(argv[1]);
 8004f4c:	4b35      	ldr	r3, [pc, #212]	; (8005024 <Shell_Loop+0x2c4>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 f8e9 	bl	8005128 <number_interpretor>
 8004f56:	4603      	mov	r3, r0
 8004f58:	4a40      	ldr	r2, [pc, #256]	; (800505c <Shell_Loop+0x2fc>)
 8004f5a:	6013      	str	r3, [r2, #0]
			char pibuffer[11];
			uint16_t size = snprintf(pibuffer,11,"SET_K=OK");
 8004f5c:	f107 031c 	add.w	r3, r7, #28
 8004f60:	4a3f      	ldr	r2, [pc, #252]	; (8005060 <Shell_Loop+0x300>)
 8004f62:	210b      	movs	r1, #11
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 faa5 	bl	80054b4 <sniprintf>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			HAL_UART_Transmit(uartShell, pibuffer, size, HAL_MAX_DELAY);
 8004f70:	4b25      	ldr	r3, [pc, #148]	; (8005008 <Shell_Loop+0x2a8>)
 8004f72:	6818      	ldr	r0, [r3, #0]
 8004f74:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004f78:	f107 011c 	add.w	r1, r7, #28
 8004f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f80:	f7fe f947 	bl	8003212 <HAL_UART_Transmit>
 8004f84:	e099      	b.n	80050ba <Shell_Loop+0x35a>
		}
		else if(strcmp(argv[0],"GET_K")==0){
 8004f86:	4b27      	ldr	r3, [pc, #156]	; (8005024 <Shell_Loop+0x2c4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4936      	ldr	r1, [pc, #216]	; (8005064 <Shell_Loop+0x304>)
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fb f93f 	bl	8000210 <strcmp>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d115      	bne.n	8004fc4 <Shell_Loop+0x264>
			char pibuffer[11];
			uint16_t size = snprintf(pibuffer,11,"K=%5d",K);
 8004f98:	4b30      	ldr	r3, [pc, #192]	; (800505c <Shell_Loop+0x2fc>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f107 0010 	add.w	r0, r7, #16
 8004fa0:	4a31      	ldr	r2, [pc, #196]	; (8005068 <Shell_Loop+0x308>)
 8004fa2:	210b      	movs	r1, #11
 8004fa4:	f000 fa86 	bl	80054b4 <sniprintf>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			HAL_UART_Transmit(uartShell, pibuffer, size, HAL_MAX_DELAY);
 8004fae:	4b16      	ldr	r3, [pc, #88]	; (8005008 <Shell_Loop+0x2a8>)
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004fb6:	f107 0110 	add.w	r1, r7, #16
 8004fba:	f04f 33ff 	mov.w	r3, #4294967295
 8004fbe:	f7fe f928 	bl	8003212 <HAL_UART_Transmit>
 8004fc2:	e07a      	b.n	80050ba <Shell_Loop+0x35a>
		}
		else if(strcmp(argv[0],"GET_A")==0){
 8004fc4:	4b17      	ldr	r3, [pc, #92]	; (8005024 <Shell_Loop+0x2c4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4928      	ldr	r1, [pc, #160]	; (800506c <Shell_Loop+0x30c>)
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fb f920 	bl	8000210 <strcmp>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d150      	bne.n	8005078 <Shell_Loop+0x318>
			char pibuffer[11];
			uint16_t size = snprintf(pibuffer,11,"A=%5d",A);
 8004fd6:	4b26      	ldr	r3, [pc, #152]	; (8005070 <Shell_Loop+0x310>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	1d38      	adds	r0, r7, #4
 8004fdc:	4a25      	ldr	r2, [pc, #148]	; (8005074 <Shell_Loop+0x314>)
 8004fde:	210b      	movs	r1, #11
 8004fe0:	f000 fa68 	bl	80054b4 <sniprintf>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			HAL_UART_Transmit(uartShell, pibuffer, size, HAL_MAX_DELAY);
 8004fea:	4b07      	ldr	r3, [pc, #28]	; (8005008 <Shell_Loop+0x2a8>)
 8004fec:	6818      	ldr	r0, [r3, #0]
 8004fee:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8004ff2:	1d39      	adds	r1, r7, #4
 8004ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff8:	f7fe f90b 	bl	8003212 <HAL_UART_Transmit>
 8004ffc:	e05d      	b.n	80050ba <Shell_Loop+0x35a>
 8004ffe:	bf00      	nop
 8005000:	20000270 	.word	0x20000270
 8005004:	20000274 	.word	0x20000274
 8005008:	200000c8 	.word	0x200000c8
 800500c:	20000090 	.word	0x20000090
 8005010:	200002f8 	.word	0x200002f8
 8005014:	200002b8 	.word	0x200002b8
 8005018:	20000320 	.word	0x20000320
 800501c:	08006808 	.word	0x08006808
 8005020:	20000324 	.word	0x20000324
 8005024:	200002fc 	.word	0x200002fc
 8005028:	20000328 	.word	0x20000328
 800502c:	20000094 	.word	0x20000094
 8005030:	0800680c 	.word	0x0800680c
 8005034:	200000ac 	.word	0x200000ac
 8005038:	0800681c 	.word	0x0800681c
 800503c:	2000019c 	.word	0x2000019c
 8005040:	51eb851f 	.word	0x51eb851f
 8005044:	08006824 	.word	0x08006824
 8005048:	08006834 	.word	0x08006834
 800504c:	6b5fca6b 	.word	0x6b5fca6b
 8005050:	00989680 	.word	0x00989680
 8005054:	0800683c 	.word	0x0800683c
 8005058:	08006844 	.word	0x08006844
 800505c:	2000032c 	.word	0x2000032c
 8005060:	0800684c 	.word	0x0800684c
 8005064:	08006858 	.word	0x08006858
 8005068:	08006860 	.word	0x08006860
 800506c:	08006868 	.word	0x08006868
 8005070:	200000cc 	.word	0x200000cc
 8005074:	08006870 	.word	0x08006870
		}
		else if(strcmp(argv[0],"help")==0){
 8005078:	4b17      	ldr	r3, [pc, #92]	; (80050d8 <Shell_Loop+0x378>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4917      	ldr	r1, [pc, #92]	; (80050dc <Shell_Loop+0x37c>)
 800507e:	4618      	mov	r0, r3
 8005080:	f7fb f8c6 	bl	8000210 <strcmp>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10f      	bne.n	80050aa <Shell_Loop+0x34a>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 800508a:	4a15      	ldr	r2, [pc, #84]	; (80050e0 <Shell_Loop+0x380>)
 800508c:	2140      	movs	r1, #64	; 0x40
 800508e:	4815      	ldr	r0, [pc, #84]	; (80050e4 <Shell_Loop+0x384>)
 8005090:	f000 fa10 	bl	80054b4 <sniprintf>
 8005094:	64f8      	str	r0, [r7, #76]	; 0x4c
			HAL_UART_Transmit(uartShell, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8005096:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <Shell_Loop+0x388>)
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800509c:	b29a      	uxth	r2, r3
 800509e:	f04f 33ff 	mov.w	r3, #4294967295
 80050a2:	4910      	ldr	r1, [pc, #64]	; (80050e4 <Shell_Loop+0x384>)
 80050a4:	f7fe f8b5 	bl	8003212 <HAL_UART_Transmit>
 80050a8:	e007      	b.n	80050ba <Shell_Loop+0x35a>
		}
		else{
			HAL_UART_Transmit(uartShell, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80050aa:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <Shell_Loop+0x388>)
 80050ac:	6818      	ldr	r0, [r3, #0]
 80050ae:	f04f 33ff 	mov.w	r3, #4294967295
 80050b2:	2214      	movs	r2, #20
 80050b4:	490d      	ldr	r1, [pc, #52]	; (80050ec <Shell_Loop+0x38c>)
 80050b6:	f7fe f8ac 	bl	8003212 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(uartShell, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80050ba:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <Shell_Loop+0x388>)
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	f04f 33ff 	mov.w	r3, #4294967295
 80050c2:	221c      	movs	r2, #28
 80050c4:	490a      	ldr	r1, [pc, #40]	; (80050f0 <Shell_Loop+0x390>)
 80050c6:	f7fe f8a4 	bl	8003212 <HAL_UART_Transmit>
		newCmdReady = 0;
 80050ca:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <Shell_Loop+0x394>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
	}
}
 80050d0:	bf00      	nop
 80050d2:	3754      	adds	r7, #84	; 0x54
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd90      	pop	{r4, r7, pc}
 80050d8:	200002fc 	.word	0x200002fc
 80050dc:	08006878 	.word	0x08006878
 80050e0:	08006880 	.word	0x08006880
 80050e4:	20000278 	.word	0x20000278
 80050e8:	200000c8 	.word	0x200000c8
 80050ec:	20000098 	.word	0x20000098
 80050f0:	2000000c 	.word	0x2000000c
 80050f4:	20000328 	.word	0x20000328

080050f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8005100:	4b06      	ldr	r3, [pc, #24]	; (800511c <HAL_UART_RxCpltCallback+0x24>)
 8005102:	2201      	movs	r2, #1
 8005104:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(uartShell, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8005106:	4b06      	ldr	r3, [pc, #24]	; (8005120 <HAL_UART_RxCpltCallback+0x28>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2201      	movs	r2, #1
 800510c:	4905      	ldr	r1, [pc, #20]	; (8005124 <HAL_UART_RxCpltCallback+0x2c>)
 800510e:	4618      	mov	r0, r3
 8005110:	f7fe f911 	bl	8003336 <HAL_UART_Receive_IT>
}
 8005114:	bf00      	nop
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	20000270 	.word	0x20000270
 8005120:	200000c8 	.word	0x200000c8
 8005124:	20000274 	.word	0x20000274

08005128 <number_interpretor>:

/////////////////////////////////////////////////////////////////////////////////////////////

int number_interpretor(uint8_t * number_string){
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
	if(number_string[0] >= '0' && number_string[0] <= '9' ){
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b2f      	cmp	r3, #47	; 0x2f
 8005136:	d908      	bls.n	800514a <number_interpretor+0x22>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b39      	cmp	r3, #57	; 0x39
 800513e:	d804      	bhi.n	800514a <number_interpretor+0x22>
		return atoi(&number_string[0]);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f808 	bl	8005156 <atoi>
 8005146:	4603      	mov	r3, r0
 8005148:	e001      	b.n	800514e <number_interpretor+0x26>
	}
	else{
		return -1;
 800514a:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <atoi>:
 8005156:	220a      	movs	r2, #10
 8005158:	2100      	movs	r1, #0
 800515a:	f000 b883 	b.w	8005264 <strtol>
	...

08005160 <_strtol_l.constprop.0>:
 8005160:	2b01      	cmp	r3, #1
 8005162:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005166:	d001      	beq.n	800516c <_strtol_l.constprop.0+0xc>
 8005168:	2b24      	cmp	r3, #36	; 0x24
 800516a:	d906      	bls.n	800517a <_strtol_l.constprop.0+0x1a>
 800516c:	f000 fb58 	bl	8005820 <__errno>
 8005170:	2316      	movs	r3, #22
 8005172:	6003      	str	r3, [r0, #0]
 8005174:	2000      	movs	r0, #0
 8005176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800517a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005260 <_strtol_l.constprop.0+0x100>
 800517e:	460d      	mov	r5, r1
 8005180:	462e      	mov	r6, r5
 8005182:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005186:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800518a:	f017 0708 	ands.w	r7, r7, #8
 800518e:	d1f7      	bne.n	8005180 <_strtol_l.constprop.0+0x20>
 8005190:	2c2d      	cmp	r4, #45	; 0x2d
 8005192:	d132      	bne.n	80051fa <_strtol_l.constprop.0+0x9a>
 8005194:	782c      	ldrb	r4, [r5, #0]
 8005196:	2701      	movs	r7, #1
 8005198:	1cb5      	adds	r5, r6, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d05b      	beq.n	8005256 <_strtol_l.constprop.0+0xf6>
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d109      	bne.n	80051b6 <_strtol_l.constprop.0+0x56>
 80051a2:	2c30      	cmp	r4, #48	; 0x30
 80051a4:	d107      	bne.n	80051b6 <_strtol_l.constprop.0+0x56>
 80051a6:	782c      	ldrb	r4, [r5, #0]
 80051a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80051ac:	2c58      	cmp	r4, #88	; 0x58
 80051ae:	d14d      	bne.n	800524c <_strtol_l.constprop.0+0xec>
 80051b0:	786c      	ldrb	r4, [r5, #1]
 80051b2:	2310      	movs	r3, #16
 80051b4:	3502      	adds	r5, #2
 80051b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80051ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80051be:	f04f 0e00 	mov.w	lr, #0
 80051c2:	fbb8 f9f3 	udiv	r9, r8, r3
 80051c6:	4676      	mov	r6, lr
 80051c8:	fb03 8a19 	mls	sl, r3, r9, r8
 80051cc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80051d0:	f1bc 0f09 	cmp.w	ip, #9
 80051d4:	d816      	bhi.n	8005204 <_strtol_l.constprop.0+0xa4>
 80051d6:	4664      	mov	r4, ip
 80051d8:	42a3      	cmp	r3, r4
 80051da:	dd24      	ble.n	8005226 <_strtol_l.constprop.0+0xc6>
 80051dc:	f1be 3fff 	cmp.w	lr, #4294967295
 80051e0:	d008      	beq.n	80051f4 <_strtol_l.constprop.0+0x94>
 80051e2:	45b1      	cmp	r9, r6
 80051e4:	d31c      	bcc.n	8005220 <_strtol_l.constprop.0+0xc0>
 80051e6:	d101      	bne.n	80051ec <_strtol_l.constprop.0+0x8c>
 80051e8:	45a2      	cmp	sl, r4
 80051ea:	db19      	blt.n	8005220 <_strtol_l.constprop.0+0xc0>
 80051ec:	fb06 4603 	mla	r6, r6, r3, r4
 80051f0:	f04f 0e01 	mov.w	lr, #1
 80051f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051f8:	e7e8      	b.n	80051cc <_strtol_l.constprop.0+0x6c>
 80051fa:	2c2b      	cmp	r4, #43	; 0x2b
 80051fc:	bf04      	itt	eq
 80051fe:	782c      	ldrbeq	r4, [r5, #0]
 8005200:	1cb5      	addeq	r5, r6, #2
 8005202:	e7ca      	b.n	800519a <_strtol_l.constprop.0+0x3a>
 8005204:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005208:	f1bc 0f19 	cmp.w	ip, #25
 800520c:	d801      	bhi.n	8005212 <_strtol_l.constprop.0+0xb2>
 800520e:	3c37      	subs	r4, #55	; 0x37
 8005210:	e7e2      	b.n	80051d8 <_strtol_l.constprop.0+0x78>
 8005212:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005216:	f1bc 0f19 	cmp.w	ip, #25
 800521a:	d804      	bhi.n	8005226 <_strtol_l.constprop.0+0xc6>
 800521c:	3c57      	subs	r4, #87	; 0x57
 800521e:	e7db      	b.n	80051d8 <_strtol_l.constprop.0+0x78>
 8005220:	f04f 3eff 	mov.w	lr, #4294967295
 8005224:	e7e6      	b.n	80051f4 <_strtol_l.constprop.0+0x94>
 8005226:	f1be 3fff 	cmp.w	lr, #4294967295
 800522a:	d105      	bne.n	8005238 <_strtol_l.constprop.0+0xd8>
 800522c:	2322      	movs	r3, #34	; 0x22
 800522e:	6003      	str	r3, [r0, #0]
 8005230:	4646      	mov	r6, r8
 8005232:	b942      	cbnz	r2, 8005246 <_strtol_l.constprop.0+0xe6>
 8005234:	4630      	mov	r0, r6
 8005236:	e79e      	b.n	8005176 <_strtol_l.constprop.0+0x16>
 8005238:	b107      	cbz	r7, 800523c <_strtol_l.constprop.0+0xdc>
 800523a:	4276      	negs	r6, r6
 800523c:	2a00      	cmp	r2, #0
 800523e:	d0f9      	beq.n	8005234 <_strtol_l.constprop.0+0xd4>
 8005240:	f1be 0f00 	cmp.w	lr, #0
 8005244:	d000      	beq.n	8005248 <_strtol_l.constprop.0+0xe8>
 8005246:	1e69      	subs	r1, r5, #1
 8005248:	6011      	str	r1, [r2, #0]
 800524a:	e7f3      	b.n	8005234 <_strtol_l.constprop.0+0xd4>
 800524c:	2430      	movs	r4, #48	; 0x30
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1b1      	bne.n	80051b6 <_strtol_l.constprop.0+0x56>
 8005252:	2308      	movs	r3, #8
 8005254:	e7af      	b.n	80051b6 <_strtol_l.constprop.0+0x56>
 8005256:	2c30      	cmp	r4, #48	; 0x30
 8005258:	d0a5      	beq.n	80051a6 <_strtol_l.constprop.0+0x46>
 800525a:	230a      	movs	r3, #10
 800525c:	e7ab      	b.n	80051b6 <_strtol_l.constprop.0+0x56>
 800525e:	bf00      	nop
 8005260:	080068c1 	.word	0x080068c1

08005264 <strtol>:
 8005264:	4613      	mov	r3, r2
 8005266:	460a      	mov	r2, r1
 8005268:	4601      	mov	r1, r0
 800526a:	4802      	ldr	r0, [pc, #8]	; (8005274 <strtol+0x10>)
 800526c:	6800      	ldr	r0, [r0, #0]
 800526e:	f7ff bf77 	b.w	8005160 <_strtol_l.constprop.0>
 8005272:	bf00      	nop
 8005274:	20000128 	.word	0x20000128

08005278 <std>:
 8005278:	2300      	movs	r3, #0
 800527a:	b510      	push	{r4, lr}
 800527c:	4604      	mov	r4, r0
 800527e:	e9c0 3300 	strd	r3, r3, [r0]
 8005282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005286:	6083      	str	r3, [r0, #8]
 8005288:	8181      	strh	r1, [r0, #12]
 800528a:	6643      	str	r3, [r0, #100]	; 0x64
 800528c:	81c2      	strh	r2, [r0, #14]
 800528e:	6183      	str	r3, [r0, #24]
 8005290:	4619      	mov	r1, r3
 8005292:	2208      	movs	r2, #8
 8005294:	305c      	adds	r0, #92	; 0x5c
 8005296:	f000 fa19 	bl	80056cc <memset>
 800529a:	4b05      	ldr	r3, [pc, #20]	; (80052b0 <std+0x38>)
 800529c:	6263      	str	r3, [r4, #36]	; 0x24
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <std+0x3c>)
 80052a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80052a2:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <std+0x40>)
 80052a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <std+0x44>)
 80052a8:	6224      	str	r4, [r4, #32]
 80052aa:	6323      	str	r3, [r4, #48]	; 0x30
 80052ac:	bd10      	pop	{r4, pc}
 80052ae:	bf00      	nop
 80052b0:	0800551d 	.word	0x0800551d
 80052b4:	0800553f 	.word	0x0800553f
 80052b8:	08005577 	.word	0x08005577
 80052bc:	0800559b 	.word	0x0800559b

080052c0 <stdio_exit_handler>:
 80052c0:	4a02      	ldr	r2, [pc, #8]	; (80052cc <stdio_exit_handler+0xc>)
 80052c2:	4903      	ldr	r1, [pc, #12]	; (80052d0 <stdio_exit_handler+0x10>)
 80052c4:	4803      	ldr	r0, [pc, #12]	; (80052d4 <stdio_exit_handler+0x14>)
 80052c6:	f000 b869 	b.w	800539c <_fwalk_sglue>
 80052ca:	bf00      	nop
 80052cc:	200000d0 	.word	0x200000d0
 80052d0:	08006419 	.word	0x08006419
 80052d4:	200000dc 	.word	0x200000dc

080052d8 <cleanup_stdio>:
 80052d8:	6841      	ldr	r1, [r0, #4]
 80052da:	4b0c      	ldr	r3, [pc, #48]	; (800530c <cleanup_stdio+0x34>)
 80052dc:	4299      	cmp	r1, r3
 80052de:	b510      	push	{r4, lr}
 80052e0:	4604      	mov	r4, r0
 80052e2:	d001      	beq.n	80052e8 <cleanup_stdio+0x10>
 80052e4:	f001 f898 	bl	8006418 <_fflush_r>
 80052e8:	68a1      	ldr	r1, [r4, #8]
 80052ea:	4b09      	ldr	r3, [pc, #36]	; (8005310 <cleanup_stdio+0x38>)
 80052ec:	4299      	cmp	r1, r3
 80052ee:	d002      	beq.n	80052f6 <cleanup_stdio+0x1e>
 80052f0:	4620      	mov	r0, r4
 80052f2:	f001 f891 	bl	8006418 <_fflush_r>
 80052f6:	68e1      	ldr	r1, [r4, #12]
 80052f8:	4b06      	ldr	r3, [pc, #24]	; (8005314 <cleanup_stdio+0x3c>)
 80052fa:	4299      	cmp	r1, r3
 80052fc:	d004      	beq.n	8005308 <cleanup_stdio+0x30>
 80052fe:	4620      	mov	r0, r4
 8005300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005304:	f001 b888 	b.w	8006418 <_fflush_r>
 8005308:	bd10      	pop	{r4, pc}
 800530a:	bf00      	nop
 800530c:	20000330 	.word	0x20000330
 8005310:	20000398 	.word	0x20000398
 8005314:	20000400 	.word	0x20000400

08005318 <global_stdio_init.part.0>:
 8005318:	b510      	push	{r4, lr}
 800531a:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <global_stdio_init.part.0+0x30>)
 800531c:	4c0b      	ldr	r4, [pc, #44]	; (800534c <global_stdio_init.part.0+0x34>)
 800531e:	4a0c      	ldr	r2, [pc, #48]	; (8005350 <global_stdio_init.part.0+0x38>)
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	4620      	mov	r0, r4
 8005324:	2200      	movs	r2, #0
 8005326:	2104      	movs	r1, #4
 8005328:	f7ff ffa6 	bl	8005278 <std>
 800532c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005330:	2201      	movs	r2, #1
 8005332:	2109      	movs	r1, #9
 8005334:	f7ff ffa0 	bl	8005278 <std>
 8005338:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800533c:	2202      	movs	r2, #2
 800533e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005342:	2112      	movs	r1, #18
 8005344:	f7ff bf98 	b.w	8005278 <std>
 8005348:	20000468 	.word	0x20000468
 800534c:	20000330 	.word	0x20000330
 8005350:	080052c1 	.word	0x080052c1

08005354 <__sfp_lock_acquire>:
 8005354:	4801      	ldr	r0, [pc, #4]	; (800535c <__sfp_lock_acquire+0x8>)
 8005356:	f000 ba8d 	b.w	8005874 <__retarget_lock_acquire_recursive>
 800535a:	bf00      	nop
 800535c:	20000471 	.word	0x20000471

08005360 <__sfp_lock_release>:
 8005360:	4801      	ldr	r0, [pc, #4]	; (8005368 <__sfp_lock_release+0x8>)
 8005362:	f000 ba88 	b.w	8005876 <__retarget_lock_release_recursive>
 8005366:	bf00      	nop
 8005368:	20000471 	.word	0x20000471

0800536c <__sinit>:
 800536c:	b510      	push	{r4, lr}
 800536e:	4604      	mov	r4, r0
 8005370:	f7ff fff0 	bl	8005354 <__sfp_lock_acquire>
 8005374:	6a23      	ldr	r3, [r4, #32]
 8005376:	b11b      	cbz	r3, 8005380 <__sinit+0x14>
 8005378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800537c:	f7ff bff0 	b.w	8005360 <__sfp_lock_release>
 8005380:	4b04      	ldr	r3, [pc, #16]	; (8005394 <__sinit+0x28>)
 8005382:	6223      	str	r3, [r4, #32]
 8005384:	4b04      	ldr	r3, [pc, #16]	; (8005398 <__sinit+0x2c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1f5      	bne.n	8005378 <__sinit+0xc>
 800538c:	f7ff ffc4 	bl	8005318 <global_stdio_init.part.0>
 8005390:	e7f2      	b.n	8005378 <__sinit+0xc>
 8005392:	bf00      	nop
 8005394:	080052d9 	.word	0x080052d9
 8005398:	20000468 	.word	0x20000468

0800539c <_fwalk_sglue>:
 800539c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a0:	4607      	mov	r7, r0
 80053a2:	4688      	mov	r8, r1
 80053a4:	4614      	mov	r4, r2
 80053a6:	2600      	movs	r6, #0
 80053a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053ac:	f1b9 0901 	subs.w	r9, r9, #1
 80053b0:	d505      	bpl.n	80053be <_fwalk_sglue+0x22>
 80053b2:	6824      	ldr	r4, [r4, #0]
 80053b4:	2c00      	cmp	r4, #0
 80053b6:	d1f7      	bne.n	80053a8 <_fwalk_sglue+0xc>
 80053b8:	4630      	mov	r0, r6
 80053ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053be:	89ab      	ldrh	r3, [r5, #12]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d907      	bls.n	80053d4 <_fwalk_sglue+0x38>
 80053c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053c8:	3301      	adds	r3, #1
 80053ca:	d003      	beq.n	80053d4 <_fwalk_sglue+0x38>
 80053cc:	4629      	mov	r1, r5
 80053ce:	4638      	mov	r0, r7
 80053d0:	47c0      	blx	r8
 80053d2:	4306      	orrs	r6, r0
 80053d4:	3568      	adds	r5, #104	; 0x68
 80053d6:	e7e9      	b.n	80053ac <_fwalk_sglue+0x10>

080053d8 <iprintf>:
 80053d8:	b40f      	push	{r0, r1, r2, r3}
 80053da:	b507      	push	{r0, r1, r2, lr}
 80053dc:	4906      	ldr	r1, [pc, #24]	; (80053f8 <iprintf+0x20>)
 80053de:	ab04      	add	r3, sp, #16
 80053e0:	6808      	ldr	r0, [r1, #0]
 80053e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80053e6:	6881      	ldr	r1, [r0, #8]
 80053e8:	9301      	str	r3, [sp, #4]
 80053ea:	f000 fce5 	bl	8005db8 <_vfiprintf_r>
 80053ee:	b003      	add	sp, #12
 80053f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80053f4:	b004      	add	sp, #16
 80053f6:	4770      	bx	lr
 80053f8:	20000128 	.word	0x20000128

080053fc <_puts_r>:
 80053fc:	6a03      	ldr	r3, [r0, #32]
 80053fe:	b570      	push	{r4, r5, r6, lr}
 8005400:	6884      	ldr	r4, [r0, #8]
 8005402:	4605      	mov	r5, r0
 8005404:	460e      	mov	r6, r1
 8005406:	b90b      	cbnz	r3, 800540c <_puts_r+0x10>
 8005408:	f7ff ffb0 	bl	800536c <__sinit>
 800540c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800540e:	07db      	lsls	r3, r3, #31
 8005410:	d405      	bmi.n	800541e <_puts_r+0x22>
 8005412:	89a3      	ldrh	r3, [r4, #12]
 8005414:	0598      	lsls	r0, r3, #22
 8005416:	d402      	bmi.n	800541e <_puts_r+0x22>
 8005418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800541a:	f000 fa2b 	bl	8005874 <__retarget_lock_acquire_recursive>
 800541e:	89a3      	ldrh	r3, [r4, #12]
 8005420:	0719      	lsls	r1, r3, #28
 8005422:	d513      	bpl.n	800544c <_puts_r+0x50>
 8005424:	6923      	ldr	r3, [r4, #16]
 8005426:	b18b      	cbz	r3, 800544c <_puts_r+0x50>
 8005428:	3e01      	subs	r6, #1
 800542a:	68a3      	ldr	r3, [r4, #8]
 800542c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005430:	3b01      	subs	r3, #1
 8005432:	60a3      	str	r3, [r4, #8]
 8005434:	b9e9      	cbnz	r1, 8005472 <_puts_r+0x76>
 8005436:	2b00      	cmp	r3, #0
 8005438:	da2e      	bge.n	8005498 <_puts_r+0x9c>
 800543a:	4622      	mov	r2, r4
 800543c:	210a      	movs	r1, #10
 800543e:	4628      	mov	r0, r5
 8005440:	f000 f8af 	bl	80055a2 <__swbuf_r>
 8005444:	3001      	adds	r0, #1
 8005446:	d007      	beq.n	8005458 <_puts_r+0x5c>
 8005448:	250a      	movs	r5, #10
 800544a:	e007      	b.n	800545c <_puts_r+0x60>
 800544c:	4621      	mov	r1, r4
 800544e:	4628      	mov	r0, r5
 8005450:	f000 f8e4 	bl	800561c <__swsetup_r>
 8005454:	2800      	cmp	r0, #0
 8005456:	d0e7      	beq.n	8005428 <_puts_r+0x2c>
 8005458:	f04f 35ff 	mov.w	r5, #4294967295
 800545c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800545e:	07da      	lsls	r2, r3, #31
 8005460:	d405      	bmi.n	800546e <_puts_r+0x72>
 8005462:	89a3      	ldrh	r3, [r4, #12]
 8005464:	059b      	lsls	r3, r3, #22
 8005466:	d402      	bmi.n	800546e <_puts_r+0x72>
 8005468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800546a:	f000 fa04 	bl	8005876 <__retarget_lock_release_recursive>
 800546e:	4628      	mov	r0, r5
 8005470:	bd70      	pop	{r4, r5, r6, pc}
 8005472:	2b00      	cmp	r3, #0
 8005474:	da04      	bge.n	8005480 <_puts_r+0x84>
 8005476:	69a2      	ldr	r2, [r4, #24]
 8005478:	429a      	cmp	r2, r3
 800547a:	dc06      	bgt.n	800548a <_puts_r+0x8e>
 800547c:	290a      	cmp	r1, #10
 800547e:	d004      	beq.n	800548a <_puts_r+0x8e>
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	6022      	str	r2, [r4, #0]
 8005486:	7019      	strb	r1, [r3, #0]
 8005488:	e7cf      	b.n	800542a <_puts_r+0x2e>
 800548a:	4622      	mov	r2, r4
 800548c:	4628      	mov	r0, r5
 800548e:	f000 f888 	bl	80055a2 <__swbuf_r>
 8005492:	3001      	adds	r0, #1
 8005494:	d1c9      	bne.n	800542a <_puts_r+0x2e>
 8005496:	e7df      	b.n	8005458 <_puts_r+0x5c>
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	250a      	movs	r5, #10
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	6022      	str	r2, [r4, #0]
 80054a0:	701d      	strb	r5, [r3, #0]
 80054a2:	e7db      	b.n	800545c <_puts_r+0x60>

080054a4 <puts>:
 80054a4:	4b02      	ldr	r3, [pc, #8]	; (80054b0 <puts+0xc>)
 80054a6:	4601      	mov	r1, r0
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	f7ff bfa7 	b.w	80053fc <_puts_r>
 80054ae:	bf00      	nop
 80054b0:	20000128 	.word	0x20000128

080054b4 <sniprintf>:
 80054b4:	b40c      	push	{r2, r3}
 80054b6:	b530      	push	{r4, r5, lr}
 80054b8:	4b17      	ldr	r3, [pc, #92]	; (8005518 <sniprintf+0x64>)
 80054ba:	1e0c      	subs	r4, r1, #0
 80054bc:	681d      	ldr	r5, [r3, #0]
 80054be:	b09d      	sub	sp, #116	; 0x74
 80054c0:	da08      	bge.n	80054d4 <sniprintf+0x20>
 80054c2:	238b      	movs	r3, #139	; 0x8b
 80054c4:	602b      	str	r3, [r5, #0]
 80054c6:	f04f 30ff 	mov.w	r0, #4294967295
 80054ca:	b01d      	add	sp, #116	; 0x74
 80054cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054d0:	b002      	add	sp, #8
 80054d2:	4770      	bx	lr
 80054d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80054d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80054dc:	bf14      	ite	ne
 80054de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80054e2:	4623      	moveq	r3, r4
 80054e4:	9304      	str	r3, [sp, #16]
 80054e6:	9307      	str	r3, [sp, #28]
 80054e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054ec:	9002      	str	r0, [sp, #8]
 80054ee:	9006      	str	r0, [sp, #24]
 80054f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80054f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80054f6:	ab21      	add	r3, sp, #132	; 0x84
 80054f8:	a902      	add	r1, sp, #8
 80054fa:	4628      	mov	r0, r5
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	f000 fb33 	bl	8005b68 <_svfiprintf_r>
 8005502:	1c43      	adds	r3, r0, #1
 8005504:	bfbc      	itt	lt
 8005506:	238b      	movlt	r3, #139	; 0x8b
 8005508:	602b      	strlt	r3, [r5, #0]
 800550a:	2c00      	cmp	r4, #0
 800550c:	d0dd      	beq.n	80054ca <sniprintf+0x16>
 800550e:	9b02      	ldr	r3, [sp, #8]
 8005510:	2200      	movs	r2, #0
 8005512:	701a      	strb	r2, [r3, #0]
 8005514:	e7d9      	b.n	80054ca <sniprintf+0x16>
 8005516:	bf00      	nop
 8005518:	20000128 	.word	0x20000128

0800551c <__sread>:
 800551c:	b510      	push	{r4, lr}
 800551e:	460c      	mov	r4, r1
 8005520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005524:	f000 f958 	bl	80057d8 <_read_r>
 8005528:	2800      	cmp	r0, #0
 800552a:	bfab      	itete	ge
 800552c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800552e:	89a3      	ldrhlt	r3, [r4, #12]
 8005530:	181b      	addge	r3, r3, r0
 8005532:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005536:	bfac      	ite	ge
 8005538:	6563      	strge	r3, [r4, #84]	; 0x54
 800553a:	81a3      	strhlt	r3, [r4, #12]
 800553c:	bd10      	pop	{r4, pc}

0800553e <__swrite>:
 800553e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005542:	461f      	mov	r7, r3
 8005544:	898b      	ldrh	r3, [r1, #12]
 8005546:	05db      	lsls	r3, r3, #23
 8005548:	4605      	mov	r5, r0
 800554a:	460c      	mov	r4, r1
 800554c:	4616      	mov	r6, r2
 800554e:	d505      	bpl.n	800555c <__swrite+0x1e>
 8005550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005554:	2302      	movs	r3, #2
 8005556:	2200      	movs	r2, #0
 8005558:	f000 f92c 	bl	80057b4 <_lseek_r>
 800555c:	89a3      	ldrh	r3, [r4, #12]
 800555e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005566:	81a3      	strh	r3, [r4, #12]
 8005568:	4632      	mov	r2, r6
 800556a:	463b      	mov	r3, r7
 800556c:	4628      	mov	r0, r5
 800556e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005572:	f000 b943 	b.w	80057fc <_write_r>

08005576 <__sseek>:
 8005576:	b510      	push	{r4, lr}
 8005578:	460c      	mov	r4, r1
 800557a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800557e:	f000 f919 	bl	80057b4 <_lseek_r>
 8005582:	1c43      	adds	r3, r0, #1
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	bf15      	itete	ne
 8005588:	6560      	strne	r0, [r4, #84]	; 0x54
 800558a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800558e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005592:	81a3      	strheq	r3, [r4, #12]
 8005594:	bf18      	it	ne
 8005596:	81a3      	strhne	r3, [r4, #12]
 8005598:	bd10      	pop	{r4, pc}

0800559a <__sclose>:
 800559a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800559e:	f000 b8f9 	b.w	8005794 <_close_r>

080055a2 <__swbuf_r>:
 80055a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a4:	460e      	mov	r6, r1
 80055a6:	4614      	mov	r4, r2
 80055a8:	4605      	mov	r5, r0
 80055aa:	b118      	cbz	r0, 80055b4 <__swbuf_r+0x12>
 80055ac:	6a03      	ldr	r3, [r0, #32]
 80055ae:	b90b      	cbnz	r3, 80055b4 <__swbuf_r+0x12>
 80055b0:	f7ff fedc 	bl	800536c <__sinit>
 80055b4:	69a3      	ldr	r3, [r4, #24]
 80055b6:	60a3      	str	r3, [r4, #8]
 80055b8:	89a3      	ldrh	r3, [r4, #12]
 80055ba:	071a      	lsls	r2, r3, #28
 80055bc:	d525      	bpl.n	800560a <__swbuf_r+0x68>
 80055be:	6923      	ldr	r3, [r4, #16]
 80055c0:	b31b      	cbz	r3, 800560a <__swbuf_r+0x68>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	6922      	ldr	r2, [r4, #16]
 80055c6:	1a98      	subs	r0, r3, r2
 80055c8:	6963      	ldr	r3, [r4, #20]
 80055ca:	b2f6      	uxtb	r6, r6
 80055cc:	4283      	cmp	r3, r0
 80055ce:	4637      	mov	r7, r6
 80055d0:	dc04      	bgt.n	80055dc <__swbuf_r+0x3a>
 80055d2:	4621      	mov	r1, r4
 80055d4:	4628      	mov	r0, r5
 80055d6:	f000 ff1f 	bl	8006418 <_fflush_r>
 80055da:	b9e0      	cbnz	r0, 8005616 <__swbuf_r+0x74>
 80055dc:	68a3      	ldr	r3, [r4, #8]
 80055de:	3b01      	subs	r3, #1
 80055e0:	60a3      	str	r3, [r4, #8]
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	6022      	str	r2, [r4, #0]
 80055e8:	701e      	strb	r6, [r3, #0]
 80055ea:	6962      	ldr	r2, [r4, #20]
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d004      	beq.n	80055fc <__swbuf_r+0x5a>
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	07db      	lsls	r3, r3, #31
 80055f6:	d506      	bpl.n	8005606 <__swbuf_r+0x64>
 80055f8:	2e0a      	cmp	r6, #10
 80055fa:	d104      	bne.n	8005606 <__swbuf_r+0x64>
 80055fc:	4621      	mov	r1, r4
 80055fe:	4628      	mov	r0, r5
 8005600:	f000 ff0a 	bl	8006418 <_fflush_r>
 8005604:	b938      	cbnz	r0, 8005616 <__swbuf_r+0x74>
 8005606:	4638      	mov	r0, r7
 8005608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800560a:	4621      	mov	r1, r4
 800560c:	4628      	mov	r0, r5
 800560e:	f000 f805 	bl	800561c <__swsetup_r>
 8005612:	2800      	cmp	r0, #0
 8005614:	d0d5      	beq.n	80055c2 <__swbuf_r+0x20>
 8005616:	f04f 37ff 	mov.w	r7, #4294967295
 800561a:	e7f4      	b.n	8005606 <__swbuf_r+0x64>

0800561c <__swsetup_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	4b2a      	ldr	r3, [pc, #168]	; (80056c8 <__swsetup_r+0xac>)
 8005620:	4605      	mov	r5, r0
 8005622:	6818      	ldr	r0, [r3, #0]
 8005624:	460c      	mov	r4, r1
 8005626:	b118      	cbz	r0, 8005630 <__swsetup_r+0x14>
 8005628:	6a03      	ldr	r3, [r0, #32]
 800562a:	b90b      	cbnz	r3, 8005630 <__swsetup_r+0x14>
 800562c:	f7ff fe9e 	bl	800536c <__sinit>
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005636:	0718      	lsls	r0, r3, #28
 8005638:	d422      	bmi.n	8005680 <__swsetup_r+0x64>
 800563a:	06d9      	lsls	r1, r3, #27
 800563c:	d407      	bmi.n	800564e <__swsetup_r+0x32>
 800563e:	2309      	movs	r3, #9
 8005640:	602b      	str	r3, [r5, #0]
 8005642:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005646:	81a3      	strh	r3, [r4, #12]
 8005648:	f04f 30ff 	mov.w	r0, #4294967295
 800564c:	e034      	b.n	80056b8 <__swsetup_r+0x9c>
 800564e:	0758      	lsls	r0, r3, #29
 8005650:	d512      	bpl.n	8005678 <__swsetup_r+0x5c>
 8005652:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005654:	b141      	cbz	r1, 8005668 <__swsetup_r+0x4c>
 8005656:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800565a:	4299      	cmp	r1, r3
 800565c:	d002      	beq.n	8005664 <__swsetup_r+0x48>
 800565e:	4628      	mov	r0, r5
 8005660:	f000 f928 	bl	80058b4 <_free_r>
 8005664:	2300      	movs	r3, #0
 8005666:	6363      	str	r3, [r4, #52]	; 0x34
 8005668:	89a3      	ldrh	r3, [r4, #12]
 800566a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800566e:	81a3      	strh	r3, [r4, #12]
 8005670:	2300      	movs	r3, #0
 8005672:	6063      	str	r3, [r4, #4]
 8005674:	6923      	ldr	r3, [r4, #16]
 8005676:	6023      	str	r3, [r4, #0]
 8005678:	89a3      	ldrh	r3, [r4, #12]
 800567a:	f043 0308 	orr.w	r3, r3, #8
 800567e:	81a3      	strh	r3, [r4, #12]
 8005680:	6923      	ldr	r3, [r4, #16]
 8005682:	b94b      	cbnz	r3, 8005698 <__swsetup_r+0x7c>
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800568a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800568e:	d003      	beq.n	8005698 <__swsetup_r+0x7c>
 8005690:	4621      	mov	r1, r4
 8005692:	4628      	mov	r0, r5
 8005694:	f000 ff20 	bl	80064d8 <__smakebuf_r>
 8005698:	89a0      	ldrh	r0, [r4, #12]
 800569a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800569e:	f010 0301 	ands.w	r3, r0, #1
 80056a2:	d00a      	beq.n	80056ba <__swsetup_r+0x9e>
 80056a4:	2300      	movs	r3, #0
 80056a6:	60a3      	str	r3, [r4, #8]
 80056a8:	6963      	ldr	r3, [r4, #20]
 80056aa:	425b      	negs	r3, r3
 80056ac:	61a3      	str	r3, [r4, #24]
 80056ae:	6923      	ldr	r3, [r4, #16]
 80056b0:	b943      	cbnz	r3, 80056c4 <__swsetup_r+0xa8>
 80056b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056b6:	d1c4      	bne.n	8005642 <__swsetup_r+0x26>
 80056b8:	bd38      	pop	{r3, r4, r5, pc}
 80056ba:	0781      	lsls	r1, r0, #30
 80056bc:	bf58      	it	pl
 80056be:	6963      	ldrpl	r3, [r4, #20]
 80056c0:	60a3      	str	r3, [r4, #8]
 80056c2:	e7f4      	b.n	80056ae <__swsetup_r+0x92>
 80056c4:	2000      	movs	r0, #0
 80056c6:	e7f7      	b.n	80056b8 <__swsetup_r+0x9c>
 80056c8:	20000128 	.word	0x20000128

080056cc <memset>:
 80056cc:	4402      	add	r2, r0
 80056ce:	4603      	mov	r3, r0
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d100      	bne.n	80056d6 <memset+0xa>
 80056d4:	4770      	bx	lr
 80056d6:	f803 1b01 	strb.w	r1, [r3], #1
 80056da:	e7f9      	b.n	80056d0 <memset+0x4>

080056dc <strtok>:
 80056dc:	4b16      	ldr	r3, [pc, #88]	; (8005738 <strtok+0x5c>)
 80056de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056e0:	681e      	ldr	r6, [r3, #0]
 80056e2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80056e4:	4605      	mov	r5, r0
 80056e6:	b9fc      	cbnz	r4, 8005728 <strtok+0x4c>
 80056e8:	2050      	movs	r0, #80	; 0x50
 80056ea:	9101      	str	r1, [sp, #4]
 80056ec:	f000 f92e 	bl	800594c <malloc>
 80056f0:	9901      	ldr	r1, [sp, #4]
 80056f2:	6470      	str	r0, [r6, #68]	; 0x44
 80056f4:	4602      	mov	r2, r0
 80056f6:	b920      	cbnz	r0, 8005702 <strtok+0x26>
 80056f8:	4b10      	ldr	r3, [pc, #64]	; (800573c <strtok+0x60>)
 80056fa:	4811      	ldr	r0, [pc, #68]	; (8005740 <strtok+0x64>)
 80056fc:	215b      	movs	r1, #91	; 0x5b
 80056fe:	f000 f8bb 	bl	8005878 <__assert_func>
 8005702:	e9c0 4400 	strd	r4, r4, [r0]
 8005706:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800570a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800570e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005712:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005716:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800571a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800571e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005722:	6184      	str	r4, [r0, #24]
 8005724:	7704      	strb	r4, [r0, #28]
 8005726:	6244      	str	r4, [r0, #36]	; 0x24
 8005728:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800572a:	2301      	movs	r3, #1
 800572c:	4628      	mov	r0, r5
 800572e:	b002      	add	sp, #8
 8005730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005734:	f000 b806 	b.w	8005744 <__strtok_r>
 8005738:	20000128 	.word	0x20000128
 800573c:	080069c1 	.word	0x080069c1
 8005740:	080069d8 	.word	0x080069d8

08005744 <__strtok_r>:
 8005744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005746:	b908      	cbnz	r0, 800574c <__strtok_r+0x8>
 8005748:	6810      	ldr	r0, [r2, #0]
 800574a:	b188      	cbz	r0, 8005770 <__strtok_r+0x2c>
 800574c:	4604      	mov	r4, r0
 800574e:	4620      	mov	r0, r4
 8005750:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005754:	460f      	mov	r7, r1
 8005756:	f817 6b01 	ldrb.w	r6, [r7], #1
 800575a:	b91e      	cbnz	r6, 8005764 <__strtok_r+0x20>
 800575c:	b965      	cbnz	r5, 8005778 <__strtok_r+0x34>
 800575e:	6015      	str	r5, [r2, #0]
 8005760:	4628      	mov	r0, r5
 8005762:	e005      	b.n	8005770 <__strtok_r+0x2c>
 8005764:	42b5      	cmp	r5, r6
 8005766:	d1f6      	bne.n	8005756 <__strtok_r+0x12>
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1f0      	bne.n	800574e <__strtok_r+0xa>
 800576c:	6014      	str	r4, [r2, #0]
 800576e:	7003      	strb	r3, [r0, #0]
 8005770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005772:	461c      	mov	r4, r3
 8005774:	e00c      	b.n	8005790 <__strtok_r+0x4c>
 8005776:	b915      	cbnz	r5, 800577e <__strtok_r+0x3a>
 8005778:	f814 3b01 	ldrb.w	r3, [r4], #1
 800577c:	460e      	mov	r6, r1
 800577e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005782:	42ab      	cmp	r3, r5
 8005784:	d1f7      	bne.n	8005776 <__strtok_r+0x32>
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0f3      	beq.n	8005772 <__strtok_r+0x2e>
 800578a:	2300      	movs	r3, #0
 800578c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005790:	6014      	str	r4, [r2, #0]
 8005792:	e7ed      	b.n	8005770 <__strtok_r+0x2c>

08005794 <_close_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	4d06      	ldr	r5, [pc, #24]	; (80057b0 <_close_r+0x1c>)
 8005798:	2300      	movs	r3, #0
 800579a:	4604      	mov	r4, r0
 800579c:	4608      	mov	r0, r1
 800579e:	602b      	str	r3, [r5, #0]
 80057a0:	f7fb f9e5 	bl	8000b6e <_close>
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	d102      	bne.n	80057ae <_close_r+0x1a>
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	b103      	cbz	r3, 80057ae <_close_r+0x1a>
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	bd38      	pop	{r3, r4, r5, pc}
 80057b0:	2000046c 	.word	0x2000046c

080057b4 <_lseek_r>:
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	4d07      	ldr	r5, [pc, #28]	; (80057d4 <_lseek_r+0x20>)
 80057b8:	4604      	mov	r4, r0
 80057ba:	4608      	mov	r0, r1
 80057bc:	4611      	mov	r1, r2
 80057be:	2200      	movs	r2, #0
 80057c0:	602a      	str	r2, [r5, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	f7fb f9fa 	bl	8000bbc <_lseek>
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	d102      	bne.n	80057d2 <_lseek_r+0x1e>
 80057cc:	682b      	ldr	r3, [r5, #0]
 80057ce:	b103      	cbz	r3, 80057d2 <_lseek_r+0x1e>
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	bd38      	pop	{r3, r4, r5, pc}
 80057d4:	2000046c 	.word	0x2000046c

080057d8 <_read_r>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	4d07      	ldr	r5, [pc, #28]	; (80057f8 <_read_r+0x20>)
 80057dc:	4604      	mov	r4, r0
 80057de:	4608      	mov	r0, r1
 80057e0:	4611      	mov	r1, r2
 80057e2:	2200      	movs	r2, #0
 80057e4:	602a      	str	r2, [r5, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	f7fb f9a4 	bl	8000b34 <_read>
 80057ec:	1c43      	adds	r3, r0, #1
 80057ee:	d102      	bne.n	80057f6 <_read_r+0x1e>
 80057f0:	682b      	ldr	r3, [r5, #0]
 80057f2:	b103      	cbz	r3, 80057f6 <_read_r+0x1e>
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	bd38      	pop	{r3, r4, r5, pc}
 80057f8:	2000046c 	.word	0x2000046c

080057fc <_write_r>:
 80057fc:	b538      	push	{r3, r4, r5, lr}
 80057fe:	4d07      	ldr	r5, [pc, #28]	; (800581c <_write_r+0x20>)
 8005800:	4604      	mov	r4, r0
 8005802:	4608      	mov	r0, r1
 8005804:	4611      	mov	r1, r2
 8005806:	2200      	movs	r2, #0
 8005808:	602a      	str	r2, [r5, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	f7fb f81a 	bl	8000844 <_write>
 8005810:	1c43      	adds	r3, r0, #1
 8005812:	d102      	bne.n	800581a <_write_r+0x1e>
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	b103      	cbz	r3, 800581a <_write_r+0x1e>
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	2000046c 	.word	0x2000046c

08005820 <__errno>:
 8005820:	4b01      	ldr	r3, [pc, #4]	; (8005828 <__errno+0x8>)
 8005822:	6818      	ldr	r0, [r3, #0]
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	20000128 	.word	0x20000128

0800582c <__libc_init_array>:
 800582c:	b570      	push	{r4, r5, r6, lr}
 800582e:	4d0d      	ldr	r5, [pc, #52]	; (8005864 <__libc_init_array+0x38>)
 8005830:	4c0d      	ldr	r4, [pc, #52]	; (8005868 <__libc_init_array+0x3c>)
 8005832:	1b64      	subs	r4, r4, r5
 8005834:	10a4      	asrs	r4, r4, #2
 8005836:	2600      	movs	r6, #0
 8005838:	42a6      	cmp	r6, r4
 800583a:	d109      	bne.n	8005850 <__libc_init_array+0x24>
 800583c:	4d0b      	ldr	r5, [pc, #44]	; (800586c <__libc_init_array+0x40>)
 800583e:	4c0c      	ldr	r4, [pc, #48]	; (8005870 <__libc_init_array+0x44>)
 8005840:	f000 ff62 	bl	8006708 <_init>
 8005844:	1b64      	subs	r4, r4, r5
 8005846:	10a4      	asrs	r4, r4, #2
 8005848:	2600      	movs	r6, #0
 800584a:	42a6      	cmp	r6, r4
 800584c:	d105      	bne.n	800585a <__libc_init_array+0x2e>
 800584e:	bd70      	pop	{r4, r5, r6, pc}
 8005850:	f855 3b04 	ldr.w	r3, [r5], #4
 8005854:	4798      	blx	r3
 8005856:	3601      	adds	r6, #1
 8005858:	e7ee      	b.n	8005838 <__libc_init_array+0xc>
 800585a:	f855 3b04 	ldr.w	r3, [r5], #4
 800585e:	4798      	blx	r3
 8005860:	3601      	adds	r6, #1
 8005862:	e7f2      	b.n	800584a <__libc_init_array+0x1e>
 8005864:	08006aac 	.word	0x08006aac
 8005868:	08006aac 	.word	0x08006aac
 800586c:	08006aac 	.word	0x08006aac
 8005870:	08006ab0 	.word	0x08006ab0

08005874 <__retarget_lock_acquire_recursive>:
 8005874:	4770      	bx	lr

08005876 <__retarget_lock_release_recursive>:
 8005876:	4770      	bx	lr

08005878 <__assert_func>:
 8005878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800587a:	4614      	mov	r4, r2
 800587c:	461a      	mov	r2, r3
 800587e:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <__assert_func+0x2c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4605      	mov	r5, r0
 8005884:	68d8      	ldr	r0, [r3, #12]
 8005886:	b14c      	cbz	r4, 800589c <__assert_func+0x24>
 8005888:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <__assert_func+0x30>)
 800588a:	9100      	str	r1, [sp, #0]
 800588c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005890:	4906      	ldr	r1, [pc, #24]	; (80058ac <__assert_func+0x34>)
 8005892:	462b      	mov	r3, r5
 8005894:	f000 fde8 	bl	8006468 <fiprintf>
 8005898:	f000 feb4 	bl	8006604 <abort>
 800589c:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <__assert_func+0x38>)
 800589e:	461c      	mov	r4, r3
 80058a0:	e7f3      	b.n	800588a <__assert_func+0x12>
 80058a2:	bf00      	nop
 80058a4:	20000128 	.word	0x20000128
 80058a8:	08006a32 	.word	0x08006a32
 80058ac:	08006a3f 	.word	0x08006a3f
 80058b0:	08006a6d 	.word	0x08006a6d

080058b4 <_free_r>:
 80058b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058b6:	2900      	cmp	r1, #0
 80058b8:	d044      	beq.n	8005944 <_free_r+0x90>
 80058ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058be:	9001      	str	r0, [sp, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f1a1 0404 	sub.w	r4, r1, #4
 80058c6:	bfb8      	it	lt
 80058c8:	18e4      	addlt	r4, r4, r3
 80058ca:	f000 f8e7 	bl	8005a9c <__malloc_lock>
 80058ce:	4a1e      	ldr	r2, [pc, #120]	; (8005948 <_free_r+0x94>)
 80058d0:	9801      	ldr	r0, [sp, #4]
 80058d2:	6813      	ldr	r3, [r2, #0]
 80058d4:	b933      	cbnz	r3, 80058e4 <_free_r+0x30>
 80058d6:	6063      	str	r3, [r4, #4]
 80058d8:	6014      	str	r4, [r2, #0]
 80058da:	b003      	add	sp, #12
 80058dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058e0:	f000 b8e2 	b.w	8005aa8 <__malloc_unlock>
 80058e4:	42a3      	cmp	r3, r4
 80058e6:	d908      	bls.n	80058fa <_free_r+0x46>
 80058e8:	6825      	ldr	r5, [r4, #0]
 80058ea:	1961      	adds	r1, r4, r5
 80058ec:	428b      	cmp	r3, r1
 80058ee:	bf01      	itttt	eq
 80058f0:	6819      	ldreq	r1, [r3, #0]
 80058f2:	685b      	ldreq	r3, [r3, #4]
 80058f4:	1949      	addeq	r1, r1, r5
 80058f6:	6021      	streq	r1, [r4, #0]
 80058f8:	e7ed      	b.n	80058d6 <_free_r+0x22>
 80058fa:	461a      	mov	r2, r3
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	b10b      	cbz	r3, 8005904 <_free_r+0x50>
 8005900:	42a3      	cmp	r3, r4
 8005902:	d9fa      	bls.n	80058fa <_free_r+0x46>
 8005904:	6811      	ldr	r1, [r2, #0]
 8005906:	1855      	adds	r5, r2, r1
 8005908:	42a5      	cmp	r5, r4
 800590a:	d10b      	bne.n	8005924 <_free_r+0x70>
 800590c:	6824      	ldr	r4, [r4, #0]
 800590e:	4421      	add	r1, r4
 8005910:	1854      	adds	r4, r2, r1
 8005912:	42a3      	cmp	r3, r4
 8005914:	6011      	str	r1, [r2, #0]
 8005916:	d1e0      	bne.n	80058da <_free_r+0x26>
 8005918:	681c      	ldr	r4, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	6053      	str	r3, [r2, #4]
 800591e:	440c      	add	r4, r1
 8005920:	6014      	str	r4, [r2, #0]
 8005922:	e7da      	b.n	80058da <_free_r+0x26>
 8005924:	d902      	bls.n	800592c <_free_r+0x78>
 8005926:	230c      	movs	r3, #12
 8005928:	6003      	str	r3, [r0, #0]
 800592a:	e7d6      	b.n	80058da <_free_r+0x26>
 800592c:	6825      	ldr	r5, [r4, #0]
 800592e:	1961      	adds	r1, r4, r5
 8005930:	428b      	cmp	r3, r1
 8005932:	bf04      	itt	eq
 8005934:	6819      	ldreq	r1, [r3, #0]
 8005936:	685b      	ldreq	r3, [r3, #4]
 8005938:	6063      	str	r3, [r4, #4]
 800593a:	bf04      	itt	eq
 800593c:	1949      	addeq	r1, r1, r5
 800593e:	6021      	streq	r1, [r4, #0]
 8005940:	6054      	str	r4, [r2, #4]
 8005942:	e7ca      	b.n	80058da <_free_r+0x26>
 8005944:	b003      	add	sp, #12
 8005946:	bd30      	pop	{r4, r5, pc}
 8005948:	20000474 	.word	0x20000474

0800594c <malloc>:
 800594c:	4b02      	ldr	r3, [pc, #8]	; (8005958 <malloc+0xc>)
 800594e:	4601      	mov	r1, r0
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	f000 b823 	b.w	800599c <_malloc_r>
 8005956:	bf00      	nop
 8005958:	20000128 	.word	0x20000128

0800595c <sbrk_aligned>:
 800595c:	b570      	push	{r4, r5, r6, lr}
 800595e:	4e0e      	ldr	r6, [pc, #56]	; (8005998 <sbrk_aligned+0x3c>)
 8005960:	460c      	mov	r4, r1
 8005962:	6831      	ldr	r1, [r6, #0]
 8005964:	4605      	mov	r5, r0
 8005966:	b911      	cbnz	r1, 800596e <sbrk_aligned+0x12>
 8005968:	f000 fe2e 	bl	80065c8 <_sbrk_r>
 800596c:	6030      	str	r0, [r6, #0]
 800596e:	4621      	mov	r1, r4
 8005970:	4628      	mov	r0, r5
 8005972:	f000 fe29 	bl	80065c8 <_sbrk_r>
 8005976:	1c43      	adds	r3, r0, #1
 8005978:	d00a      	beq.n	8005990 <sbrk_aligned+0x34>
 800597a:	1cc4      	adds	r4, r0, #3
 800597c:	f024 0403 	bic.w	r4, r4, #3
 8005980:	42a0      	cmp	r0, r4
 8005982:	d007      	beq.n	8005994 <sbrk_aligned+0x38>
 8005984:	1a21      	subs	r1, r4, r0
 8005986:	4628      	mov	r0, r5
 8005988:	f000 fe1e 	bl	80065c8 <_sbrk_r>
 800598c:	3001      	adds	r0, #1
 800598e:	d101      	bne.n	8005994 <sbrk_aligned+0x38>
 8005990:	f04f 34ff 	mov.w	r4, #4294967295
 8005994:	4620      	mov	r0, r4
 8005996:	bd70      	pop	{r4, r5, r6, pc}
 8005998:	20000478 	.word	0x20000478

0800599c <_malloc_r>:
 800599c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059a0:	1ccd      	adds	r5, r1, #3
 80059a2:	f025 0503 	bic.w	r5, r5, #3
 80059a6:	3508      	adds	r5, #8
 80059a8:	2d0c      	cmp	r5, #12
 80059aa:	bf38      	it	cc
 80059ac:	250c      	movcc	r5, #12
 80059ae:	2d00      	cmp	r5, #0
 80059b0:	4607      	mov	r7, r0
 80059b2:	db01      	blt.n	80059b8 <_malloc_r+0x1c>
 80059b4:	42a9      	cmp	r1, r5
 80059b6:	d905      	bls.n	80059c4 <_malloc_r+0x28>
 80059b8:	230c      	movs	r3, #12
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	2600      	movs	r6, #0
 80059be:	4630      	mov	r0, r6
 80059c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005a98 <_malloc_r+0xfc>
 80059c8:	f000 f868 	bl	8005a9c <__malloc_lock>
 80059cc:	f8d8 3000 	ldr.w	r3, [r8]
 80059d0:	461c      	mov	r4, r3
 80059d2:	bb5c      	cbnz	r4, 8005a2c <_malloc_r+0x90>
 80059d4:	4629      	mov	r1, r5
 80059d6:	4638      	mov	r0, r7
 80059d8:	f7ff ffc0 	bl	800595c <sbrk_aligned>
 80059dc:	1c43      	adds	r3, r0, #1
 80059de:	4604      	mov	r4, r0
 80059e0:	d155      	bne.n	8005a8e <_malloc_r+0xf2>
 80059e2:	f8d8 4000 	ldr.w	r4, [r8]
 80059e6:	4626      	mov	r6, r4
 80059e8:	2e00      	cmp	r6, #0
 80059ea:	d145      	bne.n	8005a78 <_malloc_r+0xdc>
 80059ec:	2c00      	cmp	r4, #0
 80059ee:	d048      	beq.n	8005a82 <_malloc_r+0xe6>
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	4631      	mov	r1, r6
 80059f4:	4638      	mov	r0, r7
 80059f6:	eb04 0903 	add.w	r9, r4, r3
 80059fa:	f000 fde5 	bl	80065c8 <_sbrk_r>
 80059fe:	4581      	cmp	r9, r0
 8005a00:	d13f      	bne.n	8005a82 <_malloc_r+0xe6>
 8005a02:	6821      	ldr	r1, [r4, #0]
 8005a04:	1a6d      	subs	r5, r5, r1
 8005a06:	4629      	mov	r1, r5
 8005a08:	4638      	mov	r0, r7
 8005a0a:	f7ff ffa7 	bl	800595c <sbrk_aligned>
 8005a0e:	3001      	adds	r0, #1
 8005a10:	d037      	beq.n	8005a82 <_malloc_r+0xe6>
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	442b      	add	r3, r5
 8005a16:	6023      	str	r3, [r4, #0]
 8005a18:	f8d8 3000 	ldr.w	r3, [r8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d038      	beq.n	8005a92 <_malloc_r+0xf6>
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	42a2      	cmp	r2, r4
 8005a24:	d12b      	bne.n	8005a7e <_malloc_r+0xe2>
 8005a26:	2200      	movs	r2, #0
 8005a28:	605a      	str	r2, [r3, #4]
 8005a2a:	e00f      	b.n	8005a4c <_malloc_r+0xb0>
 8005a2c:	6822      	ldr	r2, [r4, #0]
 8005a2e:	1b52      	subs	r2, r2, r5
 8005a30:	d41f      	bmi.n	8005a72 <_malloc_r+0xd6>
 8005a32:	2a0b      	cmp	r2, #11
 8005a34:	d917      	bls.n	8005a66 <_malloc_r+0xca>
 8005a36:	1961      	adds	r1, r4, r5
 8005a38:	42a3      	cmp	r3, r4
 8005a3a:	6025      	str	r5, [r4, #0]
 8005a3c:	bf18      	it	ne
 8005a3e:	6059      	strne	r1, [r3, #4]
 8005a40:	6863      	ldr	r3, [r4, #4]
 8005a42:	bf08      	it	eq
 8005a44:	f8c8 1000 	streq.w	r1, [r8]
 8005a48:	5162      	str	r2, [r4, r5]
 8005a4a:	604b      	str	r3, [r1, #4]
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	f104 060b 	add.w	r6, r4, #11
 8005a52:	f000 f829 	bl	8005aa8 <__malloc_unlock>
 8005a56:	f026 0607 	bic.w	r6, r6, #7
 8005a5a:	1d23      	adds	r3, r4, #4
 8005a5c:	1af2      	subs	r2, r6, r3
 8005a5e:	d0ae      	beq.n	80059be <_malloc_r+0x22>
 8005a60:	1b9b      	subs	r3, r3, r6
 8005a62:	50a3      	str	r3, [r4, r2]
 8005a64:	e7ab      	b.n	80059be <_malloc_r+0x22>
 8005a66:	42a3      	cmp	r3, r4
 8005a68:	6862      	ldr	r2, [r4, #4]
 8005a6a:	d1dd      	bne.n	8005a28 <_malloc_r+0x8c>
 8005a6c:	f8c8 2000 	str.w	r2, [r8]
 8005a70:	e7ec      	b.n	8005a4c <_malloc_r+0xb0>
 8005a72:	4623      	mov	r3, r4
 8005a74:	6864      	ldr	r4, [r4, #4]
 8005a76:	e7ac      	b.n	80059d2 <_malloc_r+0x36>
 8005a78:	4634      	mov	r4, r6
 8005a7a:	6876      	ldr	r6, [r6, #4]
 8005a7c:	e7b4      	b.n	80059e8 <_malloc_r+0x4c>
 8005a7e:	4613      	mov	r3, r2
 8005a80:	e7cc      	b.n	8005a1c <_malloc_r+0x80>
 8005a82:	230c      	movs	r3, #12
 8005a84:	603b      	str	r3, [r7, #0]
 8005a86:	4638      	mov	r0, r7
 8005a88:	f000 f80e 	bl	8005aa8 <__malloc_unlock>
 8005a8c:	e797      	b.n	80059be <_malloc_r+0x22>
 8005a8e:	6025      	str	r5, [r4, #0]
 8005a90:	e7dc      	b.n	8005a4c <_malloc_r+0xb0>
 8005a92:	605b      	str	r3, [r3, #4]
 8005a94:	deff      	udf	#255	; 0xff
 8005a96:	bf00      	nop
 8005a98:	20000474 	.word	0x20000474

08005a9c <__malloc_lock>:
 8005a9c:	4801      	ldr	r0, [pc, #4]	; (8005aa4 <__malloc_lock+0x8>)
 8005a9e:	f7ff bee9 	b.w	8005874 <__retarget_lock_acquire_recursive>
 8005aa2:	bf00      	nop
 8005aa4:	20000470 	.word	0x20000470

08005aa8 <__malloc_unlock>:
 8005aa8:	4801      	ldr	r0, [pc, #4]	; (8005ab0 <__malloc_unlock+0x8>)
 8005aaa:	f7ff bee4 	b.w	8005876 <__retarget_lock_release_recursive>
 8005aae:	bf00      	nop
 8005ab0:	20000470 	.word	0x20000470

08005ab4 <__ssputs_r>:
 8005ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab8:	688e      	ldr	r6, [r1, #8]
 8005aba:	461f      	mov	r7, r3
 8005abc:	42be      	cmp	r6, r7
 8005abe:	680b      	ldr	r3, [r1, #0]
 8005ac0:	4682      	mov	sl, r0
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	4690      	mov	r8, r2
 8005ac6:	d82c      	bhi.n	8005b22 <__ssputs_r+0x6e>
 8005ac8:	898a      	ldrh	r2, [r1, #12]
 8005aca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ace:	d026      	beq.n	8005b1e <__ssputs_r+0x6a>
 8005ad0:	6965      	ldr	r5, [r4, #20]
 8005ad2:	6909      	ldr	r1, [r1, #16]
 8005ad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ad8:	eba3 0901 	sub.w	r9, r3, r1
 8005adc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ae0:	1c7b      	adds	r3, r7, #1
 8005ae2:	444b      	add	r3, r9
 8005ae4:	106d      	asrs	r5, r5, #1
 8005ae6:	429d      	cmp	r5, r3
 8005ae8:	bf38      	it	cc
 8005aea:	461d      	movcc	r5, r3
 8005aec:	0553      	lsls	r3, r2, #21
 8005aee:	d527      	bpl.n	8005b40 <__ssputs_r+0x8c>
 8005af0:	4629      	mov	r1, r5
 8005af2:	f7ff ff53 	bl	800599c <_malloc_r>
 8005af6:	4606      	mov	r6, r0
 8005af8:	b360      	cbz	r0, 8005b54 <__ssputs_r+0xa0>
 8005afa:	6921      	ldr	r1, [r4, #16]
 8005afc:	464a      	mov	r2, r9
 8005afe:	f000 fd73 	bl	80065e8 <memcpy>
 8005b02:	89a3      	ldrh	r3, [r4, #12]
 8005b04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0c:	81a3      	strh	r3, [r4, #12]
 8005b0e:	6126      	str	r6, [r4, #16]
 8005b10:	6165      	str	r5, [r4, #20]
 8005b12:	444e      	add	r6, r9
 8005b14:	eba5 0509 	sub.w	r5, r5, r9
 8005b18:	6026      	str	r6, [r4, #0]
 8005b1a:	60a5      	str	r5, [r4, #8]
 8005b1c:	463e      	mov	r6, r7
 8005b1e:	42be      	cmp	r6, r7
 8005b20:	d900      	bls.n	8005b24 <__ssputs_r+0x70>
 8005b22:	463e      	mov	r6, r7
 8005b24:	6820      	ldr	r0, [r4, #0]
 8005b26:	4632      	mov	r2, r6
 8005b28:	4641      	mov	r1, r8
 8005b2a:	f000 fd11 	bl	8006550 <memmove>
 8005b2e:	68a3      	ldr	r3, [r4, #8]
 8005b30:	1b9b      	subs	r3, r3, r6
 8005b32:	60a3      	str	r3, [r4, #8]
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	4433      	add	r3, r6
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b40:	462a      	mov	r2, r5
 8005b42:	f000 fd66 	bl	8006612 <_realloc_r>
 8005b46:	4606      	mov	r6, r0
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d1e0      	bne.n	8005b0e <__ssputs_r+0x5a>
 8005b4c:	6921      	ldr	r1, [r4, #16]
 8005b4e:	4650      	mov	r0, sl
 8005b50:	f7ff feb0 	bl	80058b4 <_free_r>
 8005b54:	230c      	movs	r3, #12
 8005b56:	f8ca 3000 	str.w	r3, [sl]
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b60:	81a3      	strh	r3, [r4, #12]
 8005b62:	f04f 30ff 	mov.w	r0, #4294967295
 8005b66:	e7e9      	b.n	8005b3c <__ssputs_r+0x88>

08005b68 <_svfiprintf_r>:
 8005b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6c:	4698      	mov	r8, r3
 8005b6e:	898b      	ldrh	r3, [r1, #12]
 8005b70:	061b      	lsls	r3, r3, #24
 8005b72:	b09d      	sub	sp, #116	; 0x74
 8005b74:	4607      	mov	r7, r0
 8005b76:	460d      	mov	r5, r1
 8005b78:	4614      	mov	r4, r2
 8005b7a:	d50e      	bpl.n	8005b9a <_svfiprintf_r+0x32>
 8005b7c:	690b      	ldr	r3, [r1, #16]
 8005b7e:	b963      	cbnz	r3, 8005b9a <_svfiprintf_r+0x32>
 8005b80:	2140      	movs	r1, #64	; 0x40
 8005b82:	f7ff ff0b 	bl	800599c <_malloc_r>
 8005b86:	6028      	str	r0, [r5, #0]
 8005b88:	6128      	str	r0, [r5, #16]
 8005b8a:	b920      	cbnz	r0, 8005b96 <_svfiprintf_r+0x2e>
 8005b8c:	230c      	movs	r3, #12
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	f04f 30ff 	mov.w	r0, #4294967295
 8005b94:	e0d0      	b.n	8005d38 <_svfiprintf_r+0x1d0>
 8005b96:	2340      	movs	r3, #64	; 0x40
 8005b98:	616b      	str	r3, [r5, #20]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b9e:	2320      	movs	r3, #32
 8005ba0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ba4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ba8:	2330      	movs	r3, #48	; 0x30
 8005baa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005d50 <_svfiprintf_r+0x1e8>
 8005bae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bb2:	f04f 0901 	mov.w	r9, #1
 8005bb6:	4623      	mov	r3, r4
 8005bb8:	469a      	mov	sl, r3
 8005bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bbe:	b10a      	cbz	r2, 8005bc4 <_svfiprintf_r+0x5c>
 8005bc0:	2a25      	cmp	r2, #37	; 0x25
 8005bc2:	d1f9      	bne.n	8005bb8 <_svfiprintf_r+0x50>
 8005bc4:	ebba 0b04 	subs.w	fp, sl, r4
 8005bc8:	d00b      	beq.n	8005be2 <_svfiprintf_r+0x7a>
 8005bca:	465b      	mov	r3, fp
 8005bcc:	4622      	mov	r2, r4
 8005bce:	4629      	mov	r1, r5
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	f7ff ff6f 	bl	8005ab4 <__ssputs_r>
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	f000 80a9 	beq.w	8005d2e <_svfiprintf_r+0x1c6>
 8005bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bde:	445a      	add	r2, fp
 8005be0:	9209      	str	r2, [sp, #36]	; 0x24
 8005be2:	f89a 3000 	ldrb.w	r3, [sl]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 80a1 	beq.w	8005d2e <_svfiprintf_r+0x1c6>
 8005bec:	2300      	movs	r3, #0
 8005bee:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bf6:	f10a 0a01 	add.w	sl, sl, #1
 8005bfa:	9304      	str	r3, [sp, #16]
 8005bfc:	9307      	str	r3, [sp, #28]
 8005bfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c02:	931a      	str	r3, [sp, #104]	; 0x68
 8005c04:	4654      	mov	r4, sl
 8005c06:	2205      	movs	r2, #5
 8005c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c0c:	4850      	ldr	r0, [pc, #320]	; (8005d50 <_svfiprintf_r+0x1e8>)
 8005c0e:	f7fa fb17 	bl	8000240 <memchr>
 8005c12:	9a04      	ldr	r2, [sp, #16]
 8005c14:	b9d8      	cbnz	r0, 8005c4e <_svfiprintf_r+0xe6>
 8005c16:	06d0      	lsls	r0, r2, #27
 8005c18:	bf44      	itt	mi
 8005c1a:	2320      	movmi	r3, #32
 8005c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c20:	0711      	lsls	r1, r2, #28
 8005c22:	bf44      	itt	mi
 8005c24:	232b      	movmi	r3, #43	; 0x2b
 8005c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c30:	d015      	beq.n	8005c5e <_svfiprintf_r+0xf6>
 8005c32:	9a07      	ldr	r2, [sp, #28]
 8005c34:	4654      	mov	r4, sl
 8005c36:	2000      	movs	r0, #0
 8005c38:	f04f 0c0a 	mov.w	ip, #10
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c42:	3b30      	subs	r3, #48	; 0x30
 8005c44:	2b09      	cmp	r3, #9
 8005c46:	d94d      	bls.n	8005ce4 <_svfiprintf_r+0x17c>
 8005c48:	b1b0      	cbz	r0, 8005c78 <_svfiprintf_r+0x110>
 8005c4a:	9207      	str	r2, [sp, #28]
 8005c4c:	e014      	b.n	8005c78 <_svfiprintf_r+0x110>
 8005c4e:	eba0 0308 	sub.w	r3, r0, r8
 8005c52:	fa09 f303 	lsl.w	r3, r9, r3
 8005c56:	4313      	orrs	r3, r2
 8005c58:	9304      	str	r3, [sp, #16]
 8005c5a:	46a2      	mov	sl, r4
 8005c5c:	e7d2      	b.n	8005c04 <_svfiprintf_r+0x9c>
 8005c5e:	9b03      	ldr	r3, [sp, #12]
 8005c60:	1d19      	adds	r1, r3, #4
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	9103      	str	r1, [sp, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	bfbb      	ittet	lt
 8005c6a:	425b      	neglt	r3, r3
 8005c6c:	f042 0202 	orrlt.w	r2, r2, #2
 8005c70:	9307      	strge	r3, [sp, #28]
 8005c72:	9307      	strlt	r3, [sp, #28]
 8005c74:	bfb8      	it	lt
 8005c76:	9204      	strlt	r2, [sp, #16]
 8005c78:	7823      	ldrb	r3, [r4, #0]
 8005c7a:	2b2e      	cmp	r3, #46	; 0x2e
 8005c7c:	d10c      	bne.n	8005c98 <_svfiprintf_r+0x130>
 8005c7e:	7863      	ldrb	r3, [r4, #1]
 8005c80:	2b2a      	cmp	r3, #42	; 0x2a
 8005c82:	d134      	bne.n	8005cee <_svfiprintf_r+0x186>
 8005c84:	9b03      	ldr	r3, [sp, #12]
 8005c86:	1d1a      	adds	r2, r3, #4
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	9203      	str	r2, [sp, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	bfb8      	it	lt
 8005c90:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c94:	3402      	adds	r4, #2
 8005c96:	9305      	str	r3, [sp, #20]
 8005c98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005d60 <_svfiprintf_r+0x1f8>
 8005c9c:	7821      	ldrb	r1, [r4, #0]
 8005c9e:	2203      	movs	r2, #3
 8005ca0:	4650      	mov	r0, sl
 8005ca2:	f7fa facd 	bl	8000240 <memchr>
 8005ca6:	b138      	cbz	r0, 8005cb8 <_svfiprintf_r+0x150>
 8005ca8:	9b04      	ldr	r3, [sp, #16]
 8005caa:	eba0 000a 	sub.w	r0, r0, sl
 8005cae:	2240      	movs	r2, #64	; 0x40
 8005cb0:	4082      	lsls	r2, r0
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	3401      	adds	r4, #1
 8005cb6:	9304      	str	r3, [sp, #16]
 8005cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cbc:	4825      	ldr	r0, [pc, #148]	; (8005d54 <_svfiprintf_r+0x1ec>)
 8005cbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cc2:	2206      	movs	r2, #6
 8005cc4:	f7fa fabc 	bl	8000240 <memchr>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d038      	beq.n	8005d3e <_svfiprintf_r+0x1d6>
 8005ccc:	4b22      	ldr	r3, [pc, #136]	; (8005d58 <_svfiprintf_r+0x1f0>)
 8005cce:	bb1b      	cbnz	r3, 8005d18 <_svfiprintf_r+0x1b0>
 8005cd0:	9b03      	ldr	r3, [sp, #12]
 8005cd2:	3307      	adds	r3, #7
 8005cd4:	f023 0307 	bic.w	r3, r3, #7
 8005cd8:	3308      	adds	r3, #8
 8005cda:	9303      	str	r3, [sp, #12]
 8005cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cde:	4433      	add	r3, r6
 8005ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce2:	e768      	b.n	8005bb6 <_svfiprintf_r+0x4e>
 8005ce4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ce8:	460c      	mov	r4, r1
 8005cea:	2001      	movs	r0, #1
 8005cec:	e7a6      	b.n	8005c3c <_svfiprintf_r+0xd4>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	3401      	adds	r4, #1
 8005cf2:	9305      	str	r3, [sp, #20]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	f04f 0c0a 	mov.w	ip, #10
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d00:	3a30      	subs	r2, #48	; 0x30
 8005d02:	2a09      	cmp	r2, #9
 8005d04:	d903      	bls.n	8005d0e <_svfiprintf_r+0x1a6>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0c6      	beq.n	8005c98 <_svfiprintf_r+0x130>
 8005d0a:	9105      	str	r1, [sp, #20]
 8005d0c:	e7c4      	b.n	8005c98 <_svfiprintf_r+0x130>
 8005d0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d12:	4604      	mov	r4, r0
 8005d14:	2301      	movs	r3, #1
 8005d16:	e7f0      	b.n	8005cfa <_svfiprintf_r+0x192>
 8005d18:	ab03      	add	r3, sp, #12
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	462a      	mov	r2, r5
 8005d1e:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <_svfiprintf_r+0x1f4>)
 8005d20:	a904      	add	r1, sp, #16
 8005d22:	4638      	mov	r0, r7
 8005d24:	f3af 8000 	nop.w
 8005d28:	1c42      	adds	r2, r0, #1
 8005d2a:	4606      	mov	r6, r0
 8005d2c:	d1d6      	bne.n	8005cdc <_svfiprintf_r+0x174>
 8005d2e:	89ab      	ldrh	r3, [r5, #12]
 8005d30:	065b      	lsls	r3, r3, #25
 8005d32:	f53f af2d 	bmi.w	8005b90 <_svfiprintf_r+0x28>
 8005d36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d38:	b01d      	add	sp, #116	; 0x74
 8005d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3e:	ab03      	add	r3, sp, #12
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	462a      	mov	r2, r5
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <_svfiprintf_r+0x1f4>)
 8005d46:	a904      	add	r1, sp, #16
 8005d48:	4638      	mov	r0, r7
 8005d4a:	f000 f9bd 	bl	80060c8 <_printf_i>
 8005d4e:	e7eb      	b.n	8005d28 <_svfiprintf_r+0x1c0>
 8005d50:	08006a6e 	.word	0x08006a6e
 8005d54:	08006a78 	.word	0x08006a78
 8005d58:	00000000 	.word	0x00000000
 8005d5c:	08005ab5 	.word	0x08005ab5
 8005d60:	08006a74 	.word	0x08006a74

08005d64 <__sfputc_r>:
 8005d64:	6893      	ldr	r3, [r2, #8]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	b410      	push	{r4}
 8005d6c:	6093      	str	r3, [r2, #8]
 8005d6e:	da08      	bge.n	8005d82 <__sfputc_r+0x1e>
 8005d70:	6994      	ldr	r4, [r2, #24]
 8005d72:	42a3      	cmp	r3, r4
 8005d74:	db01      	blt.n	8005d7a <__sfputc_r+0x16>
 8005d76:	290a      	cmp	r1, #10
 8005d78:	d103      	bne.n	8005d82 <__sfputc_r+0x1e>
 8005d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d7e:	f7ff bc10 	b.w	80055a2 <__swbuf_r>
 8005d82:	6813      	ldr	r3, [r2, #0]
 8005d84:	1c58      	adds	r0, r3, #1
 8005d86:	6010      	str	r0, [r2, #0]
 8005d88:	7019      	strb	r1, [r3, #0]
 8005d8a:	4608      	mov	r0, r1
 8005d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <__sfputs_r>:
 8005d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d94:	4606      	mov	r6, r0
 8005d96:	460f      	mov	r7, r1
 8005d98:	4614      	mov	r4, r2
 8005d9a:	18d5      	adds	r5, r2, r3
 8005d9c:	42ac      	cmp	r4, r5
 8005d9e:	d101      	bne.n	8005da4 <__sfputs_r+0x12>
 8005da0:	2000      	movs	r0, #0
 8005da2:	e007      	b.n	8005db4 <__sfputs_r+0x22>
 8005da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da8:	463a      	mov	r2, r7
 8005daa:	4630      	mov	r0, r6
 8005dac:	f7ff ffda 	bl	8005d64 <__sfputc_r>
 8005db0:	1c43      	adds	r3, r0, #1
 8005db2:	d1f3      	bne.n	8005d9c <__sfputs_r+0xa>
 8005db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005db8 <_vfiprintf_r>:
 8005db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dbc:	460d      	mov	r5, r1
 8005dbe:	b09d      	sub	sp, #116	; 0x74
 8005dc0:	4614      	mov	r4, r2
 8005dc2:	4698      	mov	r8, r3
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	b118      	cbz	r0, 8005dd0 <_vfiprintf_r+0x18>
 8005dc8:	6a03      	ldr	r3, [r0, #32]
 8005dca:	b90b      	cbnz	r3, 8005dd0 <_vfiprintf_r+0x18>
 8005dcc:	f7ff face 	bl	800536c <__sinit>
 8005dd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dd2:	07d9      	lsls	r1, r3, #31
 8005dd4:	d405      	bmi.n	8005de2 <_vfiprintf_r+0x2a>
 8005dd6:	89ab      	ldrh	r3, [r5, #12]
 8005dd8:	059a      	lsls	r2, r3, #22
 8005dda:	d402      	bmi.n	8005de2 <_vfiprintf_r+0x2a>
 8005ddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dde:	f7ff fd49 	bl	8005874 <__retarget_lock_acquire_recursive>
 8005de2:	89ab      	ldrh	r3, [r5, #12]
 8005de4:	071b      	lsls	r3, r3, #28
 8005de6:	d501      	bpl.n	8005dec <_vfiprintf_r+0x34>
 8005de8:	692b      	ldr	r3, [r5, #16]
 8005dea:	b99b      	cbnz	r3, 8005e14 <_vfiprintf_r+0x5c>
 8005dec:	4629      	mov	r1, r5
 8005dee:	4630      	mov	r0, r6
 8005df0:	f7ff fc14 	bl	800561c <__swsetup_r>
 8005df4:	b170      	cbz	r0, 8005e14 <_vfiprintf_r+0x5c>
 8005df6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005df8:	07dc      	lsls	r4, r3, #31
 8005dfa:	d504      	bpl.n	8005e06 <_vfiprintf_r+0x4e>
 8005dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005e00:	b01d      	add	sp, #116	; 0x74
 8005e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e06:	89ab      	ldrh	r3, [r5, #12]
 8005e08:	0598      	lsls	r0, r3, #22
 8005e0a:	d4f7      	bmi.n	8005dfc <_vfiprintf_r+0x44>
 8005e0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e0e:	f7ff fd32 	bl	8005876 <__retarget_lock_release_recursive>
 8005e12:	e7f3      	b.n	8005dfc <_vfiprintf_r+0x44>
 8005e14:	2300      	movs	r3, #0
 8005e16:	9309      	str	r3, [sp, #36]	; 0x24
 8005e18:	2320      	movs	r3, #32
 8005e1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e22:	2330      	movs	r3, #48	; 0x30
 8005e24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005fd8 <_vfiprintf_r+0x220>
 8005e28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e2c:	f04f 0901 	mov.w	r9, #1
 8005e30:	4623      	mov	r3, r4
 8005e32:	469a      	mov	sl, r3
 8005e34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e38:	b10a      	cbz	r2, 8005e3e <_vfiprintf_r+0x86>
 8005e3a:	2a25      	cmp	r2, #37	; 0x25
 8005e3c:	d1f9      	bne.n	8005e32 <_vfiprintf_r+0x7a>
 8005e3e:	ebba 0b04 	subs.w	fp, sl, r4
 8005e42:	d00b      	beq.n	8005e5c <_vfiprintf_r+0xa4>
 8005e44:	465b      	mov	r3, fp
 8005e46:	4622      	mov	r2, r4
 8005e48:	4629      	mov	r1, r5
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f7ff ffa1 	bl	8005d92 <__sfputs_r>
 8005e50:	3001      	adds	r0, #1
 8005e52:	f000 80a9 	beq.w	8005fa8 <_vfiprintf_r+0x1f0>
 8005e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e58:	445a      	add	r2, fp
 8005e5a:	9209      	str	r2, [sp, #36]	; 0x24
 8005e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 80a1 	beq.w	8005fa8 <_vfiprintf_r+0x1f0>
 8005e66:	2300      	movs	r3, #0
 8005e68:	f04f 32ff 	mov.w	r2, #4294967295
 8005e6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e70:	f10a 0a01 	add.w	sl, sl, #1
 8005e74:	9304      	str	r3, [sp, #16]
 8005e76:	9307      	str	r3, [sp, #28]
 8005e78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e7c:	931a      	str	r3, [sp, #104]	; 0x68
 8005e7e:	4654      	mov	r4, sl
 8005e80:	2205      	movs	r2, #5
 8005e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e86:	4854      	ldr	r0, [pc, #336]	; (8005fd8 <_vfiprintf_r+0x220>)
 8005e88:	f7fa f9da 	bl	8000240 <memchr>
 8005e8c:	9a04      	ldr	r2, [sp, #16]
 8005e8e:	b9d8      	cbnz	r0, 8005ec8 <_vfiprintf_r+0x110>
 8005e90:	06d1      	lsls	r1, r2, #27
 8005e92:	bf44      	itt	mi
 8005e94:	2320      	movmi	r3, #32
 8005e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e9a:	0713      	lsls	r3, r2, #28
 8005e9c:	bf44      	itt	mi
 8005e9e:	232b      	movmi	r3, #43	; 0x2b
 8005ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8005eaa:	d015      	beq.n	8005ed8 <_vfiprintf_r+0x120>
 8005eac:	9a07      	ldr	r2, [sp, #28]
 8005eae:	4654      	mov	r4, sl
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	f04f 0c0a 	mov.w	ip, #10
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ebc:	3b30      	subs	r3, #48	; 0x30
 8005ebe:	2b09      	cmp	r3, #9
 8005ec0:	d94d      	bls.n	8005f5e <_vfiprintf_r+0x1a6>
 8005ec2:	b1b0      	cbz	r0, 8005ef2 <_vfiprintf_r+0x13a>
 8005ec4:	9207      	str	r2, [sp, #28]
 8005ec6:	e014      	b.n	8005ef2 <_vfiprintf_r+0x13a>
 8005ec8:	eba0 0308 	sub.w	r3, r0, r8
 8005ecc:	fa09 f303 	lsl.w	r3, r9, r3
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	9304      	str	r3, [sp, #16]
 8005ed4:	46a2      	mov	sl, r4
 8005ed6:	e7d2      	b.n	8005e7e <_vfiprintf_r+0xc6>
 8005ed8:	9b03      	ldr	r3, [sp, #12]
 8005eda:	1d19      	adds	r1, r3, #4
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	9103      	str	r1, [sp, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	bfbb      	ittet	lt
 8005ee4:	425b      	neglt	r3, r3
 8005ee6:	f042 0202 	orrlt.w	r2, r2, #2
 8005eea:	9307      	strge	r3, [sp, #28]
 8005eec:	9307      	strlt	r3, [sp, #28]
 8005eee:	bfb8      	it	lt
 8005ef0:	9204      	strlt	r2, [sp, #16]
 8005ef2:	7823      	ldrb	r3, [r4, #0]
 8005ef4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ef6:	d10c      	bne.n	8005f12 <_vfiprintf_r+0x15a>
 8005ef8:	7863      	ldrb	r3, [r4, #1]
 8005efa:	2b2a      	cmp	r3, #42	; 0x2a
 8005efc:	d134      	bne.n	8005f68 <_vfiprintf_r+0x1b0>
 8005efe:	9b03      	ldr	r3, [sp, #12]
 8005f00:	1d1a      	adds	r2, r3, #4
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	9203      	str	r2, [sp, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	bfb8      	it	lt
 8005f0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f0e:	3402      	adds	r4, #2
 8005f10:	9305      	str	r3, [sp, #20]
 8005f12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005fe8 <_vfiprintf_r+0x230>
 8005f16:	7821      	ldrb	r1, [r4, #0]
 8005f18:	2203      	movs	r2, #3
 8005f1a:	4650      	mov	r0, sl
 8005f1c:	f7fa f990 	bl	8000240 <memchr>
 8005f20:	b138      	cbz	r0, 8005f32 <_vfiprintf_r+0x17a>
 8005f22:	9b04      	ldr	r3, [sp, #16]
 8005f24:	eba0 000a 	sub.w	r0, r0, sl
 8005f28:	2240      	movs	r2, #64	; 0x40
 8005f2a:	4082      	lsls	r2, r0
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	3401      	adds	r4, #1
 8005f30:	9304      	str	r3, [sp, #16]
 8005f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f36:	4829      	ldr	r0, [pc, #164]	; (8005fdc <_vfiprintf_r+0x224>)
 8005f38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f3c:	2206      	movs	r2, #6
 8005f3e:	f7fa f97f 	bl	8000240 <memchr>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d03f      	beq.n	8005fc6 <_vfiprintf_r+0x20e>
 8005f46:	4b26      	ldr	r3, [pc, #152]	; (8005fe0 <_vfiprintf_r+0x228>)
 8005f48:	bb1b      	cbnz	r3, 8005f92 <_vfiprintf_r+0x1da>
 8005f4a:	9b03      	ldr	r3, [sp, #12]
 8005f4c:	3307      	adds	r3, #7
 8005f4e:	f023 0307 	bic.w	r3, r3, #7
 8005f52:	3308      	adds	r3, #8
 8005f54:	9303      	str	r3, [sp, #12]
 8005f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f58:	443b      	add	r3, r7
 8005f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f5c:	e768      	b.n	8005e30 <_vfiprintf_r+0x78>
 8005f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f62:	460c      	mov	r4, r1
 8005f64:	2001      	movs	r0, #1
 8005f66:	e7a6      	b.n	8005eb6 <_vfiprintf_r+0xfe>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	3401      	adds	r4, #1
 8005f6c:	9305      	str	r3, [sp, #20]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	f04f 0c0a 	mov.w	ip, #10
 8005f74:	4620      	mov	r0, r4
 8005f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f7a:	3a30      	subs	r2, #48	; 0x30
 8005f7c:	2a09      	cmp	r2, #9
 8005f7e:	d903      	bls.n	8005f88 <_vfiprintf_r+0x1d0>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0c6      	beq.n	8005f12 <_vfiprintf_r+0x15a>
 8005f84:	9105      	str	r1, [sp, #20]
 8005f86:	e7c4      	b.n	8005f12 <_vfiprintf_r+0x15a>
 8005f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e7f0      	b.n	8005f74 <_vfiprintf_r+0x1bc>
 8005f92:	ab03      	add	r3, sp, #12
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	462a      	mov	r2, r5
 8005f98:	4b12      	ldr	r3, [pc, #72]	; (8005fe4 <_vfiprintf_r+0x22c>)
 8005f9a:	a904      	add	r1, sp, #16
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f3af 8000 	nop.w
 8005fa2:	4607      	mov	r7, r0
 8005fa4:	1c78      	adds	r0, r7, #1
 8005fa6:	d1d6      	bne.n	8005f56 <_vfiprintf_r+0x19e>
 8005fa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005faa:	07d9      	lsls	r1, r3, #31
 8005fac:	d405      	bmi.n	8005fba <_vfiprintf_r+0x202>
 8005fae:	89ab      	ldrh	r3, [r5, #12]
 8005fb0:	059a      	lsls	r2, r3, #22
 8005fb2:	d402      	bmi.n	8005fba <_vfiprintf_r+0x202>
 8005fb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fb6:	f7ff fc5e 	bl	8005876 <__retarget_lock_release_recursive>
 8005fba:	89ab      	ldrh	r3, [r5, #12]
 8005fbc:	065b      	lsls	r3, r3, #25
 8005fbe:	f53f af1d 	bmi.w	8005dfc <_vfiprintf_r+0x44>
 8005fc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fc4:	e71c      	b.n	8005e00 <_vfiprintf_r+0x48>
 8005fc6:	ab03      	add	r3, sp, #12
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	462a      	mov	r2, r5
 8005fcc:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <_vfiprintf_r+0x22c>)
 8005fce:	a904      	add	r1, sp, #16
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f000 f879 	bl	80060c8 <_printf_i>
 8005fd6:	e7e4      	b.n	8005fa2 <_vfiprintf_r+0x1ea>
 8005fd8:	08006a6e 	.word	0x08006a6e
 8005fdc:	08006a78 	.word	0x08006a78
 8005fe0:	00000000 	.word	0x00000000
 8005fe4:	08005d93 	.word	0x08005d93
 8005fe8:	08006a74 	.word	0x08006a74

08005fec <_printf_common>:
 8005fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff0:	4616      	mov	r6, r2
 8005ff2:	4699      	mov	r9, r3
 8005ff4:	688a      	ldr	r2, [r1, #8]
 8005ff6:	690b      	ldr	r3, [r1, #16]
 8005ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	bfb8      	it	lt
 8006000:	4613      	movlt	r3, r2
 8006002:	6033      	str	r3, [r6, #0]
 8006004:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006008:	4607      	mov	r7, r0
 800600a:	460c      	mov	r4, r1
 800600c:	b10a      	cbz	r2, 8006012 <_printf_common+0x26>
 800600e:	3301      	adds	r3, #1
 8006010:	6033      	str	r3, [r6, #0]
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	0699      	lsls	r1, r3, #26
 8006016:	bf42      	ittt	mi
 8006018:	6833      	ldrmi	r3, [r6, #0]
 800601a:	3302      	addmi	r3, #2
 800601c:	6033      	strmi	r3, [r6, #0]
 800601e:	6825      	ldr	r5, [r4, #0]
 8006020:	f015 0506 	ands.w	r5, r5, #6
 8006024:	d106      	bne.n	8006034 <_printf_common+0x48>
 8006026:	f104 0a19 	add.w	sl, r4, #25
 800602a:	68e3      	ldr	r3, [r4, #12]
 800602c:	6832      	ldr	r2, [r6, #0]
 800602e:	1a9b      	subs	r3, r3, r2
 8006030:	42ab      	cmp	r3, r5
 8006032:	dc26      	bgt.n	8006082 <_printf_common+0x96>
 8006034:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006038:	1e13      	subs	r3, r2, #0
 800603a:	6822      	ldr	r2, [r4, #0]
 800603c:	bf18      	it	ne
 800603e:	2301      	movne	r3, #1
 8006040:	0692      	lsls	r2, r2, #26
 8006042:	d42b      	bmi.n	800609c <_printf_common+0xb0>
 8006044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006048:	4649      	mov	r1, r9
 800604a:	4638      	mov	r0, r7
 800604c:	47c0      	blx	r8
 800604e:	3001      	adds	r0, #1
 8006050:	d01e      	beq.n	8006090 <_printf_common+0xa4>
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	6922      	ldr	r2, [r4, #16]
 8006056:	f003 0306 	and.w	r3, r3, #6
 800605a:	2b04      	cmp	r3, #4
 800605c:	bf02      	ittt	eq
 800605e:	68e5      	ldreq	r5, [r4, #12]
 8006060:	6833      	ldreq	r3, [r6, #0]
 8006062:	1aed      	subeq	r5, r5, r3
 8006064:	68a3      	ldr	r3, [r4, #8]
 8006066:	bf0c      	ite	eq
 8006068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800606c:	2500      	movne	r5, #0
 800606e:	4293      	cmp	r3, r2
 8006070:	bfc4      	itt	gt
 8006072:	1a9b      	subgt	r3, r3, r2
 8006074:	18ed      	addgt	r5, r5, r3
 8006076:	2600      	movs	r6, #0
 8006078:	341a      	adds	r4, #26
 800607a:	42b5      	cmp	r5, r6
 800607c:	d11a      	bne.n	80060b4 <_printf_common+0xc8>
 800607e:	2000      	movs	r0, #0
 8006080:	e008      	b.n	8006094 <_printf_common+0xa8>
 8006082:	2301      	movs	r3, #1
 8006084:	4652      	mov	r2, sl
 8006086:	4649      	mov	r1, r9
 8006088:	4638      	mov	r0, r7
 800608a:	47c0      	blx	r8
 800608c:	3001      	adds	r0, #1
 800608e:	d103      	bne.n	8006098 <_printf_common+0xac>
 8006090:	f04f 30ff 	mov.w	r0, #4294967295
 8006094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006098:	3501      	adds	r5, #1
 800609a:	e7c6      	b.n	800602a <_printf_common+0x3e>
 800609c:	18e1      	adds	r1, r4, r3
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	2030      	movs	r0, #48	; 0x30
 80060a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060a6:	4422      	add	r2, r4
 80060a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060b0:	3302      	adds	r3, #2
 80060b2:	e7c7      	b.n	8006044 <_printf_common+0x58>
 80060b4:	2301      	movs	r3, #1
 80060b6:	4622      	mov	r2, r4
 80060b8:	4649      	mov	r1, r9
 80060ba:	4638      	mov	r0, r7
 80060bc:	47c0      	blx	r8
 80060be:	3001      	adds	r0, #1
 80060c0:	d0e6      	beq.n	8006090 <_printf_common+0xa4>
 80060c2:	3601      	adds	r6, #1
 80060c4:	e7d9      	b.n	800607a <_printf_common+0x8e>
	...

080060c8 <_printf_i>:
 80060c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060cc:	7e0f      	ldrb	r7, [r1, #24]
 80060ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060d0:	2f78      	cmp	r7, #120	; 0x78
 80060d2:	4691      	mov	r9, r2
 80060d4:	4680      	mov	r8, r0
 80060d6:	460c      	mov	r4, r1
 80060d8:	469a      	mov	sl, r3
 80060da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060de:	d807      	bhi.n	80060f0 <_printf_i+0x28>
 80060e0:	2f62      	cmp	r7, #98	; 0x62
 80060e2:	d80a      	bhi.n	80060fa <_printf_i+0x32>
 80060e4:	2f00      	cmp	r7, #0
 80060e6:	f000 80d4 	beq.w	8006292 <_printf_i+0x1ca>
 80060ea:	2f58      	cmp	r7, #88	; 0x58
 80060ec:	f000 80c0 	beq.w	8006270 <_printf_i+0x1a8>
 80060f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060f8:	e03a      	b.n	8006170 <_printf_i+0xa8>
 80060fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060fe:	2b15      	cmp	r3, #21
 8006100:	d8f6      	bhi.n	80060f0 <_printf_i+0x28>
 8006102:	a101      	add	r1, pc, #4	; (adr r1, 8006108 <_printf_i+0x40>)
 8006104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006108:	08006161 	.word	0x08006161
 800610c:	08006175 	.word	0x08006175
 8006110:	080060f1 	.word	0x080060f1
 8006114:	080060f1 	.word	0x080060f1
 8006118:	080060f1 	.word	0x080060f1
 800611c:	080060f1 	.word	0x080060f1
 8006120:	08006175 	.word	0x08006175
 8006124:	080060f1 	.word	0x080060f1
 8006128:	080060f1 	.word	0x080060f1
 800612c:	080060f1 	.word	0x080060f1
 8006130:	080060f1 	.word	0x080060f1
 8006134:	08006279 	.word	0x08006279
 8006138:	080061a1 	.word	0x080061a1
 800613c:	08006233 	.word	0x08006233
 8006140:	080060f1 	.word	0x080060f1
 8006144:	080060f1 	.word	0x080060f1
 8006148:	0800629b 	.word	0x0800629b
 800614c:	080060f1 	.word	0x080060f1
 8006150:	080061a1 	.word	0x080061a1
 8006154:	080060f1 	.word	0x080060f1
 8006158:	080060f1 	.word	0x080060f1
 800615c:	0800623b 	.word	0x0800623b
 8006160:	682b      	ldr	r3, [r5, #0]
 8006162:	1d1a      	adds	r2, r3, #4
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	602a      	str	r2, [r5, #0]
 8006168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800616c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006170:	2301      	movs	r3, #1
 8006172:	e09f      	b.n	80062b4 <_printf_i+0x1ec>
 8006174:	6820      	ldr	r0, [r4, #0]
 8006176:	682b      	ldr	r3, [r5, #0]
 8006178:	0607      	lsls	r7, r0, #24
 800617a:	f103 0104 	add.w	r1, r3, #4
 800617e:	6029      	str	r1, [r5, #0]
 8006180:	d501      	bpl.n	8006186 <_printf_i+0xbe>
 8006182:	681e      	ldr	r6, [r3, #0]
 8006184:	e003      	b.n	800618e <_printf_i+0xc6>
 8006186:	0646      	lsls	r6, r0, #25
 8006188:	d5fb      	bpl.n	8006182 <_printf_i+0xba>
 800618a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800618e:	2e00      	cmp	r6, #0
 8006190:	da03      	bge.n	800619a <_printf_i+0xd2>
 8006192:	232d      	movs	r3, #45	; 0x2d
 8006194:	4276      	negs	r6, r6
 8006196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800619a:	485a      	ldr	r0, [pc, #360]	; (8006304 <_printf_i+0x23c>)
 800619c:	230a      	movs	r3, #10
 800619e:	e012      	b.n	80061c6 <_printf_i+0xfe>
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	6820      	ldr	r0, [r4, #0]
 80061a4:	1d19      	adds	r1, r3, #4
 80061a6:	6029      	str	r1, [r5, #0]
 80061a8:	0605      	lsls	r5, r0, #24
 80061aa:	d501      	bpl.n	80061b0 <_printf_i+0xe8>
 80061ac:	681e      	ldr	r6, [r3, #0]
 80061ae:	e002      	b.n	80061b6 <_printf_i+0xee>
 80061b0:	0641      	lsls	r1, r0, #25
 80061b2:	d5fb      	bpl.n	80061ac <_printf_i+0xe4>
 80061b4:	881e      	ldrh	r6, [r3, #0]
 80061b6:	4853      	ldr	r0, [pc, #332]	; (8006304 <_printf_i+0x23c>)
 80061b8:	2f6f      	cmp	r7, #111	; 0x6f
 80061ba:	bf0c      	ite	eq
 80061bc:	2308      	moveq	r3, #8
 80061be:	230a      	movne	r3, #10
 80061c0:	2100      	movs	r1, #0
 80061c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061c6:	6865      	ldr	r5, [r4, #4]
 80061c8:	60a5      	str	r5, [r4, #8]
 80061ca:	2d00      	cmp	r5, #0
 80061cc:	bfa2      	ittt	ge
 80061ce:	6821      	ldrge	r1, [r4, #0]
 80061d0:	f021 0104 	bicge.w	r1, r1, #4
 80061d4:	6021      	strge	r1, [r4, #0]
 80061d6:	b90e      	cbnz	r6, 80061dc <_printf_i+0x114>
 80061d8:	2d00      	cmp	r5, #0
 80061da:	d04b      	beq.n	8006274 <_printf_i+0x1ac>
 80061dc:	4615      	mov	r5, r2
 80061de:	fbb6 f1f3 	udiv	r1, r6, r3
 80061e2:	fb03 6711 	mls	r7, r3, r1, r6
 80061e6:	5dc7      	ldrb	r7, [r0, r7]
 80061e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061ec:	4637      	mov	r7, r6
 80061ee:	42bb      	cmp	r3, r7
 80061f0:	460e      	mov	r6, r1
 80061f2:	d9f4      	bls.n	80061de <_printf_i+0x116>
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d10b      	bne.n	8006210 <_printf_i+0x148>
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	07de      	lsls	r6, r3, #31
 80061fc:	d508      	bpl.n	8006210 <_printf_i+0x148>
 80061fe:	6923      	ldr	r3, [r4, #16]
 8006200:	6861      	ldr	r1, [r4, #4]
 8006202:	4299      	cmp	r1, r3
 8006204:	bfde      	ittt	le
 8006206:	2330      	movle	r3, #48	; 0x30
 8006208:	f805 3c01 	strble.w	r3, [r5, #-1]
 800620c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006210:	1b52      	subs	r2, r2, r5
 8006212:	6122      	str	r2, [r4, #16]
 8006214:	f8cd a000 	str.w	sl, [sp]
 8006218:	464b      	mov	r3, r9
 800621a:	aa03      	add	r2, sp, #12
 800621c:	4621      	mov	r1, r4
 800621e:	4640      	mov	r0, r8
 8006220:	f7ff fee4 	bl	8005fec <_printf_common>
 8006224:	3001      	adds	r0, #1
 8006226:	d14a      	bne.n	80062be <_printf_i+0x1f6>
 8006228:	f04f 30ff 	mov.w	r0, #4294967295
 800622c:	b004      	add	sp, #16
 800622e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	f043 0320 	orr.w	r3, r3, #32
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	4833      	ldr	r0, [pc, #204]	; (8006308 <_printf_i+0x240>)
 800623c:	2778      	movs	r7, #120	; 0x78
 800623e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	6829      	ldr	r1, [r5, #0]
 8006246:	061f      	lsls	r7, r3, #24
 8006248:	f851 6b04 	ldr.w	r6, [r1], #4
 800624c:	d402      	bmi.n	8006254 <_printf_i+0x18c>
 800624e:	065f      	lsls	r7, r3, #25
 8006250:	bf48      	it	mi
 8006252:	b2b6      	uxthmi	r6, r6
 8006254:	07df      	lsls	r7, r3, #31
 8006256:	bf48      	it	mi
 8006258:	f043 0320 	orrmi.w	r3, r3, #32
 800625c:	6029      	str	r1, [r5, #0]
 800625e:	bf48      	it	mi
 8006260:	6023      	strmi	r3, [r4, #0]
 8006262:	b91e      	cbnz	r6, 800626c <_printf_i+0x1a4>
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	f023 0320 	bic.w	r3, r3, #32
 800626a:	6023      	str	r3, [r4, #0]
 800626c:	2310      	movs	r3, #16
 800626e:	e7a7      	b.n	80061c0 <_printf_i+0xf8>
 8006270:	4824      	ldr	r0, [pc, #144]	; (8006304 <_printf_i+0x23c>)
 8006272:	e7e4      	b.n	800623e <_printf_i+0x176>
 8006274:	4615      	mov	r5, r2
 8006276:	e7bd      	b.n	80061f4 <_printf_i+0x12c>
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	6826      	ldr	r6, [r4, #0]
 800627c:	6961      	ldr	r1, [r4, #20]
 800627e:	1d18      	adds	r0, r3, #4
 8006280:	6028      	str	r0, [r5, #0]
 8006282:	0635      	lsls	r5, r6, #24
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	d501      	bpl.n	800628c <_printf_i+0x1c4>
 8006288:	6019      	str	r1, [r3, #0]
 800628a:	e002      	b.n	8006292 <_printf_i+0x1ca>
 800628c:	0670      	lsls	r0, r6, #25
 800628e:	d5fb      	bpl.n	8006288 <_printf_i+0x1c0>
 8006290:	8019      	strh	r1, [r3, #0]
 8006292:	2300      	movs	r3, #0
 8006294:	6123      	str	r3, [r4, #16]
 8006296:	4615      	mov	r5, r2
 8006298:	e7bc      	b.n	8006214 <_printf_i+0x14c>
 800629a:	682b      	ldr	r3, [r5, #0]
 800629c:	1d1a      	adds	r2, r3, #4
 800629e:	602a      	str	r2, [r5, #0]
 80062a0:	681d      	ldr	r5, [r3, #0]
 80062a2:	6862      	ldr	r2, [r4, #4]
 80062a4:	2100      	movs	r1, #0
 80062a6:	4628      	mov	r0, r5
 80062a8:	f7f9 ffca 	bl	8000240 <memchr>
 80062ac:	b108      	cbz	r0, 80062b2 <_printf_i+0x1ea>
 80062ae:	1b40      	subs	r0, r0, r5
 80062b0:	6060      	str	r0, [r4, #4]
 80062b2:	6863      	ldr	r3, [r4, #4]
 80062b4:	6123      	str	r3, [r4, #16]
 80062b6:	2300      	movs	r3, #0
 80062b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062bc:	e7aa      	b.n	8006214 <_printf_i+0x14c>
 80062be:	6923      	ldr	r3, [r4, #16]
 80062c0:	462a      	mov	r2, r5
 80062c2:	4649      	mov	r1, r9
 80062c4:	4640      	mov	r0, r8
 80062c6:	47d0      	blx	sl
 80062c8:	3001      	adds	r0, #1
 80062ca:	d0ad      	beq.n	8006228 <_printf_i+0x160>
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	079b      	lsls	r3, r3, #30
 80062d0:	d413      	bmi.n	80062fa <_printf_i+0x232>
 80062d2:	68e0      	ldr	r0, [r4, #12]
 80062d4:	9b03      	ldr	r3, [sp, #12]
 80062d6:	4298      	cmp	r0, r3
 80062d8:	bfb8      	it	lt
 80062da:	4618      	movlt	r0, r3
 80062dc:	e7a6      	b.n	800622c <_printf_i+0x164>
 80062de:	2301      	movs	r3, #1
 80062e0:	4632      	mov	r2, r6
 80062e2:	4649      	mov	r1, r9
 80062e4:	4640      	mov	r0, r8
 80062e6:	47d0      	blx	sl
 80062e8:	3001      	adds	r0, #1
 80062ea:	d09d      	beq.n	8006228 <_printf_i+0x160>
 80062ec:	3501      	adds	r5, #1
 80062ee:	68e3      	ldr	r3, [r4, #12]
 80062f0:	9903      	ldr	r1, [sp, #12]
 80062f2:	1a5b      	subs	r3, r3, r1
 80062f4:	42ab      	cmp	r3, r5
 80062f6:	dcf2      	bgt.n	80062de <_printf_i+0x216>
 80062f8:	e7eb      	b.n	80062d2 <_printf_i+0x20a>
 80062fa:	2500      	movs	r5, #0
 80062fc:	f104 0619 	add.w	r6, r4, #25
 8006300:	e7f5      	b.n	80062ee <_printf_i+0x226>
 8006302:	bf00      	nop
 8006304:	08006a7f 	.word	0x08006a7f
 8006308:	08006a90 	.word	0x08006a90

0800630c <__sflush_r>:
 800630c:	898a      	ldrh	r2, [r1, #12]
 800630e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006312:	4605      	mov	r5, r0
 8006314:	0710      	lsls	r0, r2, #28
 8006316:	460c      	mov	r4, r1
 8006318:	d458      	bmi.n	80063cc <__sflush_r+0xc0>
 800631a:	684b      	ldr	r3, [r1, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	dc05      	bgt.n	800632c <__sflush_r+0x20>
 8006320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	dc02      	bgt.n	800632c <__sflush_r+0x20>
 8006326:	2000      	movs	r0, #0
 8006328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800632c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800632e:	2e00      	cmp	r6, #0
 8006330:	d0f9      	beq.n	8006326 <__sflush_r+0x1a>
 8006332:	2300      	movs	r3, #0
 8006334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006338:	682f      	ldr	r7, [r5, #0]
 800633a:	6a21      	ldr	r1, [r4, #32]
 800633c:	602b      	str	r3, [r5, #0]
 800633e:	d032      	beq.n	80063a6 <__sflush_r+0x9a>
 8006340:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	075a      	lsls	r2, r3, #29
 8006346:	d505      	bpl.n	8006354 <__sflush_r+0x48>
 8006348:	6863      	ldr	r3, [r4, #4]
 800634a:	1ac0      	subs	r0, r0, r3
 800634c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800634e:	b10b      	cbz	r3, 8006354 <__sflush_r+0x48>
 8006350:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006352:	1ac0      	subs	r0, r0, r3
 8006354:	2300      	movs	r3, #0
 8006356:	4602      	mov	r2, r0
 8006358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800635a:	6a21      	ldr	r1, [r4, #32]
 800635c:	4628      	mov	r0, r5
 800635e:	47b0      	blx	r6
 8006360:	1c43      	adds	r3, r0, #1
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	d106      	bne.n	8006374 <__sflush_r+0x68>
 8006366:	6829      	ldr	r1, [r5, #0]
 8006368:	291d      	cmp	r1, #29
 800636a:	d82b      	bhi.n	80063c4 <__sflush_r+0xb8>
 800636c:	4a29      	ldr	r2, [pc, #164]	; (8006414 <__sflush_r+0x108>)
 800636e:	410a      	asrs	r2, r1
 8006370:	07d6      	lsls	r6, r2, #31
 8006372:	d427      	bmi.n	80063c4 <__sflush_r+0xb8>
 8006374:	2200      	movs	r2, #0
 8006376:	6062      	str	r2, [r4, #4]
 8006378:	04d9      	lsls	r1, r3, #19
 800637a:	6922      	ldr	r2, [r4, #16]
 800637c:	6022      	str	r2, [r4, #0]
 800637e:	d504      	bpl.n	800638a <__sflush_r+0x7e>
 8006380:	1c42      	adds	r2, r0, #1
 8006382:	d101      	bne.n	8006388 <__sflush_r+0x7c>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	b903      	cbnz	r3, 800638a <__sflush_r+0x7e>
 8006388:	6560      	str	r0, [r4, #84]	; 0x54
 800638a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800638c:	602f      	str	r7, [r5, #0]
 800638e:	2900      	cmp	r1, #0
 8006390:	d0c9      	beq.n	8006326 <__sflush_r+0x1a>
 8006392:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006396:	4299      	cmp	r1, r3
 8006398:	d002      	beq.n	80063a0 <__sflush_r+0x94>
 800639a:	4628      	mov	r0, r5
 800639c:	f7ff fa8a 	bl	80058b4 <_free_r>
 80063a0:	2000      	movs	r0, #0
 80063a2:	6360      	str	r0, [r4, #52]	; 0x34
 80063a4:	e7c0      	b.n	8006328 <__sflush_r+0x1c>
 80063a6:	2301      	movs	r3, #1
 80063a8:	4628      	mov	r0, r5
 80063aa:	47b0      	blx	r6
 80063ac:	1c41      	adds	r1, r0, #1
 80063ae:	d1c8      	bne.n	8006342 <__sflush_r+0x36>
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0c5      	beq.n	8006342 <__sflush_r+0x36>
 80063b6:	2b1d      	cmp	r3, #29
 80063b8:	d001      	beq.n	80063be <__sflush_r+0xb2>
 80063ba:	2b16      	cmp	r3, #22
 80063bc:	d101      	bne.n	80063c2 <__sflush_r+0xb6>
 80063be:	602f      	str	r7, [r5, #0]
 80063c0:	e7b1      	b.n	8006326 <__sflush_r+0x1a>
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063c8:	81a3      	strh	r3, [r4, #12]
 80063ca:	e7ad      	b.n	8006328 <__sflush_r+0x1c>
 80063cc:	690f      	ldr	r7, [r1, #16]
 80063ce:	2f00      	cmp	r7, #0
 80063d0:	d0a9      	beq.n	8006326 <__sflush_r+0x1a>
 80063d2:	0793      	lsls	r3, r2, #30
 80063d4:	680e      	ldr	r6, [r1, #0]
 80063d6:	bf08      	it	eq
 80063d8:	694b      	ldreq	r3, [r1, #20]
 80063da:	600f      	str	r7, [r1, #0]
 80063dc:	bf18      	it	ne
 80063de:	2300      	movne	r3, #0
 80063e0:	eba6 0807 	sub.w	r8, r6, r7
 80063e4:	608b      	str	r3, [r1, #8]
 80063e6:	f1b8 0f00 	cmp.w	r8, #0
 80063ea:	dd9c      	ble.n	8006326 <__sflush_r+0x1a>
 80063ec:	6a21      	ldr	r1, [r4, #32]
 80063ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063f0:	4643      	mov	r3, r8
 80063f2:	463a      	mov	r2, r7
 80063f4:	4628      	mov	r0, r5
 80063f6:	47b0      	blx	r6
 80063f8:	2800      	cmp	r0, #0
 80063fa:	dc06      	bgt.n	800640a <__sflush_r+0xfe>
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006402:	81a3      	strh	r3, [r4, #12]
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	e78e      	b.n	8006328 <__sflush_r+0x1c>
 800640a:	4407      	add	r7, r0
 800640c:	eba8 0800 	sub.w	r8, r8, r0
 8006410:	e7e9      	b.n	80063e6 <__sflush_r+0xda>
 8006412:	bf00      	nop
 8006414:	dfbffffe 	.word	0xdfbffffe

08006418 <_fflush_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	690b      	ldr	r3, [r1, #16]
 800641c:	4605      	mov	r5, r0
 800641e:	460c      	mov	r4, r1
 8006420:	b913      	cbnz	r3, 8006428 <_fflush_r+0x10>
 8006422:	2500      	movs	r5, #0
 8006424:	4628      	mov	r0, r5
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	b118      	cbz	r0, 8006432 <_fflush_r+0x1a>
 800642a:	6a03      	ldr	r3, [r0, #32]
 800642c:	b90b      	cbnz	r3, 8006432 <_fflush_r+0x1a>
 800642e:	f7fe ff9d 	bl	800536c <__sinit>
 8006432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f3      	beq.n	8006422 <_fflush_r+0xa>
 800643a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800643c:	07d0      	lsls	r0, r2, #31
 800643e:	d404      	bmi.n	800644a <_fflush_r+0x32>
 8006440:	0599      	lsls	r1, r3, #22
 8006442:	d402      	bmi.n	800644a <_fflush_r+0x32>
 8006444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006446:	f7ff fa15 	bl	8005874 <__retarget_lock_acquire_recursive>
 800644a:	4628      	mov	r0, r5
 800644c:	4621      	mov	r1, r4
 800644e:	f7ff ff5d 	bl	800630c <__sflush_r>
 8006452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006454:	07da      	lsls	r2, r3, #31
 8006456:	4605      	mov	r5, r0
 8006458:	d4e4      	bmi.n	8006424 <_fflush_r+0xc>
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	059b      	lsls	r3, r3, #22
 800645e:	d4e1      	bmi.n	8006424 <_fflush_r+0xc>
 8006460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006462:	f7ff fa08 	bl	8005876 <__retarget_lock_release_recursive>
 8006466:	e7dd      	b.n	8006424 <_fflush_r+0xc>

08006468 <fiprintf>:
 8006468:	b40e      	push	{r1, r2, r3}
 800646a:	b503      	push	{r0, r1, lr}
 800646c:	4601      	mov	r1, r0
 800646e:	ab03      	add	r3, sp, #12
 8006470:	4805      	ldr	r0, [pc, #20]	; (8006488 <fiprintf+0x20>)
 8006472:	f853 2b04 	ldr.w	r2, [r3], #4
 8006476:	6800      	ldr	r0, [r0, #0]
 8006478:	9301      	str	r3, [sp, #4]
 800647a:	f7ff fc9d 	bl	8005db8 <_vfiprintf_r>
 800647e:	b002      	add	sp, #8
 8006480:	f85d eb04 	ldr.w	lr, [sp], #4
 8006484:	b003      	add	sp, #12
 8006486:	4770      	bx	lr
 8006488:	20000128 	.word	0x20000128

0800648c <__swhatbuf_r>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	460c      	mov	r4, r1
 8006490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006494:	2900      	cmp	r1, #0
 8006496:	b096      	sub	sp, #88	; 0x58
 8006498:	4615      	mov	r5, r2
 800649a:	461e      	mov	r6, r3
 800649c:	da0d      	bge.n	80064ba <__swhatbuf_r+0x2e>
 800649e:	89a3      	ldrh	r3, [r4, #12]
 80064a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80064a4:	f04f 0100 	mov.w	r1, #0
 80064a8:	bf0c      	ite	eq
 80064aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80064ae:	2340      	movne	r3, #64	; 0x40
 80064b0:	2000      	movs	r0, #0
 80064b2:	6031      	str	r1, [r6, #0]
 80064b4:	602b      	str	r3, [r5, #0]
 80064b6:	b016      	add	sp, #88	; 0x58
 80064b8:	bd70      	pop	{r4, r5, r6, pc}
 80064ba:	466a      	mov	r2, sp
 80064bc:	f000 f862 	bl	8006584 <_fstat_r>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	dbec      	blt.n	800649e <__swhatbuf_r+0x12>
 80064c4:	9901      	ldr	r1, [sp, #4]
 80064c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80064ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80064ce:	4259      	negs	r1, r3
 80064d0:	4159      	adcs	r1, r3
 80064d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064d6:	e7eb      	b.n	80064b0 <__swhatbuf_r+0x24>

080064d8 <__smakebuf_r>:
 80064d8:	898b      	ldrh	r3, [r1, #12]
 80064da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064dc:	079d      	lsls	r5, r3, #30
 80064de:	4606      	mov	r6, r0
 80064e0:	460c      	mov	r4, r1
 80064e2:	d507      	bpl.n	80064f4 <__smakebuf_r+0x1c>
 80064e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	6123      	str	r3, [r4, #16]
 80064ec:	2301      	movs	r3, #1
 80064ee:	6163      	str	r3, [r4, #20]
 80064f0:	b002      	add	sp, #8
 80064f2:	bd70      	pop	{r4, r5, r6, pc}
 80064f4:	ab01      	add	r3, sp, #4
 80064f6:	466a      	mov	r2, sp
 80064f8:	f7ff ffc8 	bl	800648c <__swhatbuf_r>
 80064fc:	9900      	ldr	r1, [sp, #0]
 80064fe:	4605      	mov	r5, r0
 8006500:	4630      	mov	r0, r6
 8006502:	f7ff fa4b 	bl	800599c <_malloc_r>
 8006506:	b948      	cbnz	r0, 800651c <__smakebuf_r+0x44>
 8006508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800650c:	059a      	lsls	r2, r3, #22
 800650e:	d4ef      	bmi.n	80064f0 <__smakebuf_r+0x18>
 8006510:	f023 0303 	bic.w	r3, r3, #3
 8006514:	f043 0302 	orr.w	r3, r3, #2
 8006518:	81a3      	strh	r3, [r4, #12]
 800651a:	e7e3      	b.n	80064e4 <__smakebuf_r+0xc>
 800651c:	89a3      	ldrh	r3, [r4, #12]
 800651e:	6020      	str	r0, [r4, #0]
 8006520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006524:	81a3      	strh	r3, [r4, #12]
 8006526:	9b00      	ldr	r3, [sp, #0]
 8006528:	6163      	str	r3, [r4, #20]
 800652a:	9b01      	ldr	r3, [sp, #4]
 800652c:	6120      	str	r0, [r4, #16]
 800652e:	b15b      	cbz	r3, 8006548 <__smakebuf_r+0x70>
 8006530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006534:	4630      	mov	r0, r6
 8006536:	f000 f837 	bl	80065a8 <_isatty_r>
 800653a:	b128      	cbz	r0, 8006548 <__smakebuf_r+0x70>
 800653c:	89a3      	ldrh	r3, [r4, #12]
 800653e:	f023 0303 	bic.w	r3, r3, #3
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	81a3      	strh	r3, [r4, #12]
 8006548:	89a3      	ldrh	r3, [r4, #12]
 800654a:	431d      	orrs	r5, r3
 800654c:	81a5      	strh	r5, [r4, #12]
 800654e:	e7cf      	b.n	80064f0 <__smakebuf_r+0x18>

08006550 <memmove>:
 8006550:	4288      	cmp	r0, r1
 8006552:	b510      	push	{r4, lr}
 8006554:	eb01 0402 	add.w	r4, r1, r2
 8006558:	d902      	bls.n	8006560 <memmove+0x10>
 800655a:	4284      	cmp	r4, r0
 800655c:	4623      	mov	r3, r4
 800655e:	d807      	bhi.n	8006570 <memmove+0x20>
 8006560:	1e43      	subs	r3, r0, #1
 8006562:	42a1      	cmp	r1, r4
 8006564:	d008      	beq.n	8006578 <memmove+0x28>
 8006566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800656a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800656e:	e7f8      	b.n	8006562 <memmove+0x12>
 8006570:	4402      	add	r2, r0
 8006572:	4601      	mov	r1, r0
 8006574:	428a      	cmp	r2, r1
 8006576:	d100      	bne.n	800657a <memmove+0x2a>
 8006578:	bd10      	pop	{r4, pc}
 800657a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800657e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006582:	e7f7      	b.n	8006574 <memmove+0x24>

08006584 <_fstat_r>:
 8006584:	b538      	push	{r3, r4, r5, lr}
 8006586:	4d07      	ldr	r5, [pc, #28]	; (80065a4 <_fstat_r+0x20>)
 8006588:	2300      	movs	r3, #0
 800658a:	4604      	mov	r4, r0
 800658c:	4608      	mov	r0, r1
 800658e:	4611      	mov	r1, r2
 8006590:	602b      	str	r3, [r5, #0]
 8006592:	f7fa faf8 	bl	8000b86 <_fstat>
 8006596:	1c43      	adds	r3, r0, #1
 8006598:	d102      	bne.n	80065a0 <_fstat_r+0x1c>
 800659a:	682b      	ldr	r3, [r5, #0]
 800659c:	b103      	cbz	r3, 80065a0 <_fstat_r+0x1c>
 800659e:	6023      	str	r3, [r4, #0]
 80065a0:	bd38      	pop	{r3, r4, r5, pc}
 80065a2:	bf00      	nop
 80065a4:	2000046c 	.word	0x2000046c

080065a8 <_isatty_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4d06      	ldr	r5, [pc, #24]	; (80065c4 <_isatty_r+0x1c>)
 80065ac:	2300      	movs	r3, #0
 80065ae:	4604      	mov	r4, r0
 80065b0:	4608      	mov	r0, r1
 80065b2:	602b      	str	r3, [r5, #0]
 80065b4:	f7fa faf7 	bl	8000ba6 <_isatty>
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	d102      	bne.n	80065c2 <_isatty_r+0x1a>
 80065bc:	682b      	ldr	r3, [r5, #0]
 80065be:	b103      	cbz	r3, 80065c2 <_isatty_r+0x1a>
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
 80065c4:	2000046c 	.word	0x2000046c

080065c8 <_sbrk_r>:
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	4d06      	ldr	r5, [pc, #24]	; (80065e4 <_sbrk_r+0x1c>)
 80065cc:	2300      	movs	r3, #0
 80065ce:	4604      	mov	r4, r0
 80065d0:	4608      	mov	r0, r1
 80065d2:	602b      	str	r3, [r5, #0]
 80065d4:	f7fa fb00 	bl	8000bd8 <_sbrk>
 80065d8:	1c43      	adds	r3, r0, #1
 80065da:	d102      	bne.n	80065e2 <_sbrk_r+0x1a>
 80065dc:	682b      	ldr	r3, [r5, #0]
 80065de:	b103      	cbz	r3, 80065e2 <_sbrk_r+0x1a>
 80065e0:	6023      	str	r3, [r4, #0]
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
 80065e4:	2000046c 	.word	0x2000046c

080065e8 <memcpy>:
 80065e8:	440a      	add	r2, r1
 80065ea:	4291      	cmp	r1, r2
 80065ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80065f0:	d100      	bne.n	80065f4 <memcpy+0xc>
 80065f2:	4770      	bx	lr
 80065f4:	b510      	push	{r4, lr}
 80065f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065fe:	4291      	cmp	r1, r2
 8006600:	d1f9      	bne.n	80065f6 <memcpy+0xe>
 8006602:	bd10      	pop	{r4, pc}

08006604 <abort>:
 8006604:	b508      	push	{r3, lr}
 8006606:	2006      	movs	r0, #6
 8006608:	f000 f85a 	bl	80066c0 <raise>
 800660c:	2001      	movs	r0, #1
 800660e:	f7fa fa87 	bl	8000b20 <_exit>

08006612 <_realloc_r>:
 8006612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006616:	4680      	mov	r8, r0
 8006618:	4614      	mov	r4, r2
 800661a:	460e      	mov	r6, r1
 800661c:	b921      	cbnz	r1, 8006628 <_realloc_r+0x16>
 800661e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006622:	4611      	mov	r1, r2
 8006624:	f7ff b9ba 	b.w	800599c <_malloc_r>
 8006628:	b92a      	cbnz	r2, 8006636 <_realloc_r+0x24>
 800662a:	f7ff f943 	bl	80058b4 <_free_r>
 800662e:	4625      	mov	r5, r4
 8006630:	4628      	mov	r0, r5
 8006632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006636:	f000 f85f 	bl	80066f8 <_malloc_usable_size_r>
 800663a:	4284      	cmp	r4, r0
 800663c:	4607      	mov	r7, r0
 800663e:	d802      	bhi.n	8006646 <_realloc_r+0x34>
 8006640:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006644:	d812      	bhi.n	800666c <_realloc_r+0x5a>
 8006646:	4621      	mov	r1, r4
 8006648:	4640      	mov	r0, r8
 800664a:	f7ff f9a7 	bl	800599c <_malloc_r>
 800664e:	4605      	mov	r5, r0
 8006650:	2800      	cmp	r0, #0
 8006652:	d0ed      	beq.n	8006630 <_realloc_r+0x1e>
 8006654:	42bc      	cmp	r4, r7
 8006656:	4622      	mov	r2, r4
 8006658:	4631      	mov	r1, r6
 800665a:	bf28      	it	cs
 800665c:	463a      	movcs	r2, r7
 800665e:	f7ff ffc3 	bl	80065e8 <memcpy>
 8006662:	4631      	mov	r1, r6
 8006664:	4640      	mov	r0, r8
 8006666:	f7ff f925 	bl	80058b4 <_free_r>
 800666a:	e7e1      	b.n	8006630 <_realloc_r+0x1e>
 800666c:	4635      	mov	r5, r6
 800666e:	e7df      	b.n	8006630 <_realloc_r+0x1e>

08006670 <_raise_r>:
 8006670:	291f      	cmp	r1, #31
 8006672:	b538      	push	{r3, r4, r5, lr}
 8006674:	4604      	mov	r4, r0
 8006676:	460d      	mov	r5, r1
 8006678:	d904      	bls.n	8006684 <_raise_r+0x14>
 800667a:	2316      	movs	r3, #22
 800667c:	6003      	str	r3, [r0, #0]
 800667e:	f04f 30ff 	mov.w	r0, #4294967295
 8006682:	bd38      	pop	{r3, r4, r5, pc}
 8006684:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006686:	b112      	cbz	r2, 800668e <_raise_r+0x1e>
 8006688:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800668c:	b94b      	cbnz	r3, 80066a2 <_raise_r+0x32>
 800668e:	4620      	mov	r0, r4
 8006690:	f000 f830 	bl	80066f4 <_getpid_r>
 8006694:	462a      	mov	r2, r5
 8006696:	4601      	mov	r1, r0
 8006698:	4620      	mov	r0, r4
 800669a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800669e:	f000 b817 	b.w	80066d0 <_kill_r>
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d00a      	beq.n	80066bc <_raise_r+0x4c>
 80066a6:	1c59      	adds	r1, r3, #1
 80066a8:	d103      	bne.n	80066b2 <_raise_r+0x42>
 80066aa:	2316      	movs	r3, #22
 80066ac:	6003      	str	r3, [r0, #0]
 80066ae:	2001      	movs	r0, #1
 80066b0:	e7e7      	b.n	8006682 <_raise_r+0x12>
 80066b2:	2400      	movs	r4, #0
 80066b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80066b8:	4628      	mov	r0, r5
 80066ba:	4798      	blx	r3
 80066bc:	2000      	movs	r0, #0
 80066be:	e7e0      	b.n	8006682 <_raise_r+0x12>

080066c0 <raise>:
 80066c0:	4b02      	ldr	r3, [pc, #8]	; (80066cc <raise+0xc>)
 80066c2:	4601      	mov	r1, r0
 80066c4:	6818      	ldr	r0, [r3, #0]
 80066c6:	f7ff bfd3 	b.w	8006670 <_raise_r>
 80066ca:	bf00      	nop
 80066cc:	20000128 	.word	0x20000128

080066d0 <_kill_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4d07      	ldr	r5, [pc, #28]	; (80066f0 <_kill_r+0x20>)
 80066d4:	2300      	movs	r3, #0
 80066d6:	4604      	mov	r4, r0
 80066d8:	4608      	mov	r0, r1
 80066da:	4611      	mov	r1, r2
 80066dc:	602b      	str	r3, [r5, #0]
 80066de:	f7fa fa0f 	bl	8000b00 <_kill>
 80066e2:	1c43      	adds	r3, r0, #1
 80066e4:	d102      	bne.n	80066ec <_kill_r+0x1c>
 80066e6:	682b      	ldr	r3, [r5, #0]
 80066e8:	b103      	cbz	r3, 80066ec <_kill_r+0x1c>
 80066ea:	6023      	str	r3, [r4, #0]
 80066ec:	bd38      	pop	{r3, r4, r5, pc}
 80066ee:	bf00      	nop
 80066f0:	2000046c 	.word	0x2000046c

080066f4 <_getpid_r>:
 80066f4:	f7fa b9fc 	b.w	8000af0 <_getpid>

080066f8 <_malloc_usable_size_r>:
 80066f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066fc:	1f18      	subs	r0, r3, #4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bfbc      	itt	lt
 8006702:	580b      	ldrlt	r3, [r1, r0]
 8006704:	18c0      	addlt	r0, r0, r3
 8006706:	4770      	bx	lr

08006708 <_init>:
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670a:	bf00      	nop
 800670c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670e:	bc08      	pop	{r3}
 8006710:	469e      	mov	lr, r3
 8006712:	4770      	bx	lr

08006714 <_fini>:
 8006714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006716:	bf00      	nop
 8006718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671a:	bc08      	pop	{r3}
 800671c:	469e      	mov	lr, r3
 800671e:	4770      	bx	lr
