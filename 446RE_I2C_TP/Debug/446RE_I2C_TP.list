
446RE_I2C_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08004784  08004784  00014784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d8  080048d8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080048d8  080048d8  000148d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048e0  080048e0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e0  080048e0  000148e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080048e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000068  08004950  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08004950  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b960  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c6e  00000000  00000000  0002ba3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  0002d6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000816  00000000  00000000  0002e110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022413  00000000  00000000  0002e926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e584  00000000  00000000  00050d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc4e7  00000000  00000000  0005f2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003254  00000000  00000000  0012b7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0012e9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800476c 	.word	0x0800476c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	0800476c 	.word	0x0800476c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	e00b      	b.n	80005d6 <_write+0x2a>
		HAL_UART_Transmit(&huart2, (uint8_t *) ptr++, 1, HAL_MAX_DELAY);
 80005be:	68b9      	ldr	r1, [r7, #8]
 80005c0:	1c4b      	adds	r3, r1, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
 80005c8:	2201      	movs	r2, #1
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <_write+0x3c>)
 80005cc:	f002 fc25 	bl	8002e1a <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	3301      	adds	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	429a      	cmp	r2, r3
 80005dc:	dbef      	blt.n	80005be <_write+0x12>
	}
	return len;
 80005de:	687b      	ldr	r3, [r7, #4]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000d8 	.word	0x200000d8

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fb1e 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f83c 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f900 	bl	80007fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f8d4 	bl	80007a8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000600:	f000 f8a4 	bl	800074c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("test\r\n");
 8000604:	4814      	ldr	r0, [pc, #80]	; (8000658 <main+0x6c>)
 8000606:	f003 fa49 	bl	8003a9c <puts>
  bmp_reset(&bmp280);
 800060a:	4814      	ldr	r0, [pc, #80]	; (800065c <main+0x70>)
 800060c:	f002 ff7a 	bl	8003504 <bmp_reset>
  printf("reset done\r\n");
 8000610:	4813      	ldr	r0, [pc, #76]	; (8000660 <main+0x74>)
 8000612:	f003 fa43 	bl	8003a9c <puts>
  bmp_id(&bmp280);
 8000616:	4811      	ldr	r0, [pc, #68]	; (800065c <main+0x70>)
 8000618:	f002 ff9a 	bl	8003550 <bmp_id>
  printf("id done\r\n");
 800061c:	4811      	ldr	r0, [pc, #68]	; (8000664 <main+0x78>)
 800061e:	f003 fa3d 	bl	8003a9c <puts>
  bmp_config(&bmp280);
 8000622:	480e      	ldr	r0, [pc, #56]	; (800065c <main+0x70>)
 8000624:	f002 ffce 	bl	80035c4 <bmp_config>
  printf("config done\r\n");
 8000628:	480f      	ldr	r0, [pc, #60]	; (8000668 <main+0x7c>)
 800062a:	f003 fa37 	bl	8003a9c <puts>
  HAL_Delay(500);
 800062e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000632:	f000 fb6f 	bl	8000d14 <HAL_Delay>
  bmp_calib_read(&bmp280);
 8000636:	4809      	ldr	r0, [pc, #36]	; (800065c <main+0x70>)
 8000638:	f003 f800 	bl	800363c <bmp_calib_read>
  printf("calib done\r\n");
 800063c:	480b      	ldr	r0, [pc, #44]	; (800066c <main+0x80>)
 800063e:	f003 fa2d 	bl	8003a9c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  bmp_temp_read(&bmp280);
 8000642:	4806      	ldr	r0, [pc, #24]	; (800065c <main+0x70>)
 8000644:	f003 f834 	bl	80036b0 <bmp_temp_read>
	  bmp_press_read(&bmp280);
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <main+0x70>)
 800064a:	f003 f8c9 	bl	80037e0 <bmp_press_read>
	  HAL_Delay(1000);
 800064e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000652:	f000 fb5f 	bl	8000d14 <HAL_Delay>
	  bmp_temp_read(&bmp280);
 8000656:	e7f4      	b.n	8000642 <main+0x56>
 8000658:	08004784 	.word	0x08004784
 800065c:	2000011c 	.word	0x2000011c
 8000660:	0800478c 	.word	0x0800478c
 8000664:	08004798 	.word	0x08004798
 8000668:	080047a4 	.word	0x080047a4
 800066c:	080047b4 	.word	0x080047b4

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	; 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	2234      	movs	r2, #52	; 0x34
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f003 faec 	bl	8003c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <SystemClock_Config+0xd4>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	4a29      	ldr	r2, [pc, #164]	; (8000744 <SystemClock_Config+0xd4>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	; 0x40
 80006a4:	4b27      	ldr	r3, [pc, #156]	; (8000744 <SystemClock_Config+0xd4>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	4b24      	ldr	r3, [pc, #144]	; (8000748 <SystemClock_Config+0xd8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006bc:	4a22      	ldr	r2, [pc, #136]	; (8000748 <SystemClock_Config+0xd8>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <SystemClock_Config+0xd8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2310      	movs	r3, #16
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006e4:	2310      	movs	r3, #16
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ee:	2304      	movs	r3, #4
 80006f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 f8a0 	bl	8002844 <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800070a:	f000 f8e5 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2302      	movs	r3, #2
 8000714:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	2102      	movs	r1, #2
 800072a:	4618      	mov	r0, r3
 800072c:	f001 fd40 	bl	80021b0 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000736:	f000 f8cf 	bl	80008d8 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	; 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2C1_Init+0x50>)
 8000752:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <MX_I2C1_Init+0x54>)
 8000754:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_I2C1_Init+0x50>)
 8000758:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_I2C1_Init+0x58>)
 800075a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_I2C1_Init+0x50>)
 800076a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800076e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_I2C1_Init+0x50>)
 800078a:	f000 fd7b 	bl	8001284 <HAL_I2C_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000794:	f000 f8a0 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000084 	.word	0x20000084
 80007a0:	40005400 	.word	0x40005400
 80007a4:	000186a0 	.word	0x000186a0

080007a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <MX_USART2_UART_Init+0x50>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007e0:	f002 face 	bl	8002d80 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ea:	f000 f875 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000d8 	.word	0x200000d8
 80007f8:	40004400 	.word	0x40004400

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a2c      	ldr	r2, [pc, #176]	; (80008cc <MX_GPIO_Init+0xd0>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a25      	ldr	r2, [pc, #148]	; (80008cc <MX_GPIO_Init+0xd0>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_GPIO_Init+0xd0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a1e      	ldr	r2, [pc, #120]	; (80008cc <MX_GPIO_Init+0xd0>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_GPIO_Init+0xd0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <MX_GPIO_Init+0xd0>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_GPIO_Init+0xd0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2120      	movs	r1, #32
 8000886:	4812      	ldr	r0, [pc, #72]	; (80008d0 <MX_GPIO_Init+0xd4>)
 8000888:	f000 fce2 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000892:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	480c      	ldr	r0, [pc, #48]	; (80008d4 <MX_GPIO_Init+0xd8>)
 80008a4:	f000 fb40 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a8:	2320      	movs	r3, #32
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_GPIO_Init+0xd4>)
 80008c0:	f000 fb32 	bl	8000f28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40020800 	.word	0x40020800

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <HAL_MspInit+0x4c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000922:	2007      	movs	r0, #7
 8000924:	f000 facc 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800

08000934 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a19      	ldr	r2, [pc, #100]	; (80009b8 <HAL_I2C_MspInit+0x84>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d12c      	bne.n	80009b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <HAL_I2C_MspInit+0x88>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a17      	ldr	r2, [pc, #92]	; (80009bc <HAL_I2C_MspInit+0x88>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <HAL_I2C_MspInit+0x88>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000972:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000978:	2312      	movs	r3, #18
 800097a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000984:	2304      	movs	r3, #4
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	480c      	ldr	r0, [pc, #48]	; (80009c0 <HAL_I2C_MspInit+0x8c>)
 8000990:	f000 faca 	bl	8000f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_I2C_MspInit+0x88>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <HAL_I2C_MspInit+0x88>)
 800099e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_I2C_MspInit+0x88>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40005400 	.word	0x40005400
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020400 	.word	0x40020400

080009c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <HAL_UART_MspInit+0x84>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d12b      	bne.n	8000a3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_UART_MspInit+0x88>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <HAL_UART_MspInit+0x88>)
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_UART_MspInit+0x88>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_UART_MspInit+0x88>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <HAL_UART_MspInit+0x88>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <HAL_UART_MspInit+0x88>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a1e:	230c      	movs	r3, #12
 8000a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a2e:	2307      	movs	r3, #7
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <HAL_UART_MspInit+0x8c>)
 8000a3a:	f000 fa75 	bl	8000f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	; 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40004400 	.word	0x40004400
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020000 	.word	0x40020000

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 f918 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	e00a      	b.n	8000ad0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aba:	f3af 8000 	nop.w
 8000abe:	4601      	mov	r1, r0
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	60ba      	str	r2, [r7, #8]
 8000ac6:	b2ca      	uxtb	r2, r1
 8000ac8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbf0      	blt.n	8000aba <_read+0x12>
  }

  return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_isatty>:

int _isatty(int file)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b7c:	f003 f8bc 	bl	8003cf8 <__errno>
 8000b80:	4603      	mov	r3, r0
 8000b82:	220c      	movs	r2, #12
 8000b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	e009      	b.n	8000ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <_sbrk+0x64>)
 8000b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20020000 	.word	0x20020000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	2000015c 	.word	0x2000015c
 8000bb4:	200002b0 	.word	0x200002b0

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000be2:	490e      	ldr	r1, [pc, #56]	; (8000c1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf8:	4c0b      	ldr	r4, [pc, #44]	; (8000c28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c06:	f7ff ffd7 	bl	8000bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f003 f87b 	bl	8003d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fced 	bl	80005ec <main>
  bx  lr    
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c20:	080048e8 	.word	0x080048e8
  ldr r2, =_sbss
 8000c24:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c28:	200002b0 	.word	0x200002b0

08000c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <HAL_Init+0x40>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_Init+0x40>)
 8000c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_Init+0x40>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f931 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f808 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff fe3e 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023c00 	.word	0x40023c00

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x54>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x58>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f93b 	bl	8000f0e <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00e      	b.n	8000cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d80a      	bhi.n	8000cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f000 f911 	bl	8000ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <HAL_InitTick+0x5c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000160 	.word	0x20000160

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000160 	.word	0x20000160

08000d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff ffee 	bl	8000cfc <HAL_GetTick>
 8000d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2c:	d005      	beq.n	8000d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_Delay+0x44>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d3a:	bf00      	nop
 8000d3c:	f7ff ffde 	bl	8000cfc <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d8f7      	bhi.n	8000d3c <HAL_Delay+0x28>
  {
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff47 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff5c 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff8e 	bl	8000e14 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5d 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffb0 	bl	8000e7c <SysTick_Config>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
 8000f42:	e165      	b.n	8001210 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f44:	2201      	movs	r2, #1
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	f040 8154 	bne.w	800120a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d005      	beq.n	8000f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d130      	bne.n	8000fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2203      	movs	r2, #3
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	091b      	lsrs	r3, r3, #4
 8000fc6:	f003 0201 	and.w	r2, r3, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	d017      	beq.n	8001018 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d123      	bne.n	800106c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	08da      	lsrs	r2, r3, #3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3208      	adds	r2, #8
 800102c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	220f      	movs	r2, #15
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	08da      	lsrs	r2, r3, #3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3208      	adds	r2, #8
 8001066:	69b9      	ldr	r1, [r7, #24]
 8001068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0203 	and.w	r2, r3, #3
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f000 80ae 	beq.w	800120a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b5d      	ldr	r3, [pc, #372]	; (8001228 <HAL_GPIO_Init+0x300>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a5c      	ldr	r2, [pc, #368]	; (8001228 <HAL_GPIO_Init+0x300>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b5a      	ldr	r3, [pc, #360]	; (8001228 <HAL_GPIO_Init+0x300>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ca:	4a58      	ldr	r2, [pc, #352]	; (800122c <HAL_GPIO_Init+0x304>)
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	3302      	adds	r3, #2
 80010d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4f      	ldr	r2, [pc, #316]	; (8001230 <HAL_GPIO_Init+0x308>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d025      	beq.n	8001142 <HAL_GPIO_Init+0x21a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4e      	ldr	r2, [pc, #312]	; (8001234 <HAL_GPIO_Init+0x30c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d01f      	beq.n	800113e <HAL_GPIO_Init+0x216>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4d      	ldr	r2, [pc, #308]	; (8001238 <HAL_GPIO_Init+0x310>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d019      	beq.n	800113a <HAL_GPIO_Init+0x212>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4c      	ldr	r2, [pc, #304]	; (800123c <HAL_GPIO_Init+0x314>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d013      	beq.n	8001136 <HAL_GPIO_Init+0x20e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4b      	ldr	r2, [pc, #300]	; (8001240 <HAL_GPIO_Init+0x318>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d00d      	beq.n	8001132 <HAL_GPIO_Init+0x20a>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4a      	ldr	r2, [pc, #296]	; (8001244 <HAL_GPIO_Init+0x31c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d007      	beq.n	800112e <HAL_GPIO_Init+0x206>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a49      	ldr	r2, [pc, #292]	; (8001248 <HAL_GPIO_Init+0x320>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_GPIO_Init+0x202>
 8001126:	2306      	movs	r3, #6
 8001128:	e00c      	b.n	8001144 <HAL_GPIO_Init+0x21c>
 800112a:	2307      	movs	r3, #7
 800112c:	e00a      	b.n	8001144 <HAL_GPIO_Init+0x21c>
 800112e:	2305      	movs	r3, #5
 8001130:	e008      	b.n	8001144 <HAL_GPIO_Init+0x21c>
 8001132:	2304      	movs	r3, #4
 8001134:	e006      	b.n	8001144 <HAL_GPIO_Init+0x21c>
 8001136:	2303      	movs	r3, #3
 8001138:	e004      	b.n	8001144 <HAL_GPIO_Init+0x21c>
 800113a:	2302      	movs	r3, #2
 800113c:	e002      	b.n	8001144 <HAL_GPIO_Init+0x21c>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <HAL_GPIO_Init+0x21c>
 8001142:	2300      	movs	r3, #0
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	f002 0203 	and.w	r2, r2, #3
 800114a:	0092      	lsls	r2, r2, #2
 800114c:	4093      	lsls	r3, r2
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001154:	4935      	ldr	r1, [pc, #212]	; (800122c <HAL_GPIO_Init+0x304>)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	3302      	adds	r3, #2
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001162:	4b3a      	ldr	r3, [pc, #232]	; (800124c <HAL_GPIO_Init+0x324>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001186:	4a31      	ldr	r2, [pc, #196]	; (800124c <HAL_GPIO_Init+0x324>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800118c:	4b2f      	ldr	r3, [pc, #188]	; (800124c <HAL_GPIO_Init+0x324>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b0:	4a26      	ldr	r2, [pc, #152]	; (800124c <HAL_GPIO_Init+0x324>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011b6:	4b25      	ldr	r3, [pc, #148]	; (800124c <HAL_GPIO_Init+0x324>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011da:	4a1c      	ldr	r2, [pc, #112]	; (800124c <HAL_GPIO_Init+0x324>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <HAL_GPIO_Init+0x324>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001204:	4a11      	ldr	r2, [pc, #68]	; (800124c <HAL_GPIO_Init+0x324>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3301      	adds	r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	2b0f      	cmp	r3, #15
 8001214:	f67f ae96 	bls.w	8000f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	40013800 	.word	0x40013800
 8001230:	40020000 	.word	0x40020000
 8001234:	40020400 	.word	0x40020400
 8001238:	40020800 	.word	0x40020800
 800123c:	40020c00 	.word	0x40020c00
 8001240:	40021000 	.word	0x40021000
 8001244:	40021400 	.word	0x40021400
 8001248:	40021800 	.word	0x40021800
 800124c:	40013c00 	.word	0x40013c00

08001250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
 800125c:	4613      	mov	r3, r2
 800125e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001260:	787b      	ldrb	r3, [r7, #1]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800126c:	e003      	b.n	8001276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	041a      	lsls	r2, r3, #16
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	619a      	str	r2, [r3, #24]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e12b      	b.n	80014ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d106      	bne.n	80012b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fb42 	bl	8000934 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2224      	movs	r2, #36	; 0x24
 80012b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0201 	bic.w	r2, r2, #1
 80012c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012e8:	f001 f854 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 80012ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4a81      	ldr	r2, [pc, #516]	; (80014f8 <HAL_I2C_Init+0x274>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d807      	bhi.n	8001308 <HAL_I2C_Init+0x84>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4a80      	ldr	r2, [pc, #512]	; (80014fc <HAL_I2C_Init+0x278>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	bf94      	ite	ls
 8001300:	2301      	movls	r3, #1
 8001302:	2300      	movhi	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	e006      	b.n	8001316 <HAL_I2C_Init+0x92>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4a7d      	ldr	r2, [pc, #500]	; (8001500 <HAL_I2C_Init+0x27c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	bf94      	ite	ls
 8001310:	2301      	movls	r3, #1
 8001312:	2300      	movhi	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e0e7      	b.n	80014ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4a78      	ldr	r2, [pc, #480]	; (8001504 <HAL_I2C_Init+0x280>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	0c9b      	lsrs	r3, r3, #18
 8001328:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	430a      	orrs	r2, r1
 800133c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4a6a      	ldr	r2, [pc, #424]	; (80014f8 <HAL_I2C_Init+0x274>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d802      	bhi.n	8001358 <HAL_I2C_Init+0xd4>
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	3301      	adds	r3, #1
 8001356:	e009      	b.n	800136c <HAL_I2C_Init+0xe8>
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	4a69      	ldr	r2, [pc, #420]	; (8001508 <HAL_I2C_Init+0x284>)
 8001364:	fba2 2303 	umull	r2, r3, r2, r3
 8001368:	099b      	lsrs	r3, r3, #6
 800136a:	3301      	adds	r3, #1
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	430b      	orrs	r3, r1
 8001372:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800137e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	495c      	ldr	r1, [pc, #368]	; (80014f8 <HAL_I2C_Init+0x274>)
 8001388:	428b      	cmp	r3, r1
 800138a:	d819      	bhi.n	80013c0 <HAL_I2C_Init+0x13c>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	1e59      	subs	r1, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fbb1 f3f3 	udiv	r3, r1, r3
 800139a:	1c59      	adds	r1, r3, #1
 800139c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013a0:	400b      	ands	r3, r1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00a      	beq.n	80013bc <HAL_I2C_Init+0x138>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	1e59      	subs	r1, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013b4:	3301      	adds	r3, #1
 80013b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ba:	e051      	b.n	8001460 <HAL_I2C_Init+0x1dc>
 80013bc:	2304      	movs	r3, #4
 80013be:	e04f      	b.n	8001460 <HAL_I2C_Init+0x1dc>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d111      	bne.n	80013ec <HAL_I2C_Init+0x168>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	1e58      	subs	r0, r3, #1
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6859      	ldr	r1, [r3, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	440b      	add	r3, r1
 80013d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013da:	3301      	adds	r3, #1
 80013dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf0c      	ite	eq
 80013e4:	2301      	moveq	r3, #1
 80013e6:	2300      	movne	r3, #0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	e012      	b.n	8001412 <HAL_I2C_Init+0x18e>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1e58      	subs	r0, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6859      	ldr	r1, [r3, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	0099      	lsls	r1, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001402:	3301      	adds	r3, #1
 8001404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001408:	2b00      	cmp	r3, #0
 800140a:	bf0c      	ite	eq
 800140c:	2301      	moveq	r3, #1
 800140e:	2300      	movne	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_I2C_Init+0x196>
 8001416:	2301      	movs	r3, #1
 8001418:	e022      	b.n	8001460 <HAL_I2C_Init+0x1dc>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10e      	bne.n	8001440 <HAL_I2C_Init+0x1bc>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	1e58      	subs	r0, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6859      	ldr	r1, [r3, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	440b      	add	r3, r1
 8001430:	fbb0 f3f3 	udiv	r3, r0, r3
 8001434:	3301      	adds	r3, #1
 8001436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800143a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800143e:	e00f      	b.n	8001460 <HAL_I2C_Init+0x1dc>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	1e58      	subs	r0, r3, #1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6859      	ldr	r1, [r3, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	0099      	lsls	r1, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	fbb0 f3f3 	udiv	r3, r0, r3
 8001456:	3301      	adds	r3, #1
 8001458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800145c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	6809      	ldr	r1, [r1, #0]
 8001464:	4313      	orrs	r3, r2
 8001466:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69da      	ldr	r2, [r3, #28]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800148e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6911      	ldr	r1, [r2, #16]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68d2      	ldr	r2, [r2, #12]
 800149a:	4311      	orrs	r1, r2
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	430b      	orrs	r3, r1
 80014a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695a      	ldr	r2, [r3, #20]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0201 	orr.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2220      	movs	r2, #32
 80014da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	000186a0 	.word	0x000186a0
 80014fc:	001e847f 	.word	0x001e847f
 8001500:	003d08ff 	.word	0x003d08ff
 8001504:	431bde83 	.word	0x431bde83
 8001508:	10624dd3 	.word	0x10624dd3

0800150c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af02      	add	r7, sp, #8
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	461a      	mov	r2, r3
 8001518:	460b      	mov	r3, r1
 800151a:	817b      	strh	r3, [r7, #10]
 800151c:	4613      	mov	r3, r2
 800151e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001520:	f7ff fbec 	bl	8000cfc <HAL_GetTick>
 8001524:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b20      	cmp	r3, #32
 8001530:	f040 80e0 	bne.w	80016f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2319      	movs	r3, #25
 800153a:	2201      	movs	r2, #1
 800153c:	4970      	ldr	r1, [pc, #448]	; (8001700 <HAL_I2C_Master_Transmit+0x1f4>)
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 fc58 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800154a:	2302      	movs	r3, #2
 800154c:	e0d3      	b.n	80016f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <HAL_I2C_Master_Transmit+0x50>
 8001558:	2302      	movs	r3, #2
 800155a:	e0cc      	b.n	80016f6 <HAL_I2C_Master_Transmit+0x1ea>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b01      	cmp	r3, #1
 8001570:	d007      	beq.n	8001582 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 0201 	orr.w	r2, r2, #1
 8001580:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001590:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2221      	movs	r2, #33	; 0x21
 8001596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2210      	movs	r2, #16
 800159e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	893a      	ldrh	r2, [r7, #8]
 80015b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4a50      	ldr	r2, [pc, #320]	; (8001704 <HAL_I2C_Master_Transmit+0x1f8>)
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015c4:	8979      	ldrh	r1, [r7, #10]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	6a3a      	ldr	r2, [r7, #32]
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 fac2 	bl	8001b54 <I2C_MasterRequestWrite>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e08d      	b.n	80016f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015f0:	e066      	b.n	80016c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	6a39      	ldr	r1, [r7, #32]
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f000 fcd2 	bl	8001fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00d      	beq.n	800161e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	2b04      	cmp	r3, #4
 8001608:	d107      	bne.n	800161a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001618:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e06b      	b.n	80016f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	781a      	ldrb	r2, [r3, #0]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001638:	b29b      	uxth	r3, r3
 800163a:	3b01      	subs	r3, #1
 800163c:	b29a      	uxth	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001646:	3b01      	subs	r3, #1
 8001648:	b29a      	uxth	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b04      	cmp	r3, #4
 800165a:	d11b      	bne.n	8001694 <HAL_I2C_Master_Transmit+0x188>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001660:	2b00      	cmp	r3, #0
 8001662:	d017      	beq.n	8001694 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	781a      	ldrb	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167e:	b29b      	uxth	r3, r3
 8001680:	3b01      	subs	r3, #1
 8001682:	b29a      	uxth	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800168c:	3b01      	subs	r3, #1
 800168e:	b29a      	uxth	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	6a39      	ldr	r1, [r7, #32]
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f000 fcc2 	bl	8002022 <I2C_WaitOnBTFFlagUntilTimeout>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00d      	beq.n	80016c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d107      	bne.n	80016bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e01a      	b.n	80016f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d194      	bne.n	80015f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2220      	movs	r2, #32
 80016dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e000      	b.n	80016f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016f4:	2302      	movs	r3, #2
  }
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	00100002 	.word	0x00100002
 8001704:	ffff0000 	.word	0xffff0000

08001708 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08c      	sub	sp, #48	; 0x30
 800170c:	af02      	add	r7, sp, #8
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	461a      	mov	r2, r3
 8001714:	460b      	mov	r3, r1
 8001716:	817b      	strh	r3, [r7, #10]
 8001718:	4613      	mov	r3, r2
 800171a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff faee 	bl	8000cfc <HAL_GetTick>
 8001720:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b20      	cmp	r3, #32
 800172c:	f040 820b 	bne.w	8001b46 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2319      	movs	r3, #25
 8001736:	2201      	movs	r2, #1
 8001738:	497c      	ldr	r1, [pc, #496]	; (800192c <HAL_I2C_Master_Receive+0x224>)
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 fb5a 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001746:	2302      	movs	r3, #2
 8001748:	e1fe      	b.n	8001b48 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001750:	2b01      	cmp	r3, #1
 8001752:	d101      	bne.n	8001758 <HAL_I2C_Master_Receive+0x50>
 8001754:	2302      	movs	r3, #2
 8001756:	e1f7      	b.n	8001b48 <HAL_I2C_Master_Receive+0x440>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b01      	cmp	r3, #1
 800176c:	d007      	beq.n	800177e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 0201 	orr.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800178c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2222      	movs	r2, #34	; 0x22
 8001792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2210      	movs	r2, #16
 800179a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	893a      	ldrh	r2, [r7, #8]
 80017ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4a5c      	ldr	r2, [pc, #368]	; (8001930 <HAL_I2C_Master_Receive+0x228>)
 80017be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017c0:	8979      	ldrh	r1, [r7, #10]
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 fa46 	bl	8001c58 <I2C_MasterRequestRead>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e1b8      	b.n	8001b48 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d113      	bne.n	8001806 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	623b      	str	r3, [r7, #32]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	623b      	str	r3, [r7, #32]
 80017f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	e18c      	b.n	8001b20 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180a:	2b01      	cmp	r3, #1
 800180c:	d11b      	bne.n	8001846 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800181c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	e16c      	b.n	8001b20 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184a:	2b02      	cmp	r3, #2
 800184c:	d11b      	bne.n	8001886 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800185c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800186c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	e14c      	b.n	8001b20 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001894:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80018ac:	e138      	b.n	8001b20 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	f200 80f1 	bhi.w	8001a9a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d123      	bne.n	8001908 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 fbed 	bl	80020a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e139      	b.n	8001b48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	3b01      	subs	r3, #1
 8001900:	b29a      	uxth	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001906:	e10b      	b.n	8001b20 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190c:	2b02      	cmp	r3, #2
 800190e:	d14e      	bne.n	80019ae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001916:	2200      	movs	r2, #0
 8001918:	4906      	ldr	r1, [pc, #24]	; (8001934 <HAL_I2C_Master_Receive+0x22c>)
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 fa6a 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d008      	beq.n	8001938 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e10e      	b.n	8001b48 <HAL_I2C_Master_Receive+0x440>
 800192a:	bf00      	nop
 800192c:	00100002 	.word	0x00100002
 8001930:	ffff0000 	.word	0xffff0000
 8001934:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001946:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001964:	3b01      	subs	r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001970:	b29b      	uxth	r3, r3
 8001972:	3b01      	subs	r3, #1
 8001974:	b29a      	uxth	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001996:	3b01      	subs	r3, #1
 8001998:	b29a      	uxth	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019ac:	e0b8      	b.n	8001b20 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b4:	2200      	movs	r2, #0
 80019b6:	4966      	ldr	r1, [pc, #408]	; (8001b50 <HAL_I2C_Master_Receive+0x448>)
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 fa1b 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0bf      	b.n	8001b48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691a      	ldr	r2, [r3, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f4:	3b01      	subs	r3, #1
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	3b01      	subs	r3, #1
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a10:	2200      	movs	r2, #0
 8001a12:	494f      	ldr	r1, [pc, #316]	; (8001b50 <HAL_I2C_Master_Receive+0x448>)
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 f9ed 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e091      	b.n	8001b48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a82:	3b01      	subs	r3, #1
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a98:	e042      	b.n	8001b20 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fb00 	bl	80020a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e04c      	b.n	8001b48 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d118      	bne.n	8001b20 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f47f aec2 	bne.w	80018ae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e000      	b.n	8001b48 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001b46:	2302      	movs	r3, #2
  }
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	00010004 	.word	0x00010004

08001b54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	460b      	mov	r3, r1
 8001b62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d006      	beq.n	8001b7e <I2C_MasterRequestWrite+0x2a>
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d003      	beq.n	8001b7e <I2C_MasterRequestWrite+0x2a>
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b7c:	d108      	bne.n	8001b90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	e00b      	b.n	8001ba8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b94:	2b12      	cmp	r3, #18
 8001b96:	d107      	bne.n	8001ba8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ba6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 f91d 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00d      	beq.n	8001bdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bce:	d103      	bne.n	8001bd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e035      	b.n	8001c48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001be4:	d108      	bne.n	8001bf8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001be6:	897b      	ldrh	r3, [r7, #10]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	461a      	mov	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001bf4:	611a      	str	r2, [r3, #16]
 8001bf6:	e01b      	b.n	8001c30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bf8:	897b      	ldrh	r3, [r7, #10]
 8001bfa:	11db      	asrs	r3, r3, #7
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	f003 0306 	and.w	r3, r3, #6
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	f063 030f 	orn	r3, r3, #15
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	490e      	ldr	r1, [pc, #56]	; (8001c50 <I2C_MasterRequestWrite+0xfc>)
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 f943 	bl	8001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e010      	b.n	8001c48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c26:	897b      	ldrh	r3, [r7, #10]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	4907      	ldr	r1, [pc, #28]	; (8001c54 <I2C_MasterRequestWrite+0x100>)
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 f933 	bl	8001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	00010008 	.word	0x00010008
 8001c54:	00010002 	.word	0x00010002

08001c58 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	460b      	mov	r3, r1
 8001c66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c7c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d006      	beq.n	8001c92 <I2C_MasterRequestRead+0x3a>
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d003      	beq.n	8001c92 <I2C_MasterRequestRead+0x3a>
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c90:	d108      	bne.n	8001ca4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e00b      	b.n	8001cbc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	2b11      	cmp	r3, #17
 8001caa:	d107      	bne.n	8001cbc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 f893 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00d      	beq.n	8001cf0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ce2:	d103      	bne.n	8001cec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e079      	b.n	8001de4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cf8:	d108      	bne.n	8001d0c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001cfa:	897b      	ldrh	r3, [r7, #10]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	611a      	str	r2, [r3, #16]
 8001d0a:	e05f      	b.n	8001dcc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d0c:	897b      	ldrh	r3, [r7, #10]
 8001d0e:	11db      	asrs	r3, r3, #7
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	f003 0306 	and.w	r3, r3, #6
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f063 030f 	orn	r3, r3, #15
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4930      	ldr	r1, [pc, #192]	; (8001dec <I2C_MasterRequestRead+0x194>)
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f8b9 	bl	8001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e054      	b.n	8001de4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d3a:	897b      	ldrh	r3, [r7, #10]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	4929      	ldr	r1, [pc, #164]	; (8001df0 <I2C_MasterRequestRead+0x198>)
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f8a9 	bl	8001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e044      	b.n	8001de4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d7e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f831 	bl	8001df4 <I2C_WaitOnFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00d      	beq.n	8001db4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da6:	d103      	bne.n	8001db0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e017      	b.n	8001de4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001db4:	897b      	ldrh	r3, [r7, #10]
 8001db6:	11db      	asrs	r3, r3, #7
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	f003 0306 	and.w	r3, r3, #6
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f063 030e 	orn	r3, r3, #14
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	4907      	ldr	r1, [pc, #28]	; (8001df0 <I2C_MasterRequestRead+0x198>)
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 f865 	bl	8001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	00010008 	.word	0x00010008
 8001df0:	00010002 	.word	0x00010002

08001df4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	4613      	mov	r3, r2
 8001e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e04:	e025      	b.n	8001e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0c:	d021      	beq.n	8001e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e0e:	f7fe ff75 	bl	8000cfc <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d302      	bcc.n	8001e24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d116      	bne.n	8001e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f043 0220 	orr.w	r2, r3, #32
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e023      	b.n	8001e9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	0c1b      	lsrs	r3, r3, #16
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d10d      	bne.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4013      	ands	r3, r2
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bf0c      	ite	eq
 8001e6e:	2301      	moveq	r3, #1
 8001e70:	2300      	movne	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	e00c      	b.n	8001e92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4013      	ands	r3, r2
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf0c      	ite	eq
 8001e8a:	2301      	moveq	r3, #1
 8001e8c:	2300      	movne	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d0b6      	beq.n	8001e06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001eb0:	e051      	b.n	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec0:	d123      	bne.n	8001f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001eda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f043 0204 	orr.w	r2, r3, #4
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e046      	b.n	8001f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f10:	d021      	beq.n	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f12:	f7fe fef3 	bl	8000cfc <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d302      	bcc.n	8001f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d116      	bne.n	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2220      	movs	r2, #32
 8001f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f043 0220 	orr.w	r2, r3, #32
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e020      	b.n	8001f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d10c      	bne.n	8001f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf14      	ite	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	2300      	moveq	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	e00b      	b.n	8001f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	43da      	mvns	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	4013      	ands	r3, r2
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf14      	ite	ne
 8001f8c:	2301      	movne	r3, #1
 8001f8e:	2300      	moveq	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d18d      	bne.n	8001eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fac:	e02d      	b.n	800200a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f8ce 	bl	8002150 <I2C_IsAcknowledgeFailed>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e02d      	b.n	800201a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d021      	beq.n	800200a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc6:	f7fe fe99 	bl	8000cfc <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d302      	bcc.n	8001fdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d116      	bne.n	800200a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f043 0220 	orr.w	r2, r3, #32
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e007      	b.n	800201a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002014:	2b80      	cmp	r3, #128	; 0x80
 8002016:	d1ca      	bne.n	8001fae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800202e:	e02d      	b.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f88d 	bl	8002150 <I2C_IsAcknowledgeFailed>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e02d      	b.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002046:	d021      	beq.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002048:	f7fe fe58 	bl	8000cfc <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	429a      	cmp	r2, r3
 8002056:	d302      	bcc.n	800205e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d116      	bne.n	800208c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e007      	b.n	800209c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b04      	cmp	r3, #4
 8002098:	d1ca      	bne.n	8002030 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020b0:	e042      	b.n	8002138 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2b10      	cmp	r3, #16
 80020be:	d119      	bne.n	80020f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0210 	mvn.w	r2, #16
 80020c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e029      	b.n	8002148 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f4:	f7fe fe02 	bl	8000cfc <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	429a      	cmp	r2, r3
 8002102:	d302      	bcc.n	800210a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d116      	bne.n	8002138 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	f043 0220 	orr.w	r2, r3, #32
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e007      	b.n	8002148 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002142:	2b40      	cmp	r3, #64	; 0x40
 8002144:	d1b5      	bne.n	80020b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002166:	d11b      	bne.n	80021a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002170:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f043 0204 	orr.w	r2, r3, #4
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0cc      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021c4:	4b68      	ldr	r3, [pc, #416]	; (8002368 <HAL_RCC_ClockConfig+0x1b8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d90c      	bls.n	80021ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	4b65      	ldr	r3, [pc, #404]	; (8002368 <HAL_RCC_ClockConfig+0x1b8>)
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021da:	4b63      	ldr	r3, [pc, #396]	; (8002368 <HAL_RCC_ClockConfig+0x1b8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0b8      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d020      	beq.n	800223a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002204:	4b59      	ldr	r3, [pc, #356]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	4a58      	ldr	r2, [pc, #352]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800220e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800221c:	4b53      	ldr	r3, [pc, #332]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4a52      	ldr	r2, [pc, #328]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002228:	4b50      	ldr	r3, [pc, #320]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	494d      	ldr	r1, [pc, #308]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	4313      	orrs	r3, r2
 8002238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d044      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d107      	bne.n	800225e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	4b47      	ldr	r3, [pc, #284]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d119      	bne.n	800228e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e07f      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d003      	beq.n	800226e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800226a:	2b03      	cmp	r3, #3
 800226c:	d107      	bne.n	800227e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226e:	4b3f      	ldr	r3, [pc, #252]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e06f      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227e:	4b3b      	ldr	r3, [pc, #236]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e067      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800228e:	4b37      	ldr	r3, [pc, #220]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f023 0203 	bic.w	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	4934      	ldr	r1, [pc, #208]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	4313      	orrs	r3, r2
 800229e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a0:	f7fe fd2c 	bl	8000cfc <HAL_GetTick>
 80022a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a6:	e00a      	b.n	80022be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a8:	f7fe fd28 	bl	8000cfc <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e04f      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	4b2b      	ldr	r3, [pc, #172]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 020c 	and.w	r2, r3, #12
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d1eb      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d0:	4b25      	ldr	r3, [pc, #148]	; (8002368 <HAL_RCC_ClockConfig+0x1b8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d20c      	bcs.n	80022f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b22      	ldr	r3, [pc, #136]	; (8002368 <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_RCC_ClockConfig+0x1b8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e032      	b.n	800235e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002304:	4b19      	ldr	r3, [pc, #100]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4916      	ldr	r1, [pc, #88]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	4313      	orrs	r3, r2
 8002314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d009      	beq.n	8002336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002322:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	490e      	ldr	r1, [pc, #56]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002336:	f000 f855 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 800233a:	4602      	mov	r2, r0
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	490a      	ldr	r1, [pc, #40]	; (8002370 <HAL_RCC_ClockConfig+0x1c0>)
 8002348:	5ccb      	ldrb	r3, [r1, r3]
 800234a:	fa22 f303 	lsr.w	r3, r2, r3
 800234e:	4a09      	ldr	r2, [pc, #36]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fc8c 	bl	8000c74 <HAL_InitTick>

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40023c00 	.word	0x40023c00
 800236c:	40023800 	.word	0x40023800
 8002370:	0800488c 	.word	0x0800488c
 8002374:	20000000 	.word	0x20000000
 8002378:	20000004 	.word	0x20000004

0800237c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <HAL_RCC_GetHCLKFreq+0x14>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000000 	.word	0x20000000

08002394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002398:	f7ff fff0 	bl	800237c <HAL_RCC_GetHCLKFreq>
 800239c:	4602      	mov	r2, r0
 800239e:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	0a9b      	lsrs	r3, r3, #10
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	4903      	ldr	r1, [pc, #12]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023aa:	5ccb      	ldrb	r3, [r1, r3]
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40023800 	.word	0x40023800
 80023b8:	0800489c 	.word	0x0800489c

080023bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023c0:	f7ff ffdc 	bl	800237c <HAL_RCC_GetHCLKFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	0b5b      	lsrs	r3, r3, #13
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	4903      	ldr	r1, [pc, #12]	; (80023e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d8:	4618      	mov	r0, r3
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40023800 	.word	0x40023800
 80023e0:	0800489c 	.word	0x0800489c

080023e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e8:	b0ae      	sub	sp, #184	; 0xb8
 80023ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800240a:	4bcb      	ldr	r3, [pc, #812]	; (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b0c      	cmp	r3, #12
 8002414:	f200 8206 	bhi.w	8002824 <HAL_RCC_GetSysClockFreq+0x440>
 8002418:	a201      	add	r2, pc, #4	; (adr r2, 8002420 <HAL_RCC_GetSysClockFreq+0x3c>)
 800241a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241e:	bf00      	nop
 8002420:	08002455 	.word	0x08002455
 8002424:	08002825 	.word	0x08002825
 8002428:	08002825 	.word	0x08002825
 800242c:	08002825 	.word	0x08002825
 8002430:	0800245d 	.word	0x0800245d
 8002434:	08002825 	.word	0x08002825
 8002438:	08002825 	.word	0x08002825
 800243c:	08002825 	.word	0x08002825
 8002440:	08002465 	.word	0x08002465
 8002444:	08002825 	.word	0x08002825
 8002448:	08002825 	.word	0x08002825
 800244c:	08002825 	.word	0x08002825
 8002450:	08002655 	.word	0x08002655
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002454:	4bb9      	ldr	r3, [pc, #740]	; (800273c <HAL_RCC_GetSysClockFreq+0x358>)
 8002456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800245a:	e1e7      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800245c:	4bb8      	ldr	r3, [pc, #736]	; (8002740 <HAL_RCC_GetSysClockFreq+0x35c>)
 800245e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002462:	e1e3      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002464:	4bb4      	ldr	r3, [pc, #720]	; (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800246c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002470:	4bb1      	ldr	r3, [pc, #708]	; (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d071      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247c:	4bae      	ldr	r3, [pc, #696]	; (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	2200      	movs	r2, #0
 8002484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002488:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800248c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002494:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002498:	2300      	movs	r3, #0
 800249a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800249e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80024a2:	4622      	mov	r2, r4
 80024a4:	462b      	mov	r3, r5
 80024a6:	f04f 0000 	mov.w	r0, #0
 80024aa:	f04f 0100 	mov.w	r1, #0
 80024ae:	0159      	lsls	r1, r3, #5
 80024b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024b4:	0150      	lsls	r0, r2, #5
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4621      	mov	r1, r4
 80024bc:	1a51      	subs	r1, r2, r1
 80024be:	6439      	str	r1, [r7, #64]	; 0x40
 80024c0:	4629      	mov	r1, r5
 80024c2:	eb63 0301 	sbc.w	r3, r3, r1
 80024c6:	647b      	str	r3, [r7, #68]	; 0x44
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80024d4:	4649      	mov	r1, r9
 80024d6:	018b      	lsls	r3, r1, #6
 80024d8:	4641      	mov	r1, r8
 80024da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024de:	4641      	mov	r1, r8
 80024e0:	018a      	lsls	r2, r1, #6
 80024e2:	4641      	mov	r1, r8
 80024e4:	1a51      	subs	r1, r2, r1
 80024e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80024e8:	4649      	mov	r1, r9
 80024ea:	eb63 0301 	sbc.w	r3, r3, r1
 80024ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80024fc:	4649      	mov	r1, r9
 80024fe:	00cb      	lsls	r3, r1, #3
 8002500:	4641      	mov	r1, r8
 8002502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002506:	4641      	mov	r1, r8
 8002508:	00ca      	lsls	r2, r1, #3
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	4603      	mov	r3, r0
 8002510:	4622      	mov	r2, r4
 8002512:	189b      	adds	r3, r3, r2
 8002514:	633b      	str	r3, [r7, #48]	; 0x30
 8002516:	462b      	mov	r3, r5
 8002518:	460a      	mov	r2, r1
 800251a:	eb42 0303 	adc.w	r3, r2, r3
 800251e:	637b      	str	r3, [r7, #52]	; 0x34
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800252c:	4629      	mov	r1, r5
 800252e:	024b      	lsls	r3, r1, #9
 8002530:	4621      	mov	r1, r4
 8002532:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002536:	4621      	mov	r1, r4
 8002538:	024a      	lsls	r2, r1, #9
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
 800253e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002542:	2200      	movs	r2, #0
 8002544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002548:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800254c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002550:	f7fd feae 	bl	80002b0 <__aeabi_uldivmod>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4613      	mov	r3, r2
 800255a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800255e:	e067      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002560:	4b75      	ldr	r3, [pc, #468]	; (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	099b      	lsrs	r3, r3, #6
 8002566:	2200      	movs	r2, #0
 8002568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800256c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002570:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002578:	67bb      	str	r3, [r7, #120]	; 0x78
 800257a:	2300      	movs	r3, #0
 800257c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800257e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002582:	4622      	mov	r2, r4
 8002584:	462b      	mov	r3, r5
 8002586:	f04f 0000 	mov.w	r0, #0
 800258a:	f04f 0100 	mov.w	r1, #0
 800258e:	0159      	lsls	r1, r3, #5
 8002590:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002594:	0150      	lsls	r0, r2, #5
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4621      	mov	r1, r4
 800259c:	1a51      	subs	r1, r2, r1
 800259e:	62b9      	str	r1, [r7, #40]	; 0x28
 80025a0:	4629      	mov	r1, r5
 80025a2:	eb63 0301 	sbc.w	r3, r3, r1
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80025b4:	4649      	mov	r1, r9
 80025b6:	018b      	lsls	r3, r1, #6
 80025b8:	4641      	mov	r1, r8
 80025ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025be:	4641      	mov	r1, r8
 80025c0:	018a      	lsls	r2, r1, #6
 80025c2:	4641      	mov	r1, r8
 80025c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80025c8:	4649      	mov	r1, r9
 80025ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025e2:	4692      	mov	sl, r2
 80025e4:	469b      	mov	fp, r3
 80025e6:	4623      	mov	r3, r4
 80025e8:	eb1a 0303 	adds.w	r3, sl, r3
 80025ec:	623b      	str	r3, [r7, #32]
 80025ee:	462b      	mov	r3, r5
 80025f0:	eb4b 0303 	adc.w	r3, fp, r3
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002602:	4629      	mov	r1, r5
 8002604:	028b      	lsls	r3, r1, #10
 8002606:	4621      	mov	r1, r4
 8002608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800260c:	4621      	mov	r1, r4
 800260e:	028a      	lsls	r2, r1, #10
 8002610:	4610      	mov	r0, r2
 8002612:	4619      	mov	r1, r3
 8002614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002618:	2200      	movs	r2, #0
 800261a:	673b      	str	r3, [r7, #112]	; 0x70
 800261c:	677a      	str	r2, [r7, #116]	; 0x74
 800261e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002622:	f7fd fe45 	bl	80002b0 <__aeabi_uldivmod>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4613      	mov	r3, r2
 800262c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002630:	4b41      	ldr	r3, [pc, #260]	; (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	3301      	adds	r3, #1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002642:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800264a:	fbb2 f3f3 	udiv	r3, r2, r3
 800264e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002652:	e0eb      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002654:	4b38      	ldr	r3, [pc, #224]	; (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800265c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002660:	4b35      	ldr	r3, [pc, #212]	; (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d06b      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266c:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	099b      	lsrs	r3, r3, #6
 8002672:	2200      	movs	r2, #0
 8002674:	66bb      	str	r3, [r7, #104]	; 0x68
 8002676:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002678:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800267a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800267e:	663b      	str	r3, [r7, #96]	; 0x60
 8002680:	2300      	movs	r3, #0
 8002682:	667b      	str	r3, [r7, #100]	; 0x64
 8002684:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002688:	4622      	mov	r2, r4
 800268a:	462b      	mov	r3, r5
 800268c:	f04f 0000 	mov.w	r0, #0
 8002690:	f04f 0100 	mov.w	r1, #0
 8002694:	0159      	lsls	r1, r3, #5
 8002696:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800269a:	0150      	lsls	r0, r2, #5
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4621      	mov	r1, r4
 80026a2:	1a51      	subs	r1, r2, r1
 80026a4:	61b9      	str	r1, [r7, #24]
 80026a6:	4629      	mov	r1, r5
 80026a8:	eb63 0301 	sbc.w	r3, r3, r1
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026ba:	4659      	mov	r1, fp
 80026bc:	018b      	lsls	r3, r1, #6
 80026be:	4651      	mov	r1, sl
 80026c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026c4:	4651      	mov	r1, sl
 80026c6:	018a      	lsls	r2, r1, #6
 80026c8:	4651      	mov	r1, sl
 80026ca:	ebb2 0801 	subs.w	r8, r2, r1
 80026ce:	4659      	mov	r1, fp
 80026d0:	eb63 0901 	sbc.w	r9, r3, r1
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026e8:	4690      	mov	r8, r2
 80026ea:	4699      	mov	r9, r3
 80026ec:	4623      	mov	r3, r4
 80026ee:	eb18 0303 	adds.w	r3, r8, r3
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	462b      	mov	r3, r5
 80026f6:	eb49 0303 	adc.w	r3, r9, r3
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002708:	4629      	mov	r1, r5
 800270a:	024b      	lsls	r3, r1, #9
 800270c:	4621      	mov	r1, r4
 800270e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002712:	4621      	mov	r1, r4
 8002714:	024a      	lsls	r2, r1, #9
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800271e:	2200      	movs	r2, #0
 8002720:	65bb      	str	r3, [r7, #88]	; 0x58
 8002722:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002724:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002728:	f7fd fdc2 	bl	80002b0 <__aeabi_uldivmod>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4613      	mov	r3, r2
 8002732:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002736:	e065      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x420>
 8002738:	40023800 	.word	0x40023800
 800273c:	00f42400 	.word	0x00f42400
 8002740:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002744:	4b3d      	ldr	r3, [pc, #244]	; (800283c <HAL_RCC_GetSysClockFreq+0x458>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	099b      	lsrs	r3, r3, #6
 800274a:	2200      	movs	r2, #0
 800274c:	4618      	mov	r0, r3
 800274e:	4611      	mov	r1, r2
 8002750:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002754:	653b      	str	r3, [r7, #80]	; 0x50
 8002756:	2300      	movs	r3, #0
 8002758:	657b      	str	r3, [r7, #84]	; 0x54
 800275a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800275e:	4642      	mov	r2, r8
 8002760:	464b      	mov	r3, r9
 8002762:	f04f 0000 	mov.w	r0, #0
 8002766:	f04f 0100 	mov.w	r1, #0
 800276a:	0159      	lsls	r1, r3, #5
 800276c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002770:	0150      	lsls	r0, r2, #5
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4641      	mov	r1, r8
 8002778:	1a51      	subs	r1, r2, r1
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	4649      	mov	r1, r9
 800277e:	eb63 0301 	sbc.w	r3, r3, r1
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002790:	4659      	mov	r1, fp
 8002792:	018b      	lsls	r3, r1, #6
 8002794:	4651      	mov	r1, sl
 8002796:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800279a:	4651      	mov	r1, sl
 800279c:	018a      	lsls	r2, r1, #6
 800279e:	4651      	mov	r1, sl
 80027a0:	1a54      	subs	r4, r2, r1
 80027a2:	4659      	mov	r1, fp
 80027a4:	eb63 0501 	sbc.w	r5, r3, r1
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	00eb      	lsls	r3, r5, #3
 80027b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027b6:	00e2      	lsls	r2, r4, #3
 80027b8:	4614      	mov	r4, r2
 80027ba:	461d      	mov	r5, r3
 80027bc:	4643      	mov	r3, r8
 80027be:	18e3      	adds	r3, r4, r3
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	464b      	mov	r3, r9
 80027c4:	eb45 0303 	adc.w	r3, r5, r3
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027d6:	4629      	mov	r1, r5
 80027d8:	028b      	lsls	r3, r1, #10
 80027da:	4621      	mov	r1, r4
 80027dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027e0:	4621      	mov	r1, r4
 80027e2:	028a      	lsls	r2, r1, #10
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027ec:	2200      	movs	r2, #0
 80027ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80027f0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80027f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027f6:	f7fd fd5b 	bl	80002b0 <__aeabi_uldivmod>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4613      	mov	r3, r2
 8002800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002804:	4b0d      	ldr	r3, [pc, #52]	; (800283c <HAL_RCC_GetSysClockFreq+0x458>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	0f1b      	lsrs	r3, r3, #28
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002816:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002822:	e003      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800282a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002830:	4618      	mov	r0, r3
 8002832:	37b8      	adds	r7, #184	; 0xb8
 8002834:	46bd      	mov	sp, r7
 8002836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800
 8002840:	00f42400 	.word	0x00f42400

08002844 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e28d      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8083 	beq.w	800296a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002864:	4b94      	ldr	r3, [pc, #592]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b04      	cmp	r3, #4
 800286e:	d019      	beq.n	80028a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002870:	4b91      	ldr	r3, [pc, #580]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002878:	2b08      	cmp	r3, #8
 800287a:	d106      	bne.n	800288a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800287c:	4b8e      	ldr	r3, [pc, #568]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002888:	d00c      	beq.n	80028a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800288a:	4b8b      	ldr	r3, [pc, #556]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002892:	2b0c      	cmp	r3, #12
 8002894:	d112      	bne.n	80028bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002896:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028a2:	d10b      	bne.n	80028bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	4b84      	ldr	r3, [pc, #528]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d05b      	beq.n	8002968 <HAL_RCC_OscConfig+0x124>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d157      	bne.n	8002968 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e25a      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c4:	d106      	bne.n	80028d4 <HAL_RCC_OscConfig+0x90>
 80028c6:	4b7c      	ldr	r3, [pc, #496]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a7b      	ldr	r2, [pc, #492]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e01d      	b.n	8002910 <HAL_RCC_OscConfig+0xcc>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0xb4>
 80028de:	4b76      	ldr	r3, [pc, #472]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a75      	ldr	r2, [pc, #468]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	4b73      	ldr	r3, [pc, #460]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a72      	ldr	r2, [pc, #456]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	e00b      	b.n	8002910 <HAL_RCC_OscConfig+0xcc>
 80028f8:	4b6f      	ldr	r3, [pc, #444]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a6e      	ldr	r2, [pc, #440]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b6c      	ldr	r3, [pc, #432]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a6b      	ldr	r2, [pc, #428]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 800290a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe f9f0 	bl	8000cfc <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002920:	f7fe f9ec 	bl	8000cfc <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e21f      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	4b61      	ldr	r3, [pc, #388]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0xdc>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fe f9dc 	bl	8000cfc <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002948:	f7fe f9d8 	bl	8000cfc <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	; 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e20b      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	4b57      	ldr	r3, [pc, #348]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x104>
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d06f      	beq.n	8002a56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002976:	4b50      	ldr	r3, [pc, #320]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b00      	cmp	r3, #0
 8002980:	d017      	beq.n	80029b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002982:	4b4d      	ldr	r3, [pc, #308]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800298a:	2b08      	cmp	r3, #8
 800298c:	d105      	bne.n	800299a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800298e:	4b4a      	ldr	r3, [pc, #296]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d11c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a6:	4b44      	ldr	r3, [pc, #272]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d116      	bne.n	80029e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <HAL_RCC_OscConfig+0x186>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e1d3      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ca:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4937      	ldr	r1, [pc, #220]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029de:	e03a      	b.n	8002a56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d020      	beq.n	8002a2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e8:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_RCC_OscConfig+0x278>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ee:	f7fe f985 	bl	8000cfc <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f6:	f7fe f981 	bl	8000cfc <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e1b4      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a08:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a14:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4925      	ldr	r1, [pc, #148]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]
 8002a28:	e015      	b.n	8002a56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_RCC_OscConfig+0x278>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe f964 	bl	8000cfc <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a38:	f7fe f960 	bl	8000cfc <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e193      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d036      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d016      	beq.n	8002a98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <HAL_RCC_OscConfig+0x27c>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a70:	f7fe f944 	bl	8000cfc <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a78:	f7fe f940 	bl	8000cfc <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e173      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x234>
 8002a96:	e01b      	b.n	8002ad0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCC_OscConfig+0x27c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9e:	f7fe f92d 	bl	8000cfc <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa4:	e00e      	b.n	8002ac4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa6:	f7fe f929 	bl	8000cfc <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d907      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e15c      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	42470000 	.word	0x42470000
 8002ac0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	4b8a      	ldr	r3, [pc, #552]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1ea      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8097 	beq.w	8002c0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae2:	4b83      	ldr	r3, [pc, #524]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10f      	bne.n	8002b0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	4b7f      	ldr	r3, [pc, #508]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4a7e      	ldr	r2, [pc, #504]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afc:	6413      	str	r3, [r2, #64]	; 0x40
 8002afe:	4b7c      	ldr	r3, [pc, #496]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0e:	4b79      	ldr	r3, [pc, #484]	; (8002cf4 <HAL_RCC_OscConfig+0x4b0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d118      	bne.n	8002b4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1a:	4b76      	ldr	r3, [pc, #472]	; (8002cf4 <HAL_RCC_OscConfig+0x4b0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a75      	ldr	r2, [pc, #468]	; (8002cf4 <HAL_RCC_OscConfig+0x4b0>)
 8002b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b26:	f7fe f8e9 	bl	8000cfc <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2e:	f7fe f8e5 	bl	8000cfc <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e118      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b40:	4b6c      	ldr	r3, [pc, #432]	; (8002cf4 <HAL_RCC_OscConfig+0x4b0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d106      	bne.n	8002b62 <HAL_RCC_OscConfig+0x31e>
 8002b54:	4b66      	ldr	r3, [pc, #408]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	4a65      	ldr	r2, [pc, #404]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b60:	e01c      	b.n	8002b9c <HAL_RCC_OscConfig+0x358>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b05      	cmp	r3, #5
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x340>
 8002b6a:	4b61      	ldr	r3, [pc, #388]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	4a60      	ldr	r2, [pc, #384]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	6713      	str	r3, [r2, #112]	; 0x70
 8002b76:	4b5e      	ldr	r3, [pc, #376]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	4a5d      	ldr	r2, [pc, #372]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6713      	str	r3, [r2, #112]	; 0x70
 8002b82:	e00b      	b.n	8002b9c <HAL_RCC_OscConfig+0x358>
 8002b84:	4b5a      	ldr	r3, [pc, #360]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a59      	ldr	r2, [pc, #356]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	4b57      	ldr	r3, [pc, #348]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4a56      	ldr	r2, [pc, #344]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b96:	f023 0304 	bic.w	r3, r3, #4
 8002b9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d015      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fe f8aa 	bl	8000cfc <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bac:	f7fe f8a6 	bl	8000cfc <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0d7      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc2:	4b4b      	ldr	r3, [pc, #300]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0ee      	beq.n	8002bac <HAL_RCC_OscConfig+0x368>
 8002bce:	e014      	b.n	8002bfa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd0:	f7fe f894 	bl	8000cfc <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd8:	f7fe f890 	bl	8000cfc <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e0c1      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bee:	4b40      	ldr	r3, [pc, #256]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ee      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c00:	4b3b      	ldr	r3, [pc, #236]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	4a3a      	ldr	r2, [pc, #232]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80ad 	beq.w	8002d70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c16:	4b36      	ldr	r3, [pc, #216]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d060      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d145      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2a:	4b33      	ldr	r3, [pc, #204]	; (8002cf8 <HAL_RCC_OscConfig+0x4b4>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7fe f864 	bl	8000cfc <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe f860 	bl	8000cfc <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e093      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	4b29      	ldr	r3, [pc, #164]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	019b      	lsls	r3, r3, #6
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	085b      	lsrs	r3, r3, #1
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	061b      	lsls	r3, r3, #24
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	071b      	lsls	r3, r3, #28
 8002c82:	491b      	ldr	r1, [pc, #108]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c88:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <HAL_RCC_OscConfig+0x4b4>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7fe f835 	bl	8000cfc <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c96:	f7fe f831 	bl	8000cfc <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e064      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca8:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x452>
 8002cb4:	e05c      	b.n	8002d70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <HAL_RCC_OscConfig+0x4b4>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe f81e 	bl	8000cfc <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7fe f81a 	bl	8000cfc <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e04d      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x480>
 8002ce2:	e045      	b.n	8002d70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d107      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e040      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40007000 	.word	0x40007000
 8002cf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cfc:	4b1f      	ldr	r3, [pc, #124]	; (8002d7c <HAL_RCC_OscConfig+0x538>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d030      	beq.n	8002d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d129      	bne.n	8002d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d122      	bne.n	8002d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d119      	bne.n	8002d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	3b01      	subs	r3, #1
 8002d46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d10f      	bne.n	8002d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800

08002d80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e03f      	b.n	8002e12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fd fe0c 	bl	80009c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2224      	movs	r2, #36	; 0x24
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f929 	bl	800301c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b08a      	sub	sp, #40	; 0x28
 8002e1e:	af02      	add	r7, sp, #8
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	603b      	str	r3, [r7, #0]
 8002e26:	4613      	mov	r3, r2
 8002e28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b20      	cmp	r3, #32
 8002e38:	d17c      	bne.n	8002f34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <HAL_UART_Transmit+0x2c>
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e075      	b.n	8002f36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_UART_Transmit+0x3e>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e06e      	b.n	8002f36 <HAL_UART_Transmit+0x11c>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2221      	movs	r2, #33	; 0x21
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e6e:	f7fd ff45 	bl	8000cfc <HAL_GetTick>
 8002e72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	88fa      	ldrh	r2, [r7, #6]
 8002e78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	88fa      	ldrh	r2, [r7, #6]
 8002e7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e88:	d108      	bne.n	8002e9c <HAL_UART_Transmit+0x82>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d104      	bne.n	8002e9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	e003      	b.n	8002ea4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002eac:	e02a      	b.n	8002f04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2180      	movs	r1, #128	; 0x80
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f840 	bl	8002f3e <UART_WaitOnFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e036      	b.n	8002f36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10b      	bne.n	8002ee6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002edc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	e007      	b.n	8002ef6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	781a      	ldrb	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1cf      	bne.n	8002eae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2200      	movs	r2, #0
 8002f16:	2140      	movs	r1, #64	; 0x40
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f810 	bl	8002f3e <UART_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e006      	b.n	8002f36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e000      	b.n	8002f36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
  }
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b090      	sub	sp, #64	; 0x40
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f4e:	e050      	b.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f56:	d04c      	beq.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f5e:	f7fd fecd 	bl	8000cfc <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d241      	bcs.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	330c      	adds	r3, #12
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	e853 3f00 	ldrex	r3, [r3]
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	330c      	adds	r3, #12
 8002f8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f8e:	637a      	str	r2, [r7, #52]	; 0x34
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e5      	bne.n	8002f6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3314      	adds	r3, #20
 8002fa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	e853 3f00 	ldrex	r3, [r3]
 8002fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3314      	adds	r3, #20
 8002fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fc2:	623a      	str	r2, [r7, #32]
 8002fc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc6:	69f9      	ldr	r1, [r7, #28]
 8002fc8:	6a3a      	ldr	r2, [r7, #32]
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1e5      	bne.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e00f      	b.n	8003012 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	bf0c      	ite	eq
 8003002:	2301      	moveq	r3, #1
 8003004:	2300      	movne	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	429a      	cmp	r2, r3
 800300e:	d09f      	beq.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3740      	adds	r7, #64	; 0x40
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800301c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003020:	b0c0      	sub	sp, #256	; 0x100
 8003022:	af00      	add	r7, sp, #0
 8003024:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003038:	68d9      	ldr	r1, [r3, #12]
 800303a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	ea40 0301 	orr.w	r3, r0, r1
 8003044:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	431a      	orrs	r2, r3
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	431a      	orrs	r2, r3
 800305c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003074:	f021 010c 	bic.w	r1, r1, #12
 8003078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003082:	430b      	orrs	r3, r1
 8003084:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003096:	6999      	ldr	r1, [r3, #24]
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	ea40 0301 	orr.w	r3, r0, r1
 80030a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	4b8f      	ldr	r3, [pc, #572]	; (80032e8 <UART_SetConfig+0x2cc>)
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d005      	beq.n	80030bc <UART_SetConfig+0xa0>
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b8d      	ldr	r3, [pc, #564]	; (80032ec <UART_SetConfig+0x2d0>)
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d104      	bne.n	80030c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030bc:	f7ff f97e 	bl	80023bc <HAL_RCC_GetPCLK2Freq>
 80030c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030c4:	e003      	b.n	80030ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030c6:	f7ff f965 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 80030ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d8:	f040 810c 	bne.w	80032f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030e0:	2200      	movs	r2, #0
 80030e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80030e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80030ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030ee:	4622      	mov	r2, r4
 80030f0:	462b      	mov	r3, r5
 80030f2:	1891      	adds	r1, r2, r2
 80030f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80030f6:	415b      	adcs	r3, r3
 80030f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030fe:	4621      	mov	r1, r4
 8003100:	eb12 0801 	adds.w	r8, r2, r1
 8003104:	4629      	mov	r1, r5
 8003106:	eb43 0901 	adc.w	r9, r3, r1
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800311a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800311e:	4690      	mov	r8, r2
 8003120:	4699      	mov	r9, r3
 8003122:	4623      	mov	r3, r4
 8003124:	eb18 0303 	adds.w	r3, r8, r3
 8003128:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800312c:	462b      	mov	r3, r5
 800312e:	eb49 0303 	adc.w	r3, r9, r3
 8003132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003142:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003146:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800314a:	460b      	mov	r3, r1
 800314c:	18db      	adds	r3, r3, r3
 800314e:	653b      	str	r3, [r7, #80]	; 0x50
 8003150:	4613      	mov	r3, r2
 8003152:	eb42 0303 	adc.w	r3, r2, r3
 8003156:	657b      	str	r3, [r7, #84]	; 0x54
 8003158:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800315c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003160:	f7fd f8a6 	bl	80002b0 <__aeabi_uldivmod>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4b61      	ldr	r3, [pc, #388]	; (80032f0 <UART_SetConfig+0x2d4>)
 800316a:	fba3 2302 	umull	r2, r3, r3, r2
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	011c      	lsls	r4, r3, #4
 8003172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003176:	2200      	movs	r2, #0
 8003178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800317c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003180:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003184:	4642      	mov	r2, r8
 8003186:	464b      	mov	r3, r9
 8003188:	1891      	adds	r1, r2, r2
 800318a:	64b9      	str	r1, [r7, #72]	; 0x48
 800318c:	415b      	adcs	r3, r3
 800318e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003190:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003194:	4641      	mov	r1, r8
 8003196:	eb12 0a01 	adds.w	sl, r2, r1
 800319a:	4649      	mov	r1, r9
 800319c:	eb43 0b01 	adc.w	fp, r3, r1
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031b4:	4692      	mov	sl, r2
 80031b6:	469b      	mov	fp, r3
 80031b8:	4643      	mov	r3, r8
 80031ba:	eb1a 0303 	adds.w	r3, sl, r3
 80031be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031c2:	464b      	mov	r3, r9
 80031c4:	eb4b 0303 	adc.w	r3, fp, r3
 80031c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80031dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80031e0:	460b      	mov	r3, r1
 80031e2:	18db      	adds	r3, r3, r3
 80031e4:	643b      	str	r3, [r7, #64]	; 0x40
 80031e6:	4613      	mov	r3, r2
 80031e8:	eb42 0303 	adc.w	r3, r2, r3
 80031ec:	647b      	str	r3, [r7, #68]	; 0x44
 80031ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031f6:	f7fd f85b 	bl	80002b0 <__aeabi_uldivmod>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4611      	mov	r1, r2
 8003200:	4b3b      	ldr	r3, [pc, #236]	; (80032f0 <UART_SetConfig+0x2d4>)
 8003202:	fba3 2301 	umull	r2, r3, r3, r1
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	2264      	movs	r2, #100	; 0x64
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	1acb      	subs	r3, r1, r3
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003216:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <UART_SetConfig+0x2d4>)
 8003218:	fba3 2302 	umull	r2, r3, r3, r2
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003224:	441c      	add	r4, r3
 8003226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800322a:	2200      	movs	r2, #0
 800322c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003230:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003234:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003238:	4642      	mov	r2, r8
 800323a:	464b      	mov	r3, r9
 800323c:	1891      	adds	r1, r2, r2
 800323e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003240:	415b      	adcs	r3, r3
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003244:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003248:	4641      	mov	r1, r8
 800324a:	1851      	adds	r1, r2, r1
 800324c:	6339      	str	r1, [r7, #48]	; 0x30
 800324e:	4649      	mov	r1, r9
 8003250:	414b      	adcs	r3, r1
 8003252:	637b      	str	r3, [r7, #52]	; 0x34
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003260:	4659      	mov	r1, fp
 8003262:	00cb      	lsls	r3, r1, #3
 8003264:	4651      	mov	r1, sl
 8003266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800326a:	4651      	mov	r1, sl
 800326c:	00ca      	lsls	r2, r1, #3
 800326e:	4610      	mov	r0, r2
 8003270:	4619      	mov	r1, r3
 8003272:	4603      	mov	r3, r0
 8003274:	4642      	mov	r2, r8
 8003276:	189b      	adds	r3, r3, r2
 8003278:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800327c:	464b      	mov	r3, r9
 800327e:	460a      	mov	r2, r1
 8003280:	eb42 0303 	adc.w	r3, r2, r3
 8003284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003294:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003298:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800329c:	460b      	mov	r3, r1
 800329e:	18db      	adds	r3, r3, r3
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a2:	4613      	mov	r3, r2
 80032a4:	eb42 0303 	adc.w	r3, r2, r3
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032b2:	f7fc fffd 	bl	80002b0 <__aeabi_uldivmod>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <UART_SetConfig+0x2d4>)
 80032bc:	fba3 1302 	umull	r1, r3, r3, r2
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	2164      	movs	r1, #100	; 0x64
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	3332      	adds	r3, #50	; 0x32
 80032ce:	4a08      	ldr	r2, [pc, #32]	; (80032f0 <UART_SetConfig+0x2d4>)
 80032d0:	fba2 2303 	umull	r2, r3, r2, r3
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	f003 0207 	and.w	r2, r3, #7
 80032da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4422      	add	r2, r4
 80032e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032e4:	e106      	b.n	80034f4 <UART_SetConfig+0x4d8>
 80032e6:	bf00      	nop
 80032e8:	40011000 	.word	0x40011000
 80032ec:	40011400 	.word	0x40011400
 80032f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032f8:	2200      	movs	r2, #0
 80032fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003302:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003306:	4642      	mov	r2, r8
 8003308:	464b      	mov	r3, r9
 800330a:	1891      	adds	r1, r2, r2
 800330c:	6239      	str	r1, [r7, #32]
 800330e:	415b      	adcs	r3, r3
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
 8003312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003316:	4641      	mov	r1, r8
 8003318:	1854      	adds	r4, r2, r1
 800331a:	4649      	mov	r1, r9
 800331c:	eb43 0501 	adc.w	r5, r3, r1
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	00eb      	lsls	r3, r5, #3
 800332a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800332e:	00e2      	lsls	r2, r4, #3
 8003330:	4614      	mov	r4, r2
 8003332:	461d      	mov	r5, r3
 8003334:	4643      	mov	r3, r8
 8003336:	18e3      	adds	r3, r4, r3
 8003338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800333c:	464b      	mov	r3, r9
 800333e:	eb45 0303 	adc.w	r3, r5, r3
 8003342:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003352:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003362:	4629      	mov	r1, r5
 8003364:	008b      	lsls	r3, r1, #2
 8003366:	4621      	mov	r1, r4
 8003368:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800336c:	4621      	mov	r1, r4
 800336e:	008a      	lsls	r2, r1, #2
 8003370:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003374:	f7fc ff9c 	bl	80002b0 <__aeabi_uldivmod>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4b60      	ldr	r3, [pc, #384]	; (8003500 <UART_SetConfig+0x4e4>)
 800337e:	fba3 2302 	umull	r2, r3, r3, r2
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	011c      	lsls	r4, r3, #4
 8003386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800338a:	2200      	movs	r2, #0
 800338c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003390:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003394:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003398:	4642      	mov	r2, r8
 800339a:	464b      	mov	r3, r9
 800339c:	1891      	adds	r1, r2, r2
 800339e:	61b9      	str	r1, [r7, #24]
 80033a0:	415b      	adcs	r3, r3
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033a8:	4641      	mov	r1, r8
 80033aa:	1851      	adds	r1, r2, r1
 80033ac:	6139      	str	r1, [r7, #16]
 80033ae:	4649      	mov	r1, r9
 80033b0:	414b      	adcs	r3, r1
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033c0:	4659      	mov	r1, fp
 80033c2:	00cb      	lsls	r3, r1, #3
 80033c4:	4651      	mov	r1, sl
 80033c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ca:	4651      	mov	r1, sl
 80033cc:	00ca      	lsls	r2, r1, #3
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	4603      	mov	r3, r0
 80033d4:	4642      	mov	r2, r8
 80033d6:	189b      	adds	r3, r3, r2
 80033d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033dc:	464b      	mov	r3, r9
 80033de:	460a      	mov	r2, r1
 80033e0:	eb42 0303 	adc.w	r3, r2, r3
 80033e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80033f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003400:	4649      	mov	r1, r9
 8003402:	008b      	lsls	r3, r1, #2
 8003404:	4641      	mov	r1, r8
 8003406:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800340a:	4641      	mov	r1, r8
 800340c:	008a      	lsls	r2, r1, #2
 800340e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003412:	f7fc ff4d 	bl	80002b0 <__aeabi_uldivmod>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4611      	mov	r1, r2
 800341c:	4b38      	ldr	r3, [pc, #224]	; (8003500 <UART_SetConfig+0x4e4>)
 800341e:	fba3 2301 	umull	r2, r3, r3, r1
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	2264      	movs	r2, #100	; 0x64
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	1acb      	subs	r3, r1, r3
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	3332      	adds	r3, #50	; 0x32
 8003430:	4a33      	ldr	r2, [pc, #204]	; (8003500 <UART_SetConfig+0x4e4>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800343c:	441c      	add	r4, r3
 800343e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003442:	2200      	movs	r2, #0
 8003444:	673b      	str	r3, [r7, #112]	; 0x70
 8003446:	677a      	str	r2, [r7, #116]	; 0x74
 8003448:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800344c:	4642      	mov	r2, r8
 800344e:	464b      	mov	r3, r9
 8003450:	1891      	adds	r1, r2, r2
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	415b      	adcs	r3, r3
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800345c:	4641      	mov	r1, r8
 800345e:	1851      	adds	r1, r2, r1
 8003460:	6039      	str	r1, [r7, #0]
 8003462:	4649      	mov	r1, r9
 8003464:	414b      	adcs	r3, r1
 8003466:	607b      	str	r3, [r7, #4]
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003474:	4659      	mov	r1, fp
 8003476:	00cb      	lsls	r3, r1, #3
 8003478:	4651      	mov	r1, sl
 800347a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800347e:	4651      	mov	r1, sl
 8003480:	00ca      	lsls	r2, r1, #3
 8003482:	4610      	mov	r0, r2
 8003484:	4619      	mov	r1, r3
 8003486:	4603      	mov	r3, r0
 8003488:	4642      	mov	r2, r8
 800348a:	189b      	adds	r3, r3, r2
 800348c:	66bb      	str	r3, [r7, #104]	; 0x68
 800348e:	464b      	mov	r3, r9
 8003490:	460a      	mov	r2, r1
 8003492:	eb42 0303 	adc.w	r3, r2, r3
 8003496:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	663b      	str	r3, [r7, #96]	; 0x60
 80034a2:	667a      	str	r2, [r7, #100]	; 0x64
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034b0:	4649      	mov	r1, r9
 80034b2:	008b      	lsls	r3, r1, #2
 80034b4:	4641      	mov	r1, r8
 80034b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ba:	4641      	mov	r1, r8
 80034bc:	008a      	lsls	r2, r1, #2
 80034be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034c2:	f7fc fef5 	bl	80002b0 <__aeabi_uldivmod>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <UART_SetConfig+0x4e4>)
 80034cc:	fba3 1302 	umull	r1, r3, r3, r2
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	2164      	movs	r1, #100	; 0x64
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	3332      	adds	r3, #50	; 0x32
 80034de:	4a08      	ldr	r2, [pc, #32]	; (8003500 <UART_SetConfig+0x4e4>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	f003 020f 	and.w	r2, r3, #15
 80034ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4422      	add	r2, r4
 80034f2:	609a      	str	r2, [r3, #8]
}
 80034f4:	bf00      	nop
 80034f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034fa:	46bd      	mov	sp, r7
 80034fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003500:	51eb851f 	.word	0x51eb851f

08003504 <bmp_reset>:
#include "main.h"
#include <stdio.h>

static int32_t t_fine; //Used by both temp and press functions (needs to be called by the temp funct at first)

void bmp_reset(h_bmp280_t * bmp280){
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af02      	add	r7, sp, #8
 800350a:	6078      	str	r0, [r7, #4]
	bmp280->registre = reset;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	22e0      	movs	r2, #224	; 0xe0
 8003510:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	781a      	ldrb	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	705a      	strb	r2, [r3, #1]
	bmp280->buf[1]= BMP280_RESET;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	22b6      	movs	r2, #182	; 0xb6
 800351e:	709a      	strb	r2, [r3, #2]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 2, HAL_MAX_DELAY)){
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	f04f 33ff 	mov.w	r3, #4294967295
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	2302      	movs	r3, #2
 800352c:	21ee      	movs	r1, #238	; 0xee
 800352e:	4806      	ldr	r0, [pc, #24]	; (8003548 <bmp_reset+0x44>)
 8003530:	f7fd ffec 	bl	800150c <HAL_I2C_Master_Transmit>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <bmp_reset+0x3c>
		printf("echec du reset\r\n");
 800353a:	4804      	ldr	r0, [pc, #16]	; (800354c <bmp_reset+0x48>)
 800353c:	f000 faae 	bl	8003a9c <puts>
	}
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000084 	.word	0x20000084
 800354c:	080047c0 	.word	0x080047c0

08003550 <bmp_id>:

void bmp_id(h_bmp280_t * bmp280){
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af02      	add	r7, sp, #8
 8003556:	6078      	str	r0, [r7, #4]
	bmp280->registre = id;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	22d0      	movs	r2, #208	; 0xd0
 800355c:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	781a      	ldrb	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	f04f 33ff 	mov.w	r3, #4294967295
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	2301      	movs	r3, #1
 8003572:	21ee      	movs	r1, #238	; 0xee
 8003574:	4810      	ldr	r0, [pc, #64]	; (80035b8 <bmp_id+0x68>)
 8003576:	f7fd ffc9 	bl	800150c <HAL_I2C_Master_Transmit>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <bmp_id+0x36>
		printf("echec de l'id\r\n");
 8003580:	480e      	ldr	r0, [pc, #56]	; (80035bc <bmp_id+0x6c>)
 8003582:	f000 fa8b 	bl	8003a9c <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, &bmp280->id, 1, 1000)){
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f103 021b 	add.w	r2, r3, #27
 800358c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	2301      	movs	r3, #1
 8003594:	21ee      	movs	r1, #238	; 0xee
 8003596:	4808      	ldr	r0, [pc, #32]	; (80035b8 <bmp_id+0x68>)
 8003598:	f7fe f8b6 	bl	8001708 <HAL_I2C_Master_Receive>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d105      	bne.n	80035ae <bmp_id+0x5e>
		printf("val id : %x\r\n",bmp280->id);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	7edb      	ldrb	r3, [r3, #27]
 80035a6:	4619      	mov	r1, r3
 80035a8:	4805      	ldr	r0, [pc, #20]	; (80035c0 <bmp_id+0x70>)
 80035aa:	f000 fa11 	bl	80039d0 <iprintf>
	}
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000084 	.word	0x20000084
 80035bc:	080047d0 	.word	0x080047d0
 80035c0:	080047e0 	.word	0x080047e0

080035c4 <bmp_config>:
		printf("echec de l'id\r\n");
	}
	printf("val id : %x\r\n",bmp280->id);
}*/

void bmp_config(h_bmp280_t * bmp280){
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	6078      	str	r0, [r7, #4]
	bmp280->registre = ctrl_mes;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	22f4      	movs	r2, #244	; 0xf4
 80035d0:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	781a      	ldrb	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	705a      	strb	r2, [r3, #1]
	bmp280->buf[1]= 0b01010111;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2257      	movs	r2, #87	; 0x57
 80035de:	709a      	strb	r2, [r3, #2]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 2, HAL_MAX_DELAY)){
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	f04f 33ff 	mov.w	r3, #4294967295
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	2302      	movs	r3, #2
 80035ec:	21ee      	movs	r1, #238	; 0xee
 80035ee:	4810      	ldr	r0, [pc, #64]	; (8003630 <bmp_config+0x6c>)
 80035f0:	f7fd ff8c 	bl	800150c <HAL_I2C_Master_Transmit>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <bmp_config+0x3c>
		printf("echec de config\r\n");
 80035fa:	480e      	ldr	r0, [pc, #56]	; (8003634 <bmp_config+0x70>)
 80035fc:	f000 fa4e 	bl	8003a9c <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, &bmp280->config, 1, 1000)){
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f103 021c 	add.w	r2, r3, #28
 8003606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2301      	movs	r3, #1
 800360e:	21ee      	movs	r1, #238	; 0xee
 8003610:	4807      	ldr	r0, [pc, #28]	; (8003630 <bmp_config+0x6c>)
 8003612:	f7fe f879 	bl	8001708 <HAL_I2C_Master_Receive>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d105      	bne.n	8003628 <bmp_config+0x64>
		printf("config value : %x\r\n",bmp280->config);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	7f1b      	ldrb	r3, [r3, #28]
 8003620:	4619      	mov	r1, r3
 8003622:	4805      	ldr	r0, [pc, #20]	; (8003638 <bmp_config+0x74>)
 8003624:	f000 f9d4 	bl	80039d0 <iprintf>
	}
	//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
}
 8003628:	bf00      	nop
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000084 	.word	0x20000084
 8003634:	080047f0 	.word	0x080047f0
 8003638:	08004804 	.word	0x08004804

0800363c <bmp_calib_read>:

void bmp_calib_read(h_bmp280_t * bmp280){
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af02      	add	r7, sp, #8
 8003642:	6078      	str	r0, [r7, #4]
	bmp280->registre = calib00;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2288      	movs	r2, #136	; 0x88
 8003648:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	781a      	ldrb	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	f04f 33ff 	mov.w	r3, #4294967295
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2301      	movs	r3, #1
 800365e:	21ee      	movs	r1, #238	; 0xee
 8003660:	4810      	ldr	r0, [pc, #64]	; (80036a4 <bmp_calib_read+0x68>)
 8003662:	f7fd ff53 	bl	800150c <HAL_I2C_Master_Transmit>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <bmp_calib_read+0x36>
		printf("echec de calib\r\n");
 800366c:	480e      	ldr	r0, [pc, #56]	; (80036a8 <bmp_calib_read+0x6c>)
 800366e:	f000 fa15 	bl	8003a9c <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->calib, 25, HAL_MAX_DELAY)){
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f103 021d 	add.w	r2, r3, #29
 8003678:	f04f 33ff 	mov.w	r3, #4294967295
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	2319      	movs	r3, #25
 8003680:	21ee      	movs	r1, #238	; 0xee
 8003682:	4808      	ldr	r0, [pc, #32]	; (80036a4 <bmp_calib_read+0x68>)
 8003684:	f7fe f840 	bl	8001708 <HAL_I2C_Master_Receive>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d105      	bne.n	800369a <bmp_calib_read+0x5e>
		printf("calib values : %s\r\n",bmp280->calib);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	331d      	adds	r3, #29
 8003692:	4619      	mov	r1, r3
 8003694:	4805      	ldr	r0, [pc, #20]	; (80036ac <bmp_calib_read+0x70>)
 8003696:	f000 f99b 	bl	80039d0 <iprintf>
	}
	//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000084 	.word	0x20000084
 80036a8:	08004818 	.word	0x08004818
 80036ac:	08004828 	.word	0x08004828

080036b0 <bmp_temp_read>:

void bmp_temp_read(h_bmp280_t * bmp280){
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	6078      	str	r0, [r7, #4]
	bmp280->registre = temp_xlsb;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	22fc      	movs	r2, #252	; 0xfc
 80036bc:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	781a      	ldrb	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	f04f 33ff 	mov.w	r3, #4294967295
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	2301      	movs	r3, #1
 80036d2:	21ee      	movs	r1, #238	; 0xee
 80036d4:	483f      	ldr	r0, [pc, #252]	; (80037d4 <bmp_temp_read+0x124>)
 80036d6:	f7fd ff19 	bl	800150c <HAL_I2C_Master_Transmit>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <bmp_temp_read+0x36>
		printf("echec de temp read\r\n");
 80036e0:	483d      	ldr	r0, [pc, #244]	; (80037d8 <bmp_temp_read+0x128>)
 80036e2:	f000 f9db 	bl	8003a9c <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	f04f 33ff 	mov.w	r3, #4294967295
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	2301      	movs	r3, #1
 80036f2:	21ee      	movs	r1, #238	; 0xee
 80036f4:	4837      	ldr	r0, [pc, #220]	; (80037d4 <bmp_temp_read+0x124>)
 80036f6:	f7fe f807 	bl	8001708 <HAL_I2C_Master_Receive>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d106      	bne.n	800370e <bmp_temp_read+0x5e>
		bmp280->temp = (int32_t)((bmp280->buf[0]) >>4);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	785b      	ldrb	r3, [r3, #1]
 8003704:	091b      	lsrs	r3, r3, #4
 8003706:	b2db      	uxtb	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	639a      	str	r2, [r3, #56]	; 0x38
		bmp280->temp = ((int32_t)bmp280->buf[0]>>4) + ((int32_t)bmp280->buf[1]<<4) + ((int32_t)bmp280->buf[2]<<12);
		printf("temp brute : %ld\r\n",bmp280->temp);
		bmp280->temp = bmp_compensate_T(bmp280);
		printf("temp : %ld\r\n",bmp280->temp);*/
	}
	bmp280->registre = temp_lsb;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	22fb      	movs	r2, #251	; 0xfb
 8003712:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	781a      	ldrb	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	f04f 33ff 	mov.w	r3, #4294967295
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	2301      	movs	r3, #1
 8003728:	21ee      	movs	r1, #238	; 0xee
 800372a:	482a      	ldr	r0, [pc, #168]	; (80037d4 <bmp_temp_read+0x124>)
 800372c:	f7fd feee 	bl	800150c <HAL_I2C_Master_Transmit>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <bmp_temp_read+0x8c>
		printf("echec de temp read\r\n");
 8003736:	4828      	ldr	r0, [pc, #160]	; (80037d8 <bmp_temp_read+0x128>)
 8003738:	f000 f9b0 	bl	8003a9c <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	f04f 33ff 	mov.w	r3, #4294967295
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	2301      	movs	r3, #1
 8003748:	21ee      	movs	r1, #238	; 0xee
 800374a:	4822      	ldr	r0, [pc, #136]	; (80037d4 <bmp_temp_read+0x124>)
 800374c:	f7fd ffdc 	bl	8001708 <HAL_I2C_Master_Receive>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d107      	bne.n	8003766 <bmp_temp_read+0xb6>
		bmp280->temp += ((int32_t)(bmp280->buf[0]))<<4;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	785b      	ldrb	r3, [r3, #1]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	441a      	add	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	639a      	str	r2, [r3, #56]	; 0x38
	}
	bmp280->registre = temp_msb;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	22fa      	movs	r2, #250	; 0xfa
 800376a:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	781a      	ldrb	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	f04f 33ff 	mov.w	r3, #4294967295
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	2301      	movs	r3, #1
 8003780:	21ee      	movs	r1, #238	; 0xee
 8003782:	4814      	ldr	r0, [pc, #80]	; (80037d4 <bmp_temp_read+0x124>)
 8003784:	f7fd fec2 	bl	800150c <HAL_I2C_Master_Transmit>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <bmp_temp_read+0xe4>
		printf("echec de temp read\r\n");
 800378e:	4812      	ldr	r0, [pc, #72]	; (80037d8 <bmp_temp_read+0x128>)
 8003790:	f000 f984 	bl	8003a9c <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	f04f 33ff 	mov.w	r3, #4294967295
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	2301      	movs	r3, #1
 80037a0:	21ee      	movs	r1, #238	; 0xee
 80037a2:	480c      	ldr	r0, [pc, #48]	; (80037d4 <bmp_temp_read+0x124>)
 80037a4:	f7fd ffb0 	bl	8001708 <HAL_I2C_Master_Receive>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d107      	bne.n	80037be <bmp_temp_read+0x10e>
		bmp280->temp += ((int32_t)(bmp280->buf[0]))<<12;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	785b      	ldrb	r3, [r3, #1]
 80037b6:	031b      	lsls	r3, r3, #12
 80037b8:	441a      	add	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38
	}
	printf("temp : %ld\r\n",bmp280->temp);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c2:	4619      	mov	r1, r3
 80037c4:	4805      	ldr	r0, [pc, #20]	; (80037dc <bmp_temp_read+0x12c>)
 80037c6:	f000 f903 	bl	80039d0 <iprintf>

	/*bmp280->temp = bmp_compensate_T(bmp280);

	printf("celcius temp : %ld\r\n",bmp280->temp);*/

}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000084 	.word	0x20000084
 80037d8:	0800483c 	.word	0x0800483c
 80037dc:	08004850 	.word	0x08004850

080037e0 <bmp_press_read>:

void bmp_press_read(h_bmp280_t * bmp280){
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	6078      	str	r0, [r7, #4]
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
		bmp280->press += ((int32_t)(bmp280->buf[0]))<<12;
	}
	printf("press : %ld\r\n",bmp280->press);*/

	bmp280->registre = press_msb;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	22f7      	movs	r2, #247	; 0xf7
 80037ec:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	781a      	ldrb	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	2301      	movs	r3, #1
 8003802:	21ee      	movs	r1, #238	; 0xee
 8003804:	4817      	ldr	r0, [pc, #92]	; (8003864 <bmp_press_read+0x84>)
 8003806:	f7fd fe81 	bl	800150c <HAL_I2C_Master_Transmit>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <bmp_press_read+0x36>
		printf("echec de press_xlsb read\r\n");
 8003810:	4815      	ldr	r0, [pc, #84]	; (8003868 <bmp_press_read+0x88>)
 8003812:	f000 f943 	bl	8003a9c <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 3, HAL_MAX_DELAY)){
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	f04f 33ff 	mov.w	r3, #4294967295
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	2303      	movs	r3, #3
 8003822:	21ee      	movs	r1, #238	; 0xee
 8003824:	480f      	ldr	r0, [pc, #60]	; (8003864 <bmp_press_read+0x84>)
 8003826:	f7fd ff6f 	bl	8001708 <HAL_I2C_Master_Receive>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10e      	bne.n	800384e <bmp_press_read+0x6e>
		bmp280->press = (int32_t)((bmp280->buf[2]) >>4) + ((int32_t)(bmp280->buf[1]) <<4) + ((int32_t)(bmp280->buf[0]) <<12);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	78db      	ldrb	r3, [r3, #3]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	b2db      	uxtb	r3, r3
 8003838:	461a      	mov	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	789b      	ldrb	r3, [r3, #2]
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	441a      	add	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	785b      	ldrb	r3, [r3, #1]
 8003846:	031b      	lsls	r3, r3, #12
 8003848:	441a      	add	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	printf("press : %ld\r\n",bmp280->press);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003852:	4619      	mov	r1, r3
 8003854:	4805      	ldr	r0, [pc, #20]	; (800386c <bmp_press_read+0x8c>)
 8003856:	f000 f8bb 	bl	80039d0 <iprintf>

	/*bmp280->press = bmp_compensate_P(bmp280);

	printf("corrected press : %ld\r\n",bmp280->press);*/

}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20000084 	.word	0x20000084
 8003868:	08004860 	.word	0x08004860
 800386c:	0800487c 	.word	0x0800487c

08003870 <std>:
 8003870:	2300      	movs	r3, #0
 8003872:	b510      	push	{r4, lr}
 8003874:	4604      	mov	r4, r0
 8003876:	e9c0 3300 	strd	r3, r3, [r0]
 800387a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800387e:	6083      	str	r3, [r0, #8]
 8003880:	8181      	strh	r1, [r0, #12]
 8003882:	6643      	str	r3, [r0, #100]	; 0x64
 8003884:	81c2      	strh	r2, [r0, #14]
 8003886:	6183      	str	r3, [r0, #24]
 8003888:	4619      	mov	r1, r3
 800388a:	2208      	movs	r2, #8
 800388c:	305c      	adds	r0, #92	; 0x5c
 800388e:	f000 f9e5 	bl	8003c5c <memset>
 8003892:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <std+0x38>)
 8003894:	6263      	str	r3, [r4, #36]	; 0x24
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <std+0x3c>)
 8003898:	62a3      	str	r3, [r4, #40]	; 0x28
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <std+0x40>)
 800389c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800389e:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <std+0x44>)
 80038a0:	6224      	str	r4, [r4, #32]
 80038a2:	6323      	str	r3, [r4, #48]	; 0x30
 80038a4:	bd10      	pop	{r4, pc}
 80038a6:	bf00      	nop
 80038a8:	08003aad 	.word	0x08003aad
 80038ac:	08003acf 	.word	0x08003acf
 80038b0:	08003b07 	.word	0x08003b07
 80038b4:	08003b2b 	.word	0x08003b2b

080038b8 <stdio_exit_handler>:
 80038b8:	4a02      	ldr	r2, [pc, #8]	; (80038c4 <stdio_exit_handler+0xc>)
 80038ba:	4903      	ldr	r1, [pc, #12]	; (80038c8 <stdio_exit_handler+0x10>)
 80038bc:	4803      	ldr	r0, [pc, #12]	; (80038cc <stdio_exit_handler+0x14>)
 80038be:	f000 b869 	b.w	8003994 <_fwalk_sglue>
 80038c2:	bf00      	nop
 80038c4:	2000000c 	.word	0x2000000c
 80038c8:	080045f5 	.word	0x080045f5
 80038cc:	20000018 	.word	0x20000018

080038d0 <cleanup_stdio>:
 80038d0:	6841      	ldr	r1, [r0, #4]
 80038d2:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <cleanup_stdio+0x34>)
 80038d4:	4299      	cmp	r1, r3
 80038d6:	b510      	push	{r4, lr}
 80038d8:	4604      	mov	r4, r0
 80038da:	d001      	beq.n	80038e0 <cleanup_stdio+0x10>
 80038dc:	f000 fe8a 	bl	80045f4 <_fflush_r>
 80038e0:	68a1      	ldr	r1, [r4, #8]
 80038e2:	4b09      	ldr	r3, [pc, #36]	; (8003908 <cleanup_stdio+0x38>)
 80038e4:	4299      	cmp	r1, r3
 80038e6:	d002      	beq.n	80038ee <cleanup_stdio+0x1e>
 80038e8:	4620      	mov	r0, r4
 80038ea:	f000 fe83 	bl	80045f4 <_fflush_r>
 80038ee:	68e1      	ldr	r1, [r4, #12]
 80038f0:	4b06      	ldr	r3, [pc, #24]	; (800390c <cleanup_stdio+0x3c>)
 80038f2:	4299      	cmp	r1, r3
 80038f4:	d004      	beq.n	8003900 <cleanup_stdio+0x30>
 80038f6:	4620      	mov	r0, r4
 80038f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038fc:	f000 be7a 	b.w	80045f4 <_fflush_r>
 8003900:	bd10      	pop	{r4, pc}
 8003902:	bf00      	nop
 8003904:	20000164 	.word	0x20000164
 8003908:	200001cc 	.word	0x200001cc
 800390c:	20000234 	.word	0x20000234

08003910 <global_stdio_init.part.0>:
 8003910:	b510      	push	{r4, lr}
 8003912:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <global_stdio_init.part.0+0x30>)
 8003914:	4c0b      	ldr	r4, [pc, #44]	; (8003944 <global_stdio_init.part.0+0x34>)
 8003916:	4a0c      	ldr	r2, [pc, #48]	; (8003948 <global_stdio_init.part.0+0x38>)
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	4620      	mov	r0, r4
 800391c:	2200      	movs	r2, #0
 800391e:	2104      	movs	r1, #4
 8003920:	f7ff ffa6 	bl	8003870 <std>
 8003924:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003928:	2201      	movs	r2, #1
 800392a:	2109      	movs	r1, #9
 800392c:	f7ff ffa0 	bl	8003870 <std>
 8003930:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003934:	2202      	movs	r2, #2
 8003936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800393a:	2112      	movs	r1, #18
 800393c:	f7ff bf98 	b.w	8003870 <std>
 8003940:	2000029c 	.word	0x2000029c
 8003944:	20000164 	.word	0x20000164
 8003948:	080038b9 	.word	0x080038b9

0800394c <__sfp_lock_acquire>:
 800394c:	4801      	ldr	r0, [pc, #4]	; (8003954 <__sfp_lock_acquire+0x8>)
 800394e:	f000 b9fd 	b.w	8003d4c <__retarget_lock_acquire_recursive>
 8003952:	bf00      	nop
 8003954:	200002a5 	.word	0x200002a5

08003958 <__sfp_lock_release>:
 8003958:	4801      	ldr	r0, [pc, #4]	; (8003960 <__sfp_lock_release+0x8>)
 800395a:	f000 b9f8 	b.w	8003d4e <__retarget_lock_release_recursive>
 800395e:	bf00      	nop
 8003960:	200002a5 	.word	0x200002a5

08003964 <__sinit>:
 8003964:	b510      	push	{r4, lr}
 8003966:	4604      	mov	r4, r0
 8003968:	f7ff fff0 	bl	800394c <__sfp_lock_acquire>
 800396c:	6a23      	ldr	r3, [r4, #32]
 800396e:	b11b      	cbz	r3, 8003978 <__sinit+0x14>
 8003970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003974:	f7ff bff0 	b.w	8003958 <__sfp_lock_release>
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <__sinit+0x28>)
 800397a:	6223      	str	r3, [r4, #32]
 800397c:	4b04      	ldr	r3, [pc, #16]	; (8003990 <__sinit+0x2c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f5      	bne.n	8003970 <__sinit+0xc>
 8003984:	f7ff ffc4 	bl	8003910 <global_stdio_init.part.0>
 8003988:	e7f2      	b.n	8003970 <__sinit+0xc>
 800398a:	bf00      	nop
 800398c:	080038d1 	.word	0x080038d1
 8003990:	2000029c 	.word	0x2000029c

08003994 <_fwalk_sglue>:
 8003994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003998:	4607      	mov	r7, r0
 800399a:	4688      	mov	r8, r1
 800399c:	4614      	mov	r4, r2
 800399e:	2600      	movs	r6, #0
 80039a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039a4:	f1b9 0901 	subs.w	r9, r9, #1
 80039a8:	d505      	bpl.n	80039b6 <_fwalk_sglue+0x22>
 80039aa:	6824      	ldr	r4, [r4, #0]
 80039ac:	2c00      	cmp	r4, #0
 80039ae:	d1f7      	bne.n	80039a0 <_fwalk_sglue+0xc>
 80039b0:	4630      	mov	r0, r6
 80039b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039b6:	89ab      	ldrh	r3, [r5, #12]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d907      	bls.n	80039cc <_fwalk_sglue+0x38>
 80039bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039c0:	3301      	adds	r3, #1
 80039c2:	d003      	beq.n	80039cc <_fwalk_sglue+0x38>
 80039c4:	4629      	mov	r1, r5
 80039c6:	4638      	mov	r0, r7
 80039c8:	47c0      	blx	r8
 80039ca:	4306      	orrs	r6, r0
 80039cc:	3568      	adds	r5, #104	; 0x68
 80039ce:	e7e9      	b.n	80039a4 <_fwalk_sglue+0x10>

080039d0 <iprintf>:
 80039d0:	b40f      	push	{r0, r1, r2, r3}
 80039d2:	b507      	push	{r0, r1, r2, lr}
 80039d4:	4906      	ldr	r1, [pc, #24]	; (80039f0 <iprintf+0x20>)
 80039d6:	ab04      	add	r3, sp, #16
 80039d8:	6808      	ldr	r0, [r1, #0]
 80039da:	f853 2b04 	ldr.w	r2, [r3], #4
 80039de:	6881      	ldr	r1, [r0, #8]
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	f000 fad7 	bl	8003f94 <_vfiprintf_r>
 80039e6:	b003      	add	sp, #12
 80039e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80039ec:	b004      	add	sp, #16
 80039ee:	4770      	bx	lr
 80039f0:	20000064 	.word	0x20000064

080039f4 <_puts_r>:
 80039f4:	6a03      	ldr	r3, [r0, #32]
 80039f6:	b570      	push	{r4, r5, r6, lr}
 80039f8:	6884      	ldr	r4, [r0, #8]
 80039fa:	4605      	mov	r5, r0
 80039fc:	460e      	mov	r6, r1
 80039fe:	b90b      	cbnz	r3, 8003a04 <_puts_r+0x10>
 8003a00:	f7ff ffb0 	bl	8003964 <__sinit>
 8003a04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a06:	07db      	lsls	r3, r3, #31
 8003a08:	d405      	bmi.n	8003a16 <_puts_r+0x22>
 8003a0a:	89a3      	ldrh	r3, [r4, #12]
 8003a0c:	0598      	lsls	r0, r3, #22
 8003a0e:	d402      	bmi.n	8003a16 <_puts_r+0x22>
 8003a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a12:	f000 f99b 	bl	8003d4c <__retarget_lock_acquire_recursive>
 8003a16:	89a3      	ldrh	r3, [r4, #12]
 8003a18:	0719      	lsls	r1, r3, #28
 8003a1a:	d513      	bpl.n	8003a44 <_puts_r+0x50>
 8003a1c:	6923      	ldr	r3, [r4, #16]
 8003a1e:	b18b      	cbz	r3, 8003a44 <_puts_r+0x50>
 8003a20:	3e01      	subs	r6, #1
 8003a22:	68a3      	ldr	r3, [r4, #8]
 8003a24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	60a3      	str	r3, [r4, #8]
 8003a2c:	b9e9      	cbnz	r1, 8003a6a <_puts_r+0x76>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	da2e      	bge.n	8003a90 <_puts_r+0x9c>
 8003a32:	4622      	mov	r2, r4
 8003a34:	210a      	movs	r1, #10
 8003a36:	4628      	mov	r0, r5
 8003a38:	f000 f87b 	bl	8003b32 <__swbuf_r>
 8003a3c:	3001      	adds	r0, #1
 8003a3e:	d007      	beq.n	8003a50 <_puts_r+0x5c>
 8003a40:	250a      	movs	r5, #10
 8003a42:	e007      	b.n	8003a54 <_puts_r+0x60>
 8003a44:	4621      	mov	r1, r4
 8003a46:	4628      	mov	r0, r5
 8003a48:	f000 f8b0 	bl	8003bac <__swsetup_r>
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	d0e7      	beq.n	8003a20 <_puts_r+0x2c>
 8003a50:	f04f 35ff 	mov.w	r5, #4294967295
 8003a54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a56:	07da      	lsls	r2, r3, #31
 8003a58:	d405      	bmi.n	8003a66 <_puts_r+0x72>
 8003a5a:	89a3      	ldrh	r3, [r4, #12]
 8003a5c:	059b      	lsls	r3, r3, #22
 8003a5e:	d402      	bmi.n	8003a66 <_puts_r+0x72>
 8003a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a62:	f000 f974 	bl	8003d4e <__retarget_lock_release_recursive>
 8003a66:	4628      	mov	r0, r5
 8003a68:	bd70      	pop	{r4, r5, r6, pc}
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	da04      	bge.n	8003a78 <_puts_r+0x84>
 8003a6e:	69a2      	ldr	r2, [r4, #24]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	dc06      	bgt.n	8003a82 <_puts_r+0x8e>
 8003a74:	290a      	cmp	r1, #10
 8003a76:	d004      	beq.n	8003a82 <_puts_r+0x8e>
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	6022      	str	r2, [r4, #0]
 8003a7e:	7019      	strb	r1, [r3, #0]
 8003a80:	e7cf      	b.n	8003a22 <_puts_r+0x2e>
 8003a82:	4622      	mov	r2, r4
 8003a84:	4628      	mov	r0, r5
 8003a86:	f000 f854 	bl	8003b32 <__swbuf_r>
 8003a8a:	3001      	adds	r0, #1
 8003a8c:	d1c9      	bne.n	8003a22 <_puts_r+0x2e>
 8003a8e:	e7df      	b.n	8003a50 <_puts_r+0x5c>
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	250a      	movs	r5, #10
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	6022      	str	r2, [r4, #0]
 8003a98:	701d      	strb	r5, [r3, #0]
 8003a9a:	e7db      	b.n	8003a54 <_puts_r+0x60>

08003a9c <puts>:
 8003a9c:	4b02      	ldr	r3, [pc, #8]	; (8003aa8 <puts+0xc>)
 8003a9e:	4601      	mov	r1, r0
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	f7ff bfa7 	b.w	80039f4 <_puts_r>
 8003aa6:	bf00      	nop
 8003aa8:	20000064 	.word	0x20000064

08003aac <__sread>:
 8003aac:	b510      	push	{r4, lr}
 8003aae:	460c      	mov	r4, r1
 8003ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ab4:	f000 f8fc 	bl	8003cb0 <_read_r>
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	bfab      	itete	ge
 8003abc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003abe:	89a3      	ldrhlt	r3, [r4, #12]
 8003ac0:	181b      	addge	r3, r3, r0
 8003ac2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ac6:	bfac      	ite	ge
 8003ac8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003aca:	81a3      	strhlt	r3, [r4, #12]
 8003acc:	bd10      	pop	{r4, pc}

08003ace <__swrite>:
 8003ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ad2:	461f      	mov	r7, r3
 8003ad4:	898b      	ldrh	r3, [r1, #12]
 8003ad6:	05db      	lsls	r3, r3, #23
 8003ad8:	4605      	mov	r5, r0
 8003ada:	460c      	mov	r4, r1
 8003adc:	4616      	mov	r6, r2
 8003ade:	d505      	bpl.n	8003aec <__swrite+0x1e>
 8003ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f000 f8d0 	bl	8003c8c <_lseek_r>
 8003aec:	89a3      	ldrh	r3, [r4, #12]
 8003aee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003af2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003af6:	81a3      	strh	r3, [r4, #12]
 8003af8:	4632      	mov	r2, r6
 8003afa:	463b      	mov	r3, r7
 8003afc:	4628      	mov	r0, r5
 8003afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b02:	f000 b8e7 	b.w	8003cd4 <_write_r>

08003b06 <__sseek>:
 8003b06:	b510      	push	{r4, lr}
 8003b08:	460c      	mov	r4, r1
 8003b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b0e:	f000 f8bd 	bl	8003c8c <_lseek_r>
 8003b12:	1c43      	adds	r3, r0, #1
 8003b14:	89a3      	ldrh	r3, [r4, #12]
 8003b16:	bf15      	itete	ne
 8003b18:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b22:	81a3      	strheq	r3, [r4, #12]
 8003b24:	bf18      	it	ne
 8003b26:	81a3      	strhne	r3, [r4, #12]
 8003b28:	bd10      	pop	{r4, pc}

08003b2a <__sclose>:
 8003b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b2e:	f000 b89d 	b.w	8003c6c <_close_r>

08003b32 <__swbuf_r>:
 8003b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b34:	460e      	mov	r6, r1
 8003b36:	4614      	mov	r4, r2
 8003b38:	4605      	mov	r5, r0
 8003b3a:	b118      	cbz	r0, 8003b44 <__swbuf_r+0x12>
 8003b3c:	6a03      	ldr	r3, [r0, #32]
 8003b3e:	b90b      	cbnz	r3, 8003b44 <__swbuf_r+0x12>
 8003b40:	f7ff ff10 	bl	8003964 <__sinit>
 8003b44:	69a3      	ldr	r3, [r4, #24]
 8003b46:	60a3      	str	r3, [r4, #8]
 8003b48:	89a3      	ldrh	r3, [r4, #12]
 8003b4a:	071a      	lsls	r2, r3, #28
 8003b4c:	d525      	bpl.n	8003b9a <__swbuf_r+0x68>
 8003b4e:	6923      	ldr	r3, [r4, #16]
 8003b50:	b31b      	cbz	r3, 8003b9a <__swbuf_r+0x68>
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	6922      	ldr	r2, [r4, #16]
 8003b56:	1a98      	subs	r0, r3, r2
 8003b58:	6963      	ldr	r3, [r4, #20]
 8003b5a:	b2f6      	uxtb	r6, r6
 8003b5c:	4283      	cmp	r3, r0
 8003b5e:	4637      	mov	r7, r6
 8003b60:	dc04      	bgt.n	8003b6c <__swbuf_r+0x3a>
 8003b62:	4621      	mov	r1, r4
 8003b64:	4628      	mov	r0, r5
 8003b66:	f000 fd45 	bl	80045f4 <_fflush_r>
 8003b6a:	b9e0      	cbnz	r0, 8003ba6 <__swbuf_r+0x74>
 8003b6c:	68a3      	ldr	r3, [r4, #8]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	60a3      	str	r3, [r4, #8]
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	6022      	str	r2, [r4, #0]
 8003b78:	701e      	strb	r6, [r3, #0]
 8003b7a:	6962      	ldr	r2, [r4, #20]
 8003b7c:	1c43      	adds	r3, r0, #1
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d004      	beq.n	8003b8c <__swbuf_r+0x5a>
 8003b82:	89a3      	ldrh	r3, [r4, #12]
 8003b84:	07db      	lsls	r3, r3, #31
 8003b86:	d506      	bpl.n	8003b96 <__swbuf_r+0x64>
 8003b88:	2e0a      	cmp	r6, #10
 8003b8a:	d104      	bne.n	8003b96 <__swbuf_r+0x64>
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	4628      	mov	r0, r5
 8003b90:	f000 fd30 	bl	80045f4 <_fflush_r>
 8003b94:	b938      	cbnz	r0, 8003ba6 <__swbuf_r+0x74>
 8003b96:	4638      	mov	r0, r7
 8003b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	f000 f805 	bl	8003bac <__swsetup_r>
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d0d5      	beq.n	8003b52 <__swbuf_r+0x20>
 8003ba6:	f04f 37ff 	mov.w	r7, #4294967295
 8003baa:	e7f4      	b.n	8003b96 <__swbuf_r+0x64>

08003bac <__swsetup_r>:
 8003bac:	b538      	push	{r3, r4, r5, lr}
 8003bae:	4b2a      	ldr	r3, [pc, #168]	; (8003c58 <__swsetup_r+0xac>)
 8003bb0:	4605      	mov	r5, r0
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	460c      	mov	r4, r1
 8003bb6:	b118      	cbz	r0, 8003bc0 <__swsetup_r+0x14>
 8003bb8:	6a03      	ldr	r3, [r0, #32]
 8003bba:	b90b      	cbnz	r3, 8003bc0 <__swsetup_r+0x14>
 8003bbc:	f7ff fed2 	bl	8003964 <__sinit>
 8003bc0:	89a3      	ldrh	r3, [r4, #12]
 8003bc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003bc6:	0718      	lsls	r0, r3, #28
 8003bc8:	d422      	bmi.n	8003c10 <__swsetup_r+0x64>
 8003bca:	06d9      	lsls	r1, r3, #27
 8003bcc:	d407      	bmi.n	8003bde <__swsetup_r+0x32>
 8003bce:	2309      	movs	r3, #9
 8003bd0:	602b      	str	r3, [r5, #0]
 8003bd2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003bd6:	81a3      	strh	r3, [r4, #12]
 8003bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bdc:	e034      	b.n	8003c48 <__swsetup_r+0x9c>
 8003bde:	0758      	lsls	r0, r3, #29
 8003be0:	d512      	bpl.n	8003c08 <__swsetup_r+0x5c>
 8003be2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003be4:	b141      	cbz	r1, 8003bf8 <__swsetup_r+0x4c>
 8003be6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bea:	4299      	cmp	r1, r3
 8003bec:	d002      	beq.n	8003bf4 <__swsetup_r+0x48>
 8003bee:	4628      	mov	r0, r5
 8003bf0:	f000 f8ae 	bl	8003d50 <_free_r>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	6363      	str	r3, [r4, #52]	; 0x34
 8003bf8:	89a3      	ldrh	r3, [r4, #12]
 8003bfa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003bfe:	81a3      	strh	r3, [r4, #12]
 8003c00:	2300      	movs	r3, #0
 8003c02:	6063      	str	r3, [r4, #4]
 8003c04:	6923      	ldr	r3, [r4, #16]
 8003c06:	6023      	str	r3, [r4, #0]
 8003c08:	89a3      	ldrh	r3, [r4, #12]
 8003c0a:	f043 0308 	orr.w	r3, r3, #8
 8003c0e:	81a3      	strh	r3, [r4, #12]
 8003c10:	6923      	ldr	r3, [r4, #16]
 8003c12:	b94b      	cbnz	r3, 8003c28 <__swsetup_r+0x7c>
 8003c14:	89a3      	ldrh	r3, [r4, #12]
 8003c16:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1e:	d003      	beq.n	8003c28 <__swsetup_r+0x7c>
 8003c20:	4621      	mov	r1, r4
 8003c22:	4628      	mov	r0, r5
 8003c24:	f000 fd34 	bl	8004690 <__smakebuf_r>
 8003c28:	89a0      	ldrh	r0, [r4, #12]
 8003c2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c2e:	f010 0301 	ands.w	r3, r0, #1
 8003c32:	d00a      	beq.n	8003c4a <__swsetup_r+0x9e>
 8003c34:	2300      	movs	r3, #0
 8003c36:	60a3      	str	r3, [r4, #8]
 8003c38:	6963      	ldr	r3, [r4, #20]
 8003c3a:	425b      	negs	r3, r3
 8003c3c:	61a3      	str	r3, [r4, #24]
 8003c3e:	6923      	ldr	r3, [r4, #16]
 8003c40:	b943      	cbnz	r3, 8003c54 <__swsetup_r+0xa8>
 8003c42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003c46:	d1c4      	bne.n	8003bd2 <__swsetup_r+0x26>
 8003c48:	bd38      	pop	{r3, r4, r5, pc}
 8003c4a:	0781      	lsls	r1, r0, #30
 8003c4c:	bf58      	it	pl
 8003c4e:	6963      	ldrpl	r3, [r4, #20]
 8003c50:	60a3      	str	r3, [r4, #8]
 8003c52:	e7f4      	b.n	8003c3e <__swsetup_r+0x92>
 8003c54:	2000      	movs	r0, #0
 8003c56:	e7f7      	b.n	8003c48 <__swsetup_r+0x9c>
 8003c58:	20000064 	.word	0x20000064

08003c5c <memset>:
 8003c5c:	4402      	add	r2, r0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d100      	bne.n	8003c66 <memset+0xa>
 8003c64:	4770      	bx	lr
 8003c66:	f803 1b01 	strb.w	r1, [r3], #1
 8003c6a:	e7f9      	b.n	8003c60 <memset+0x4>

08003c6c <_close_r>:
 8003c6c:	b538      	push	{r3, r4, r5, lr}
 8003c6e:	4d06      	ldr	r5, [pc, #24]	; (8003c88 <_close_r+0x1c>)
 8003c70:	2300      	movs	r3, #0
 8003c72:	4604      	mov	r4, r0
 8003c74:	4608      	mov	r0, r1
 8003c76:	602b      	str	r3, [r5, #0]
 8003c78:	f7fc ff33 	bl	8000ae2 <_close>
 8003c7c:	1c43      	adds	r3, r0, #1
 8003c7e:	d102      	bne.n	8003c86 <_close_r+0x1a>
 8003c80:	682b      	ldr	r3, [r5, #0]
 8003c82:	b103      	cbz	r3, 8003c86 <_close_r+0x1a>
 8003c84:	6023      	str	r3, [r4, #0]
 8003c86:	bd38      	pop	{r3, r4, r5, pc}
 8003c88:	200002a0 	.word	0x200002a0

08003c8c <_lseek_r>:
 8003c8c:	b538      	push	{r3, r4, r5, lr}
 8003c8e:	4d07      	ldr	r5, [pc, #28]	; (8003cac <_lseek_r+0x20>)
 8003c90:	4604      	mov	r4, r0
 8003c92:	4608      	mov	r0, r1
 8003c94:	4611      	mov	r1, r2
 8003c96:	2200      	movs	r2, #0
 8003c98:	602a      	str	r2, [r5, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f7fc ff48 	bl	8000b30 <_lseek>
 8003ca0:	1c43      	adds	r3, r0, #1
 8003ca2:	d102      	bne.n	8003caa <_lseek_r+0x1e>
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	b103      	cbz	r3, 8003caa <_lseek_r+0x1e>
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	bd38      	pop	{r3, r4, r5, pc}
 8003cac:	200002a0 	.word	0x200002a0

08003cb0 <_read_r>:
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	4d07      	ldr	r5, [pc, #28]	; (8003cd0 <_read_r+0x20>)
 8003cb4:	4604      	mov	r4, r0
 8003cb6:	4608      	mov	r0, r1
 8003cb8:	4611      	mov	r1, r2
 8003cba:	2200      	movs	r2, #0
 8003cbc:	602a      	str	r2, [r5, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f7fc fef2 	bl	8000aa8 <_read>
 8003cc4:	1c43      	adds	r3, r0, #1
 8003cc6:	d102      	bne.n	8003cce <_read_r+0x1e>
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	b103      	cbz	r3, 8003cce <_read_r+0x1e>
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	bd38      	pop	{r3, r4, r5, pc}
 8003cd0:	200002a0 	.word	0x200002a0

08003cd4 <_write_r>:
 8003cd4:	b538      	push	{r3, r4, r5, lr}
 8003cd6:	4d07      	ldr	r5, [pc, #28]	; (8003cf4 <_write_r+0x20>)
 8003cd8:	4604      	mov	r4, r0
 8003cda:	4608      	mov	r0, r1
 8003cdc:	4611      	mov	r1, r2
 8003cde:	2200      	movs	r2, #0
 8003ce0:	602a      	str	r2, [r5, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f7fc fc62 	bl	80005ac <_write>
 8003ce8:	1c43      	adds	r3, r0, #1
 8003cea:	d102      	bne.n	8003cf2 <_write_r+0x1e>
 8003cec:	682b      	ldr	r3, [r5, #0]
 8003cee:	b103      	cbz	r3, 8003cf2 <_write_r+0x1e>
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	bd38      	pop	{r3, r4, r5, pc}
 8003cf4:	200002a0 	.word	0x200002a0

08003cf8 <__errno>:
 8003cf8:	4b01      	ldr	r3, [pc, #4]	; (8003d00 <__errno+0x8>)
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000064 	.word	0x20000064

08003d04 <__libc_init_array>:
 8003d04:	b570      	push	{r4, r5, r6, lr}
 8003d06:	4d0d      	ldr	r5, [pc, #52]	; (8003d3c <__libc_init_array+0x38>)
 8003d08:	4c0d      	ldr	r4, [pc, #52]	; (8003d40 <__libc_init_array+0x3c>)
 8003d0a:	1b64      	subs	r4, r4, r5
 8003d0c:	10a4      	asrs	r4, r4, #2
 8003d0e:	2600      	movs	r6, #0
 8003d10:	42a6      	cmp	r6, r4
 8003d12:	d109      	bne.n	8003d28 <__libc_init_array+0x24>
 8003d14:	4d0b      	ldr	r5, [pc, #44]	; (8003d44 <__libc_init_array+0x40>)
 8003d16:	4c0c      	ldr	r4, [pc, #48]	; (8003d48 <__libc_init_array+0x44>)
 8003d18:	f000 fd28 	bl	800476c <_init>
 8003d1c:	1b64      	subs	r4, r4, r5
 8003d1e:	10a4      	asrs	r4, r4, #2
 8003d20:	2600      	movs	r6, #0
 8003d22:	42a6      	cmp	r6, r4
 8003d24:	d105      	bne.n	8003d32 <__libc_init_array+0x2e>
 8003d26:	bd70      	pop	{r4, r5, r6, pc}
 8003d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d2c:	4798      	blx	r3
 8003d2e:	3601      	adds	r6, #1
 8003d30:	e7ee      	b.n	8003d10 <__libc_init_array+0xc>
 8003d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d36:	4798      	blx	r3
 8003d38:	3601      	adds	r6, #1
 8003d3a:	e7f2      	b.n	8003d22 <__libc_init_array+0x1e>
 8003d3c:	080048e0 	.word	0x080048e0
 8003d40:	080048e0 	.word	0x080048e0
 8003d44:	080048e0 	.word	0x080048e0
 8003d48:	080048e4 	.word	0x080048e4

08003d4c <__retarget_lock_acquire_recursive>:
 8003d4c:	4770      	bx	lr

08003d4e <__retarget_lock_release_recursive>:
 8003d4e:	4770      	bx	lr

08003d50 <_free_r>:
 8003d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d52:	2900      	cmp	r1, #0
 8003d54:	d044      	beq.n	8003de0 <_free_r+0x90>
 8003d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d5a:	9001      	str	r0, [sp, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f1a1 0404 	sub.w	r4, r1, #4
 8003d62:	bfb8      	it	lt
 8003d64:	18e4      	addlt	r4, r4, r3
 8003d66:	f000 f8df 	bl	8003f28 <__malloc_lock>
 8003d6a:	4a1e      	ldr	r2, [pc, #120]	; (8003de4 <_free_r+0x94>)
 8003d6c:	9801      	ldr	r0, [sp, #4]
 8003d6e:	6813      	ldr	r3, [r2, #0]
 8003d70:	b933      	cbnz	r3, 8003d80 <_free_r+0x30>
 8003d72:	6063      	str	r3, [r4, #4]
 8003d74:	6014      	str	r4, [r2, #0]
 8003d76:	b003      	add	sp, #12
 8003d78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d7c:	f000 b8da 	b.w	8003f34 <__malloc_unlock>
 8003d80:	42a3      	cmp	r3, r4
 8003d82:	d908      	bls.n	8003d96 <_free_r+0x46>
 8003d84:	6825      	ldr	r5, [r4, #0]
 8003d86:	1961      	adds	r1, r4, r5
 8003d88:	428b      	cmp	r3, r1
 8003d8a:	bf01      	itttt	eq
 8003d8c:	6819      	ldreq	r1, [r3, #0]
 8003d8e:	685b      	ldreq	r3, [r3, #4]
 8003d90:	1949      	addeq	r1, r1, r5
 8003d92:	6021      	streq	r1, [r4, #0]
 8003d94:	e7ed      	b.n	8003d72 <_free_r+0x22>
 8003d96:	461a      	mov	r2, r3
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	b10b      	cbz	r3, 8003da0 <_free_r+0x50>
 8003d9c:	42a3      	cmp	r3, r4
 8003d9e:	d9fa      	bls.n	8003d96 <_free_r+0x46>
 8003da0:	6811      	ldr	r1, [r2, #0]
 8003da2:	1855      	adds	r5, r2, r1
 8003da4:	42a5      	cmp	r5, r4
 8003da6:	d10b      	bne.n	8003dc0 <_free_r+0x70>
 8003da8:	6824      	ldr	r4, [r4, #0]
 8003daa:	4421      	add	r1, r4
 8003dac:	1854      	adds	r4, r2, r1
 8003dae:	42a3      	cmp	r3, r4
 8003db0:	6011      	str	r1, [r2, #0]
 8003db2:	d1e0      	bne.n	8003d76 <_free_r+0x26>
 8003db4:	681c      	ldr	r4, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	6053      	str	r3, [r2, #4]
 8003dba:	440c      	add	r4, r1
 8003dbc:	6014      	str	r4, [r2, #0]
 8003dbe:	e7da      	b.n	8003d76 <_free_r+0x26>
 8003dc0:	d902      	bls.n	8003dc8 <_free_r+0x78>
 8003dc2:	230c      	movs	r3, #12
 8003dc4:	6003      	str	r3, [r0, #0]
 8003dc6:	e7d6      	b.n	8003d76 <_free_r+0x26>
 8003dc8:	6825      	ldr	r5, [r4, #0]
 8003dca:	1961      	adds	r1, r4, r5
 8003dcc:	428b      	cmp	r3, r1
 8003dce:	bf04      	itt	eq
 8003dd0:	6819      	ldreq	r1, [r3, #0]
 8003dd2:	685b      	ldreq	r3, [r3, #4]
 8003dd4:	6063      	str	r3, [r4, #4]
 8003dd6:	bf04      	itt	eq
 8003dd8:	1949      	addeq	r1, r1, r5
 8003dda:	6021      	streq	r1, [r4, #0]
 8003ddc:	6054      	str	r4, [r2, #4]
 8003dde:	e7ca      	b.n	8003d76 <_free_r+0x26>
 8003de0:	b003      	add	sp, #12
 8003de2:	bd30      	pop	{r4, r5, pc}
 8003de4:	200002a8 	.word	0x200002a8

08003de8 <sbrk_aligned>:
 8003de8:	b570      	push	{r4, r5, r6, lr}
 8003dea:	4e0e      	ldr	r6, [pc, #56]	; (8003e24 <sbrk_aligned+0x3c>)
 8003dec:	460c      	mov	r4, r1
 8003dee:	6831      	ldr	r1, [r6, #0]
 8003df0:	4605      	mov	r5, r0
 8003df2:	b911      	cbnz	r1, 8003dfa <sbrk_aligned+0x12>
 8003df4:	f000 fcaa 	bl	800474c <_sbrk_r>
 8003df8:	6030      	str	r0, [r6, #0]
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	f000 fca5 	bl	800474c <_sbrk_r>
 8003e02:	1c43      	adds	r3, r0, #1
 8003e04:	d00a      	beq.n	8003e1c <sbrk_aligned+0x34>
 8003e06:	1cc4      	adds	r4, r0, #3
 8003e08:	f024 0403 	bic.w	r4, r4, #3
 8003e0c:	42a0      	cmp	r0, r4
 8003e0e:	d007      	beq.n	8003e20 <sbrk_aligned+0x38>
 8003e10:	1a21      	subs	r1, r4, r0
 8003e12:	4628      	mov	r0, r5
 8003e14:	f000 fc9a 	bl	800474c <_sbrk_r>
 8003e18:	3001      	adds	r0, #1
 8003e1a:	d101      	bne.n	8003e20 <sbrk_aligned+0x38>
 8003e1c:	f04f 34ff 	mov.w	r4, #4294967295
 8003e20:	4620      	mov	r0, r4
 8003e22:	bd70      	pop	{r4, r5, r6, pc}
 8003e24:	200002ac 	.word	0x200002ac

08003e28 <_malloc_r>:
 8003e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e2c:	1ccd      	adds	r5, r1, #3
 8003e2e:	f025 0503 	bic.w	r5, r5, #3
 8003e32:	3508      	adds	r5, #8
 8003e34:	2d0c      	cmp	r5, #12
 8003e36:	bf38      	it	cc
 8003e38:	250c      	movcc	r5, #12
 8003e3a:	2d00      	cmp	r5, #0
 8003e3c:	4607      	mov	r7, r0
 8003e3e:	db01      	blt.n	8003e44 <_malloc_r+0x1c>
 8003e40:	42a9      	cmp	r1, r5
 8003e42:	d905      	bls.n	8003e50 <_malloc_r+0x28>
 8003e44:	230c      	movs	r3, #12
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	2600      	movs	r6, #0
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003f24 <_malloc_r+0xfc>
 8003e54:	f000 f868 	bl	8003f28 <__malloc_lock>
 8003e58:	f8d8 3000 	ldr.w	r3, [r8]
 8003e5c:	461c      	mov	r4, r3
 8003e5e:	bb5c      	cbnz	r4, 8003eb8 <_malloc_r+0x90>
 8003e60:	4629      	mov	r1, r5
 8003e62:	4638      	mov	r0, r7
 8003e64:	f7ff ffc0 	bl	8003de8 <sbrk_aligned>
 8003e68:	1c43      	adds	r3, r0, #1
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	d155      	bne.n	8003f1a <_malloc_r+0xf2>
 8003e6e:	f8d8 4000 	ldr.w	r4, [r8]
 8003e72:	4626      	mov	r6, r4
 8003e74:	2e00      	cmp	r6, #0
 8003e76:	d145      	bne.n	8003f04 <_malloc_r+0xdc>
 8003e78:	2c00      	cmp	r4, #0
 8003e7a:	d048      	beq.n	8003f0e <_malloc_r+0xe6>
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	4631      	mov	r1, r6
 8003e80:	4638      	mov	r0, r7
 8003e82:	eb04 0903 	add.w	r9, r4, r3
 8003e86:	f000 fc61 	bl	800474c <_sbrk_r>
 8003e8a:	4581      	cmp	r9, r0
 8003e8c:	d13f      	bne.n	8003f0e <_malloc_r+0xe6>
 8003e8e:	6821      	ldr	r1, [r4, #0]
 8003e90:	1a6d      	subs	r5, r5, r1
 8003e92:	4629      	mov	r1, r5
 8003e94:	4638      	mov	r0, r7
 8003e96:	f7ff ffa7 	bl	8003de8 <sbrk_aligned>
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d037      	beq.n	8003f0e <_malloc_r+0xe6>
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	442b      	add	r3, r5
 8003ea2:	6023      	str	r3, [r4, #0]
 8003ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d038      	beq.n	8003f1e <_malloc_r+0xf6>
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	42a2      	cmp	r2, r4
 8003eb0:	d12b      	bne.n	8003f0a <_malloc_r+0xe2>
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	e00f      	b.n	8003ed8 <_malloc_r+0xb0>
 8003eb8:	6822      	ldr	r2, [r4, #0]
 8003eba:	1b52      	subs	r2, r2, r5
 8003ebc:	d41f      	bmi.n	8003efe <_malloc_r+0xd6>
 8003ebe:	2a0b      	cmp	r2, #11
 8003ec0:	d917      	bls.n	8003ef2 <_malloc_r+0xca>
 8003ec2:	1961      	adds	r1, r4, r5
 8003ec4:	42a3      	cmp	r3, r4
 8003ec6:	6025      	str	r5, [r4, #0]
 8003ec8:	bf18      	it	ne
 8003eca:	6059      	strne	r1, [r3, #4]
 8003ecc:	6863      	ldr	r3, [r4, #4]
 8003ece:	bf08      	it	eq
 8003ed0:	f8c8 1000 	streq.w	r1, [r8]
 8003ed4:	5162      	str	r2, [r4, r5]
 8003ed6:	604b      	str	r3, [r1, #4]
 8003ed8:	4638      	mov	r0, r7
 8003eda:	f104 060b 	add.w	r6, r4, #11
 8003ede:	f000 f829 	bl	8003f34 <__malloc_unlock>
 8003ee2:	f026 0607 	bic.w	r6, r6, #7
 8003ee6:	1d23      	adds	r3, r4, #4
 8003ee8:	1af2      	subs	r2, r6, r3
 8003eea:	d0ae      	beq.n	8003e4a <_malloc_r+0x22>
 8003eec:	1b9b      	subs	r3, r3, r6
 8003eee:	50a3      	str	r3, [r4, r2]
 8003ef0:	e7ab      	b.n	8003e4a <_malloc_r+0x22>
 8003ef2:	42a3      	cmp	r3, r4
 8003ef4:	6862      	ldr	r2, [r4, #4]
 8003ef6:	d1dd      	bne.n	8003eb4 <_malloc_r+0x8c>
 8003ef8:	f8c8 2000 	str.w	r2, [r8]
 8003efc:	e7ec      	b.n	8003ed8 <_malloc_r+0xb0>
 8003efe:	4623      	mov	r3, r4
 8003f00:	6864      	ldr	r4, [r4, #4]
 8003f02:	e7ac      	b.n	8003e5e <_malloc_r+0x36>
 8003f04:	4634      	mov	r4, r6
 8003f06:	6876      	ldr	r6, [r6, #4]
 8003f08:	e7b4      	b.n	8003e74 <_malloc_r+0x4c>
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	e7cc      	b.n	8003ea8 <_malloc_r+0x80>
 8003f0e:	230c      	movs	r3, #12
 8003f10:	603b      	str	r3, [r7, #0]
 8003f12:	4638      	mov	r0, r7
 8003f14:	f000 f80e 	bl	8003f34 <__malloc_unlock>
 8003f18:	e797      	b.n	8003e4a <_malloc_r+0x22>
 8003f1a:	6025      	str	r5, [r4, #0]
 8003f1c:	e7dc      	b.n	8003ed8 <_malloc_r+0xb0>
 8003f1e:	605b      	str	r3, [r3, #4]
 8003f20:	deff      	udf	#255	; 0xff
 8003f22:	bf00      	nop
 8003f24:	200002a8 	.word	0x200002a8

08003f28 <__malloc_lock>:
 8003f28:	4801      	ldr	r0, [pc, #4]	; (8003f30 <__malloc_lock+0x8>)
 8003f2a:	f7ff bf0f 	b.w	8003d4c <__retarget_lock_acquire_recursive>
 8003f2e:	bf00      	nop
 8003f30:	200002a4 	.word	0x200002a4

08003f34 <__malloc_unlock>:
 8003f34:	4801      	ldr	r0, [pc, #4]	; (8003f3c <__malloc_unlock+0x8>)
 8003f36:	f7ff bf0a 	b.w	8003d4e <__retarget_lock_release_recursive>
 8003f3a:	bf00      	nop
 8003f3c:	200002a4 	.word	0x200002a4

08003f40 <__sfputc_r>:
 8003f40:	6893      	ldr	r3, [r2, #8]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	b410      	push	{r4}
 8003f48:	6093      	str	r3, [r2, #8]
 8003f4a:	da08      	bge.n	8003f5e <__sfputc_r+0x1e>
 8003f4c:	6994      	ldr	r4, [r2, #24]
 8003f4e:	42a3      	cmp	r3, r4
 8003f50:	db01      	blt.n	8003f56 <__sfputc_r+0x16>
 8003f52:	290a      	cmp	r1, #10
 8003f54:	d103      	bne.n	8003f5e <__sfputc_r+0x1e>
 8003f56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f5a:	f7ff bdea 	b.w	8003b32 <__swbuf_r>
 8003f5e:	6813      	ldr	r3, [r2, #0]
 8003f60:	1c58      	adds	r0, r3, #1
 8003f62:	6010      	str	r0, [r2, #0]
 8003f64:	7019      	strb	r1, [r3, #0]
 8003f66:	4608      	mov	r0, r1
 8003f68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <__sfputs_r>:
 8003f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f70:	4606      	mov	r6, r0
 8003f72:	460f      	mov	r7, r1
 8003f74:	4614      	mov	r4, r2
 8003f76:	18d5      	adds	r5, r2, r3
 8003f78:	42ac      	cmp	r4, r5
 8003f7a:	d101      	bne.n	8003f80 <__sfputs_r+0x12>
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	e007      	b.n	8003f90 <__sfputs_r+0x22>
 8003f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f84:	463a      	mov	r2, r7
 8003f86:	4630      	mov	r0, r6
 8003f88:	f7ff ffda 	bl	8003f40 <__sfputc_r>
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	d1f3      	bne.n	8003f78 <__sfputs_r+0xa>
 8003f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f94 <_vfiprintf_r>:
 8003f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f98:	460d      	mov	r5, r1
 8003f9a:	b09d      	sub	sp, #116	; 0x74
 8003f9c:	4614      	mov	r4, r2
 8003f9e:	4698      	mov	r8, r3
 8003fa0:	4606      	mov	r6, r0
 8003fa2:	b118      	cbz	r0, 8003fac <_vfiprintf_r+0x18>
 8003fa4:	6a03      	ldr	r3, [r0, #32]
 8003fa6:	b90b      	cbnz	r3, 8003fac <_vfiprintf_r+0x18>
 8003fa8:	f7ff fcdc 	bl	8003964 <__sinit>
 8003fac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fae:	07d9      	lsls	r1, r3, #31
 8003fb0:	d405      	bmi.n	8003fbe <_vfiprintf_r+0x2a>
 8003fb2:	89ab      	ldrh	r3, [r5, #12]
 8003fb4:	059a      	lsls	r2, r3, #22
 8003fb6:	d402      	bmi.n	8003fbe <_vfiprintf_r+0x2a>
 8003fb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fba:	f7ff fec7 	bl	8003d4c <__retarget_lock_acquire_recursive>
 8003fbe:	89ab      	ldrh	r3, [r5, #12]
 8003fc0:	071b      	lsls	r3, r3, #28
 8003fc2:	d501      	bpl.n	8003fc8 <_vfiprintf_r+0x34>
 8003fc4:	692b      	ldr	r3, [r5, #16]
 8003fc6:	b99b      	cbnz	r3, 8003ff0 <_vfiprintf_r+0x5c>
 8003fc8:	4629      	mov	r1, r5
 8003fca:	4630      	mov	r0, r6
 8003fcc:	f7ff fdee 	bl	8003bac <__swsetup_r>
 8003fd0:	b170      	cbz	r0, 8003ff0 <_vfiprintf_r+0x5c>
 8003fd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fd4:	07dc      	lsls	r4, r3, #31
 8003fd6:	d504      	bpl.n	8003fe2 <_vfiprintf_r+0x4e>
 8003fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fdc:	b01d      	add	sp, #116	; 0x74
 8003fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe2:	89ab      	ldrh	r3, [r5, #12]
 8003fe4:	0598      	lsls	r0, r3, #22
 8003fe6:	d4f7      	bmi.n	8003fd8 <_vfiprintf_r+0x44>
 8003fe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fea:	f7ff feb0 	bl	8003d4e <__retarget_lock_release_recursive>
 8003fee:	e7f3      	b.n	8003fd8 <_vfiprintf_r+0x44>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ffa:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ffe:	2330      	movs	r3, #48	; 0x30
 8004000:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80041b4 <_vfiprintf_r+0x220>
 8004004:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004008:	f04f 0901 	mov.w	r9, #1
 800400c:	4623      	mov	r3, r4
 800400e:	469a      	mov	sl, r3
 8004010:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004014:	b10a      	cbz	r2, 800401a <_vfiprintf_r+0x86>
 8004016:	2a25      	cmp	r2, #37	; 0x25
 8004018:	d1f9      	bne.n	800400e <_vfiprintf_r+0x7a>
 800401a:	ebba 0b04 	subs.w	fp, sl, r4
 800401e:	d00b      	beq.n	8004038 <_vfiprintf_r+0xa4>
 8004020:	465b      	mov	r3, fp
 8004022:	4622      	mov	r2, r4
 8004024:	4629      	mov	r1, r5
 8004026:	4630      	mov	r0, r6
 8004028:	f7ff ffa1 	bl	8003f6e <__sfputs_r>
 800402c:	3001      	adds	r0, #1
 800402e:	f000 80a9 	beq.w	8004184 <_vfiprintf_r+0x1f0>
 8004032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004034:	445a      	add	r2, fp
 8004036:	9209      	str	r2, [sp, #36]	; 0x24
 8004038:	f89a 3000 	ldrb.w	r3, [sl]
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80a1 	beq.w	8004184 <_vfiprintf_r+0x1f0>
 8004042:	2300      	movs	r3, #0
 8004044:	f04f 32ff 	mov.w	r2, #4294967295
 8004048:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800404c:	f10a 0a01 	add.w	sl, sl, #1
 8004050:	9304      	str	r3, [sp, #16]
 8004052:	9307      	str	r3, [sp, #28]
 8004054:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004058:	931a      	str	r3, [sp, #104]	; 0x68
 800405a:	4654      	mov	r4, sl
 800405c:	2205      	movs	r2, #5
 800405e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004062:	4854      	ldr	r0, [pc, #336]	; (80041b4 <_vfiprintf_r+0x220>)
 8004064:	f7fc f8d4 	bl	8000210 <memchr>
 8004068:	9a04      	ldr	r2, [sp, #16]
 800406a:	b9d8      	cbnz	r0, 80040a4 <_vfiprintf_r+0x110>
 800406c:	06d1      	lsls	r1, r2, #27
 800406e:	bf44      	itt	mi
 8004070:	2320      	movmi	r3, #32
 8004072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004076:	0713      	lsls	r3, r2, #28
 8004078:	bf44      	itt	mi
 800407a:	232b      	movmi	r3, #43	; 0x2b
 800407c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004080:	f89a 3000 	ldrb.w	r3, [sl]
 8004084:	2b2a      	cmp	r3, #42	; 0x2a
 8004086:	d015      	beq.n	80040b4 <_vfiprintf_r+0x120>
 8004088:	9a07      	ldr	r2, [sp, #28]
 800408a:	4654      	mov	r4, sl
 800408c:	2000      	movs	r0, #0
 800408e:	f04f 0c0a 	mov.w	ip, #10
 8004092:	4621      	mov	r1, r4
 8004094:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004098:	3b30      	subs	r3, #48	; 0x30
 800409a:	2b09      	cmp	r3, #9
 800409c:	d94d      	bls.n	800413a <_vfiprintf_r+0x1a6>
 800409e:	b1b0      	cbz	r0, 80040ce <_vfiprintf_r+0x13a>
 80040a0:	9207      	str	r2, [sp, #28]
 80040a2:	e014      	b.n	80040ce <_vfiprintf_r+0x13a>
 80040a4:	eba0 0308 	sub.w	r3, r0, r8
 80040a8:	fa09 f303 	lsl.w	r3, r9, r3
 80040ac:	4313      	orrs	r3, r2
 80040ae:	9304      	str	r3, [sp, #16]
 80040b0:	46a2      	mov	sl, r4
 80040b2:	e7d2      	b.n	800405a <_vfiprintf_r+0xc6>
 80040b4:	9b03      	ldr	r3, [sp, #12]
 80040b6:	1d19      	adds	r1, r3, #4
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	9103      	str	r1, [sp, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	bfbb      	ittet	lt
 80040c0:	425b      	neglt	r3, r3
 80040c2:	f042 0202 	orrlt.w	r2, r2, #2
 80040c6:	9307      	strge	r3, [sp, #28]
 80040c8:	9307      	strlt	r3, [sp, #28]
 80040ca:	bfb8      	it	lt
 80040cc:	9204      	strlt	r2, [sp, #16]
 80040ce:	7823      	ldrb	r3, [r4, #0]
 80040d0:	2b2e      	cmp	r3, #46	; 0x2e
 80040d2:	d10c      	bne.n	80040ee <_vfiprintf_r+0x15a>
 80040d4:	7863      	ldrb	r3, [r4, #1]
 80040d6:	2b2a      	cmp	r3, #42	; 0x2a
 80040d8:	d134      	bne.n	8004144 <_vfiprintf_r+0x1b0>
 80040da:	9b03      	ldr	r3, [sp, #12]
 80040dc:	1d1a      	adds	r2, r3, #4
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	9203      	str	r2, [sp, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bfb8      	it	lt
 80040e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80040ea:	3402      	adds	r4, #2
 80040ec:	9305      	str	r3, [sp, #20]
 80040ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80041c4 <_vfiprintf_r+0x230>
 80040f2:	7821      	ldrb	r1, [r4, #0]
 80040f4:	2203      	movs	r2, #3
 80040f6:	4650      	mov	r0, sl
 80040f8:	f7fc f88a 	bl	8000210 <memchr>
 80040fc:	b138      	cbz	r0, 800410e <_vfiprintf_r+0x17a>
 80040fe:	9b04      	ldr	r3, [sp, #16]
 8004100:	eba0 000a 	sub.w	r0, r0, sl
 8004104:	2240      	movs	r2, #64	; 0x40
 8004106:	4082      	lsls	r2, r0
 8004108:	4313      	orrs	r3, r2
 800410a:	3401      	adds	r4, #1
 800410c:	9304      	str	r3, [sp, #16]
 800410e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004112:	4829      	ldr	r0, [pc, #164]	; (80041b8 <_vfiprintf_r+0x224>)
 8004114:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004118:	2206      	movs	r2, #6
 800411a:	f7fc f879 	bl	8000210 <memchr>
 800411e:	2800      	cmp	r0, #0
 8004120:	d03f      	beq.n	80041a2 <_vfiprintf_r+0x20e>
 8004122:	4b26      	ldr	r3, [pc, #152]	; (80041bc <_vfiprintf_r+0x228>)
 8004124:	bb1b      	cbnz	r3, 800416e <_vfiprintf_r+0x1da>
 8004126:	9b03      	ldr	r3, [sp, #12]
 8004128:	3307      	adds	r3, #7
 800412a:	f023 0307 	bic.w	r3, r3, #7
 800412e:	3308      	adds	r3, #8
 8004130:	9303      	str	r3, [sp, #12]
 8004132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004134:	443b      	add	r3, r7
 8004136:	9309      	str	r3, [sp, #36]	; 0x24
 8004138:	e768      	b.n	800400c <_vfiprintf_r+0x78>
 800413a:	fb0c 3202 	mla	r2, ip, r2, r3
 800413e:	460c      	mov	r4, r1
 8004140:	2001      	movs	r0, #1
 8004142:	e7a6      	b.n	8004092 <_vfiprintf_r+0xfe>
 8004144:	2300      	movs	r3, #0
 8004146:	3401      	adds	r4, #1
 8004148:	9305      	str	r3, [sp, #20]
 800414a:	4619      	mov	r1, r3
 800414c:	f04f 0c0a 	mov.w	ip, #10
 8004150:	4620      	mov	r0, r4
 8004152:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004156:	3a30      	subs	r2, #48	; 0x30
 8004158:	2a09      	cmp	r2, #9
 800415a:	d903      	bls.n	8004164 <_vfiprintf_r+0x1d0>
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0c6      	beq.n	80040ee <_vfiprintf_r+0x15a>
 8004160:	9105      	str	r1, [sp, #20]
 8004162:	e7c4      	b.n	80040ee <_vfiprintf_r+0x15a>
 8004164:	fb0c 2101 	mla	r1, ip, r1, r2
 8004168:	4604      	mov	r4, r0
 800416a:	2301      	movs	r3, #1
 800416c:	e7f0      	b.n	8004150 <_vfiprintf_r+0x1bc>
 800416e:	ab03      	add	r3, sp, #12
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	462a      	mov	r2, r5
 8004174:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <_vfiprintf_r+0x22c>)
 8004176:	a904      	add	r1, sp, #16
 8004178:	4630      	mov	r0, r6
 800417a:	f3af 8000 	nop.w
 800417e:	4607      	mov	r7, r0
 8004180:	1c78      	adds	r0, r7, #1
 8004182:	d1d6      	bne.n	8004132 <_vfiprintf_r+0x19e>
 8004184:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004186:	07d9      	lsls	r1, r3, #31
 8004188:	d405      	bmi.n	8004196 <_vfiprintf_r+0x202>
 800418a:	89ab      	ldrh	r3, [r5, #12]
 800418c:	059a      	lsls	r2, r3, #22
 800418e:	d402      	bmi.n	8004196 <_vfiprintf_r+0x202>
 8004190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004192:	f7ff fddc 	bl	8003d4e <__retarget_lock_release_recursive>
 8004196:	89ab      	ldrh	r3, [r5, #12]
 8004198:	065b      	lsls	r3, r3, #25
 800419a:	f53f af1d 	bmi.w	8003fd8 <_vfiprintf_r+0x44>
 800419e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041a0:	e71c      	b.n	8003fdc <_vfiprintf_r+0x48>
 80041a2:	ab03      	add	r3, sp, #12
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	462a      	mov	r2, r5
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <_vfiprintf_r+0x22c>)
 80041aa:	a904      	add	r1, sp, #16
 80041ac:	4630      	mov	r0, r6
 80041ae:	f000 f879 	bl	80042a4 <_printf_i>
 80041b2:	e7e4      	b.n	800417e <_vfiprintf_r+0x1ea>
 80041b4:	080048a4 	.word	0x080048a4
 80041b8:	080048ae 	.word	0x080048ae
 80041bc:	00000000 	.word	0x00000000
 80041c0:	08003f6f 	.word	0x08003f6f
 80041c4:	080048aa 	.word	0x080048aa

080041c8 <_printf_common>:
 80041c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041cc:	4616      	mov	r6, r2
 80041ce:	4699      	mov	r9, r3
 80041d0:	688a      	ldr	r2, [r1, #8]
 80041d2:	690b      	ldr	r3, [r1, #16]
 80041d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041d8:	4293      	cmp	r3, r2
 80041da:	bfb8      	it	lt
 80041dc:	4613      	movlt	r3, r2
 80041de:	6033      	str	r3, [r6, #0]
 80041e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041e4:	4607      	mov	r7, r0
 80041e6:	460c      	mov	r4, r1
 80041e8:	b10a      	cbz	r2, 80041ee <_printf_common+0x26>
 80041ea:	3301      	adds	r3, #1
 80041ec:	6033      	str	r3, [r6, #0]
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	0699      	lsls	r1, r3, #26
 80041f2:	bf42      	ittt	mi
 80041f4:	6833      	ldrmi	r3, [r6, #0]
 80041f6:	3302      	addmi	r3, #2
 80041f8:	6033      	strmi	r3, [r6, #0]
 80041fa:	6825      	ldr	r5, [r4, #0]
 80041fc:	f015 0506 	ands.w	r5, r5, #6
 8004200:	d106      	bne.n	8004210 <_printf_common+0x48>
 8004202:	f104 0a19 	add.w	sl, r4, #25
 8004206:	68e3      	ldr	r3, [r4, #12]
 8004208:	6832      	ldr	r2, [r6, #0]
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	42ab      	cmp	r3, r5
 800420e:	dc26      	bgt.n	800425e <_printf_common+0x96>
 8004210:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004214:	1e13      	subs	r3, r2, #0
 8004216:	6822      	ldr	r2, [r4, #0]
 8004218:	bf18      	it	ne
 800421a:	2301      	movne	r3, #1
 800421c:	0692      	lsls	r2, r2, #26
 800421e:	d42b      	bmi.n	8004278 <_printf_common+0xb0>
 8004220:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004224:	4649      	mov	r1, r9
 8004226:	4638      	mov	r0, r7
 8004228:	47c0      	blx	r8
 800422a:	3001      	adds	r0, #1
 800422c:	d01e      	beq.n	800426c <_printf_common+0xa4>
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	6922      	ldr	r2, [r4, #16]
 8004232:	f003 0306 	and.w	r3, r3, #6
 8004236:	2b04      	cmp	r3, #4
 8004238:	bf02      	ittt	eq
 800423a:	68e5      	ldreq	r5, [r4, #12]
 800423c:	6833      	ldreq	r3, [r6, #0]
 800423e:	1aed      	subeq	r5, r5, r3
 8004240:	68a3      	ldr	r3, [r4, #8]
 8004242:	bf0c      	ite	eq
 8004244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004248:	2500      	movne	r5, #0
 800424a:	4293      	cmp	r3, r2
 800424c:	bfc4      	itt	gt
 800424e:	1a9b      	subgt	r3, r3, r2
 8004250:	18ed      	addgt	r5, r5, r3
 8004252:	2600      	movs	r6, #0
 8004254:	341a      	adds	r4, #26
 8004256:	42b5      	cmp	r5, r6
 8004258:	d11a      	bne.n	8004290 <_printf_common+0xc8>
 800425a:	2000      	movs	r0, #0
 800425c:	e008      	b.n	8004270 <_printf_common+0xa8>
 800425e:	2301      	movs	r3, #1
 8004260:	4652      	mov	r2, sl
 8004262:	4649      	mov	r1, r9
 8004264:	4638      	mov	r0, r7
 8004266:	47c0      	blx	r8
 8004268:	3001      	adds	r0, #1
 800426a:	d103      	bne.n	8004274 <_printf_common+0xac>
 800426c:	f04f 30ff 	mov.w	r0, #4294967295
 8004270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004274:	3501      	adds	r5, #1
 8004276:	e7c6      	b.n	8004206 <_printf_common+0x3e>
 8004278:	18e1      	adds	r1, r4, r3
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	2030      	movs	r0, #48	; 0x30
 800427e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004282:	4422      	add	r2, r4
 8004284:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004288:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800428c:	3302      	adds	r3, #2
 800428e:	e7c7      	b.n	8004220 <_printf_common+0x58>
 8004290:	2301      	movs	r3, #1
 8004292:	4622      	mov	r2, r4
 8004294:	4649      	mov	r1, r9
 8004296:	4638      	mov	r0, r7
 8004298:	47c0      	blx	r8
 800429a:	3001      	adds	r0, #1
 800429c:	d0e6      	beq.n	800426c <_printf_common+0xa4>
 800429e:	3601      	adds	r6, #1
 80042a0:	e7d9      	b.n	8004256 <_printf_common+0x8e>
	...

080042a4 <_printf_i>:
 80042a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042a8:	7e0f      	ldrb	r7, [r1, #24]
 80042aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042ac:	2f78      	cmp	r7, #120	; 0x78
 80042ae:	4691      	mov	r9, r2
 80042b0:	4680      	mov	r8, r0
 80042b2:	460c      	mov	r4, r1
 80042b4:	469a      	mov	sl, r3
 80042b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042ba:	d807      	bhi.n	80042cc <_printf_i+0x28>
 80042bc:	2f62      	cmp	r7, #98	; 0x62
 80042be:	d80a      	bhi.n	80042d6 <_printf_i+0x32>
 80042c0:	2f00      	cmp	r7, #0
 80042c2:	f000 80d4 	beq.w	800446e <_printf_i+0x1ca>
 80042c6:	2f58      	cmp	r7, #88	; 0x58
 80042c8:	f000 80c0 	beq.w	800444c <_printf_i+0x1a8>
 80042cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042d4:	e03a      	b.n	800434c <_printf_i+0xa8>
 80042d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042da:	2b15      	cmp	r3, #21
 80042dc:	d8f6      	bhi.n	80042cc <_printf_i+0x28>
 80042de:	a101      	add	r1, pc, #4	; (adr r1, 80042e4 <_printf_i+0x40>)
 80042e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042e4:	0800433d 	.word	0x0800433d
 80042e8:	08004351 	.word	0x08004351
 80042ec:	080042cd 	.word	0x080042cd
 80042f0:	080042cd 	.word	0x080042cd
 80042f4:	080042cd 	.word	0x080042cd
 80042f8:	080042cd 	.word	0x080042cd
 80042fc:	08004351 	.word	0x08004351
 8004300:	080042cd 	.word	0x080042cd
 8004304:	080042cd 	.word	0x080042cd
 8004308:	080042cd 	.word	0x080042cd
 800430c:	080042cd 	.word	0x080042cd
 8004310:	08004455 	.word	0x08004455
 8004314:	0800437d 	.word	0x0800437d
 8004318:	0800440f 	.word	0x0800440f
 800431c:	080042cd 	.word	0x080042cd
 8004320:	080042cd 	.word	0x080042cd
 8004324:	08004477 	.word	0x08004477
 8004328:	080042cd 	.word	0x080042cd
 800432c:	0800437d 	.word	0x0800437d
 8004330:	080042cd 	.word	0x080042cd
 8004334:	080042cd 	.word	0x080042cd
 8004338:	08004417 	.word	0x08004417
 800433c:	682b      	ldr	r3, [r5, #0]
 800433e:	1d1a      	adds	r2, r3, #4
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	602a      	str	r2, [r5, #0]
 8004344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004348:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800434c:	2301      	movs	r3, #1
 800434e:	e09f      	b.n	8004490 <_printf_i+0x1ec>
 8004350:	6820      	ldr	r0, [r4, #0]
 8004352:	682b      	ldr	r3, [r5, #0]
 8004354:	0607      	lsls	r7, r0, #24
 8004356:	f103 0104 	add.w	r1, r3, #4
 800435a:	6029      	str	r1, [r5, #0]
 800435c:	d501      	bpl.n	8004362 <_printf_i+0xbe>
 800435e:	681e      	ldr	r6, [r3, #0]
 8004360:	e003      	b.n	800436a <_printf_i+0xc6>
 8004362:	0646      	lsls	r6, r0, #25
 8004364:	d5fb      	bpl.n	800435e <_printf_i+0xba>
 8004366:	f9b3 6000 	ldrsh.w	r6, [r3]
 800436a:	2e00      	cmp	r6, #0
 800436c:	da03      	bge.n	8004376 <_printf_i+0xd2>
 800436e:	232d      	movs	r3, #45	; 0x2d
 8004370:	4276      	negs	r6, r6
 8004372:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004376:	485a      	ldr	r0, [pc, #360]	; (80044e0 <_printf_i+0x23c>)
 8004378:	230a      	movs	r3, #10
 800437a:	e012      	b.n	80043a2 <_printf_i+0xfe>
 800437c:	682b      	ldr	r3, [r5, #0]
 800437e:	6820      	ldr	r0, [r4, #0]
 8004380:	1d19      	adds	r1, r3, #4
 8004382:	6029      	str	r1, [r5, #0]
 8004384:	0605      	lsls	r5, r0, #24
 8004386:	d501      	bpl.n	800438c <_printf_i+0xe8>
 8004388:	681e      	ldr	r6, [r3, #0]
 800438a:	e002      	b.n	8004392 <_printf_i+0xee>
 800438c:	0641      	lsls	r1, r0, #25
 800438e:	d5fb      	bpl.n	8004388 <_printf_i+0xe4>
 8004390:	881e      	ldrh	r6, [r3, #0]
 8004392:	4853      	ldr	r0, [pc, #332]	; (80044e0 <_printf_i+0x23c>)
 8004394:	2f6f      	cmp	r7, #111	; 0x6f
 8004396:	bf0c      	ite	eq
 8004398:	2308      	moveq	r3, #8
 800439a:	230a      	movne	r3, #10
 800439c:	2100      	movs	r1, #0
 800439e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043a2:	6865      	ldr	r5, [r4, #4]
 80043a4:	60a5      	str	r5, [r4, #8]
 80043a6:	2d00      	cmp	r5, #0
 80043a8:	bfa2      	ittt	ge
 80043aa:	6821      	ldrge	r1, [r4, #0]
 80043ac:	f021 0104 	bicge.w	r1, r1, #4
 80043b0:	6021      	strge	r1, [r4, #0]
 80043b2:	b90e      	cbnz	r6, 80043b8 <_printf_i+0x114>
 80043b4:	2d00      	cmp	r5, #0
 80043b6:	d04b      	beq.n	8004450 <_printf_i+0x1ac>
 80043b8:	4615      	mov	r5, r2
 80043ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80043be:	fb03 6711 	mls	r7, r3, r1, r6
 80043c2:	5dc7      	ldrb	r7, [r0, r7]
 80043c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043c8:	4637      	mov	r7, r6
 80043ca:	42bb      	cmp	r3, r7
 80043cc:	460e      	mov	r6, r1
 80043ce:	d9f4      	bls.n	80043ba <_printf_i+0x116>
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d10b      	bne.n	80043ec <_printf_i+0x148>
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	07de      	lsls	r6, r3, #31
 80043d8:	d508      	bpl.n	80043ec <_printf_i+0x148>
 80043da:	6923      	ldr	r3, [r4, #16]
 80043dc:	6861      	ldr	r1, [r4, #4]
 80043de:	4299      	cmp	r1, r3
 80043e0:	bfde      	ittt	le
 80043e2:	2330      	movle	r3, #48	; 0x30
 80043e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043ec:	1b52      	subs	r2, r2, r5
 80043ee:	6122      	str	r2, [r4, #16]
 80043f0:	f8cd a000 	str.w	sl, [sp]
 80043f4:	464b      	mov	r3, r9
 80043f6:	aa03      	add	r2, sp, #12
 80043f8:	4621      	mov	r1, r4
 80043fa:	4640      	mov	r0, r8
 80043fc:	f7ff fee4 	bl	80041c8 <_printf_common>
 8004400:	3001      	adds	r0, #1
 8004402:	d14a      	bne.n	800449a <_printf_i+0x1f6>
 8004404:	f04f 30ff 	mov.w	r0, #4294967295
 8004408:	b004      	add	sp, #16
 800440a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	f043 0320 	orr.w	r3, r3, #32
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	4833      	ldr	r0, [pc, #204]	; (80044e4 <_printf_i+0x240>)
 8004418:	2778      	movs	r7, #120	; 0x78
 800441a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	6829      	ldr	r1, [r5, #0]
 8004422:	061f      	lsls	r7, r3, #24
 8004424:	f851 6b04 	ldr.w	r6, [r1], #4
 8004428:	d402      	bmi.n	8004430 <_printf_i+0x18c>
 800442a:	065f      	lsls	r7, r3, #25
 800442c:	bf48      	it	mi
 800442e:	b2b6      	uxthmi	r6, r6
 8004430:	07df      	lsls	r7, r3, #31
 8004432:	bf48      	it	mi
 8004434:	f043 0320 	orrmi.w	r3, r3, #32
 8004438:	6029      	str	r1, [r5, #0]
 800443a:	bf48      	it	mi
 800443c:	6023      	strmi	r3, [r4, #0]
 800443e:	b91e      	cbnz	r6, 8004448 <_printf_i+0x1a4>
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	f023 0320 	bic.w	r3, r3, #32
 8004446:	6023      	str	r3, [r4, #0]
 8004448:	2310      	movs	r3, #16
 800444a:	e7a7      	b.n	800439c <_printf_i+0xf8>
 800444c:	4824      	ldr	r0, [pc, #144]	; (80044e0 <_printf_i+0x23c>)
 800444e:	e7e4      	b.n	800441a <_printf_i+0x176>
 8004450:	4615      	mov	r5, r2
 8004452:	e7bd      	b.n	80043d0 <_printf_i+0x12c>
 8004454:	682b      	ldr	r3, [r5, #0]
 8004456:	6826      	ldr	r6, [r4, #0]
 8004458:	6961      	ldr	r1, [r4, #20]
 800445a:	1d18      	adds	r0, r3, #4
 800445c:	6028      	str	r0, [r5, #0]
 800445e:	0635      	lsls	r5, r6, #24
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	d501      	bpl.n	8004468 <_printf_i+0x1c4>
 8004464:	6019      	str	r1, [r3, #0]
 8004466:	e002      	b.n	800446e <_printf_i+0x1ca>
 8004468:	0670      	lsls	r0, r6, #25
 800446a:	d5fb      	bpl.n	8004464 <_printf_i+0x1c0>
 800446c:	8019      	strh	r1, [r3, #0]
 800446e:	2300      	movs	r3, #0
 8004470:	6123      	str	r3, [r4, #16]
 8004472:	4615      	mov	r5, r2
 8004474:	e7bc      	b.n	80043f0 <_printf_i+0x14c>
 8004476:	682b      	ldr	r3, [r5, #0]
 8004478:	1d1a      	adds	r2, r3, #4
 800447a:	602a      	str	r2, [r5, #0]
 800447c:	681d      	ldr	r5, [r3, #0]
 800447e:	6862      	ldr	r2, [r4, #4]
 8004480:	2100      	movs	r1, #0
 8004482:	4628      	mov	r0, r5
 8004484:	f7fb fec4 	bl	8000210 <memchr>
 8004488:	b108      	cbz	r0, 800448e <_printf_i+0x1ea>
 800448a:	1b40      	subs	r0, r0, r5
 800448c:	6060      	str	r0, [r4, #4]
 800448e:	6863      	ldr	r3, [r4, #4]
 8004490:	6123      	str	r3, [r4, #16]
 8004492:	2300      	movs	r3, #0
 8004494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004498:	e7aa      	b.n	80043f0 <_printf_i+0x14c>
 800449a:	6923      	ldr	r3, [r4, #16]
 800449c:	462a      	mov	r2, r5
 800449e:	4649      	mov	r1, r9
 80044a0:	4640      	mov	r0, r8
 80044a2:	47d0      	blx	sl
 80044a4:	3001      	adds	r0, #1
 80044a6:	d0ad      	beq.n	8004404 <_printf_i+0x160>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	079b      	lsls	r3, r3, #30
 80044ac:	d413      	bmi.n	80044d6 <_printf_i+0x232>
 80044ae:	68e0      	ldr	r0, [r4, #12]
 80044b0:	9b03      	ldr	r3, [sp, #12]
 80044b2:	4298      	cmp	r0, r3
 80044b4:	bfb8      	it	lt
 80044b6:	4618      	movlt	r0, r3
 80044b8:	e7a6      	b.n	8004408 <_printf_i+0x164>
 80044ba:	2301      	movs	r3, #1
 80044bc:	4632      	mov	r2, r6
 80044be:	4649      	mov	r1, r9
 80044c0:	4640      	mov	r0, r8
 80044c2:	47d0      	blx	sl
 80044c4:	3001      	adds	r0, #1
 80044c6:	d09d      	beq.n	8004404 <_printf_i+0x160>
 80044c8:	3501      	adds	r5, #1
 80044ca:	68e3      	ldr	r3, [r4, #12]
 80044cc:	9903      	ldr	r1, [sp, #12]
 80044ce:	1a5b      	subs	r3, r3, r1
 80044d0:	42ab      	cmp	r3, r5
 80044d2:	dcf2      	bgt.n	80044ba <_printf_i+0x216>
 80044d4:	e7eb      	b.n	80044ae <_printf_i+0x20a>
 80044d6:	2500      	movs	r5, #0
 80044d8:	f104 0619 	add.w	r6, r4, #25
 80044dc:	e7f5      	b.n	80044ca <_printf_i+0x226>
 80044de:	bf00      	nop
 80044e0:	080048b5 	.word	0x080048b5
 80044e4:	080048c6 	.word	0x080048c6

080044e8 <__sflush_r>:
 80044e8:	898a      	ldrh	r2, [r1, #12]
 80044ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ee:	4605      	mov	r5, r0
 80044f0:	0710      	lsls	r0, r2, #28
 80044f2:	460c      	mov	r4, r1
 80044f4:	d458      	bmi.n	80045a8 <__sflush_r+0xc0>
 80044f6:	684b      	ldr	r3, [r1, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	dc05      	bgt.n	8004508 <__sflush_r+0x20>
 80044fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	dc02      	bgt.n	8004508 <__sflush_r+0x20>
 8004502:	2000      	movs	r0, #0
 8004504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004508:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800450a:	2e00      	cmp	r6, #0
 800450c:	d0f9      	beq.n	8004502 <__sflush_r+0x1a>
 800450e:	2300      	movs	r3, #0
 8004510:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004514:	682f      	ldr	r7, [r5, #0]
 8004516:	6a21      	ldr	r1, [r4, #32]
 8004518:	602b      	str	r3, [r5, #0]
 800451a:	d032      	beq.n	8004582 <__sflush_r+0x9a>
 800451c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800451e:	89a3      	ldrh	r3, [r4, #12]
 8004520:	075a      	lsls	r2, r3, #29
 8004522:	d505      	bpl.n	8004530 <__sflush_r+0x48>
 8004524:	6863      	ldr	r3, [r4, #4]
 8004526:	1ac0      	subs	r0, r0, r3
 8004528:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800452a:	b10b      	cbz	r3, 8004530 <__sflush_r+0x48>
 800452c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800452e:	1ac0      	subs	r0, r0, r3
 8004530:	2300      	movs	r3, #0
 8004532:	4602      	mov	r2, r0
 8004534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004536:	6a21      	ldr	r1, [r4, #32]
 8004538:	4628      	mov	r0, r5
 800453a:	47b0      	blx	r6
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	d106      	bne.n	8004550 <__sflush_r+0x68>
 8004542:	6829      	ldr	r1, [r5, #0]
 8004544:	291d      	cmp	r1, #29
 8004546:	d82b      	bhi.n	80045a0 <__sflush_r+0xb8>
 8004548:	4a29      	ldr	r2, [pc, #164]	; (80045f0 <__sflush_r+0x108>)
 800454a:	410a      	asrs	r2, r1
 800454c:	07d6      	lsls	r6, r2, #31
 800454e:	d427      	bmi.n	80045a0 <__sflush_r+0xb8>
 8004550:	2200      	movs	r2, #0
 8004552:	6062      	str	r2, [r4, #4]
 8004554:	04d9      	lsls	r1, r3, #19
 8004556:	6922      	ldr	r2, [r4, #16]
 8004558:	6022      	str	r2, [r4, #0]
 800455a:	d504      	bpl.n	8004566 <__sflush_r+0x7e>
 800455c:	1c42      	adds	r2, r0, #1
 800455e:	d101      	bne.n	8004564 <__sflush_r+0x7c>
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	b903      	cbnz	r3, 8004566 <__sflush_r+0x7e>
 8004564:	6560      	str	r0, [r4, #84]	; 0x54
 8004566:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004568:	602f      	str	r7, [r5, #0]
 800456a:	2900      	cmp	r1, #0
 800456c:	d0c9      	beq.n	8004502 <__sflush_r+0x1a>
 800456e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004572:	4299      	cmp	r1, r3
 8004574:	d002      	beq.n	800457c <__sflush_r+0x94>
 8004576:	4628      	mov	r0, r5
 8004578:	f7ff fbea 	bl	8003d50 <_free_r>
 800457c:	2000      	movs	r0, #0
 800457e:	6360      	str	r0, [r4, #52]	; 0x34
 8004580:	e7c0      	b.n	8004504 <__sflush_r+0x1c>
 8004582:	2301      	movs	r3, #1
 8004584:	4628      	mov	r0, r5
 8004586:	47b0      	blx	r6
 8004588:	1c41      	adds	r1, r0, #1
 800458a:	d1c8      	bne.n	800451e <__sflush_r+0x36>
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0c5      	beq.n	800451e <__sflush_r+0x36>
 8004592:	2b1d      	cmp	r3, #29
 8004594:	d001      	beq.n	800459a <__sflush_r+0xb2>
 8004596:	2b16      	cmp	r3, #22
 8004598:	d101      	bne.n	800459e <__sflush_r+0xb6>
 800459a:	602f      	str	r7, [r5, #0]
 800459c:	e7b1      	b.n	8004502 <__sflush_r+0x1a>
 800459e:	89a3      	ldrh	r3, [r4, #12]
 80045a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a4:	81a3      	strh	r3, [r4, #12]
 80045a6:	e7ad      	b.n	8004504 <__sflush_r+0x1c>
 80045a8:	690f      	ldr	r7, [r1, #16]
 80045aa:	2f00      	cmp	r7, #0
 80045ac:	d0a9      	beq.n	8004502 <__sflush_r+0x1a>
 80045ae:	0793      	lsls	r3, r2, #30
 80045b0:	680e      	ldr	r6, [r1, #0]
 80045b2:	bf08      	it	eq
 80045b4:	694b      	ldreq	r3, [r1, #20]
 80045b6:	600f      	str	r7, [r1, #0]
 80045b8:	bf18      	it	ne
 80045ba:	2300      	movne	r3, #0
 80045bc:	eba6 0807 	sub.w	r8, r6, r7
 80045c0:	608b      	str	r3, [r1, #8]
 80045c2:	f1b8 0f00 	cmp.w	r8, #0
 80045c6:	dd9c      	ble.n	8004502 <__sflush_r+0x1a>
 80045c8:	6a21      	ldr	r1, [r4, #32]
 80045ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80045cc:	4643      	mov	r3, r8
 80045ce:	463a      	mov	r2, r7
 80045d0:	4628      	mov	r0, r5
 80045d2:	47b0      	blx	r6
 80045d4:	2800      	cmp	r0, #0
 80045d6:	dc06      	bgt.n	80045e6 <__sflush_r+0xfe>
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045de:	81a3      	strh	r3, [r4, #12]
 80045e0:	f04f 30ff 	mov.w	r0, #4294967295
 80045e4:	e78e      	b.n	8004504 <__sflush_r+0x1c>
 80045e6:	4407      	add	r7, r0
 80045e8:	eba8 0800 	sub.w	r8, r8, r0
 80045ec:	e7e9      	b.n	80045c2 <__sflush_r+0xda>
 80045ee:	bf00      	nop
 80045f0:	dfbffffe 	.word	0xdfbffffe

080045f4 <_fflush_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	690b      	ldr	r3, [r1, #16]
 80045f8:	4605      	mov	r5, r0
 80045fa:	460c      	mov	r4, r1
 80045fc:	b913      	cbnz	r3, 8004604 <_fflush_r+0x10>
 80045fe:	2500      	movs	r5, #0
 8004600:	4628      	mov	r0, r5
 8004602:	bd38      	pop	{r3, r4, r5, pc}
 8004604:	b118      	cbz	r0, 800460e <_fflush_r+0x1a>
 8004606:	6a03      	ldr	r3, [r0, #32]
 8004608:	b90b      	cbnz	r3, 800460e <_fflush_r+0x1a>
 800460a:	f7ff f9ab 	bl	8003964 <__sinit>
 800460e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f3      	beq.n	80045fe <_fflush_r+0xa>
 8004616:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004618:	07d0      	lsls	r0, r2, #31
 800461a:	d404      	bmi.n	8004626 <_fflush_r+0x32>
 800461c:	0599      	lsls	r1, r3, #22
 800461e:	d402      	bmi.n	8004626 <_fflush_r+0x32>
 8004620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004622:	f7ff fb93 	bl	8003d4c <__retarget_lock_acquire_recursive>
 8004626:	4628      	mov	r0, r5
 8004628:	4621      	mov	r1, r4
 800462a:	f7ff ff5d 	bl	80044e8 <__sflush_r>
 800462e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004630:	07da      	lsls	r2, r3, #31
 8004632:	4605      	mov	r5, r0
 8004634:	d4e4      	bmi.n	8004600 <_fflush_r+0xc>
 8004636:	89a3      	ldrh	r3, [r4, #12]
 8004638:	059b      	lsls	r3, r3, #22
 800463a:	d4e1      	bmi.n	8004600 <_fflush_r+0xc>
 800463c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800463e:	f7ff fb86 	bl	8003d4e <__retarget_lock_release_recursive>
 8004642:	e7dd      	b.n	8004600 <_fflush_r+0xc>

08004644 <__swhatbuf_r>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	460c      	mov	r4, r1
 8004648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800464c:	2900      	cmp	r1, #0
 800464e:	b096      	sub	sp, #88	; 0x58
 8004650:	4615      	mov	r5, r2
 8004652:	461e      	mov	r6, r3
 8004654:	da0d      	bge.n	8004672 <__swhatbuf_r+0x2e>
 8004656:	89a3      	ldrh	r3, [r4, #12]
 8004658:	f013 0f80 	tst.w	r3, #128	; 0x80
 800465c:	f04f 0100 	mov.w	r1, #0
 8004660:	bf0c      	ite	eq
 8004662:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004666:	2340      	movne	r3, #64	; 0x40
 8004668:	2000      	movs	r0, #0
 800466a:	6031      	str	r1, [r6, #0]
 800466c:	602b      	str	r3, [r5, #0]
 800466e:	b016      	add	sp, #88	; 0x58
 8004670:	bd70      	pop	{r4, r5, r6, pc}
 8004672:	466a      	mov	r2, sp
 8004674:	f000 f848 	bl	8004708 <_fstat_r>
 8004678:	2800      	cmp	r0, #0
 800467a:	dbec      	blt.n	8004656 <__swhatbuf_r+0x12>
 800467c:	9901      	ldr	r1, [sp, #4]
 800467e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004682:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004686:	4259      	negs	r1, r3
 8004688:	4159      	adcs	r1, r3
 800468a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800468e:	e7eb      	b.n	8004668 <__swhatbuf_r+0x24>

08004690 <__smakebuf_r>:
 8004690:	898b      	ldrh	r3, [r1, #12]
 8004692:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004694:	079d      	lsls	r5, r3, #30
 8004696:	4606      	mov	r6, r0
 8004698:	460c      	mov	r4, r1
 800469a:	d507      	bpl.n	80046ac <__smakebuf_r+0x1c>
 800469c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	6123      	str	r3, [r4, #16]
 80046a4:	2301      	movs	r3, #1
 80046a6:	6163      	str	r3, [r4, #20]
 80046a8:	b002      	add	sp, #8
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	ab01      	add	r3, sp, #4
 80046ae:	466a      	mov	r2, sp
 80046b0:	f7ff ffc8 	bl	8004644 <__swhatbuf_r>
 80046b4:	9900      	ldr	r1, [sp, #0]
 80046b6:	4605      	mov	r5, r0
 80046b8:	4630      	mov	r0, r6
 80046ba:	f7ff fbb5 	bl	8003e28 <_malloc_r>
 80046be:	b948      	cbnz	r0, 80046d4 <__smakebuf_r+0x44>
 80046c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046c4:	059a      	lsls	r2, r3, #22
 80046c6:	d4ef      	bmi.n	80046a8 <__smakebuf_r+0x18>
 80046c8:	f023 0303 	bic.w	r3, r3, #3
 80046cc:	f043 0302 	orr.w	r3, r3, #2
 80046d0:	81a3      	strh	r3, [r4, #12]
 80046d2:	e7e3      	b.n	800469c <__smakebuf_r+0xc>
 80046d4:	89a3      	ldrh	r3, [r4, #12]
 80046d6:	6020      	str	r0, [r4, #0]
 80046d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046dc:	81a3      	strh	r3, [r4, #12]
 80046de:	9b00      	ldr	r3, [sp, #0]
 80046e0:	6163      	str	r3, [r4, #20]
 80046e2:	9b01      	ldr	r3, [sp, #4]
 80046e4:	6120      	str	r0, [r4, #16]
 80046e6:	b15b      	cbz	r3, 8004700 <__smakebuf_r+0x70>
 80046e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ec:	4630      	mov	r0, r6
 80046ee:	f000 f81d 	bl	800472c <_isatty_r>
 80046f2:	b128      	cbz	r0, 8004700 <__smakebuf_r+0x70>
 80046f4:	89a3      	ldrh	r3, [r4, #12]
 80046f6:	f023 0303 	bic.w	r3, r3, #3
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	81a3      	strh	r3, [r4, #12]
 8004700:	89a3      	ldrh	r3, [r4, #12]
 8004702:	431d      	orrs	r5, r3
 8004704:	81a5      	strh	r5, [r4, #12]
 8004706:	e7cf      	b.n	80046a8 <__smakebuf_r+0x18>

08004708 <_fstat_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	4d07      	ldr	r5, [pc, #28]	; (8004728 <_fstat_r+0x20>)
 800470c:	2300      	movs	r3, #0
 800470e:	4604      	mov	r4, r0
 8004710:	4608      	mov	r0, r1
 8004712:	4611      	mov	r1, r2
 8004714:	602b      	str	r3, [r5, #0]
 8004716:	f7fc f9f0 	bl	8000afa <_fstat>
 800471a:	1c43      	adds	r3, r0, #1
 800471c:	d102      	bne.n	8004724 <_fstat_r+0x1c>
 800471e:	682b      	ldr	r3, [r5, #0]
 8004720:	b103      	cbz	r3, 8004724 <_fstat_r+0x1c>
 8004722:	6023      	str	r3, [r4, #0]
 8004724:	bd38      	pop	{r3, r4, r5, pc}
 8004726:	bf00      	nop
 8004728:	200002a0 	.word	0x200002a0

0800472c <_isatty_r>:
 800472c:	b538      	push	{r3, r4, r5, lr}
 800472e:	4d06      	ldr	r5, [pc, #24]	; (8004748 <_isatty_r+0x1c>)
 8004730:	2300      	movs	r3, #0
 8004732:	4604      	mov	r4, r0
 8004734:	4608      	mov	r0, r1
 8004736:	602b      	str	r3, [r5, #0]
 8004738:	f7fc f9ef 	bl	8000b1a <_isatty>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d102      	bne.n	8004746 <_isatty_r+0x1a>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	b103      	cbz	r3, 8004746 <_isatty_r+0x1a>
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	bd38      	pop	{r3, r4, r5, pc}
 8004748:	200002a0 	.word	0x200002a0

0800474c <_sbrk_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4d06      	ldr	r5, [pc, #24]	; (8004768 <_sbrk_r+0x1c>)
 8004750:	2300      	movs	r3, #0
 8004752:	4604      	mov	r4, r0
 8004754:	4608      	mov	r0, r1
 8004756:	602b      	str	r3, [r5, #0]
 8004758:	f7fc f9f8 	bl	8000b4c <_sbrk>
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	d102      	bne.n	8004766 <_sbrk_r+0x1a>
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	b103      	cbz	r3, 8004766 <_sbrk_r+0x1a>
 8004764:	6023      	str	r3, [r4, #0]
 8004766:	bd38      	pop	{r3, r4, r5, pc}
 8004768:	200002a0 	.word	0x200002a0

0800476c <_init>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	bf00      	nop
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr

08004778 <_fini>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr
