
446RE_I2C_CAN_TP4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006808  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  080069d8  080069d8  000169d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d5c  08006d5c  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d5c  08006d5c  00016d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d64  08006d64  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d64  08006d64  00016d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d68  08006d68  00016d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08006d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  2000012c  08006e98  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08006e98  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f5c9  00000000  00000000  0002019f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002af6  00000000  00000000  0002f768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  00032260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f4  00000000  00000000  00032f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023813  00000000  00000000  00033944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013111  00000000  00000000  00057157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf479  00000000  00000000  0006a268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004108  00000000  00000000  001396e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0013d7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000012c 	.word	0x2000012c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080069c0 	.word	0x080069c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000130 	.word	0x20000130
 800020c:	080069c0 	.word	0x080069c0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295
 80002fe:	f000 b9bb 	b.w	8000678 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_CAN1_Init+0x64>)
 8000682:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <MX_CAN1_Init+0x68>)
 8000684:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000686:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <MX_CAN1_Init+0x64>)
 8000688:	2206      	movs	r2, #6
 800068a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_CAN1_Init+0x64>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000692:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_CAN1_Init+0x64>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_CAN1_Init+0x64>)
 800069a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800069e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_CAN1_Init+0x64>)
 80006a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <MX_CAN1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_CAN1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_CAN1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_CAN1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_CAN1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_CAN1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_CAN1_Init+0x64>)
 80006ce:	f000 fce3 	bl	8001098 <HAL_CAN_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006d8:	f000 fa16 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000148 	.word	0x20000148
 80006e4:	40006400 	.word	0x40006400

080006e8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a19      	ldr	r2, [pc, #100]	; (800076c <HAL_CAN_MspInit+0x84>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d12c      	bne.n	8000764 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <HAL_CAN_MspInit+0x88>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	4a17      	ldr	r2, [pc, #92]	; (8000770 <HAL_CAN_MspInit+0x88>)
 8000714:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000718:	6413      	str	r3, [r2, #64]	; 0x40
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_CAN_MspInit+0x88>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <HAL_CAN_MspInit+0x88>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a10      	ldr	r2, [pc, #64]	; (8000770 <HAL_CAN_MspInit+0x88>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <HAL_CAN_MspInit+0x88>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000742:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000754:	2309      	movs	r3, #9
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <HAL_CAN_MspInit+0x8c>)
 8000760:	f000 ff3a 	bl	80015d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	; 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40006400 	.word	0x40006400
 8000770:	40023800 	.word	0x40023800
 8000774:	40020400 	.word	0x40020400

08000778 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a2c      	ldr	r2, [pc, #176]	; (8000848 <MX_GPIO_Init+0xd0>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b26      	ldr	r3, [pc, #152]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a25      	ldr	r2, [pc, #148]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b23      	ldr	r3, [pc, #140]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2120      	movs	r1, #32
 8000802:	4812      	ldr	r0, [pc, #72]	; (800084c <MX_GPIO_Init+0xd4>)
 8000804:	f001 f87c 	bl	8001900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	480c      	ldr	r0, [pc, #48]	; (8000850 <MX_GPIO_Init+0xd8>)
 8000820:	f000 feda 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000824:	2320      	movs	r3, #32
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_GPIO_Init+0xd4>)
 800083c:	f000 fecc 	bl	80015d8 <HAL_GPIO_Init>

}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	40020000 	.word	0x40020000
 8000850:	40020800 	.word	0x40020800

08000854 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_I2C1_Init+0x50>)
 800085a:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <MX_I2C1_Init+0x54>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000860:	4a12      	ldr	r2, [pc, #72]	; (80008ac <MX_I2C1_Init+0x58>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_I2C1_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000876:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MX_I2C1_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000892:	f001 f84f 	bl	8001934 <HAL_I2C_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800089c:	f000 f934 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000170 	.word	0x20000170
 80008a8:	40005400 	.word	0x40005400
 80008ac:	000186a0 	.word	0x000186a0

080008b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a19      	ldr	r2, [pc, #100]	; (8000934 <HAL_I2C_MspInit+0x84>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d12b      	bne.n	800092a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <HAL_I2C_MspInit+0x88>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <HAL_I2C_MspInit+0x88>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <HAL_I2C_MspInit+0x88>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ee:	23c0      	movs	r3, #192	; 0xc0
 80008f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f2:	2312      	movs	r3, #18
 80008f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008fe:	2304      	movs	r3, #4
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <HAL_I2C_MspInit+0x8c>)
 800090a:	f000 fe65 	bl	80015d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_I2C_MspInit+0x88>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <HAL_I2C_MspInit+0x88>)
 8000918:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800091c:	6413      	str	r3, [r2, #64]	; 0x40
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_I2C_MspInit+0x88>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800092a:	bf00      	nop
 800092c:	3728      	adds	r7, #40	; 0x28
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40005400 	.word	0x40005400
 8000938:	40023800 	.word	0x40023800
 800093c:	40020400 	.word	0x40020400

08000940 <_write>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	e00b      	b.n	800096a <_write+0x2a>
		HAL_UART_Transmit(&huart2, (uint8_t *) ptr++, 1, HAL_MAX_DELAY);
 8000952:	68b9      	ldr	r1, [r7, #8]
 8000954:	1c4b      	adds	r3, r1, #1
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	f04f 33ff 	mov.w	r3, #4294967295
 800095c:	2201      	movs	r2, #1
 800095e:	4811      	ldr	r0, [pc, #68]	; (80009a4 <_write+0x64>)
 8000960:	f002 fdb3 	bl	80034ca <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	3301      	adds	r3, #1
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	429a      	cmp	r2, r3
 8000970:	dbef      	blt.n	8000952 <_write+0x12>
	}
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	e00b      	b.n	8000990 <_write+0x50>
		HAL_UART_Transmit(&huart1, (uint8_t *) ptr++, 1, HAL_MAX_DELAY);
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	1c4b      	adds	r3, r1, #1
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
 8000982:	2201      	movs	r2, #1
 8000984:	4808      	ldr	r0, [pc, #32]	; (80009a8 <_write+0x68>)
 8000986:	f002 fda0 	bl	80034ca <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	3301      	adds	r3, #1
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	429a      	cmp	r2, r3
 8000996:	dbef      	blt.n	8000978 <_write+0x38>
	}

	return len;
 8000998:	687b      	ldr	r3, [r7, #4]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000024c 	.word	0x2000024c
 80009a8:	20000208 	.word	0x20000208

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b0:	f000 fadc 	bl	8000f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b4:	f000 f83a 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b8:	f7ff fede 	bl	8000778 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009bc:	f000 f9f6 	bl	8000dac <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009c0:	f7ff ff48 	bl	8000854 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80009c4:	f000 f9c8 	bl	8000d58 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 80009c8:	f7ff fe58 	bl	800067c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  printf("test\r\n");
 80009cc:	4811      	ldr	r0, [pc, #68]	; (8000a14 <main+0x68>)
 80009ce:	f004 fec5 	bl	800575c <puts>
  bmp_reset(&bmp280);
 80009d2:	4811      	ldr	r0, [pc, #68]	; (8000a18 <main+0x6c>)
 80009d4:	f003 fda4 	bl	8004520 <bmp_reset>
  printf("reset done\r\n");
 80009d8:	4810      	ldr	r0, [pc, #64]	; (8000a1c <main+0x70>)
 80009da:	f004 febf 	bl	800575c <puts>
  bmp_id(&bmp280);
 80009de:	480e      	ldr	r0, [pc, #56]	; (8000a18 <main+0x6c>)
 80009e0:	f003 fdc4 	bl	800456c <bmp_id>
  printf("id done\r\n");
 80009e4:	480e      	ldr	r0, [pc, #56]	; (8000a20 <main+0x74>)
 80009e6:	f004 feb9 	bl	800575c <puts>
  bmp_config(&bmp280);
 80009ea:	480b      	ldr	r0, [pc, #44]	; (8000a18 <main+0x6c>)
 80009ec:	f003 fdf8 	bl	80045e0 <bmp_config>
  printf("config done\r\n");
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <main+0x78>)
 80009f2:	f004 feb3 	bl	800575c <puts>
  HAL_Delay(500);
 80009f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009fa:	f000 fb29 	bl	8001050 <HAL_Delay>
  bmp_calib_read(&bmp280);
 80009fe:	4806      	ldr	r0, [pc, #24]	; (8000a18 <main+0x6c>)
 8000a00:	f003 fe2a 	bl	8004658 <bmp_calib_read>
  printf("calib done\r\n");
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <main+0x7c>)
 8000a06:	f004 fea9 	bl	800575c <puts>
  CAN_TxData[0] = 45;
  CAN_TxData[1] = 0; */

  //bmp_temp_read(&bmp280);
  //bmp_press_read(&bmp280);    */
  Shell_Init();
 8000a0a:	f004 fabf 	bl	8004f8c <Shell_Init>
		  printf("message CAN pas encore envoye \r\n");
	  }
	  CAN_TxData[0] += 10;
	  CAN_TxData[0] = CAN_TxData[0] % 180;
	  HAL_Delay(500);*/
	  Shell_Loop();
 8000a0e:	f004 fb03 	bl	8005018 <Shell_Loop>
 8000a12:	e7fc      	b.n	8000a0e <main+0x62>
 8000a14:	080069d8 	.word	0x080069d8
 8000a18:	200001c4 	.word	0x200001c4
 8000a1c:	080069e0 	.word	0x080069e0
 8000a20:	080069ec 	.word	0x080069ec
 8000a24:	080069f8 	.word	0x080069f8
 8000a28:	08006a08 	.word	0x08006a08

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	; 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	2234      	movs	r2, #52	; 0x34
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f004 ffa2 	bl	8005984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <SystemClock_Config+0xd4>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a29      	ldr	r2, [pc, #164]	; (8000b00 <SystemClock_Config+0xd4>)
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <SystemClock_Config+0xd4>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <SystemClock_Config+0xd8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a78:	4a22      	ldr	r2, [pc, #136]	; (8000b04 <SystemClock_Config+0xd8>)
 8000a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <SystemClock_Config+0xd8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a94:	2310      	movs	r3, #16
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000aa4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000aa8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4618      	mov	r0, r3
 8000abc:	f002 fa1a 	bl	8002ef4 <HAL_RCC_OscConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ac6:	f000 f81f 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aca:	230f      	movs	r3, #15
 8000acc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 feba 	bl	8002860 <HAL_RCC_ClockConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000af2:	f000 f809 	bl	8000b08 <Error_Handler>
  }
}
 8000af6:	bf00      	nop
 8000af8:	3750      	adds	r7, #80	; 0x50
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40007000 	.word	0x40007000

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <Error_Handler+0x8>
	...

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b28:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b52:	2007      	movs	r0, #7
 8000b54:	f000 fc6c 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 fa2e 	bl	8001010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <USART1_IRQHandler+0x10>)
 8000bbe:	f002 fd47 	bl	8003650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000208 	.word	0x20000208

08000bcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <USART2_IRQHandler+0x10>)
 8000bd2:	f002 fd3d 	bl	8003650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000024c 	.word	0x2000024c

08000be0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return 1;
 8000be4:	2301      	movs	r3, #1
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <_kill>:

int _kill(int pid, int sig)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bfa:	f004 ff6d 	bl	8005ad8 <__errno>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2216      	movs	r2, #22
 8000c02:	601a      	str	r2, [r3, #0]
  return -1;
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <_exit>:

void _exit (int status)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ffe7 	bl	8000bf0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c22:	e7fe      	b.n	8000c22 <_exit+0x12>

08000c24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	e00a      	b.n	8000c4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c36:	f3af 8000 	nop.w
 8000c3a:	4601      	mov	r1, r0
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	1c5a      	adds	r2, r3, #1
 8000c40:	60ba      	str	r2, [r7, #8]
 8000c42:	b2ca      	uxtb	r2, r1
 8000c44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	dbf0      	blt.n	8000c36 <_read+0x12>
  }

  return len;
 8000c54:	687b      	ldr	r3, [r7, #4]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c86:	605a      	str	r2, [r3, #4]
  return 0;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <_isatty>:

int _isatty(int file)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd0:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <_sbrk+0x5c>)
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <_sbrk+0x60>)
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <_sbrk+0x64>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <_sbrk+0x68>)
 8000ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d207      	bcs.n	8000d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf8:	f004 feee 	bl	8005ad8 <__errno>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	220c      	movs	r2, #12
 8000d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	e009      	b.n	8000d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <_sbrk+0x64>)
 8000d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20020000 	.word	0x20020000
 8000d28:	00000400 	.word	0x00000400
 8000d2c:	20000204 	.word	0x20000204
 8000d30:	200004a8 	.word	0x200004a8

08000d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <SystemInit+0x20>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <SystemInit+0x20>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_USART1_UART_Init+0x4c>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <MX_USART1_UART_Init+0x50>)
 8000d60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <MX_USART1_UART_Init+0x4c>)
 8000d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_USART1_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_USART1_UART_Init+0x4c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <MX_USART1_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_USART1_UART_Init+0x4c>)
 8000d7e:	220c      	movs	r2, #12
 8000d80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <MX_USART1_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_USART1_UART_Init+0x4c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_USART1_UART_Init+0x4c>)
 8000d90:	f002 fb4e 	bl	8003430 <HAL_UART_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d9a:	f7ff feb5 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000208 	.word	0x20000208
 8000da8:	40011000 	.word	0x40011000

08000dac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <MX_USART2_UART_Init+0x50>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000de4:	f002 fb24 	bl	8003430 <HAL_UART_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dee:	f7ff fe8b 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000024c 	.word	0x2000024c
 8000dfc:	40004400 	.word	0x40004400

08000e00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08c      	sub	sp, #48	; 0x30
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a3a      	ldr	r2, [pc, #232]	; (8000f08 <HAL_UART_MspInit+0x108>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d135      	bne.n	8000e8e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
 8000e26:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <HAL_UART_MspInit+0x10c>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a38      	ldr	r2, [pc, #224]	; (8000f0c <HAL_UART_MspInit+0x10c>)
 8000e2c:	f043 0310 	orr.w	r3, r3, #16
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <HAL_UART_MspInit+0x10c>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f003 0310 	and.w	r3, r3, #16
 8000e3a:	61bb      	str	r3, [r7, #24]
 8000e3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <HAL_UART_MspInit+0x10c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a31      	ldr	r2, [pc, #196]	; (8000f0c <HAL_UART_MspInit+0x10c>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <HAL_UART_MspInit+0x10c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PI_TX_Pin|PI_RX_Pin;
 8000e5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e6c:	2307      	movs	r3, #7
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	4826      	ldr	r0, [pc, #152]	; (8000f10 <HAL_UART_MspInit+0x110>)
 8000e78:	f000 fbae 	bl	80015d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2025      	movs	r0, #37	; 0x25
 8000e82:	f000 fae0 	bl	8001446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e86:	2025      	movs	r0, #37	; 0x25
 8000e88:	f000 faf9 	bl	800147e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e8c:	e038      	b.n	8000f00 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a20      	ldr	r2, [pc, #128]	; (8000f14 <HAL_UART_MspInit+0x114>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d133      	bne.n	8000f00 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <HAL_UART_MspInit+0x10c>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	4a1a      	ldr	r2, [pc, #104]	; (8000f0c <HAL_UART_MspInit+0x10c>)
 8000ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <HAL_UART_MspInit+0x10c>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <HAL_UART_MspInit+0x10c>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <HAL_UART_MspInit+0x10c>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <HAL_UART_MspInit+0x10c>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ed0:	230c      	movs	r3, #12
 8000ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ee0:	2307      	movs	r3, #7
 8000ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4809      	ldr	r0, [pc, #36]	; (8000f10 <HAL_UART_MspInit+0x110>)
 8000eec:	f000 fb74 	bl	80015d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2026      	movs	r0, #38	; 0x26
 8000ef6:	f000 faa6 	bl	8001446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000efa:	2026      	movs	r0, #38	; 0x26
 8000efc:	f000 fabf 	bl	800147e <HAL_NVIC_EnableIRQ>
}
 8000f00:	bf00      	nop
 8000f02:	3730      	adds	r7, #48	; 0x30
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40011000 	.word	0x40011000
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40020000 	.word	0x40020000
 8000f14:	40004400 	.word	0x40004400

08000f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f1e:	490e      	ldr	r1, [pc, #56]	; (8000f58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f20:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f34:	4c0b      	ldr	r4, [pc, #44]	; (8000f64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f42:	f7ff fef7 	bl	8000d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f46:	f004 fdcd 	bl	8005ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4a:	f7ff fd2f 	bl	80009ac <main>
  bx  lr    
 8000f4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f58:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8000f5c:	08006d6c 	.word	0x08006d6c
  ldr r2, =_sbss
 8000f60:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8000f64:	200004a4 	.word	0x200004a4

08000f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC_IRQHandler>
	...

08000f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <HAL_Init+0x40>)
 8000f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <HAL_Init+0x40>)
 8000f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_Init+0x40>)
 8000f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f000 fa4b 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 f808 	bl	8000fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa0:	f7ff fdb8 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023c00 	.word	0x40023c00

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_InitTick+0x54>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_InitTick+0x58>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 fa63 	bl	800149a <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00e      	b.n	8000ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d80a      	bhi.n	8000ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f000 fa2b 	bl	8001446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff0:	4a06      	ldr	r2, [pc, #24]	; (800100c <HAL_InitTick+0x5c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e000      	b.n	8000ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000000 	.word	0x20000000
 8001008:	20000008 	.word	0x20000008
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x20>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_IncTick+0x24>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_IncTick+0x24>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008
 8001034:	20000290 	.word	0x20000290

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000290 	.word	0x20000290

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d005      	beq.n	8001076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_Delay+0x44>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001076:	bf00      	nop
 8001078:	f7ff ffde 	bl	8001038 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	429a      	cmp	r2, r3
 8001086:	d8f7      	bhi.n	8001078 <HAL_Delay+0x28>
  {
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000008 	.word	0x20000008

08001098 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e0ed      	b.n	8001286 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d102      	bne.n	80010bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff fb16 	bl	80006e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0201 	orr.w	r2, r2, #1
 80010ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010cc:	f7ff ffb4 	bl	8001038 <HAL_GetTick>
 80010d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010d2:	e012      	b.n	80010fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010d4:	f7ff ffb0 	bl	8001038 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b0a      	cmp	r3, #10
 80010e0:	d90b      	bls.n	80010fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2205      	movs	r2, #5
 80010f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e0c5      	b.n	8001286 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0e5      	beq.n	80010d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0202 	bic.w	r2, r2, #2
 8001116:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001118:	f7ff ff8e 	bl	8001038 <HAL_GetTick>
 800111c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800111e:	e012      	b.n	8001146 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001120:	f7ff ff8a 	bl	8001038 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b0a      	cmp	r3, #10
 800112c:	d90b      	bls.n	8001146 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2205      	movs	r2, #5
 800113e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e09f      	b.n	8001286 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1e5      	bne.n	8001120 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7e1b      	ldrb	r3, [r3, #24]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d108      	bne.n	800116e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e007      	b.n	800117e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7e5b      	ldrb	r3, [r3, #25]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d108      	bne.n	8001198 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e007      	b.n	80011a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7e9b      	ldrb	r3, [r3, #26]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d108      	bne.n	80011c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0220 	orr.w	r2, r2, #32
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e007      	b.n	80011d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0220 	bic.w	r2, r2, #32
 80011d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7edb      	ldrb	r3, [r3, #27]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d108      	bne.n	80011ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0210 	bic.w	r2, r2, #16
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	e007      	b.n	80011fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 0210 	orr.w	r2, r2, #16
 80011fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	7f1b      	ldrb	r3, [r3, #28]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d108      	bne.n	8001216 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f042 0208 	orr.w	r2, r2, #8
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	e007      	b.n	8001226 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0208 	bic.w	r2, r2, #8
 8001224:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	7f5b      	ldrb	r3, [r3, #29]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d108      	bne.n	8001240 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f042 0204 	orr.w	r2, r2, #4
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	e007      	b.n	8001250 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0204 	bic.w	r2, r2, #4
 800124e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	ea42 0103 	orr.w	r1, r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	1e5a      	subs	r2, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ac:	4013      	ands	r3, r2
 80012ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c2:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	60d3      	str	r3, [r2, #12]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <__NVIC_GetPriorityGrouping+0x18>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	f003 0307 	and.w	r3, r3, #7
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	2b00      	cmp	r3, #0
 8001304:	db0b      	blt.n	800131e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	f003 021f 	and.w	r2, r3, #31
 800130c:	4907      	ldr	r1, [pc, #28]	; (800132c <__NVIC_EnableIRQ+0x38>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	2001      	movs	r0, #1
 8001316:	fa00 f202 	lsl.w	r2, r0, r2
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000e100 	.word	0xe000e100

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	; (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013fc:	d301      	bcc.n	8001402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fe:	2301      	movs	r3, #1
 8001400:	e00f      	b.n	8001422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <SysTick_Config+0x40>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140a:	210f      	movs	r1, #15
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f7ff ff8e 	bl	8001330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <SysTick_Config+0x40>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <SysTick_Config+0x40>)
 800141c:	2207      	movs	r2, #7
 800141e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	e000e010 	.word	0xe000e010

08001430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff29 	bl	8001290 <__NVIC_SetPriorityGrouping>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001458:	f7ff ff3e 	bl	80012d8 <__NVIC_GetPriorityGrouping>
 800145c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	6978      	ldr	r0, [r7, #20]
 8001464:	f7ff ff8e 	bl	8001384 <NVIC_EncodePriority>
 8001468:	4602      	mov	r2, r0
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff5d 	bl	8001330 <__NVIC_SetPriority>
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff31 	bl	80012f4 <__NVIC_EnableIRQ>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ffa2 	bl	80013ec <SysTick_Config>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b084      	sub	sp, #16
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff fdba 	bl	8001038 <HAL_GetTick>
 80014c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d008      	beq.n	80014e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2280      	movs	r2, #128	; 0x80
 80014d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e052      	b.n	800158a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0216 	bic.w	r2, r2, #22
 80014f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001502:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	2b00      	cmp	r3, #0
 800150a:	d103      	bne.n	8001514 <HAL_DMA_Abort+0x62>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001510:	2b00      	cmp	r3, #0
 8001512:	d007      	beq.n	8001524 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0208 	bic.w	r2, r2, #8
 8001522:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001534:	e013      	b.n	800155e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001536:	f7ff fd7f 	bl	8001038 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b05      	cmp	r3, #5
 8001542:	d90c      	bls.n	800155e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2220      	movs	r2, #32
 8001548:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2203      	movs	r2, #3
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e015      	b.n	800158a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1e4      	bne.n	8001536 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001570:	223f      	movs	r2, #63	; 0x3f
 8001572:	409a      	lsls	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d004      	beq.n	80015b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e00c      	b.n	80015ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2205      	movs	r2, #5
 80015b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0201 	bic.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
 80015f2:	e165      	b.n	80018c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015f4:	2201      	movs	r2, #1
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	429a      	cmp	r2, r3
 800160e:	f040 8154 	bne.w	80018ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b01      	cmp	r3, #1
 800161c:	d005      	beq.n	800162a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001626:	2b02      	cmp	r3, #2
 8001628:	d130      	bne.n	800168c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	2203      	movs	r2, #3
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001660:	2201      	movs	r2, #1
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	f003 0201 	and.w	r2, r3, #1
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b03      	cmp	r3, #3
 8001696:	d017      	beq.n	80016c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2203      	movs	r2, #3
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d123      	bne.n	800171c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	08da      	lsrs	r2, r3, #3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3208      	adds	r2, #8
 80016dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	220f      	movs	r2, #15
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	08da      	lsrs	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3208      	adds	r2, #8
 8001716:	69b9      	ldr	r1, [r7, #24]
 8001718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0203 	and.w	r2, r3, #3
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80ae 	beq.w	80018ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b5d      	ldr	r3, [pc, #372]	; (80018d8 <HAL_GPIO_Init+0x300>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	4a5c      	ldr	r2, [pc, #368]	; (80018d8 <HAL_GPIO_Init+0x300>)
 8001768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176c:	6453      	str	r3, [r2, #68]	; 0x44
 800176e:	4b5a      	ldr	r3, [pc, #360]	; (80018d8 <HAL_GPIO_Init+0x300>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800177a:	4a58      	ldr	r2, [pc, #352]	; (80018dc <HAL_GPIO_Init+0x304>)
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	3302      	adds	r3, #2
 8001782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	220f      	movs	r2, #15
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4f      	ldr	r2, [pc, #316]	; (80018e0 <HAL_GPIO_Init+0x308>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d025      	beq.n	80017f2 <HAL_GPIO_Init+0x21a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4e      	ldr	r2, [pc, #312]	; (80018e4 <HAL_GPIO_Init+0x30c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d01f      	beq.n	80017ee <HAL_GPIO_Init+0x216>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4d      	ldr	r2, [pc, #308]	; (80018e8 <HAL_GPIO_Init+0x310>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d019      	beq.n	80017ea <HAL_GPIO_Init+0x212>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4c      	ldr	r2, [pc, #304]	; (80018ec <HAL_GPIO_Init+0x314>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_GPIO_Init+0x20e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4b      	ldr	r2, [pc, #300]	; (80018f0 <HAL_GPIO_Init+0x318>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d00d      	beq.n	80017e2 <HAL_GPIO_Init+0x20a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4a      	ldr	r2, [pc, #296]	; (80018f4 <HAL_GPIO_Init+0x31c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d007      	beq.n	80017de <HAL_GPIO_Init+0x206>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a49      	ldr	r2, [pc, #292]	; (80018f8 <HAL_GPIO_Init+0x320>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d101      	bne.n	80017da <HAL_GPIO_Init+0x202>
 80017d6:	2306      	movs	r3, #6
 80017d8:	e00c      	b.n	80017f4 <HAL_GPIO_Init+0x21c>
 80017da:	2307      	movs	r3, #7
 80017dc:	e00a      	b.n	80017f4 <HAL_GPIO_Init+0x21c>
 80017de:	2305      	movs	r3, #5
 80017e0:	e008      	b.n	80017f4 <HAL_GPIO_Init+0x21c>
 80017e2:	2304      	movs	r3, #4
 80017e4:	e006      	b.n	80017f4 <HAL_GPIO_Init+0x21c>
 80017e6:	2303      	movs	r3, #3
 80017e8:	e004      	b.n	80017f4 <HAL_GPIO_Init+0x21c>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e002      	b.n	80017f4 <HAL_GPIO_Init+0x21c>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <HAL_GPIO_Init+0x21c>
 80017f2:	2300      	movs	r3, #0
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	f002 0203 	and.w	r2, r2, #3
 80017fa:	0092      	lsls	r2, r2, #2
 80017fc:	4093      	lsls	r3, r2
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001804:	4935      	ldr	r1, [pc, #212]	; (80018dc <HAL_GPIO_Init+0x304>)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	3302      	adds	r3, #2
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001812:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <HAL_GPIO_Init+0x324>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001836:	4a31      	ldr	r2, [pc, #196]	; (80018fc <HAL_GPIO_Init+0x324>)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800183c:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <HAL_GPIO_Init+0x324>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001860:	4a26      	ldr	r2, [pc, #152]	; (80018fc <HAL_GPIO_Init+0x324>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001866:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_GPIO_Init+0x324>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800188a:	4a1c      	ldr	r2, [pc, #112]	; (80018fc <HAL_GPIO_Init+0x324>)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <HAL_GPIO_Init+0x324>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018b4:	4a11      	ldr	r2, [pc, #68]	; (80018fc <HAL_GPIO_Init+0x324>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3301      	adds	r3, #1
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	2b0f      	cmp	r3, #15
 80018c4:	f67f ae96 	bls.w	80015f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	3724      	adds	r7, #36	; 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40013800 	.word	0x40013800
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020400 	.word	0x40020400
 80018e8:	40020800 	.word	0x40020800
 80018ec:	40020c00 	.word	0x40020c00
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40021400 	.word	0x40021400
 80018f8:	40021800 	.word	0x40021800
 80018fc:	40013c00 	.word	0x40013c00

08001900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
 800190c:	4613      	mov	r3, r2
 800190e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001910:	787b      	ldrb	r3, [r7, #1]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001916:	887a      	ldrh	r2, [r7, #2]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800191c:	e003      	b.n	8001926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800191e:	887b      	ldrh	r3, [r7, #2]
 8001920:	041a      	lsls	r2, r3, #16
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	619a      	str	r2, [r3, #24]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e12b      	b.n	8001b9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d106      	bne.n	8001960 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7fe ffa8 	bl	80008b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2224      	movs	r2, #36	; 0x24
 8001964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001986:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001996:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001998:	f001 f854 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 800199c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4a81      	ldr	r2, [pc, #516]	; (8001ba8 <HAL_I2C_Init+0x274>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d807      	bhi.n	80019b8 <HAL_I2C_Init+0x84>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4a80      	ldr	r2, [pc, #512]	; (8001bac <HAL_I2C_Init+0x278>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	bf94      	ite	ls
 80019b0:	2301      	movls	r3, #1
 80019b2:	2300      	movhi	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	e006      	b.n	80019c6 <HAL_I2C_Init+0x92>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4a7d      	ldr	r2, [pc, #500]	; (8001bb0 <HAL_I2C_Init+0x27c>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	bf94      	ite	ls
 80019c0:	2301      	movls	r3, #1
 80019c2:	2300      	movhi	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e0e7      	b.n	8001b9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4a78      	ldr	r2, [pc, #480]	; (8001bb4 <HAL_I2C_Init+0x280>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	0c9b      	lsrs	r3, r3, #18
 80019d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	4a6a      	ldr	r2, [pc, #424]	; (8001ba8 <HAL_I2C_Init+0x274>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d802      	bhi.n	8001a08 <HAL_I2C_Init+0xd4>
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	3301      	adds	r3, #1
 8001a06:	e009      	b.n	8001a1c <HAL_I2C_Init+0xe8>
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	4a69      	ldr	r2, [pc, #420]	; (8001bb8 <HAL_I2C_Init+0x284>)
 8001a14:	fba2 2303 	umull	r2, r3, r2, r3
 8001a18:	099b      	lsrs	r3, r3, #6
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	430b      	orrs	r3, r1
 8001a22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	495c      	ldr	r1, [pc, #368]	; (8001ba8 <HAL_I2C_Init+0x274>)
 8001a38:	428b      	cmp	r3, r1
 8001a3a:	d819      	bhi.n	8001a70 <HAL_I2C_Init+0x13c>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1e59      	subs	r1, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a4a:	1c59      	adds	r1, r3, #1
 8001a4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a50:	400b      	ands	r3, r1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00a      	beq.n	8001a6c <HAL_I2C_Init+0x138>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1e59      	subs	r1, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a64:	3301      	adds	r3, #1
 8001a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6a:	e051      	b.n	8001b10 <HAL_I2C_Init+0x1dc>
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	e04f      	b.n	8001b10 <HAL_I2C_Init+0x1dc>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d111      	bne.n	8001a9c <HAL_I2C_Init+0x168>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1e58      	subs	r0, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6859      	ldr	r1, [r3, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	440b      	add	r3, r1
 8001a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf0c      	ite	eq
 8001a94:	2301      	moveq	r3, #1
 8001a96:	2300      	movne	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	e012      	b.n	8001ac2 <HAL_I2C_Init+0x18e>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	1e58      	subs	r0, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6859      	ldr	r1, [r3, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	0099      	lsls	r1, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_I2C_Init+0x196>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e022      	b.n	8001b10 <HAL_I2C_Init+0x1dc>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10e      	bne.n	8001af0 <HAL_I2C_Init+0x1bc>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1e58      	subs	r0, r3, #1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6859      	ldr	r1, [r3, #4]
 8001ada:	460b      	mov	r3, r1
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	440b      	add	r3, r1
 8001ae0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aee:	e00f      	b.n	8001b10 <HAL_I2C_Init+0x1dc>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1e58      	subs	r0, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	0099      	lsls	r1, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b06:	3301      	adds	r3, #1
 8001b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	6809      	ldr	r1, [r1, #0]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69da      	ldr	r2, [r3, #28]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6911      	ldr	r1, [r2, #16]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	68d2      	ldr	r2, [r2, #12]
 8001b4a:	4311      	orrs	r1, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	430b      	orrs	r3, r1
 8001b52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695a      	ldr	r2, [r3, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	000186a0 	.word	0x000186a0
 8001bac:	001e847f 	.word	0x001e847f
 8001bb0:	003d08ff 	.word	0x003d08ff
 8001bb4:	431bde83 	.word	0x431bde83
 8001bb8:	10624dd3 	.word	0x10624dd3

08001bbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	460b      	mov	r3, r1
 8001bca:	817b      	strh	r3, [r7, #10]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff fa32 	bl	8001038 <HAL_GetTick>
 8001bd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	f040 80e0 	bne.w	8001da4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2319      	movs	r3, #25
 8001bea:	2201      	movs	r2, #1
 8001bec:	4970      	ldr	r1, [pc, #448]	; (8001db0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 fc58 	bl	80024a4 <I2C_WaitOnFlagUntilTimeout>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e0d3      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_I2C_Master_Transmit+0x50>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e0cc      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x1ea>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d007      	beq.n	8001c32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0201 	orr.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2221      	movs	r2, #33	; 0x21
 8001c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	893a      	ldrh	r2, [r7, #8]
 8001c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4a50      	ldr	r2, [pc, #320]	; (8001db4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c74:	8979      	ldrh	r1, [r7, #10]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	6a3a      	ldr	r2, [r7, #32]
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 fac2 	bl	8002204 <I2C_MasterRequestWrite>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e08d      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ca0:	e066      	b.n	8001d70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	6a39      	ldr	r1, [r7, #32]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 fcd2 	bl	8002650 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00d      	beq.n	8001cce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d107      	bne.n	8001cca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e06b      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	781a      	ldrb	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d11b      	bne.n	8001d44 <HAL_I2C_Master_Transmit+0x188>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d017      	beq.n	8001d44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	781a      	ldrb	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	6a39      	ldr	r1, [r7, #32]
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 fcc2 	bl	80026d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00d      	beq.n	8001d70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d107      	bne.n	8001d6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e01a      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d194      	bne.n	8001ca2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e000      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001da4:	2302      	movs	r3, #2
  }
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	00100002 	.word	0x00100002
 8001db4:	ffff0000 	.word	0xffff0000

08001db8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08c      	sub	sp, #48	; 0x30
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	817b      	strh	r3, [r7, #10]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dcc:	f7ff f934 	bl	8001038 <HAL_GetTick>
 8001dd0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	f040 820b 	bne.w	80021f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	2319      	movs	r3, #25
 8001de6:	2201      	movs	r2, #1
 8001de8:	497c      	ldr	r1, [pc, #496]	; (8001fdc <HAL_I2C_Master_Receive+0x224>)
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 fb5a 	bl	80024a4 <I2C_WaitOnFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001df6:	2302      	movs	r3, #2
 8001df8:	e1fe      	b.n	80021f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_I2C_Master_Receive+0x50>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e1f7      	b.n	80021f8 <HAL_I2C_Master_Receive+0x440>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d007      	beq.n	8001e2e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 0201 	orr.w	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2222      	movs	r2, #34	; 0x22
 8001e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2210      	movs	r2, #16
 8001e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	893a      	ldrh	r2, [r7, #8]
 8001e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4a5c      	ldr	r2, [pc, #368]	; (8001fe0 <HAL_I2C_Master_Receive+0x228>)
 8001e6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e70:	8979      	ldrh	r1, [r7, #10]
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 fa46 	bl	8002308 <I2C_MasterRequestRead>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e1b8      	b.n	80021f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d113      	bne.n	8001eb6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	623b      	str	r3, [r7, #32]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	623b      	str	r3, [r7, #32]
 8001ea2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	e18c      	b.n	80021d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d11b      	bne.n	8001ef6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ecc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	e16c      	b.n	80021d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d11b      	bne.n	8001f36 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	e14c      	b.n	80021d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f5c:	e138      	b.n	80021d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	f200 80f1 	bhi.w	800214a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d123      	bne.n	8001fb8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 fbed 	bl	8002754 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e139      	b.n	80021f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fb6:	e10b      	b.n	80021d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d14e      	bne.n	800205e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	4906      	ldr	r1, [pc, #24]	; (8001fe4 <HAL_I2C_Master_Receive+0x22c>)
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 fa6a 	bl	80024a4 <I2C_WaitOnFlagUntilTimeout>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d008      	beq.n	8001fe8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e10e      	b.n	80021f8 <HAL_I2C_Master_Receive+0x440>
 8001fda:	bf00      	nop
 8001fdc:	00100002 	.word	0x00100002
 8001fe0:	ffff0000 	.word	0xffff0000
 8001fe4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002020:	b29b      	uxth	r3, r3
 8002022:	3b01      	subs	r3, #1
 8002024:	b29a      	uxth	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002046:	3b01      	subs	r3, #1
 8002048:	b29a      	uxth	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800205c:	e0b8      	b.n	80021d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002064:	2200      	movs	r2, #0
 8002066:	4966      	ldr	r1, [pc, #408]	; (8002200 <HAL_I2C_Master_Receive+0x448>)
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 fa1b 	bl	80024a4 <I2C_WaitOnFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0bf      	b.n	80021f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002086:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c0:	2200      	movs	r2, #0
 80020c2:	494f      	ldr	r1, [pc, #316]	; (8002200 <HAL_I2C_Master_Receive+0x448>)
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f9ed 	bl	80024a4 <I2C_WaitOnFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e091      	b.n	80021f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002100:	3b01      	subs	r3, #1
 8002102:	b29a      	uxth	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210c:	b29b      	uxth	r3, r3
 800210e:	3b01      	subs	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002132:	3b01      	subs	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213e:	b29b      	uxth	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002148:	e042      	b.n	80021d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800214a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 fb00 	bl	8002754 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e04c      	b.n	80021f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	2b04      	cmp	r3, #4
 800219c:	d118      	bne.n	80021d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f47f aec2 	bne.w	8001f5e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2220      	movs	r2, #32
 80021de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	e000      	b.n	80021f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80021f6:	2302      	movs	r3, #2
  }
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3728      	adds	r7, #40	; 0x28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	00010004 	.word	0x00010004

08002204 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af02      	add	r7, sp, #8
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	460b      	mov	r3, r1
 8002212:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b08      	cmp	r3, #8
 800221e:	d006      	beq.n	800222e <I2C_MasterRequestWrite+0x2a>
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d003      	beq.n	800222e <I2C_MasterRequestWrite+0x2a>
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800222c:	d108      	bne.n	8002240 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e00b      	b.n	8002258 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	2b12      	cmp	r3, #18
 8002246:	d107      	bne.n	8002258 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002256:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f91d 	bl	80024a4 <I2C_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00d      	beq.n	800228c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800227e:	d103      	bne.n	8002288 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002286:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e035      	b.n	80022f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002294:	d108      	bne.n	80022a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002296:	897b      	ldrh	r3, [r7, #10]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022a4:	611a      	str	r2, [r3, #16]
 80022a6:	e01b      	b.n	80022e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022a8:	897b      	ldrh	r3, [r7, #10]
 80022aa:	11db      	asrs	r3, r3, #7
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f003 0306 	and.w	r3, r3, #6
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f063 030f 	orn	r3, r3, #15
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	490e      	ldr	r1, [pc, #56]	; (8002300 <I2C_MasterRequestWrite+0xfc>)
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f943 	bl	8002552 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e010      	b.n	80022f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022d6:	897b      	ldrh	r3, [r7, #10]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	4907      	ldr	r1, [pc, #28]	; (8002304 <I2C_MasterRequestWrite+0x100>)
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f933 	bl	8002552 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	00010008 	.word	0x00010008
 8002304:	00010002 	.word	0x00010002

08002308 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	460b      	mov	r3, r1
 8002316:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800232c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b08      	cmp	r3, #8
 8002332:	d006      	beq.n	8002342 <I2C_MasterRequestRead+0x3a>
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d003      	beq.n	8002342 <I2C_MasterRequestRead+0x3a>
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002340:	d108      	bne.n	8002354 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	e00b      	b.n	800236c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	2b11      	cmp	r3, #17
 800235a:	d107      	bne.n	800236c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800236a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 f893 	bl	80024a4 <I2C_WaitOnFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00d      	beq.n	80023a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002392:	d103      	bne.n	800239c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800239a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e079      	b.n	8002494 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023a8:	d108      	bne.n	80023bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023aa:	897b      	ldrh	r3, [r7, #10]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	611a      	str	r2, [r3, #16]
 80023ba:	e05f      	b.n	800247c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023bc:	897b      	ldrh	r3, [r7, #10]
 80023be:	11db      	asrs	r3, r3, #7
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f003 0306 	and.w	r3, r3, #6
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f063 030f 	orn	r3, r3, #15
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4930      	ldr	r1, [pc, #192]	; (800249c <I2C_MasterRequestRead+0x194>)
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f8b9 	bl	8002552 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e054      	b.n	8002494 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023ea:	897b      	ldrh	r3, [r7, #10]
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4929      	ldr	r1, [pc, #164]	; (80024a0 <I2C_MasterRequestRead+0x198>)
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f8a9 	bl	8002552 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e044      	b.n	8002494 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800242e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f831 	bl	80024a4 <I2C_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00d      	beq.n	8002464 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002456:	d103      	bne.n	8002460 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800245e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e017      	b.n	8002494 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002464:	897b      	ldrh	r3, [r7, #10]
 8002466:	11db      	asrs	r3, r3, #7
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f003 0306 	and.w	r3, r3, #6
 800246e:	b2db      	uxtb	r3, r3
 8002470:	f063 030e 	orn	r3, r3, #14
 8002474:	b2da      	uxtb	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	4907      	ldr	r1, [pc, #28]	; (80024a0 <I2C_MasterRequestRead+0x198>)
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f865 	bl	8002552 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	00010008 	.word	0x00010008
 80024a0:	00010002 	.word	0x00010002

080024a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	4613      	mov	r3, r2
 80024b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b4:	e025      	b.n	8002502 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d021      	beq.n	8002502 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024be:	f7fe fdbb 	bl	8001038 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d302      	bcc.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d116      	bne.n	8002502 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f043 0220 	orr.w	r2, r3, #32
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e023      	b.n	800254a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	0c1b      	lsrs	r3, r3, #16
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d10d      	bne.n	8002528 <I2C_WaitOnFlagUntilTimeout+0x84>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	43da      	mvns	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	4013      	ands	r3, r2
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	bf0c      	ite	eq
 800251e:	2301      	moveq	r3, #1
 8002520:	2300      	movne	r3, #0
 8002522:	b2db      	uxtb	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	e00c      	b.n	8002542 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	43da      	mvns	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4013      	ands	r3, r2
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	bf0c      	ite	eq
 800253a:	2301      	moveq	r3, #1
 800253c:	2300      	movne	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	429a      	cmp	r2, r3
 8002546:	d0b6      	beq.n	80024b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002560:	e051      	b.n	8002606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002570:	d123      	bne.n	80025ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002580:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800258a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2220      	movs	r2, #32
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f043 0204 	orr.w	r2, r3, #4
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e046      	b.n	8002648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c0:	d021      	beq.n	8002606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c2:	f7fe fd39 	bl	8001038 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d302      	bcc.n	80025d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d116      	bne.n	8002606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2220      	movs	r2, #32
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f043 0220 	orr.w	r2, r3, #32
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e020      	b.n	8002648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	0c1b      	lsrs	r3, r3, #16
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	d10c      	bne.n	800262a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	43da      	mvns	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4013      	ands	r3, r2
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	bf14      	ite	ne
 8002622:	2301      	movne	r3, #1
 8002624:	2300      	moveq	r3, #0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	e00b      	b.n	8002642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	43da      	mvns	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	4013      	ands	r3, r2
 8002636:	b29b      	uxth	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf14      	ite	ne
 800263c:	2301      	movne	r3, #1
 800263e:	2300      	moveq	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d18d      	bne.n	8002562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800265c:	e02d      	b.n	80026ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f8ce 	bl	8002800 <I2C_IsAcknowledgeFailed>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e02d      	b.n	80026ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d021      	beq.n	80026ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002676:	f7fe fcdf 	bl	8001038 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	429a      	cmp	r2, r3
 8002684:	d302      	bcc.n	800268c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d116      	bne.n	80026ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f043 0220 	orr.w	r2, r3, #32
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e007      	b.n	80026ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c4:	2b80      	cmp	r3, #128	; 0x80
 80026c6:	d1ca      	bne.n	800265e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026de:	e02d      	b.n	800273c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 f88d 	bl	8002800 <I2C_IsAcknowledgeFailed>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e02d      	b.n	800274c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f6:	d021      	beq.n	800273c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f8:	f7fe fc9e 	bl	8001038 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	d302      	bcc.n	800270e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d116      	bne.n	800273c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f043 0220 	orr.w	r2, r3, #32
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e007      	b.n	800274c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b04      	cmp	r3, #4
 8002748:	d1ca      	bne.n	80026e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002760:	e042      	b.n	80027e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	2b10      	cmp	r3, #16
 800276e:	d119      	bne.n	80027a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0210 	mvn.w	r2, #16
 8002778:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e029      	b.n	80027f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a4:	f7fe fc48 	bl	8001038 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d302      	bcc.n	80027ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d116      	bne.n	80027e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f043 0220 	orr.w	r2, r3, #32
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e007      	b.n	80027f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b40      	cmp	r3, #64	; 0x40
 80027f4:	d1b5      	bne.n	8002762 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002816:	d11b      	bne.n	8002850 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002820:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	f043 0204 	orr.w	r2, r3, #4
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0cc      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002874:	4b68      	ldr	r3, [pc, #416]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d90c      	bls.n	800289c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b65      	ldr	r3, [pc, #404]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b63      	ldr	r3, [pc, #396]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0b8      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d020      	beq.n	80028ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b4:	4b59      	ldr	r3, [pc, #356]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4a58      	ldr	r2, [pc, #352]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028cc:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4a52      	ldr	r2, [pc, #328]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d8:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	494d      	ldr	r1, [pc, #308]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d044      	beq.n	8002980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d119      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e07f      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d003      	beq.n	800291e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291a:	2b03      	cmp	r3, #3
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291e:	4b3f      	ldr	r3, [pc, #252]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e06f      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292e:	4b3b      	ldr	r3, [pc, #236]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e067      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800293e:	4b37      	ldr	r3, [pc, #220]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f023 0203 	bic.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4934      	ldr	r1, [pc, #208]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	4313      	orrs	r3, r2
 800294e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002950:	f7fe fb72 	bl	8001038 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	e00a      	b.n	800296e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002958:	f7fe fb6e 	bl	8001038 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	; 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e04f      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 020c 	and.w	r2, r3, #12
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	429a      	cmp	r2, r3
 800297e:	d1eb      	bne.n	8002958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002980:	4b25      	ldr	r3, [pc, #148]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d20c      	bcs.n	80029a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e032      	b.n	8002a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b4:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4916      	ldr	r1, [pc, #88]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	490e      	ldr	r1, [pc, #56]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029e6:	f000 f855 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 80029ea:	4602      	mov	r2, r0
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	490a      	ldr	r1, [pc, #40]	; (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	5ccb      	ldrb	r3, [r1, r3]
 80029fa:	fa22 f303 	lsr.w	r3, r2, r3
 80029fe:	4a09      	ldr	r2, [pc, #36]	; (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fad2 	bl	8000fb0 <HAL_InitTick>

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40023c00 	.word	0x40023c00
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	08006b60 	.word	0x08006b60
 8002a24:	20000000 	.word	0x20000000
 8002a28:	20000004 	.word	0x20000004

08002a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000000 	.word	0x20000000

08002a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a48:	f7ff fff0 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	0a9b      	lsrs	r3, r3, #10
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	4903      	ldr	r1, [pc, #12]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a5a:	5ccb      	ldrb	r3, [r1, r3]
 8002a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40023800 	.word	0x40023800
 8002a68:	08006b70 	.word	0x08006b70

08002a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a70:	f7ff ffdc 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	0b5b      	lsrs	r3, r3, #13
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	4903      	ldr	r1, [pc, #12]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a82:	5ccb      	ldrb	r3, [r1, r3]
 8002a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	08006b70 	.word	0x08006b70

08002a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a98:	b0ae      	sub	sp, #184	; 0xb8
 8002a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aba:	4bcb      	ldr	r3, [pc, #812]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b0c      	cmp	r3, #12
 8002ac4:	f200 8206 	bhi.w	8002ed4 <HAL_RCC_GetSysClockFreq+0x440>
 8002ac8:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002b05 	.word	0x08002b05
 8002ad4:	08002ed5 	.word	0x08002ed5
 8002ad8:	08002ed5 	.word	0x08002ed5
 8002adc:	08002ed5 	.word	0x08002ed5
 8002ae0:	08002b0d 	.word	0x08002b0d
 8002ae4:	08002ed5 	.word	0x08002ed5
 8002ae8:	08002ed5 	.word	0x08002ed5
 8002aec:	08002ed5 	.word	0x08002ed5
 8002af0:	08002b15 	.word	0x08002b15
 8002af4:	08002ed5 	.word	0x08002ed5
 8002af8:	08002ed5 	.word	0x08002ed5
 8002afc:	08002ed5 	.word	0x08002ed5
 8002b00:	08002d05 	.word	0x08002d05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4bb9      	ldr	r3, [pc, #740]	; (8002dec <HAL_RCC_GetSysClockFreq+0x358>)
 8002b06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002b0a:	e1e7      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b0c:	4bb8      	ldr	r3, [pc, #736]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b12:	e1e3      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b14:	4bb4      	ldr	r3, [pc, #720]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b20:	4bb1      	ldr	r3, [pc, #708]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d071      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2c:	4bae      	ldr	r3, [pc, #696]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	099b      	lsrs	r3, r3, #6
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b38:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b52:	4622      	mov	r2, r4
 8002b54:	462b      	mov	r3, r5
 8002b56:	f04f 0000 	mov.w	r0, #0
 8002b5a:	f04f 0100 	mov.w	r1, #0
 8002b5e:	0159      	lsls	r1, r3, #5
 8002b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b64:	0150      	lsls	r0, r2, #5
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	1a51      	subs	r1, r2, r1
 8002b6e:	6439      	str	r1, [r7, #64]	; 0x40
 8002b70:	4629      	mov	r1, r5
 8002b72:	eb63 0301 	sbc.w	r3, r3, r1
 8002b76:	647b      	str	r3, [r7, #68]	; 0x44
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b84:	4649      	mov	r1, r9
 8002b86:	018b      	lsls	r3, r1, #6
 8002b88:	4641      	mov	r1, r8
 8002b8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b8e:	4641      	mov	r1, r8
 8002b90:	018a      	lsls	r2, r1, #6
 8002b92:	4641      	mov	r1, r8
 8002b94:	1a51      	subs	r1, r2, r1
 8002b96:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b98:	4649      	mov	r1, r9
 8002b9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002bac:	4649      	mov	r1, r9
 8002bae:	00cb      	lsls	r3, r1, #3
 8002bb0:	4641      	mov	r1, r8
 8002bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bb6:	4641      	mov	r1, r8
 8002bb8:	00ca      	lsls	r2, r1, #3
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4622      	mov	r2, r4
 8002bc2:	189b      	adds	r3, r3, r2
 8002bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8002bc6:	462b      	mov	r3, r5
 8002bc8:	460a      	mov	r2, r1
 8002bca:	eb42 0303 	adc.w	r3, r2, r3
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bdc:	4629      	mov	r1, r5
 8002bde:	024b      	lsls	r3, r1, #9
 8002be0:	4621      	mov	r1, r4
 8002be2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002be6:	4621      	mov	r1, r4
 8002be8:	024a      	lsls	r2, r1, #9
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bf8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002bfc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002c00:	f7fd fbbe 	bl	8000380 <__aeabi_uldivmod>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4613      	mov	r3, r2
 8002c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c0e:	e067      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c10:	4b75      	ldr	r3, [pc, #468]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	099b      	lsrs	r3, r3, #6
 8002c16:	2200      	movs	r2, #0
 8002c18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c1c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c28:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c2e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002c32:	4622      	mov	r2, r4
 8002c34:	462b      	mov	r3, r5
 8002c36:	f04f 0000 	mov.w	r0, #0
 8002c3a:	f04f 0100 	mov.w	r1, #0
 8002c3e:	0159      	lsls	r1, r3, #5
 8002c40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c44:	0150      	lsls	r0, r2, #5
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	1a51      	subs	r1, r2, r1
 8002c4e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c50:	4629      	mov	r1, r5
 8002c52:	eb63 0301 	sbc.w	r3, r3, r1
 8002c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002c64:	4649      	mov	r1, r9
 8002c66:	018b      	lsls	r3, r1, #6
 8002c68:	4641      	mov	r1, r8
 8002c6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c6e:	4641      	mov	r1, r8
 8002c70:	018a      	lsls	r2, r1, #6
 8002c72:	4641      	mov	r1, r8
 8002c74:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c78:	4649      	mov	r1, r9
 8002c7a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c8a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c92:	4692      	mov	sl, r2
 8002c94:	469b      	mov	fp, r3
 8002c96:	4623      	mov	r3, r4
 8002c98:	eb1a 0303 	adds.w	r3, sl, r3
 8002c9c:	623b      	str	r3, [r7, #32]
 8002c9e:	462b      	mov	r3, r5
 8002ca0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	028b      	lsls	r3, r1, #10
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cbc:	4621      	mov	r1, r4
 8002cbe:	028a      	lsls	r2, r1, #10
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cc8:	2200      	movs	r2, #0
 8002cca:	673b      	str	r3, [r7, #112]	; 0x70
 8002ccc:	677a      	str	r2, [r7, #116]	; 0x74
 8002cce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002cd2:	f7fd fb55 	bl	8000380 <__aeabi_uldivmod>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4613      	mov	r3, r2
 8002cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ce0:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	3301      	adds	r3, #1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002cf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d02:	e0eb      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d04:	4b38      	ldr	r3, [pc, #224]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d10:	4b35      	ldr	r3, [pc, #212]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d06b      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1c:	4b32      	ldr	r3, [pc, #200]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	099b      	lsrs	r3, r3, #6
 8002d22:	2200      	movs	r2, #0
 8002d24:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2e:	663b      	str	r3, [r7, #96]	; 0x60
 8002d30:	2300      	movs	r3, #0
 8002d32:	667b      	str	r3, [r7, #100]	; 0x64
 8002d34:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002d38:	4622      	mov	r2, r4
 8002d3a:	462b      	mov	r3, r5
 8002d3c:	f04f 0000 	mov.w	r0, #0
 8002d40:	f04f 0100 	mov.w	r1, #0
 8002d44:	0159      	lsls	r1, r3, #5
 8002d46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d4a:	0150      	lsls	r0, r2, #5
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4621      	mov	r1, r4
 8002d52:	1a51      	subs	r1, r2, r1
 8002d54:	61b9      	str	r1, [r7, #24]
 8002d56:	4629      	mov	r1, r5
 8002d58:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d6a:	4659      	mov	r1, fp
 8002d6c:	018b      	lsls	r3, r1, #6
 8002d6e:	4651      	mov	r1, sl
 8002d70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d74:	4651      	mov	r1, sl
 8002d76:	018a      	lsls	r2, r1, #6
 8002d78:	4651      	mov	r1, sl
 8002d7a:	ebb2 0801 	subs.w	r8, r2, r1
 8002d7e:	4659      	mov	r1, fp
 8002d80:	eb63 0901 	sbc.w	r9, r3, r1
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d98:	4690      	mov	r8, r2
 8002d9a:	4699      	mov	r9, r3
 8002d9c:	4623      	mov	r3, r4
 8002d9e:	eb18 0303 	adds.w	r3, r8, r3
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	462b      	mov	r3, r5
 8002da6:	eb49 0303 	adc.w	r3, r9, r3
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002db8:	4629      	mov	r1, r5
 8002dba:	024b      	lsls	r3, r1, #9
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	024a      	lsls	r2, r1, #9
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dce:	2200      	movs	r2, #0
 8002dd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dd2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002dd4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dd8:	f7fd fad2 	bl	8000380 <__aeabi_uldivmod>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4613      	mov	r3, r2
 8002de2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002de6:	e065      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x420>
 8002de8:	40023800 	.word	0x40023800
 8002dec:	00f42400 	.word	0x00f42400
 8002df0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df4:	4b3d      	ldr	r3, [pc, #244]	; (8002eec <HAL_RCC_GetSysClockFreq+0x458>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	4611      	mov	r1, r2
 8002e00:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e04:	653b      	str	r3, [r7, #80]	; 0x50
 8002e06:	2300      	movs	r3, #0
 8002e08:	657b      	str	r3, [r7, #84]	; 0x54
 8002e0a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002e0e:	4642      	mov	r2, r8
 8002e10:	464b      	mov	r3, r9
 8002e12:	f04f 0000 	mov.w	r0, #0
 8002e16:	f04f 0100 	mov.w	r1, #0
 8002e1a:	0159      	lsls	r1, r3, #5
 8002e1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e20:	0150      	lsls	r0, r2, #5
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4641      	mov	r1, r8
 8002e28:	1a51      	subs	r1, r2, r1
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	4649      	mov	r1, r9
 8002e2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e40:	4659      	mov	r1, fp
 8002e42:	018b      	lsls	r3, r1, #6
 8002e44:	4651      	mov	r1, sl
 8002e46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e4a:	4651      	mov	r1, sl
 8002e4c:	018a      	lsls	r2, r1, #6
 8002e4e:	4651      	mov	r1, sl
 8002e50:	1a54      	subs	r4, r2, r1
 8002e52:	4659      	mov	r1, fp
 8002e54:	eb63 0501 	sbc.w	r5, r3, r1
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	00eb      	lsls	r3, r5, #3
 8002e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e66:	00e2      	lsls	r2, r4, #3
 8002e68:	4614      	mov	r4, r2
 8002e6a:	461d      	mov	r5, r3
 8002e6c:	4643      	mov	r3, r8
 8002e6e:	18e3      	adds	r3, r4, r3
 8002e70:	603b      	str	r3, [r7, #0]
 8002e72:	464b      	mov	r3, r9
 8002e74:	eb45 0303 	adc.w	r3, r5, r3
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e86:	4629      	mov	r1, r5
 8002e88:	028b      	lsls	r3, r1, #10
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e90:	4621      	mov	r1, r4
 8002e92:	028a      	lsls	r2, r1, #10
 8002e94:	4610      	mov	r0, r2
 8002e96:	4619      	mov	r1, r3
 8002e98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ea0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002ea2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ea6:	f7fd fa6b 	bl	8000380 <__aeabi_uldivmod>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4613      	mov	r3, r2
 8002eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <HAL_RCC_GetSysClockFreq+0x458>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	0f1b      	lsrs	r3, r3, #28
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002ec2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ece:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ed2:	e003      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002ed6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002eda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002edc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	37b8      	adds	r7, #184	; 0xb8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eea:	bf00      	nop
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	00f42400 	.word	0x00f42400

08002ef4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e28d      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 8083 	beq.w	800301a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f14:	4b94      	ldr	r3, [pc, #592]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 030c 	and.w	r3, r3, #12
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d019      	beq.n	8002f54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f20:	4b91      	ldr	r3, [pc, #580]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d106      	bne.n	8002f3a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f2c:	4b8e      	ldr	r3, [pc, #568]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f38:	d00c      	beq.n	8002f54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f3a:	4b8b      	ldr	r3, [pc, #556]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f42:	2b0c      	cmp	r3, #12
 8002f44:	d112      	bne.n	8002f6c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f46:	4b88      	ldr	r3, [pc, #544]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f52:	d10b      	bne.n	8002f6c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f54:	4b84      	ldr	r3, [pc, #528]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d05b      	beq.n	8003018 <HAL_RCC_OscConfig+0x124>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d157      	bne.n	8003018 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e25a      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f74:	d106      	bne.n	8002f84 <HAL_RCC_OscConfig+0x90>
 8002f76:	4b7c      	ldr	r3, [pc, #496]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a7b      	ldr	r2, [pc, #492]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	e01d      	b.n	8002fc0 <HAL_RCC_OscConfig+0xcc>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0xb4>
 8002f8e:	4b76      	ldr	r3, [pc, #472]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a75      	ldr	r2, [pc, #468]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	4b73      	ldr	r3, [pc, #460]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a72      	ldr	r2, [pc, #456]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	e00b      	b.n	8002fc0 <HAL_RCC_OscConfig+0xcc>
 8002fa8:	4b6f      	ldr	r3, [pc, #444]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a6e      	ldr	r2, [pc, #440]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	4b6c      	ldr	r3, [pc, #432]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a6b      	ldr	r2, [pc, #428]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d013      	beq.n	8002ff0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe f836 	bl	8001038 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd0:	f7fe f832 	bl	8001038 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	; 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e21f      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	4b61      	ldr	r3, [pc, #388]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0xdc>
 8002fee:	e014      	b.n	800301a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fe f822 	bl	8001038 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7fe f81e 	bl	8001038 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e20b      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300a:	4b57      	ldr	r3, [pc, #348]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x104>
 8003016:	e000      	b.n	800301a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d06f      	beq.n	8003106 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003026:	4b50      	ldr	r3, [pc, #320]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b00      	cmp	r3, #0
 8003030:	d017      	beq.n	8003062 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003032:	4b4d      	ldr	r3, [pc, #308]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800303a:	2b08      	cmp	r3, #8
 800303c:	d105      	bne.n	800304a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800303e:	4b4a      	ldr	r3, [pc, #296]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800304a:	4b47      	ldr	r3, [pc, #284]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003052:	2b0c      	cmp	r3, #12
 8003054:	d11c      	bne.n	8003090 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003056:	4b44      	ldr	r3, [pc, #272]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d116      	bne.n	8003090 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	4b41      	ldr	r3, [pc, #260]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_RCC_OscConfig+0x186>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d001      	beq.n	800307a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e1d3      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307a:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4937      	ldr	r1, [pc, #220]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308e:	e03a      	b.n	8003106 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d020      	beq.n	80030da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003098:	4b34      	ldr	r3, [pc, #208]	; (800316c <HAL_RCC_OscConfig+0x278>)
 800309a:	2201      	movs	r2, #1
 800309c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fd ffcb 	bl	8001038 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a6:	f7fd ffc7 	bl	8001038 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e1b4      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b8:	4b2b      	ldr	r3, [pc, #172]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c4:	4b28      	ldr	r3, [pc, #160]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4925      	ldr	r1, [pc, #148]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]
 80030d8:	e015      	b.n	8003106 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030da:	4b24      	ldr	r3, [pc, #144]	; (800316c <HAL_RCC_OscConfig+0x278>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fd ffaa 	bl	8001038 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e8:	f7fd ffa6 	bl	8001038 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e193      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d036      	beq.n	8003180 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d016      	beq.n	8003148 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311a:	4b15      	ldr	r3, [pc, #84]	; (8003170 <HAL_RCC_OscConfig+0x27c>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7fd ff8a 	bl	8001038 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003128:	f7fd ff86 	bl	8001038 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e173      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCC_OscConfig+0x274>)
 800313c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x234>
 8003146:	e01b      	b.n	8003180 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HAL_RCC_OscConfig+0x27c>)
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314e:	f7fd ff73 	bl	8001038 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003154:	e00e      	b.n	8003174 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003156:	f7fd ff6f 	bl	8001038 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d907      	bls.n	8003174 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e15c      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
 8003168:	40023800 	.word	0x40023800
 800316c:	42470000 	.word	0x42470000
 8003170:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003174:	4b8a      	ldr	r3, [pc, #552]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1ea      	bne.n	8003156 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8097 	beq.w	80032bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003192:	4b83      	ldr	r3, [pc, #524]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10f      	bne.n	80031be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	4b7f      	ldr	r3, [pc, #508]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	4a7e      	ldr	r2, [pc, #504]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ac:	6413      	str	r3, [r2, #64]	; 0x40
 80031ae:	4b7c      	ldr	r3, [pc, #496]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	4b79      	ldr	r3, [pc, #484]	; (80033a4 <HAL_RCC_OscConfig+0x4b0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d118      	bne.n	80031fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ca:	4b76      	ldr	r3, [pc, #472]	; (80033a4 <HAL_RCC_OscConfig+0x4b0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a75      	ldr	r2, [pc, #468]	; (80033a4 <HAL_RCC_OscConfig+0x4b0>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d6:	f7fd ff2f 	bl	8001038 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031de:	f7fd ff2b 	bl	8001038 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e118      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	4b6c      	ldr	r3, [pc, #432]	; (80033a4 <HAL_RCC_OscConfig+0x4b0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x31e>
 8003204:	4b66      	ldr	r3, [pc, #408]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	4a65      	ldr	r2, [pc, #404]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6713      	str	r3, [r2, #112]	; 0x70
 8003210:	e01c      	b.n	800324c <HAL_RCC_OscConfig+0x358>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b05      	cmp	r3, #5
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x340>
 800321a:	4b61      	ldr	r3, [pc, #388]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	4a60      	ldr	r2, [pc, #384]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003220:	f043 0304 	orr.w	r3, r3, #4
 8003224:	6713      	str	r3, [r2, #112]	; 0x70
 8003226:	4b5e      	ldr	r3, [pc, #376]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	4a5d      	ldr	r2, [pc, #372]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6713      	str	r3, [r2, #112]	; 0x70
 8003232:	e00b      	b.n	800324c <HAL_RCC_OscConfig+0x358>
 8003234:	4b5a      	ldr	r3, [pc, #360]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	4a59      	ldr	r2, [pc, #356]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	6713      	str	r3, [r2, #112]	; 0x70
 8003240:	4b57      	ldr	r3, [pc, #348]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	4a56      	ldr	r2, [pc, #344]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003246:	f023 0304 	bic.w	r3, r3, #4
 800324a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d015      	beq.n	8003280 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7fd fef0 	bl	8001038 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325a:	e00a      	b.n	8003272 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800325c:	f7fd feec 	bl	8001038 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	; 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e0d7      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003272:	4b4b      	ldr	r3, [pc, #300]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0ee      	beq.n	800325c <HAL_RCC_OscConfig+0x368>
 800327e:	e014      	b.n	80032aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fd feda 	bl	8001038 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003286:	e00a      	b.n	800329e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003288:	f7fd fed6 	bl	8001038 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	; 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e0c1      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329e:	4b40      	ldr	r3, [pc, #256]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1ee      	bne.n	8003288 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d105      	bne.n	80032bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b0:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	4a3a      	ldr	r2, [pc, #232]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 80032b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80ad 	beq.w	8003420 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032c6:	4b36      	ldr	r3, [pc, #216]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d060      	beq.n	8003394 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d145      	bne.n	8003366 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032da:	4b33      	ldr	r3, [pc, #204]	; (80033a8 <HAL_RCC_OscConfig+0x4b4>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fd feaa 	bl	8001038 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fd fea6 	bl	8001038 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e093      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	4b29      	ldr	r3, [pc, #164]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69da      	ldr	r2, [r3, #28]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	019b      	lsls	r3, r3, #6
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	3b01      	subs	r3, #1
 8003320:	041b      	lsls	r3, r3, #16
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	061b      	lsls	r3, r3, #24
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	071b      	lsls	r3, r3, #28
 8003332:	491b      	ldr	r1, [pc, #108]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003338:	4b1b      	ldr	r3, [pc, #108]	; (80033a8 <HAL_RCC_OscConfig+0x4b4>)
 800333a:	2201      	movs	r2, #1
 800333c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333e:	f7fd fe7b 	bl	8001038 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003346:	f7fd fe77 	bl	8001038 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e064      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003358:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f0      	beq.n	8003346 <HAL_RCC_OscConfig+0x452>
 8003364:	e05c      	b.n	8003420 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <HAL_RCC_OscConfig+0x4b4>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fd fe64 	bl	8001038 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003374:	f7fd fe60 	bl	8001038 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e04d      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <HAL_RCC_OscConfig+0x4ac>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x480>
 8003392:	e045      	b.n	8003420 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d107      	bne.n	80033ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e040      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40007000 	.word	0x40007000
 80033a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033ac:	4b1f      	ldr	r3, [pc, #124]	; (800342c <HAL_RCC_OscConfig+0x538>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d030      	beq.n	800341c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d129      	bne.n	800341c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d122      	bne.n	800341c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033dc:	4013      	ands	r3, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d119      	bne.n	800341c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	085b      	lsrs	r3, r3, #1
 80033f4:	3b01      	subs	r3, #1
 80033f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d10f      	bne.n	800341c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d107      	bne.n	800341c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d001      	beq.n	8003420 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40023800 	.word	0x40023800

08003430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e03f      	b.n	80034c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd fcd2 	bl	8000e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2224      	movs	r2, #36	; 0x24
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fddf 	bl	8004038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b08a      	sub	sp, #40	; 0x28
 80034ce:	af02      	add	r7, sp, #8
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	4613      	mov	r3, r2
 80034d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d17c      	bne.n	80035e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <HAL_UART_Transmit+0x2c>
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e075      	b.n	80035e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_UART_Transmit+0x3e>
 8003504:	2302      	movs	r3, #2
 8003506:	e06e      	b.n	80035e6 <HAL_UART_Transmit+0x11c>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2221      	movs	r2, #33	; 0x21
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800351e:	f7fd fd8b 	bl	8001038 <HAL_GetTick>
 8003522:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	88fa      	ldrh	r2, [r7, #6]
 8003528:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	88fa      	ldrh	r2, [r7, #6]
 800352e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003538:	d108      	bne.n	800354c <HAL_UART_Transmit+0x82>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d104      	bne.n	800354c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	e003      	b.n	8003554 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003550:	2300      	movs	r3, #0
 8003552:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800355c:	e02a      	b.n	80035b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2200      	movs	r2, #0
 8003566:	2180      	movs	r1, #128	; 0x80
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fb1f 	bl	8003bac <UART_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e036      	b.n	80035e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800358c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	3302      	adds	r3, #2
 8003592:	61bb      	str	r3, [r7, #24]
 8003594:	e007      	b.n	80035a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	781a      	ldrb	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	3301      	adds	r3, #1
 80035a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1cf      	bne.n	800355e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2200      	movs	r2, #0
 80035c6:	2140      	movs	r1, #64	; 0x40
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 faef 	bl	8003bac <UART_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e006      	b.n	80035e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e000      	b.n	80035e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035e4:	2302      	movs	r3, #2
  }
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	4613      	mov	r3, r2
 80035fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b20      	cmp	r3, #32
 8003606:	d11d      	bne.n	8003644 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_UART_Receive_IT+0x26>
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e016      	b.n	8003646 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_UART_Receive_IT+0x38>
 8003622:	2302      	movs	r3, #2
 8003624:	e00f      	b.n	8003646 <HAL_UART_Receive_IT+0x58>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	461a      	mov	r2, r3
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 fb24 	bl	8003c88 <UART_Start_Receive_IT>
 8003640:	4603      	mov	r3, r0
 8003642:	e000      	b.n	8003646 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003644:	2302      	movs	r3, #2
  }
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b0ba      	sub	sp, #232	; 0xe8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800367c:	2300      	movs	r3, #0
 800367e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800368e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10f      	bne.n	80036b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <HAL_UART_IRQHandler+0x66>
 80036a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fc07 	bl	8003ec2 <UART_Receive_IT>
      return;
 80036b4:	e256      	b.n	8003b64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 80de 	beq.w	800387c <HAL_UART_IRQHandler+0x22c>
 80036c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d106      	bne.n	80036da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80d1 	beq.w	800387c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00b      	beq.n	80036fe <HAL_UART_IRQHandler+0xae>
 80036e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f043 0201 	orr.w	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_UART_IRQHandler+0xd2>
 800370a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f043 0202 	orr.w	r2, r3, #2
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HAL_UART_IRQHandler+0xf6>
 800372e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f043 0204 	orr.w	r2, r3, #4
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d011      	beq.n	8003776 <HAL_UART_IRQHandler+0x126>
 8003752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d105      	bne.n	800376a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800375e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f043 0208 	orr.w	r2, r3, #8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 81ed 	beq.w	8003b5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_UART_IRQHandler+0x14e>
 800378c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fb92 	bl	8003ec2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a8:	2b40      	cmp	r3, #64	; 0x40
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <HAL_UART_IRQHandler+0x17a>
 80037c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d04f      	beq.n	800386a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fa9a 	bl	8003d04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d141      	bne.n	8003862 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3314      	adds	r3, #20
 80037e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037ec:	e853 3f00 	ldrex	r3, [r3]
 80037f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3314      	adds	r3, #20
 8003806:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800380a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800380e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003812:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1d9      	bne.n	80037de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	2b00      	cmp	r3, #0
 8003830:	d013      	beq.n	800385a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	4a7d      	ldr	r2, [pc, #500]	; (8003a2c <HAL_UART_IRQHandler+0x3dc>)
 8003838:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd fea7 	bl	8001592 <HAL_DMA_Abort_IT>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d016      	beq.n	8003878 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003854:	4610      	mov	r0, r2
 8003856:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	e00e      	b.n	8003878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f990 	bl	8003b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	e00a      	b.n	8003878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f98c 	bl	8003b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003868:	e006      	b.n	8003878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f988 	bl	8003b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003876:	e170      	b.n	8003b5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003878:	bf00      	nop
    return;
 800387a:	e16e      	b.n	8003b5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	2b01      	cmp	r3, #1
 8003882:	f040 814a 	bne.w	8003b1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 8143 	beq.w	8003b1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 813c 	beq.w	8003b1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c2:	2b40      	cmp	r3, #64	; 0x40
 80038c4:	f040 80b4 	bne.w	8003a30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8140 	beq.w	8003b5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038e6:	429a      	cmp	r2, r3
 80038e8:	f080 8139 	bcs.w	8003b5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fe:	f000 8088 	beq.w	8003a12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	330c      	adds	r3, #12
 8003908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800391c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	330c      	adds	r3, #12
 800392a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800392e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003936:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800393a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1d9      	bne.n	8003902 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3314      	adds	r3, #20
 8003954:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003958:	e853 3f00 	ldrex	r3, [r3]
 800395c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800395e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3314      	adds	r3, #20
 800396e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003972:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003976:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003978:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800397a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e1      	bne.n	800394e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3314      	adds	r3, #20
 8003990:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003994:	e853 3f00 	ldrex	r3, [r3]
 8003998:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800399a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800399c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3314      	adds	r3, #20
 80039aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039b6:	e841 2300 	strex	r3, r2, [r1]
 80039ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1e3      	bne.n	800398a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	330c      	adds	r3, #12
 80039d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039e2:	f023 0310 	bic.w	r3, r3, #16
 80039e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80039f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039fc:	e841 2300 	strex	r3, r2, [r1]
 8003a00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e3      	bne.n	80039d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fd fd50 	bl	80014b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	4619      	mov	r1, r3
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f8b6 	bl	8003b94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a28:	e099      	b.n	8003b5e <HAL_UART_IRQHandler+0x50e>
 8003a2a:	bf00      	nop
 8003a2c:	08003dcb 	.word	0x08003dcb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 808b 	beq.w	8003b62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8086 	beq.w	8003b62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	330c      	adds	r3, #12
 8003a76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a7a:	647a      	str	r2, [r7, #68]	; 0x44
 8003a7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e3      	bne.n	8003a56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3314      	adds	r3, #20
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3314      	adds	r3, #20
 8003aae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ab2:	633a      	str	r2, [r7, #48]	; 0x30
 8003ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1e3      	bne.n	8003a8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0310 	bic.w	r3, r3, #16
 8003aea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	330c      	adds	r3, #12
 8003af4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003af8:	61fa      	str	r2, [r7, #28]
 8003afa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	69b9      	ldr	r1, [r7, #24]
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	617b      	str	r3, [r7, #20]
   return(result);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e3      	bne.n	8003ad4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b10:	4619      	mov	r1, r3
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f83e 	bl	8003b94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b18:	e023      	b.n	8003b62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <HAL_UART_IRQHandler+0x4ea>
 8003b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f95d 	bl	8003df2 <UART_Transmit_IT>
    return;
 8003b38:	e014      	b.n	8003b64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00e      	beq.n	8003b64 <HAL_UART_IRQHandler+0x514>
 8003b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d008      	beq.n	8003b64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f99d 	bl	8003e92 <UART_EndTransmit_IT>
    return;
 8003b58:	e004      	b.n	8003b64 <HAL_UART_IRQHandler+0x514>
    return;
 8003b5a:	bf00      	nop
 8003b5c:	e002      	b.n	8003b64 <HAL_UART_IRQHandler+0x514>
      return;
 8003b5e:	bf00      	nop
 8003b60:	e000      	b.n	8003b64 <HAL_UART_IRQHandler+0x514>
      return;
 8003b62:	bf00      	nop
  }
}
 8003b64:	37e8      	adds	r7, #232	; 0xe8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop

08003b6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b090      	sub	sp, #64	; 0x40
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bbc:	e050      	b.n	8003c60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d04c      	beq.n	8003c60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <UART_WaitOnFlagUntilTimeout+0x30>
 8003bcc:	f7fd fa34 	bl	8001038 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d241      	bcs.n	8003c60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	330c      	adds	r3, #12
 8003be2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	e853 3f00 	ldrex	r3, [r3]
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	330c      	adds	r3, #12
 8003bfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bfc:	637a      	str	r2, [r7, #52]	; 0x34
 8003bfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c04:	e841 2300 	strex	r3, r2, [r1]
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e5      	bne.n	8003bdc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3314      	adds	r3, #20
 8003c16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	e853 3f00 	ldrex	r3, [r3]
 8003c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3314      	adds	r3, #20
 8003c2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c30:	623a      	str	r2, [r7, #32]
 8003c32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c34:	69f9      	ldr	r1, [r7, #28]
 8003c36:	6a3a      	ldr	r2, [r7, #32]
 8003c38:	e841 2300 	strex	r3, r2, [r1]
 8003c3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e5      	bne.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e00f      	b.n	8003c80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	bf0c      	ite	eq
 8003c70:	2301      	moveq	r3, #1
 8003c72:	2300      	movne	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d09f      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3740      	adds	r7, #64	; 0x40
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	88fa      	ldrh	r2, [r7, #6]
 8003ca0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	88fa      	ldrh	r2, [r7, #6]
 8003ca6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2222      	movs	r2, #34	; 0x22
 8003cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cd4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695a      	ldr	r2, [r3, #20]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0201 	orr.w	r2, r2, #1
 8003ce4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0220 	orr.w	r2, r2, #32
 8003cf4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b095      	sub	sp, #84	; 0x54
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	330c      	adds	r3, #12
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d16:	e853 3f00 	ldrex	r3, [r3]
 8003d1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d2c:	643a      	str	r2, [r7, #64]	; 0x40
 8003d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d34:	e841 2300 	strex	r3, r2, [r1]
 8003d38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e5      	bne.n	8003d0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3314      	adds	r3, #20
 8003d46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	e853 3f00 	ldrex	r3, [r3]
 8003d4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f023 0301 	bic.w	r3, r3, #1
 8003d56:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3314      	adds	r3, #20
 8003d5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e5      	bne.n	8003d40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d119      	bne.n	8003db0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	330c      	adds	r3, #12
 8003d82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	e853 3f00 	ldrex	r3, [r3]
 8003d8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f023 0310 	bic.w	r3, r3, #16
 8003d92:	647b      	str	r3, [r7, #68]	; 0x44
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	330c      	adds	r3, #12
 8003d9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d9c:	61ba      	str	r2, [r7, #24]
 8003d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da0:	6979      	ldr	r1, [r7, #20]
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	e841 2300 	strex	r3, r2, [r1]
 8003da8:	613b      	str	r3, [r7, #16]
   return(result);
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e5      	bne.n	8003d7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003dbe:	bf00      	nop
 8003dc0:	3754      	adds	r7, #84	; 0x54
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f7ff fecb 	bl	8003b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b085      	sub	sp, #20
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b21      	cmp	r3, #33	; 0x21
 8003e04:	d13e      	bne.n	8003e84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0e:	d114      	bne.n	8003e3a <UART_Transmit_IT+0x48>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d110      	bne.n	8003e3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	1c9a      	adds	r2, r3, #2
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	621a      	str	r2, [r3, #32]
 8003e38:	e008      	b.n	8003e4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	1c59      	adds	r1, r3, #1
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6211      	str	r1, [r2, #32]
 8003e44:	781a      	ldrb	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10f      	bne.n	8003e80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	e000      	b.n	8003e86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e84:	2302      	movs	r3, #2
  }
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff fe5a 	bl	8003b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b08c      	sub	sp, #48	; 0x30
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b22      	cmp	r3, #34	; 0x22
 8003ed4:	f040 80ab 	bne.w	800402e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee0:	d117      	bne.n	8003f12 <UART_Receive_IT+0x50>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d113      	bne.n	8003f12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	1c9a      	adds	r2, r3, #2
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f10:	e026      	b.n	8003f60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f24:	d007      	beq.n	8003f36 <UART_Receive_IT+0x74>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <UART_Receive_IT+0x82>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	701a      	strb	r2, [r3, #0]
 8003f42:	e008      	b.n	8003f56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d15a      	bne.n	800402a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0220 	bic.w	r2, r2, #32
 8003f82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695a      	ldr	r2, [r3, #20]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0201 	bic.w	r2, r2, #1
 8003fa2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d135      	bne.n	8004020 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	330c      	adds	r3, #12
 8003fc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f023 0310 	bic.w	r3, r3, #16
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	330c      	adds	r3, #12
 8003fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fda:	623a      	str	r2, [r7, #32]
 8003fdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	69f9      	ldr	r1, [r7, #28]
 8003fe0:	6a3a      	ldr	r2, [r7, #32]
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e5      	bne.n	8003fba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d10a      	bne.n	8004012 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004016:	4619      	mov	r1, r3
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff fdbb 	bl	8003b94 <HAL_UARTEx_RxEventCallback>
 800401e:	e002      	b.n	8004026 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f001 f9c5 	bl	80053b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	e002      	b.n	8004030 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	e000      	b.n	8004030 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800402e:	2302      	movs	r3, #2
  }
}
 8004030:	4618      	mov	r0, r3
 8004032:	3730      	adds	r7, #48	; 0x30
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800403c:	b0c0      	sub	sp, #256	; 0x100
 800403e:	af00      	add	r7, sp, #0
 8004040:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004054:	68d9      	ldr	r1, [r3, #12]
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	ea40 0301 	orr.w	r3, r0, r1
 8004060:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	431a      	orrs	r2, r3
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	431a      	orrs	r2, r3
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004090:	f021 010c 	bic.w	r1, r1, #12
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800409e:	430b      	orrs	r3, r1
 80040a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b2:	6999      	ldr	r1, [r3, #24]
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	ea40 0301 	orr.w	r3, r0, r1
 80040be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4b8f      	ldr	r3, [pc, #572]	; (8004304 <UART_SetConfig+0x2cc>)
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d005      	beq.n	80040d8 <UART_SetConfig+0xa0>
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b8d      	ldr	r3, [pc, #564]	; (8004308 <UART_SetConfig+0x2d0>)
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d104      	bne.n	80040e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040d8:	f7fe fcc8 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 80040dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040e0:	e003      	b.n	80040ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040e2:	f7fe fcaf 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 80040e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f4:	f040 810c 	bne.w	8004310 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040fc:	2200      	movs	r2, #0
 80040fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004102:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004106:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800410a:	4622      	mov	r2, r4
 800410c:	462b      	mov	r3, r5
 800410e:	1891      	adds	r1, r2, r2
 8004110:	65b9      	str	r1, [r7, #88]	; 0x58
 8004112:	415b      	adcs	r3, r3
 8004114:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004116:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800411a:	4621      	mov	r1, r4
 800411c:	eb12 0801 	adds.w	r8, r2, r1
 8004120:	4629      	mov	r1, r5
 8004122:	eb43 0901 	adc.w	r9, r3, r1
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800413a:	4690      	mov	r8, r2
 800413c:	4699      	mov	r9, r3
 800413e:	4623      	mov	r3, r4
 8004140:	eb18 0303 	adds.w	r3, r8, r3
 8004144:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004148:	462b      	mov	r3, r5
 800414a:	eb49 0303 	adc.w	r3, r9, r3
 800414e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800415e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004162:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004166:	460b      	mov	r3, r1
 8004168:	18db      	adds	r3, r3, r3
 800416a:	653b      	str	r3, [r7, #80]	; 0x50
 800416c:	4613      	mov	r3, r2
 800416e:	eb42 0303 	adc.w	r3, r2, r3
 8004172:	657b      	str	r3, [r7, #84]	; 0x54
 8004174:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004178:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800417c:	f7fc f900 	bl	8000380 <__aeabi_uldivmod>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4b61      	ldr	r3, [pc, #388]	; (800430c <UART_SetConfig+0x2d4>)
 8004186:	fba3 2302 	umull	r2, r3, r3, r2
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	011c      	lsls	r4, r3, #4
 800418e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004192:	2200      	movs	r2, #0
 8004194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004198:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800419c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041a0:	4642      	mov	r2, r8
 80041a2:	464b      	mov	r3, r9
 80041a4:	1891      	adds	r1, r2, r2
 80041a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80041a8:	415b      	adcs	r3, r3
 80041aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041b0:	4641      	mov	r1, r8
 80041b2:	eb12 0a01 	adds.w	sl, r2, r1
 80041b6:	4649      	mov	r1, r9
 80041b8:	eb43 0b01 	adc.w	fp, r3, r1
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041d0:	4692      	mov	sl, r2
 80041d2:	469b      	mov	fp, r3
 80041d4:	4643      	mov	r3, r8
 80041d6:	eb1a 0303 	adds.w	r3, sl, r3
 80041da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041de:	464b      	mov	r3, r9
 80041e0:	eb4b 0303 	adc.w	r3, fp, r3
 80041e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041fc:	460b      	mov	r3, r1
 80041fe:	18db      	adds	r3, r3, r3
 8004200:	643b      	str	r3, [r7, #64]	; 0x40
 8004202:	4613      	mov	r3, r2
 8004204:	eb42 0303 	adc.w	r3, r2, r3
 8004208:	647b      	str	r3, [r7, #68]	; 0x44
 800420a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800420e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004212:	f7fc f8b5 	bl	8000380 <__aeabi_uldivmod>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4611      	mov	r1, r2
 800421c:	4b3b      	ldr	r3, [pc, #236]	; (800430c <UART_SetConfig+0x2d4>)
 800421e:	fba3 2301 	umull	r2, r3, r3, r1
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	2264      	movs	r2, #100	; 0x64
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	1acb      	subs	r3, r1, r3
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004232:	4b36      	ldr	r3, [pc, #216]	; (800430c <UART_SetConfig+0x2d4>)
 8004234:	fba3 2302 	umull	r2, r3, r3, r2
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004240:	441c      	add	r4, r3
 8004242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004246:	2200      	movs	r2, #0
 8004248:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800424c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004250:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004254:	4642      	mov	r2, r8
 8004256:	464b      	mov	r3, r9
 8004258:	1891      	adds	r1, r2, r2
 800425a:	63b9      	str	r1, [r7, #56]	; 0x38
 800425c:	415b      	adcs	r3, r3
 800425e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004260:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004264:	4641      	mov	r1, r8
 8004266:	1851      	adds	r1, r2, r1
 8004268:	6339      	str	r1, [r7, #48]	; 0x30
 800426a:	4649      	mov	r1, r9
 800426c:	414b      	adcs	r3, r1
 800426e:	637b      	str	r3, [r7, #52]	; 0x34
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800427c:	4659      	mov	r1, fp
 800427e:	00cb      	lsls	r3, r1, #3
 8004280:	4651      	mov	r1, sl
 8004282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004286:	4651      	mov	r1, sl
 8004288:	00ca      	lsls	r2, r1, #3
 800428a:	4610      	mov	r0, r2
 800428c:	4619      	mov	r1, r3
 800428e:	4603      	mov	r3, r0
 8004290:	4642      	mov	r2, r8
 8004292:	189b      	adds	r3, r3, r2
 8004294:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004298:	464b      	mov	r3, r9
 800429a:	460a      	mov	r2, r1
 800429c:	eb42 0303 	adc.w	r3, r2, r3
 80042a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042b8:	460b      	mov	r3, r1
 80042ba:	18db      	adds	r3, r3, r3
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042be:	4613      	mov	r3, r2
 80042c0:	eb42 0303 	adc.w	r3, r2, r3
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042ce:	f7fc f857 	bl	8000380 <__aeabi_uldivmod>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4b0d      	ldr	r3, [pc, #52]	; (800430c <UART_SetConfig+0x2d4>)
 80042d8:	fba3 1302 	umull	r1, r3, r3, r2
 80042dc:	095b      	lsrs	r3, r3, #5
 80042de:	2164      	movs	r1, #100	; 0x64
 80042e0:	fb01 f303 	mul.w	r3, r1, r3
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	3332      	adds	r3, #50	; 0x32
 80042ea:	4a08      	ldr	r2, [pc, #32]	; (800430c <UART_SetConfig+0x2d4>)
 80042ec:	fba2 2303 	umull	r2, r3, r2, r3
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	f003 0207 	and.w	r2, r3, #7
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4422      	add	r2, r4
 80042fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004300:	e106      	b.n	8004510 <UART_SetConfig+0x4d8>
 8004302:	bf00      	nop
 8004304:	40011000 	.word	0x40011000
 8004308:	40011400 	.word	0x40011400
 800430c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004314:	2200      	movs	r2, #0
 8004316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800431a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800431e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004322:	4642      	mov	r2, r8
 8004324:	464b      	mov	r3, r9
 8004326:	1891      	adds	r1, r2, r2
 8004328:	6239      	str	r1, [r7, #32]
 800432a:	415b      	adcs	r3, r3
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
 800432e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004332:	4641      	mov	r1, r8
 8004334:	1854      	adds	r4, r2, r1
 8004336:	4649      	mov	r1, r9
 8004338:	eb43 0501 	adc.w	r5, r3, r1
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	00eb      	lsls	r3, r5, #3
 8004346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800434a:	00e2      	lsls	r2, r4, #3
 800434c:	4614      	mov	r4, r2
 800434e:	461d      	mov	r5, r3
 8004350:	4643      	mov	r3, r8
 8004352:	18e3      	adds	r3, r4, r3
 8004354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004358:	464b      	mov	r3, r9
 800435a:	eb45 0303 	adc.w	r3, r5, r3
 800435e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800436e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800437e:	4629      	mov	r1, r5
 8004380:	008b      	lsls	r3, r1, #2
 8004382:	4621      	mov	r1, r4
 8004384:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004388:	4621      	mov	r1, r4
 800438a:	008a      	lsls	r2, r1, #2
 800438c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004390:	f7fb fff6 	bl	8000380 <__aeabi_uldivmod>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4b60      	ldr	r3, [pc, #384]	; (800451c <UART_SetConfig+0x4e4>)
 800439a:	fba3 2302 	umull	r2, r3, r3, r2
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	011c      	lsls	r4, r3, #4
 80043a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043b4:	4642      	mov	r2, r8
 80043b6:	464b      	mov	r3, r9
 80043b8:	1891      	adds	r1, r2, r2
 80043ba:	61b9      	str	r1, [r7, #24]
 80043bc:	415b      	adcs	r3, r3
 80043be:	61fb      	str	r3, [r7, #28]
 80043c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c4:	4641      	mov	r1, r8
 80043c6:	1851      	adds	r1, r2, r1
 80043c8:	6139      	str	r1, [r7, #16]
 80043ca:	4649      	mov	r1, r9
 80043cc:	414b      	adcs	r3, r1
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043dc:	4659      	mov	r1, fp
 80043de:	00cb      	lsls	r3, r1, #3
 80043e0:	4651      	mov	r1, sl
 80043e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e6:	4651      	mov	r1, sl
 80043e8:	00ca      	lsls	r2, r1, #3
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	4603      	mov	r3, r0
 80043f0:	4642      	mov	r2, r8
 80043f2:	189b      	adds	r3, r3, r2
 80043f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043f8:	464b      	mov	r3, r9
 80043fa:	460a      	mov	r2, r1
 80043fc:	eb42 0303 	adc.w	r3, r2, r3
 8004400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	67bb      	str	r3, [r7, #120]	; 0x78
 800440e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800441c:	4649      	mov	r1, r9
 800441e:	008b      	lsls	r3, r1, #2
 8004420:	4641      	mov	r1, r8
 8004422:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004426:	4641      	mov	r1, r8
 8004428:	008a      	lsls	r2, r1, #2
 800442a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800442e:	f7fb ffa7 	bl	8000380 <__aeabi_uldivmod>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4611      	mov	r1, r2
 8004438:	4b38      	ldr	r3, [pc, #224]	; (800451c <UART_SetConfig+0x4e4>)
 800443a:	fba3 2301 	umull	r2, r3, r3, r1
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	2264      	movs	r2, #100	; 0x64
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	1acb      	subs	r3, r1, r3
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	3332      	adds	r3, #50	; 0x32
 800444c:	4a33      	ldr	r2, [pc, #204]	; (800451c <UART_SetConfig+0x4e4>)
 800444e:	fba2 2303 	umull	r2, r3, r2, r3
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004458:	441c      	add	r4, r3
 800445a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800445e:	2200      	movs	r2, #0
 8004460:	673b      	str	r3, [r7, #112]	; 0x70
 8004462:	677a      	str	r2, [r7, #116]	; 0x74
 8004464:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004468:	4642      	mov	r2, r8
 800446a:	464b      	mov	r3, r9
 800446c:	1891      	adds	r1, r2, r2
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	415b      	adcs	r3, r3
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004478:	4641      	mov	r1, r8
 800447a:	1851      	adds	r1, r2, r1
 800447c:	6039      	str	r1, [r7, #0]
 800447e:	4649      	mov	r1, r9
 8004480:	414b      	adcs	r3, r1
 8004482:	607b      	str	r3, [r7, #4]
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004490:	4659      	mov	r1, fp
 8004492:	00cb      	lsls	r3, r1, #3
 8004494:	4651      	mov	r1, sl
 8004496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800449a:	4651      	mov	r1, sl
 800449c:	00ca      	lsls	r2, r1, #3
 800449e:	4610      	mov	r0, r2
 80044a0:	4619      	mov	r1, r3
 80044a2:	4603      	mov	r3, r0
 80044a4:	4642      	mov	r2, r8
 80044a6:	189b      	adds	r3, r3, r2
 80044a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80044aa:	464b      	mov	r3, r9
 80044ac:	460a      	mov	r2, r1
 80044ae:	eb42 0303 	adc.w	r3, r2, r3
 80044b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	663b      	str	r3, [r7, #96]	; 0x60
 80044be:	667a      	str	r2, [r7, #100]	; 0x64
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044cc:	4649      	mov	r1, r9
 80044ce:	008b      	lsls	r3, r1, #2
 80044d0:	4641      	mov	r1, r8
 80044d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044d6:	4641      	mov	r1, r8
 80044d8:	008a      	lsls	r2, r1, #2
 80044da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044de:	f7fb ff4f 	bl	8000380 <__aeabi_uldivmod>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4b0d      	ldr	r3, [pc, #52]	; (800451c <UART_SetConfig+0x4e4>)
 80044e8:	fba3 1302 	umull	r1, r3, r3, r2
 80044ec:	095b      	lsrs	r3, r3, #5
 80044ee:	2164      	movs	r1, #100	; 0x64
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	3332      	adds	r3, #50	; 0x32
 80044fa:	4a08      	ldr	r2, [pc, #32]	; (800451c <UART_SetConfig+0x4e4>)
 80044fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	f003 020f 	and.w	r2, r3, #15
 8004506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4422      	add	r2, r4
 800450e:	609a      	str	r2, [r3, #8]
}
 8004510:	bf00      	nop
 8004512:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004516:	46bd      	mov	sp, r7
 8004518:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800451c:	51eb851f 	.word	0x51eb851f

08004520 <bmp_reset>:
#include "main.h"
#include <stdio.h>

static int32_t t_fine; //Used by both temp and press functions (needs to be called by the temp funct at first)

void bmp_reset(h_bmp280_t * bmp280){
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af02      	add	r7, sp, #8
 8004526:	6078      	str	r0, [r7, #4]
	bmp280->registre = reset;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	22e0      	movs	r2, #224	; 0xe0
 800452c:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	781a      	ldrb	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	705a      	strb	r2, [r3, #1]
	bmp280->buf[1]= BMP280_RESET;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	22b6      	movs	r2, #182	; 0xb6
 800453a:	709a      	strb	r2, [r3, #2]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 2, HAL_MAX_DELAY)){
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	f04f 33ff 	mov.w	r3, #4294967295
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	2302      	movs	r3, #2
 8004548:	21ee      	movs	r1, #238	; 0xee
 800454a:	4806      	ldr	r0, [pc, #24]	; (8004564 <bmp_reset+0x44>)
 800454c:	f7fd fb36 	bl	8001bbc <HAL_I2C_Master_Transmit>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <bmp_reset+0x3c>
		printf("echec du reset\r\n");
 8004556:	4804      	ldr	r0, [pc, #16]	; (8004568 <bmp_reset+0x48>)
 8004558:	f001 f900 	bl	800575c <puts>
	}
}
 800455c:	bf00      	nop
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20000170 	.word	0x20000170
 8004568:	08006a14 	.word	0x08006a14

0800456c <bmp_id>:

void bmp_id(h_bmp280_t * bmp280){
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af02      	add	r7, sp, #8
 8004572:	6078      	str	r0, [r7, #4]
	bmp280->registre = id;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	22d0      	movs	r2, #208	; 0xd0
 8004578:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	781a      	ldrb	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	f04f 33ff 	mov.w	r3, #4294967295
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	2301      	movs	r3, #1
 800458e:	21ee      	movs	r1, #238	; 0xee
 8004590:	4810      	ldr	r0, [pc, #64]	; (80045d4 <bmp_id+0x68>)
 8004592:	f7fd fb13 	bl	8001bbc <HAL_I2C_Master_Transmit>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <bmp_id+0x36>
		printf("echec de l'id\r\n");
 800459c:	480e      	ldr	r0, [pc, #56]	; (80045d8 <bmp_id+0x6c>)
 800459e:	f001 f8dd 	bl	800575c <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, &bmp280->id, 1, 1000)){
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f103 021b 	add.w	r2, r3, #27
 80045a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	2301      	movs	r3, #1
 80045b0:	21ee      	movs	r1, #238	; 0xee
 80045b2:	4808      	ldr	r0, [pc, #32]	; (80045d4 <bmp_id+0x68>)
 80045b4:	f7fd fc00 	bl	8001db8 <HAL_I2C_Master_Receive>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d105      	bne.n	80045ca <bmp_id+0x5e>
		printf("val id : %x\r\n",bmp280->id);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	7edb      	ldrb	r3, [r3, #27]
 80045c2:	4619      	mov	r1, r3
 80045c4:	4805      	ldr	r0, [pc, #20]	; (80045dc <bmp_id+0x70>)
 80045c6:	f001 f863 	bl	8005690 <iprintf>
	}
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000170 	.word	0x20000170
 80045d8:	08006a24 	.word	0x08006a24
 80045dc:	08006a34 	.word	0x08006a34

080045e0 <bmp_config>:
		printf("echec de l'id\r\n");
	}
	printf("val id : %x\r\n",bmp280->id);
}*/

void bmp_config(h_bmp280_t * bmp280){
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	6078      	str	r0, [r7, #4]
	bmp280->registre = ctrl_mes;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	22f4      	movs	r2, #244	; 0xf4
 80045ec:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	781a      	ldrb	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	705a      	strb	r2, [r3, #1]
	bmp280->buf[1]= 0b01010111;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2257      	movs	r2, #87	; 0x57
 80045fa:	709a      	strb	r2, [r3, #2]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 2, HAL_MAX_DELAY)){
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	f04f 33ff 	mov.w	r3, #4294967295
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	2302      	movs	r3, #2
 8004608:	21ee      	movs	r1, #238	; 0xee
 800460a:	4810      	ldr	r0, [pc, #64]	; (800464c <bmp_config+0x6c>)
 800460c:	f7fd fad6 	bl	8001bbc <HAL_I2C_Master_Transmit>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <bmp_config+0x3c>
		printf("echec de config\r\n");
 8004616:	480e      	ldr	r0, [pc, #56]	; (8004650 <bmp_config+0x70>)
 8004618:	f001 f8a0 	bl	800575c <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, &bmp280->config, 1, 1000)){
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f103 021c 	add.w	r2, r3, #28
 8004622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	2301      	movs	r3, #1
 800462a:	21ee      	movs	r1, #238	; 0xee
 800462c:	4807      	ldr	r0, [pc, #28]	; (800464c <bmp_config+0x6c>)
 800462e:	f7fd fbc3 	bl	8001db8 <HAL_I2C_Master_Receive>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d105      	bne.n	8004644 <bmp_config+0x64>
		printf("config value : %x\r\n",bmp280->config);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	7f1b      	ldrb	r3, [r3, #28]
 800463c:	4619      	mov	r1, r3
 800463e:	4805      	ldr	r0, [pc, #20]	; (8004654 <bmp_config+0x74>)
 8004640:	f001 f826 	bl	8005690 <iprintf>
	}
	//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
}
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20000170 	.word	0x20000170
 8004650:	08006a44 	.word	0x08006a44
 8004654:	08006a58 	.word	0x08006a58

08004658 <bmp_calib_read>:

void bmp_calib_read(h_bmp280_t * bmp280){
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af02      	add	r7, sp, #8
 800465e:	6078      	str	r0, [r7, #4]
	bmp280->registre = calib00;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2288      	movs	r2, #136	; 0x88
 8004664:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	781a      	ldrb	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	f04f 33ff 	mov.w	r3, #4294967295
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	2301      	movs	r3, #1
 800467a:	21ee      	movs	r1, #238	; 0xee
 800467c:	4810      	ldr	r0, [pc, #64]	; (80046c0 <bmp_calib_read+0x68>)
 800467e:	f7fd fa9d 	bl	8001bbc <HAL_I2C_Master_Transmit>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <bmp_calib_read+0x36>
		printf("echec de calib\r\n");
 8004688:	480e      	ldr	r0, [pc, #56]	; (80046c4 <bmp_calib_read+0x6c>)
 800468a:	f001 f867 	bl	800575c <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->calib, 25, HAL_MAX_DELAY)){
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f103 021d 	add.w	r2, r3, #29
 8004694:	f04f 33ff 	mov.w	r3, #4294967295
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	2319      	movs	r3, #25
 800469c:	21ee      	movs	r1, #238	; 0xee
 800469e:	4808      	ldr	r0, [pc, #32]	; (80046c0 <bmp_calib_read+0x68>)
 80046a0:	f7fd fb8a 	bl	8001db8 <HAL_I2C_Master_Receive>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d105      	bne.n	80046b6 <bmp_calib_read+0x5e>
		printf("calib values : %s\r\n",bmp280->calib);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	331d      	adds	r3, #29
 80046ae:	4619      	mov	r1, r3
 80046b0:	4805      	ldr	r0, [pc, #20]	; (80046c8 <bmp_calib_read+0x70>)
 80046b2:	f000 ffed 	bl	8005690 <iprintf>
	}
	//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
}
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000170 	.word	0x20000170
 80046c4:	08006a6c 	.word	0x08006a6c
 80046c8:	08006a7c 	.word	0x08006a7c

080046cc <bmp_temp_read>:

void bmp_temp_read(h_bmp280_t * bmp280){
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	6078      	str	r0, [r7, #4]
	bmp280->registre = temp_xlsb;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	22fc      	movs	r2, #252	; 0xfc
 80046d8:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	781a      	ldrb	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	2301      	movs	r3, #1
 80046ee:	21ee      	movs	r1, #238	; 0xee
 80046f0:	483f      	ldr	r0, [pc, #252]	; (80047f0 <bmp_temp_read+0x124>)
 80046f2:	f7fd fa63 	bl	8001bbc <HAL_I2C_Master_Transmit>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <bmp_temp_read+0x36>
		printf("echec de temp read\r\n");
 80046fc:	483d      	ldr	r0, [pc, #244]	; (80047f4 <bmp_temp_read+0x128>)
 80046fe:	f001 f82d 	bl	800575c <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	f04f 33ff 	mov.w	r3, #4294967295
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	2301      	movs	r3, #1
 800470e:	21ee      	movs	r1, #238	; 0xee
 8004710:	4837      	ldr	r0, [pc, #220]	; (80047f0 <bmp_temp_read+0x124>)
 8004712:	f7fd fb51 	bl	8001db8 <HAL_I2C_Master_Receive>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d106      	bne.n	800472a <bmp_temp_read+0x5e>
		bmp280->temp = (int32_t)((bmp280->buf[0]) >>4);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	785b      	ldrb	r3, [r3, #1]
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	b2db      	uxtb	r3, r3
 8004724:	461a      	mov	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	639a      	str	r2, [r3, #56]	; 0x38
		bmp280->temp = ((int32_t)bmp280->buf[0]>>4) + ((int32_t)bmp280->buf[1]<<4) + ((int32_t)bmp280->buf[2]<<12);
		printf("temp brute : %ld\r\n",bmp280->temp);
		bmp280->temp = bmp_compensate_T(bmp280);
		printf("temp : %ld\r\n",bmp280->temp);*/
	}
	bmp280->registre = temp_lsb;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	22fb      	movs	r2, #251	; 0xfb
 800472e:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	781a      	ldrb	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	f04f 33ff 	mov.w	r3, #4294967295
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	2301      	movs	r3, #1
 8004744:	21ee      	movs	r1, #238	; 0xee
 8004746:	482a      	ldr	r0, [pc, #168]	; (80047f0 <bmp_temp_read+0x124>)
 8004748:	f7fd fa38 	bl	8001bbc <HAL_I2C_Master_Transmit>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <bmp_temp_read+0x8c>
		printf("echec de temp read\r\n");
 8004752:	4828      	ldr	r0, [pc, #160]	; (80047f4 <bmp_temp_read+0x128>)
 8004754:	f001 f802 	bl	800575c <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	f04f 33ff 	mov.w	r3, #4294967295
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	2301      	movs	r3, #1
 8004764:	21ee      	movs	r1, #238	; 0xee
 8004766:	4822      	ldr	r0, [pc, #136]	; (80047f0 <bmp_temp_read+0x124>)
 8004768:	f7fd fb26 	bl	8001db8 <HAL_I2C_Master_Receive>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d107      	bne.n	8004782 <bmp_temp_read+0xb6>
		bmp280->temp += ((int32_t)(bmp280->buf[0]))<<4;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	785b      	ldrb	r3, [r3, #1]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	441a      	add	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	639a      	str	r2, [r3, #56]	; 0x38
	}
	bmp280->registre = temp_msb;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	22fa      	movs	r2, #250	; 0xfa
 8004786:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	781a      	ldrb	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	f04f 33ff 	mov.w	r3, #4294967295
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	2301      	movs	r3, #1
 800479c:	21ee      	movs	r1, #238	; 0xee
 800479e:	4814      	ldr	r0, [pc, #80]	; (80047f0 <bmp_temp_read+0x124>)
 80047a0:	f7fd fa0c 	bl	8001bbc <HAL_I2C_Master_Transmit>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <bmp_temp_read+0xe4>
		printf("echec de temp read\r\n");
 80047aa:	4812      	ldr	r0, [pc, #72]	; (80047f4 <bmp_temp_read+0x128>)
 80047ac:	f000 ffd6 	bl	800575c <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	f04f 33ff 	mov.w	r3, #4294967295
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	2301      	movs	r3, #1
 80047bc:	21ee      	movs	r1, #238	; 0xee
 80047be:	480c      	ldr	r0, [pc, #48]	; (80047f0 <bmp_temp_read+0x124>)
 80047c0:	f7fd fafa 	bl	8001db8 <HAL_I2C_Master_Receive>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d107      	bne.n	80047da <bmp_temp_read+0x10e>
		bmp280->temp += ((int32_t)(bmp280->buf[0]))<<12;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	785b      	ldrb	r3, [r3, #1]
 80047d2:	031b      	lsls	r3, r3, #12
 80047d4:	441a      	add	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	//printf("temp : %ld\r\n",bmp280->temp);

	bmp280->temp = bmp_compensate_T(bmp280);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f852 	bl	8004884 <bmp_compensate_T>
 80047e0:	4602      	mov	r2, r0
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	639a      	str	r2, [r3, #56]	; 0x38

	//printf("celcius temp : %ld\r\n",bmp280->temp);

}
 80047e6:	bf00      	nop
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20000170 	.word	0x20000170
 80047f4:	08006a90 	.word	0x08006a90

080047f8 <bmp_press_read>:

void bmp_press_read(h_bmp280_t * bmp280){
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	6078      	str	r0, [r7, #4]
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
		bmp280->press += ((int32_t)(bmp280->buf[0]))<<12;
	}
	printf("press : %ld\r\n",bmp280->press);*/

	bmp280->registre = press_msb;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	22f7      	movs	r2, #247	; 0xf7
 8004804:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	781a      	ldrb	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	f04f 33ff 	mov.w	r3, #4294967295
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	2301      	movs	r3, #1
 800481a:	21ee      	movs	r1, #238	; 0xee
 800481c:	4817      	ldr	r0, [pc, #92]	; (800487c <bmp_press_read+0x84>)
 800481e:	f7fd f9cd 	bl	8001bbc <HAL_I2C_Master_Transmit>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <bmp_press_read+0x36>
		printf("echec de press_xlsb read\r\n");
 8004828:	4815      	ldr	r0, [pc, #84]	; (8004880 <bmp_press_read+0x88>)
 800482a:	f000 ff97 	bl	800575c <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 3, HAL_MAX_DELAY)){
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	f04f 33ff 	mov.w	r3, #4294967295
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	2303      	movs	r3, #3
 800483a:	21ee      	movs	r1, #238	; 0xee
 800483c:	480f      	ldr	r0, [pc, #60]	; (800487c <bmp_press_read+0x84>)
 800483e:	f7fd fabb 	bl	8001db8 <HAL_I2C_Master_Receive>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10e      	bne.n	8004866 <bmp_press_read+0x6e>
		bmp280->press = (int32_t)((bmp280->buf[2]) >>4) + ((int32_t)(bmp280->buf[1]) <<4) + ((int32_t)(bmp280->buf[0]) <<12);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	78db      	ldrb	r3, [r3, #3]
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	b2db      	uxtb	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	789b      	ldrb	r3, [r3, #2]
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	441a      	add	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	785b      	ldrb	r3, [r3, #1]
 800485e:	031b      	lsls	r3, r3, #12
 8004860:	441a      	add	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	//printf("press : %ld\r\n",bmp280->press);

	bmp280->press = bmp_compensate_P(bmp280);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f868 	bl	800493c <bmp_compensate_P>
 800486c:	4602      	mov	r2, r0
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	63da      	str	r2, [r3, #60]	; 0x3c

	//printf("corrected press : %ld\r\n",bmp280->press);

}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000170 	.word	0x20000170
 8004880:	08006aa4 	.word	0x08006aa4

08004884 <bmp_compensate_T>:

int32_t bmp_compensate_T(h_bmp280_t * bmp280){
 8004884:	b480      	push	{r7}
 8004886:	b089      	sub	sp, #36	; 0x24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
	int32_t adc_T = bmp280->temp;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	61fb      	str	r3, [r7, #28]

	//Extracting calibration values
	uint16_t dig_T1;
	int16_t	 dig_T2, dig_T3;
	dig_T1 =((uint16_t) bmp280->calib[0]) + (((uint16_t) bmp280->calib[1])<<8);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	7f5b      	ldrb	r3, [r3, #29]
 8004896:	b29a      	uxth	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	7f9b      	ldrb	r3, [r3, #30]
 800489c:	b29b      	uxth	r3, r3
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	4413      	add	r3, r2
 80048a4:	837b      	strh	r3, [r7, #26]
	dig_T2 =((int16_t) bmp280->calib[2]) + (((int16_t) bmp280->calib[3])<<8);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	7fdb      	ldrb	r3, [r3, #31]
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	4413      	add	r3, r2
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	833b      	strh	r3, [r7, #24]
	dig_T3 =((int16_t) bmp280->calib[4]) + (((int16_t) bmp280->calib[5])<<8);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	4413      	add	r3, r2
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	82fb      	strh	r3, [r7, #22]

	//Temperature calculus (in 1/100th deg C)
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3)-((int32_t)dig_T1<<1)))*((int32_t)dig_T2))>>11;
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	10da      	asrs	r2, r3, #3
 80048dc:	8b7b      	ldrh	r3, [r7, #26]
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80048e6:	fb02 f303 	mul.w	r3, r2, r3
 80048ea:	12db      	asrs	r3, r3, #11
 80048ec:	613b      	str	r3, [r7, #16]
	var2 = (((((adc_T>>4)-((int32_t)dig_T1))*((adc_T>>4)-((int32_t)dig_T1)))>>12)*((int32_t)dig_T3))>>14;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	111a      	asrs	r2, r3, #4
 80048f2:	8b7b      	ldrh	r3, [r7, #26]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	69fa      	ldr	r2, [r7, #28]
 80048f8:	1111      	asrs	r1, r2, #4
 80048fa:	8b7a      	ldrh	r2, [r7, #26]
 80048fc:	1a8a      	subs	r2, r1, r2
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
 8004902:	131b      	asrs	r3, r3, #12
 8004904:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004908:	fb02 f303 	mul.w	r3, r2, r3
 800490c:	139b      	asrs	r3, r3, #14
 800490e:	60fb      	str	r3, [r7, #12]
	t_fine = var1+ var2;
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4413      	add	r3, r2
 8004916:	4a08      	ldr	r2, [pc, #32]	; (8004938 <bmp_compensate_T+0xb4>)
 8004918:	6013      	str	r3, [r2, #0]
	T = (t_fine*5 + 128)>>8;
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <bmp_compensate_T+0xb4>)
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	4613      	mov	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	3380      	adds	r3, #128	; 0x80
 8004926:	121b      	asrs	r3, r3, #8
 8004928:	60bb      	str	r3, [r7, #8]
	return T;
 800492a:	68bb      	ldr	r3, [r7, #8]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3724      	adds	r7, #36	; 0x24
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	20000294 	.word	0x20000294

0800493c <bmp_compensate_P>:

int32_t bmp_compensate_P(h_bmp280_t * bmp280){
 800493c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004940:	b0d0      	sub	sp, #320	; 0x140
 8004942:	af00      	add	r7, sp, #0
 8004944:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	//Extracting calibration values
	uint16_t dig_P1;
	int16_t	 dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
	dig_P1 =((uint16_t) bmp280->calib[6])+ (((uint16_t) bmp280->calib[7])<<8);
 8004948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800494c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004950:	b29a      	uxth	r2, r3
 8004952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004956:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800495a:	b29b      	uxth	r3, r3
 800495c:	021b      	lsls	r3, r3, #8
 800495e:	b29b      	uxth	r3, r3
 8004960:	4413      	add	r3, r2
 8004962:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	dig_P2 =((int16_t) bmp280->calib[8]) + (((int16_t) bmp280->calib[9])<<8);
 8004966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800496e:	b29a      	uxth	r2, r3
 8004970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004974:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004978:	b29b      	uxth	r3, r3
 800497a:	021b      	lsls	r3, r3, #8
 800497c:	b29b      	uxth	r3, r3
 800497e:	4413      	add	r3, r2
 8004980:	b29b      	uxth	r3, r3
 8004982:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	dig_P3 =((int16_t) bmp280->calib[10]) + (((int16_t) bmp280->calib[11])<<8);
 8004986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800498a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800498e:	b29a      	uxth	r2, r3
 8004990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004998:	b29b      	uxth	r3, r3
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	b29b      	uxth	r3, r3
 800499e:	4413      	add	r3, r2
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
	dig_P4 =((int16_t) bmp280->calib[12]) + (((int16_t) bmp280->calib[13])<<8);
 80049a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049b4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	021b      	lsls	r3, r3, #8
 80049bc:	b29b      	uxth	r3, r3
 80049be:	4413      	add	r3, r2
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
	dig_P5 =((int16_t) bmp280->calib[14]) + (((int16_t) bmp280->calib[15])<<8);
 80049c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ca:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80049d8:	b29b      	uxth	r3, r3
 80049da:	021b      	lsls	r3, r3, #8
 80049dc:	b29b      	uxth	r3, r3
 80049de:	4413      	add	r3, r2
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	dig_P6 =((int16_t) bmp280->calib[16]) + (((int16_t) bmp280->calib[17])<<8);
 80049e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	4413      	add	r3, r2
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	dig_P7 =((int16_t) bmp280->calib[18]) + (((int16_t) bmp280->calib[19])<<8);
 8004a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a0a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	4413      	add	r3, r2
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
	dig_P8 =((int16_t) bmp280->calib[20]) + (((int16_t) bmp280->calib[21])<<8);
 8004a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a34:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	4413      	add	r3, r2
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
	dig_P9 =((int16_t) bmp280->calib[22]) + (((int16_t) bmp280->calib[23])<<8);
 8004a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a4a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	021b      	lsls	r3, r3, #8
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	4413      	add	r3, r2
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e

	//Pressure calculus
	int64_t var1, var2, P;
	var1 = ((int64_t)t_fine) - 128000;
 8004a66:	4ba3      	ldr	r3, [pc, #652]	; (8004cf4 <bmp_compensate_P+0x3b8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	17da      	asrs	r2, r3, #31
 8004a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a70:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004a74:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004a78:	460b      	mov	r3, r1
 8004a7a:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8004a7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a80:	4613      	mov	r3, r2
 8004a82:	f143 33ff 	adc.w	r3, r3, #4294967295
 8004a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a8c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8004a90:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004a94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a98:	fb03 f102 	mul.w	r1, r3, r2
 8004a9c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004aa0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004aa4:	fb02 f303 	mul.w	r3, r2, r3
 8004aa8:	18ca      	adds	r2, r1, r3
 8004aaa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004aae:	fba3 4503 	umull	r4, r5, r3, r3
 8004ab2:	1953      	adds	r3, r2, r5
 8004ab4:	461d      	mov	r5, r3
 8004ab6:	f9b7 3134 	ldrsh.w	r3, [r7, #308]	; 0x134
 8004aba:	17da      	asrs	r2, r3, #31
 8004abc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ac0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ac4:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004ac8:	4603      	mov	r3, r0
 8004aca:	fb03 f205 	mul.w	r2, r3, r5
 8004ace:	460b      	mov	r3, r1
 8004ad0:	fb04 f303 	mul.w	r3, r4, r3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	fba4 1202 	umull	r1, r2, r4, r2
 8004adc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ae0:	460a      	mov	r2, r1
 8004ae2:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8004ae6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004aea:	4413      	add	r3, r2
 8004aec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004af0:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8004af4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8004af8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8004afc:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	; 0x136
 8004b00:	17da      	asrs	r2, r3, #31
 8004b02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b06:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004b0e:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8004b12:	462a      	mov	r2, r5
 8004b14:	fb02 f203 	mul.w	r2, r2, r3
 8004b18:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	fb01 f303 	mul.w	r3, r1, r3
 8004b22:	441a      	add	r2, r3
 8004b24:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004b28:	4621      	mov	r1, r4
 8004b2a:	fba3 ab01 	umull	sl, fp, r3, r1
 8004b2e:	eb02 030b 	add.w	r3, r2, fp
 8004b32:	469b      	mov	fp, r3
 8004b34:	f04f 0000 	mov.w	r0, #0
 8004b38:	f04f 0100 	mov.w	r1, #0
 8004b3c:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8004b40:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8004b44:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8004b48:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8004b4c:	1814      	adds	r4, r2, r0
 8004b4e:	643c      	str	r4, [r7, #64]	; 0x40
 8004b50:	414b      	adcs	r3, r1
 8004b52:	647b      	str	r3, [r7, #68]	; 0x44
 8004b54:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004b58:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8004b5c:	f9b7 3138 	ldrsh.w	r3, [r7, #312]	; 0x138
 8004b60:	17da      	asrs	r2, r3, #31
 8004b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b66:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004b6a:	f04f 0000 	mov.w	r0, #0
 8004b6e:	f04f 0100 	mov.w	r1, #0
 8004b72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b76:	00d9      	lsls	r1, r3, #3
 8004b78:	2000      	movs	r0, #0
 8004b7a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8004b7e:	1814      	adds	r4, r2, r0
 8004b80:	63bc      	str	r4, [r7, #56]	; 0x38
 8004b82:	414b      	adcs	r3, r1
 8004b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b86:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8004b8a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8004b8e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004b92:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004b96:	fb03 f102 	mul.w	r1, r3, r2
 8004b9a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004b9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	18ca      	adds	r2, r1, r3
 8004ba8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004bac:	fba3 8903 	umull	r8, r9, r3, r3
 8004bb0:	eb02 0309 	add.w	r3, r2, r9
 8004bb4:	4699      	mov	r9, r3
 8004bb6:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	; 0x13a
 8004bba:	17da      	asrs	r2, r3, #31
 8004bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bc4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004bc8:	4603      	mov	r3, r0
 8004bca:	fb03 f209 	mul.w	r2, r3, r9
 8004bce:	460b      	mov	r3, r1
 8004bd0:	fb08 f303 	mul.w	r3, r8, r3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	fba8 1202 	umull	r1, r2, r8, r2
 8004bdc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004be0:	460a      	mov	r2, r1
 8004be2:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8004be6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8004bea:	4413      	add	r3, r2
 8004bec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004bf0:	f04f 0000 	mov.w	r0, #0
 8004bf4:	f04f 0100 	mov.w	r1, #0
 8004bf8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8004bfc:	4623      	mov	r3, r4
 8004bfe:	0a18      	lsrs	r0, r3, #8
 8004c00:	462b      	mov	r3, r5
 8004c02:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004c06:	462b      	mov	r3, r5
 8004c08:	1219      	asrs	r1, r3, #8
 8004c0a:	f9b7 313c 	ldrsh.w	r3, [r7, #316]	; 0x13c
 8004c0e:	17da      	asrs	r2, r3, #31
 8004c10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c14:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004c1c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c20:	464a      	mov	r2, r9
 8004c22:	fb02 f203 	mul.w	r2, r2, r3
 8004c26:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004c2a:	4644      	mov	r4, r8
 8004c2c:	fb04 f303 	mul.w	r3, r4, r3
 8004c30:	441a      	add	r2, r3
 8004c32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004c36:	4644      	mov	r4, r8
 8004c38:	fba3 4304 	umull	r4, r3, r3, r4
 8004c3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c40:	4623      	mov	r3, r4
 8004c42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c4a:	18d3      	adds	r3, r2, r3
 8004c4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8004c5c:	464c      	mov	r4, r9
 8004c5e:	0323      	lsls	r3, r4, #12
 8004c60:	4644      	mov	r4, r8
 8004c62:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8004c66:	4644      	mov	r4, r8
 8004c68:	0322      	lsls	r2, r4, #12
 8004c6a:	1884      	adds	r4, r0, r2
 8004c6c:	633c      	str	r4, [r7, #48]	; 0x30
 8004c6e:	eb41 0303 	adc.w	r3, r1, r3
 8004c72:	637b      	str	r3, [r7, #52]	; 0x34
 8004c74:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004c78:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47) + var1))*((int64_t)dig_P1)>>33;
 8004c7c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8004c80:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8004c84:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8004c88:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8004c8c:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8004c90:	2200      	movs	r2, #0
 8004c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c9a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004c9e:	462b      	mov	r3, r5
 8004ca0:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8004ca4:	4642      	mov	r2, r8
 8004ca6:	fb02 f203 	mul.w	r2, r2, r3
 8004caa:	464b      	mov	r3, r9
 8004cac:	4621      	mov	r1, r4
 8004cae:	fb01 f303 	mul.w	r3, r1, r3
 8004cb2:	4413      	add	r3, r2
 8004cb4:	4622      	mov	r2, r4
 8004cb6:	4641      	mov	r1, r8
 8004cb8:	fba2 1201 	umull	r1, r2, r2, r1
 8004cbc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004cc0:	460a      	mov	r2, r1
 8004cc2:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8004cc6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004cca:	4413      	add	r3, r2
 8004ccc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8004cdc:	4629      	mov	r1, r5
 8004cde:	104a      	asrs	r2, r1, #1
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	17cb      	asrs	r3, r1, #31
 8004ce4:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if(var1 == 0){
 8004ce8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8004cec:	4313      	orrs	r3, r2
 8004cee:	d103      	bne.n	8004cf8 <bmp_compensate_P+0x3bc>
		return 0;  //avoid exception caused by division by zero
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e144      	b.n	8004f7e <bmp_compensate_P+0x642>
 8004cf4:	20000294 	.word	0x20000294
	}
	P = 1048576 - bmp280->press;
 8004cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfe:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8004d02:	17da      	asrs	r2, r3, #31
 8004d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d08:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004d0c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	P = (((P<<31)-var2)*3125)/var1;
 8004d10:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d14:	105b      	asrs	r3, r3, #1
 8004d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004d1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d1e:	07db      	lsls	r3, r3, #31
 8004d20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d24:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8004d28:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	1a89      	subs	r1, r1, r2
 8004d30:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004d34:	4629      	mov	r1, r5
 8004d36:	eb61 0303 	sbc.w	r3, r1, r3
 8004d3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d3e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8004d42:	4622      	mov	r2, r4
 8004d44:	462b      	mov	r3, r5
 8004d46:	1891      	adds	r1, r2, r2
 8004d48:	6239      	str	r1, [r7, #32]
 8004d4a:	415b      	adcs	r3, r3
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d52:	4621      	mov	r1, r4
 8004d54:	1851      	adds	r1, r2, r1
 8004d56:	61b9      	str	r1, [r7, #24]
 8004d58:	4629      	mov	r1, r5
 8004d5a:	414b      	adcs	r3, r1
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	f04f 0200 	mov.w	r2, #0
 8004d62:	f04f 0300 	mov.w	r3, #0
 8004d66:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	018b      	lsls	r3, r1, #6
 8004d6e:	4641      	mov	r1, r8
 8004d70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d74:	4641      	mov	r1, r8
 8004d76:	018a      	lsls	r2, r1, #6
 8004d78:	4641      	mov	r1, r8
 8004d7a:	1889      	adds	r1, r1, r2
 8004d7c:	6139      	str	r1, [r7, #16]
 8004d7e:	4649      	mov	r1, r9
 8004d80:	eb43 0101 	adc.w	r1, r3, r1
 8004d84:	6179      	str	r1, [r7, #20]
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8004d92:	4649      	mov	r1, r9
 8004d94:	008b      	lsls	r3, r1, #2
 8004d96:	4641      	mov	r1, r8
 8004d98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d9c:	4641      	mov	r1, r8
 8004d9e:	008a      	lsls	r2, r1, #2
 8004da0:	4610      	mov	r0, r2
 8004da2:	4619      	mov	r1, r3
 8004da4:	4603      	mov	r3, r0
 8004da6:	4622      	mov	r2, r4
 8004da8:	189b      	adds	r3, r3, r2
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	460b      	mov	r3, r1
 8004dae:	462a      	mov	r2, r5
 8004db0:	eb42 0303 	adc.w	r3, r2, r3
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	008b      	lsls	r3, r1, #2
 8004dc6:	4641      	mov	r1, r8
 8004dc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dcc:	4641      	mov	r1, r8
 8004dce:	008a      	lsls	r2, r1, #2
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	4622      	mov	r2, r4
 8004dd8:	189b      	adds	r3, r3, r2
 8004dda:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ddc:	462b      	mov	r3, r5
 8004dde:	460a      	mov	r2, r1
 8004de0:	eb42 0303 	adc.w	r3, r2, r3
 8004de4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004de6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8004dea:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004dee:	f7fb fa77 	bl	80002e0 <__aeabi_ldivmod>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (P>>13) * (P>>13))>>25;
 8004dfa:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 8004dfe:	17da      	asrs	r2, r3, #31
 8004e00:	673b      	str	r3, [r7, #112]	; 0x70
 8004e02:	677a      	str	r2, [r7, #116]	; 0x74
 8004e04:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8004e08:	f04f 0000 	mov.w	r0, #0
 8004e0c:	f04f 0100 	mov.w	r1, #0
 8004e10:	0b50      	lsrs	r0, r2, #13
 8004e12:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004e16:	1359      	asrs	r1, r3, #13
 8004e18:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8004e1c:	462b      	mov	r3, r5
 8004e1e:	fb00 f203 	mul.w	r2, r0, r3
 8004e22:	4623      	mov	r3, r4
 8004e24:	fb03 f301 	mul.w	r3, r3, r1
 8004e28:	4413      	add	r3, r2
 8004e2a:	4622      	mov	r2, r4
 8004e2c:	fba2 1200 	umull	r1, r2, r2, r0
 8004e30:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e34:	460a      	mov	r2, r1
 8004e36:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8004e3a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004e3e:	4413      	add	r3, r2
 8004e40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004e44:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8004e48:	f04f 0000 	mov.w	r0, #0
 8004e4c:	f04f 0100 	mov.w	r1, #0
 8004e50:	0b50      	lsrs	r0, r2, #13
 8004e52:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004e56:	1359      	asrs	r1, r3, #13
 8004e58:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e5c:	462b      	mov	r3, r5
 8004e5e:	fb00 f203 	mul.w	r2, r0, r3
 8004e62:	4623      	mov	r3, r4
 8004e64:	fb03 f301 	mul.w	r3, r3, r1
 8004e68:	4413      	add	r3, r2
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	fba2 1200 	umull	r1, r2, r2, r0
 8004e70:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8004e74:	460a      	mov	r2, r1
 8004e76:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8004e7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004e7e:	4413      	add	r3, r2
 8004e80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004e90:	4621      	mov	r1, r4
 8004e92:	0e4a      	lsrs	r2, r1, #25
 8004e94:	4629      	mov	r1, r5
 8004e96:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	164b      	asrs	r3, r1, #25
 8004e9e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * P)>>19;
 8004ea2:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 8004ea6:	17da      	asrs	r2, r3, #31
 8004ea8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004eac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004eb0:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8004eb4:	462a      	mov	r2, r5
 8004eb6:	fb02 f203 	mul.w	r2, r2, r3
 8004eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	fb01 f303 	mul.w	r3, r1, r3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004eca:	4621      	mov	r1, r4
 8004ecc:	fba2 1201 	umull	r1, r2, r2, r1
 8004ed0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ed4:	460a      	mov	r2, r1
 8004ed6:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8004eda:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004ede:	4413      	add	r3, r2
 8004ee0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	0cca      	lsrs	r2, r1, #19
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004efa:	4629      	mov	r1, r5
 8004efc:	14cb      	asrs	r3, r1, #19
 8004efe:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	P = ((P + var1 + var2)>>8) + (((int64_t)dig_P7)<<4);
 8004f02:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004f06:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8004f0a:	1884      	adds	r4, r0, r2
 8004f0c:	663c      	str	r4, [r7, #96]	; 0x60
 8004f0e:	eb41 0303 	adc.w	r3, r1, r3
 8004f12:	667b      	str	r3, [r7, #100]	; 0x64
 8004f14:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8004f18:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	1889      	adds	r1, r1, r2
 8004f20:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f22:	4629      	mov	r1, r5
 8004f24:	eb43 0101 	adc.w	r1, r3, r1
 8004f28:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004f2a:	f04f 0000 	mov.w	r0, #0
 8004f2e:	f04f 0100 	mov.w	r1, #0
 8004f32:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8004f36:	4623      	mov	r3, r4
 8004f38:	0a18      	lsrs	r0, r3, #8
 8004f3a:	462b      	mov	r3, r5
 8004f3c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004f40:	462b      	mov	r3, r5
 8004f42:	1219      	asrs	r1, r3, #8
 8004f44:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 8004f48:	17da      	asrs	r2, r3, #31
 8004f4a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f4c:	657a      	str	r2, [r7, #84]	; 0x54
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004f5a:	464c      	mov	r4, r9
 8004f5c:	0123      	lsls	r3, r4, #4
 8004f5e:	4644      	mov	r4, r8
 8004f60:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8004f64:	4644      	mov	r4, r8
 8004f66:	0122      	lsls	r2, r4, #4
 8004f68:	1884      	adds	r4, r0, r2
 8004f6a:	603c      	str	r4, [r7, #0]
 8004f6c:	eb41 0303 	adc.w	r3, r1, r3
 8004f70:	607b      	str	r3, [r7, #4]
 8004f72:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004f76:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (int32_t) P;
 8004f7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8004f84:	46bd      	mov	sp, r7
 8004f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f8a:	bf00      	nop

08004f8c <Shell_Init>:
 * @brief Initializes the shell environment.
 *
 * This function initializes various buffers and sets up UART communication using
 * the HAL (Hardware Abstraction Layer) for STM32 microcontrollers.
 */
void Shell_Init(void){
 8004f8c:	b598      	push	{r3, r4, r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
	memset(argv,(int)NULL, MAX_ARGS*sizeof(char*));
 8004f90:	2224      	movs	r2, #36	; 0x24
 8004f92:	2100      	movs	r1, #0
 8004f94:	4819      	ldr	r0, [pc, #100]	; (8004ffc <Shell_Init+0x70>)
 8004f96:	f000 fcf5 	bl	8005984 <memset>
	memset(cmdBuffer, (int)NULL, CMD_BUFFER_SIZE*sizeof(char));
 8004f9a:	2240      	movs	r2, #64	; 0x40
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	4818      	ldr	r0, [pc, #96]	; (8005000 <Shell_Init+0x74>)
 8004fa0:	f000 fcf0 	bl	8005984 <memset>
 8004fa4:	4b17      	ldr	r3, [pc, #92]	; (8005004 <Shell_Init+0x78>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,(int)NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,(int)NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8004faa:	2240      	movs	r2, #64	; 0x40
 8004fac:	2100      	movs	r1, #0
 8004fae:	4816      	ldr	r0, [pc, #88]	; (8005008 <Shell_Init+0x7c>)
 8004fb0:	f000 fce8 	bl	8005984 <memset>

	HAL_UART_Receive_IT(uartShell, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8004fb4:	4b15      	ldr	r3, [pc, #84]	; (800500c <Shell_Init+0x80>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	4912      	ldr	r1, [pc, #72]	; (8005004 <Shell_Init+0x78>)
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fe fb16 	bl	80035ee <HAL_UART_Receive_IT>
	HAL_UART_Transmit(uartShell, started, strlen((char *)started), HAL_MAX_DELAY);
 8004fc2:	4b12      	ldr	r3, [pc, #72]	; (800500c <Shell_Init+0x80>)
 8004fc4:	681c      	ldr	r4, [r3, #0]
 8004fc6:	4812      	ldr	r0, [pc, #72]	; (8005010 <Shell_Init+0x84>)
 8004fc8:	f7fb f92c 	bl	8000224 <strlen>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd4:	490e      	ldr	r1, [pc, #56]	; (8005010 <Shell_Init+0x84>)
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f7fe fa77 	bl	80034ca <HAL_UART_Transmit>
	HAL_UART_Transmit(uartShell, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <Shell_Init+0x80>)
 8004fde:	681c      	ldr	r4, [r3, #0]
 8004fe0:	480c      	ldr	r0, [pc, #48]	; (8005014 <Shell_Init+0x88>)
 8004fe2:	f7fb f91f 	bl	8000224 <strlen>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	f04f 33ff 	mov.w	r3, #4294967295
 8004fee:	4909      	ldr	r1, [pc, #36]	; (8005014 <Shell_Init+0x88>)
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f7fe fa6a 	bl	80034ca <HAL_UART_Transmit>
}
 8004ff6:	bf00      	nop
 8004ff8:	bd98      	pop	{r3, r4, r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000324 	.word	0x20000324
 8005000:	200002e0 	.word	0x200002e0
 8005004:	2000029c 	.word	0x2000029c
 8005008:	200002a0 	.word	0x200002a0
 800500c:	200000c8 	.word	0x200000c8
 8005010:	20000028 	.word	0x20000028
 8005014:	2000000c 	.word	0x2000000c

08005018 <Shell_Loop>:
 * - If the command is "help", it transmits a list of available functions.
 * - Otherwise, it transmits a "Command not found" message.
 *
 * After processing a command, it transmits the shell prompt for the next input.
 */
void Shell_Loop(void){
 8005018:	b590      	push	{r4, r7, lr}
 800501a:	b097      	sub	sp, #92	; 0x5c
 800501c:	af02      	add	r7, sp, #8
	if(uartRxReceived){
 800501e:	4ba6      	ldr	r3, [pc, #664]	; (80052b8 <Shell_Loop+0x2a0>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d05e      	beq.n	80050e4 <Shell_Loop+0xcc>
		switch(uartRxBuffer[0]){
 8005026:	4ba5      	ldr	r3, [pc, #660]	; (80052bc <Shell_Loop+0x2a4>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b08      	cmp	r3, #8
 800502c:	d035      	beq.n	800509a <Shell_Loop+0x82>
 800502e:	2b0d      	cmp	r3, #13
 8005030:	d144      	bne.n	80050bc <Shell_Loop+0xa4>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(uartShell, newline, sizeof(newline), HAL_MAX_DELAY);
 8005032:	4ba3      	ldr	r3, [pc, #652]	; (80052c0 <Shell_Loop+0x2a8>)
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	f04f 33ff 	mov.w	r3, #4294967295
 800503a:	2203      	movs	r2, #3
 800503c:	49a1      	ldr	r1, [pc, #644]	; (80052c4 <Shell_Loop+0x2ac>)
 800503e:	f7fe fa44 	bl	80034ca <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8005042:	4ba1      	ldr	r3, [pc, #644]	; (80052c8 <Shell_Loop+0x2b0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4aa1      	ldr	r2, [pc, #644]	; (80052cc <Shell_Loop+0x2b4>)
 8005048:	2100      	movs	r1, #0
 800504a:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 800504c:	4ba0      	ldr	r3, [pc, #640]	; (80052d0 <Shell_Loop+0x2b8>)
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " =");
 8005052:	49a0      	ldr	r1, [pc, #640]	; (80052d4 <Shell_Loop+0x2bc>)
 8005054:	489d      	ldr	r0, [pc, #628]	; (80052cc <Shell_Loop+0x2b4>)
 8005056:	f000 fc9d 	bl	8005994 <strtok>
 800505a:	4603      	mov	r3, r0
 800505c:	4a9e      	ldr	r2, [pc, #632]	; (80052d8 <Shell_Loop+0x2c0>)
 800505e:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8005060:	e010      	b.n	8005084 <Shell_Loop+0x6c>
				argv[argc++] = token;
 8005062:	4b9b      	ldr	r3, [pc, #620]	; (80052d0 <Shell_Loop+0x2b8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	4999      	ldr	r1, [pc, #612]	; (80052d0 <Shell_Loop+0x2b8>)
 800506a:	600a      	str	r2, [r1, #0]
 800506c:	4a9a      	ldr	r2, [pc, #616]	; (80052d8 <Shell_Loop+0x2c0>)
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	499a      	ldr	r1, [pc, #616]	; (80052dc <Shell_Loop+0x2c4>)
 8005072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " =");
 8005076:	4997      	ldr	r1, [pc, #604]	; (80052d4 <Shell_Loop+0x2bc>)
 8005078:	2000      	movs	r0, #0
 800507a:	f000 fc8b 	bl	8005994 <strtok>
 800507e:	4603      	mov	r3, r0
 8005080:	4a95      	ldr	r2, [pc, #596]	; (80052d8 <Shell_Loop+0x2c0>)
 8005082:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8005084:	4b94      	ldr	r3, [pc, #592]	; (80052d8 <Shell_Loop+0x2c0>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1ea      	bne.n	8005062 <Shell_Loop+0x4a>
			}
			idx_cmd = 0;
 800508c:	4b8e      	ldr	r3, [pc, #568]	; (80052c8 <Shell_Loop+0x2b0>)
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8005092:	4b93      	ldr	r3, [pc, #588]	; (80052e0 <Shell_Loop+0x2c8>)
 8005094:	2201      	movs	r2, #1
 8005096:	601a      	str	r2, [r3, #0]
			break;
 8005098:	e021      	b.n	80050de <Shell_Loop+0xc6>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 800509a:	4b8b      	ldr	r3, [pc, #556]	; (80052c8 <Shell_Loop+0x2b0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	1e5a      	subs	r2, r3, #1
 80050a0:	4989      	ldr	r1, [pc, #548]	; (80052c8 <Shell_Loop+0x2b0>)
 80050a2:	600a      	str	r2, [r1, #0]
 80050a4:	4a89      	ldr	r2, [pc, #548]	; (80052cc <Shell_Loop+0x2b4>)
 80050a6:	2100      	movs	r1, #0
 80050a8:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(uartShell, backspace, sizeof(backspace), HAL_MAX_DELAY);
 80050aa:	4b85      	ldr	r3, [pc, #532]	; (80052c0 <Shell_Loop+0x2a8>)
 80050ac:	6818      	ldr	r0, [r3, #0]
 80050ae:	f04f 33ff 	mov.w	r3, #4294967295
 80050b2:	2204      	movs	r2, #4
 80050b4:	498b      	ldr	r1, [pc, #556]	; (80052e4 <Shell_Loop+0x2cc>)
 80050b6:	f7fe fa08 	bl	80034ca <HAL_UART_Transmit>
			break;
 80050ba:	e010      	b.n	80050de <Shell_Loop+0xc6>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80050bc:	4b82      	ldr	r3, [pc, #520]	; (80052c8 <Shell_Loop+0x2b0>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	4981      	ldr	r1, [pc, #516]	; (80052c8 <Shell_Loop+0x2b0>)
 80050c4:	600a      	str	r2, [r1, #0]
 80050c6:	4a7d      	ldr	r2, [pc, #500]	; (80052bc <Shell_Loop+0x2a4>)
 80050c8:	7811      	ldrb	r1, [r2, #0]
 80050ca:	4a80      	ldr	r2, [pc, #512]	; (80052cc <Shell_Loop+0x2b4>)
 80050cc:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(uartShell, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80050ce:	4b7c      	ldr	r3, [pc, #496]	; (80052c0 <Shell_Loop+0x2a8>)
 80050d0:	6818      	ldr	r0, [r3, #0]
 80050d2:	f04f 33ff 	mov.w	r3, #4294967295
 80050d6:	2201      	movs	r2, #1
 80050d8:	4978      	ldr	r1, [pc, #480]	; (80052bc <Shell_Loop+0x2a4>)
 80050da:	f7fe f9f6 	bl	80034ca <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 80050de:	4b76      	ldr	r3, [pc, #472]	; (80052b8 <Shell_Loop+0x2a0>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 80050e4:	4b7e      	ldr	r3, [pc, #504]	; (80052e0 <Shell_Loop+0x2c8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 814d 	beq.w	8005388 <Shell_Loop+0x370>
		static int A=1, K=0;
		if(strcmp(argv[0],"WhereisBrian?")==0){
 80050ee:	4b7b      	ldr	r3, [pc, #492]	; (80052dc <Shell_Loop+0x2c4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	497d      	ldr	r1, [pc, #500]	; (80052e8 <Shell_Loop+0x2d0>)
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fb f88b 	bl	8000210 <strcmp>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d108      	bne.n	8005112 <Shell_Loop+0xfa>
			HAL_UART_Transmit(uartShell, brian, sizeof(brian), HAL_MAX_DELAY);
 8005100:	4b6f      	ldr	r3, [pc, #444]	; (80052c0 <Shell_Loop+0x2a8>)
 8005102:	6818      	ldr	r0, [r3, #0]
 8005104:	f04f 33ff 	mov.w	r3, #4294967295
 8005108:	221a      	movs	r2, #26
 800510a:	4978      	ldr	r1, [pc, #480]	; (80052ec <Shell_Loop+0x2d4>)
 800510c:	f7fe f9dd 	bl	80034ca <HAL_UART_Transmit>
 8005110:	e12f      	b.n	8005372 <Shell_Loop+0x35a>
		}
		else if(strcmp(argv[0],"GET_T")==0){
 8005112:	4b72      	ldr	r3, [pc, #456]	; (80052dc <Shell_Loop+0x2c4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4976      	ldr	r1, [pc, #472]	; (80052f0 <Shell_Loop+0x2d8>)
 8005118:	4618      	mov	r0, r3
 800511a:	f7fb f879 	bl	8000210 <strcmp>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d139      	bne.n	8005198 <Shell_Loop+0x180>
			bmp_temp_read(&bmp280);
 8005124:	4873      	ldr	r0, [pc, #460]	; (80052f4 <Shell_Loop+0x2dc>)
 8005126:	f7ff fad1 	bl	80046cc <bmp_temp_read>
			char pibuffer[11];
			uint16_t size = snprintf(pibuffer,11,"T=+%2d.%2d_C",(int)(bmp280.temp-(bmp280.temp%100))/100,(int)bmp280.temp%100);
 800512a:	4b72      	ldr	r3, [pc, #456]	; (80052f4 <Shell_Loop+0x2dc>)
 800512c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800512e:	4b71      	ldr	r3, [pc, #452]	; (80052f4 <Shell_Loop+0x2dc>)
 8005130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005132:	4b71      	ldr	r3, [pc, #452]	; (80052f8 <Shell_Loop+0x2e0>)
 8005134:	fb83 0302 	smull	r0, r3, r3, r2
 8005138:	1158      	asrs	r0, r3, #5
 800513a:	17d3      	asrs	r3, r2, #31
 800513c:	1ac3      	subs	r3, r0, r3
 800513e:	2064      	movs	r0, #100	; 0x64
 8005140:	fb00 f303 	mul.w	r3, r0, r3
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	1acb      	subs	r3, r1, r3
 8005148:	4a6b      	ldr	r2, [pc, #428]	; (80052f8 <Shell_Loop+0x2e0>)
 800514a:	fb82 1203 	smull	r1, r2, r2, r3
 800514e:	1152      	asrs	r2, r2, #5
 8005150:	17db      	asrs	r3, r3, #31
 8005152:	1ad4      	subs	r4, r2, r3
 8005154:	4b67      	ldr	r3, [pc, #412]	; (80052f4 <Shell_Loop+0x2dc>)
 8005156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005158:	4b67      	ldr	r3, [pc, #412]	; (80052f8 <Shell_Loop+0x2e0>)
 800515a:	fb83 1302 	smull	r1, r3, r3, r2
 800515e:	1159      	asrs	r1, r3, #5
 8005160:	17d3      	asrs	r3, r2, #31
 8005162:	1acb      	subs	r3, r1, r3
 8005164:	2164      	movs	r1, #100	; 0x64
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	4623      	mov	r3, r4
 8005174:	4a61      	ldr	r2, [pc, #388]	; (80052fc <Shell_Loop+0x2e4>)
 8005176:	210b      	movs	r1, #11
 8005178:	f000 faf8 	bl	800576c <sniprintf>
 800517c:	4603      	mov	r3, r0
 800517e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			HAL_UART_Transmit(uartShell, pibuffer, size, HAL_MAX_DELAY);
 8005182:	4b4f      	ldr	r3, [pc, #316]	; (80052c0 <Shell_Loop+0x2a8>)
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800518a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800518e:	f04f 33ff 	mov.w	r3, #4294967295
 8005192:	f7fe f99a 	bl	80034ca <HAL_UART_Transmit>
 8005196:	e0ec      	b.n	8005372 <Shell_Loop+0x35a>
		}
		else if(strcmp(argv[0],"GET_P")==0){
 8005198:	4b50      	ldr	r3, [pc, #320]	; (80052dc <Shell_Loop+0x2c4>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4958      	ldr	r1, [pc, #352]	; (8005300 <Shell_Loop+0x2e8>)
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fb f836 	bl	8000210 <strcmp>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d123      	bne.n	80051f2 <Shell_Loop+0x1da>
			bmp_press_read(&bmp280);
 80051aa:	4852      	ldr	r0, [pc, #328]	; (80052f4 <Shell_Loop+0x2dc>)
 80051ac:	f7ff fb24 	bl	80047f8 <bmp_press_read>
			char pibuffer[11];
			uint16_t size = snprintf(pibuffer,11,"P=%dPa",(int)(bmp280.press%10000000));
 80051b0:	4b50      	ldr	r3, [pc, #320]	; (80052f4 <Shell_Loop+0x2dc>)
 80051b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b4:	4a53      	ldr	r2, [pc, #332]	; (8005304 <Shell_Loop+0x2ec>)
 80051b6:	fb82 1203 	smull	r1, r2, r2, r3
 80051ba:	1591      	asrs	r1, r2, #22
 80051bc:	17da      	asrs	r2, r3, #31
 80051be:	1a8a      	subs	r2, r1, r2
 80051c0:	4951      	ldr	r1, [pc, #324]	; (8005308 <Shell_Loop+0x2f0>)
 80051c2:	fb01 f202 	mul.w	r2, r1, r2
 80051c6:	1a9a      	subs	r2, r3, r2
 80051c8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80051cc:	4613      	mov	r3, r2
 80051ce:	4a4f      	ldr	r2, [pc, #316]	; (800530c <Shell_Loop+0x2f4>)
 80051d0:	210b      	movs	r1, #11
 80051d2:	f000 facb 	bl	800576c <sniprintf>
 80051d6:	4603      	mov	r3, r0
 80051d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			HAL_UART_Transmit(uartShell, pibuffer, size, HAL_MAX_DELAY);
 80051dc:	4b38      	ldr	r3, [pc, #224]	; (80052c0 <Shell_Loop+0x2a8>)
 80051de:	6818      	ldr	r0, [r3, #0]
 80051e0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80051e4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80051e8:	f04f 33ff 	mov.w	r3, #4294967295
 80051ec:	f7fe f96d 	bl	80034ca <HAL_UART_Transmit>
 80051f0:	e0bf      	b.n	8005372 <Shell_Loop+0x35a>
		}
		else if(strcmp(argv[0],"SET_K")==0){
 80051f2:	4b3a      	ldr	r3, [pc, #232]	; (80052dc <Shell_Loop+0x2c4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4946      	ldr	r1, [pc, #280]	; (8005310 <Shell_Loop+0x2f8>)
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fb f809 	bl	8000210 <strcmp>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d11c      	bne.n	800523e <Shell_Loop+0x226>
			K = number_interpretor(argv[1]);
 8005204:	4b35      	ldr	r3, [pc, #212]	; (80052dc <Shell_Loop+0x2c4>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	4618      	mov	r0, r3
 800520a:	f000 f8e9 	bl	80053e0 <number_interpretor>
 800520e:	4603      	mov	r3, r0
 8005210:	4a40      	ldr	r2, [pc, #256]	; (8005314 <Shell_Loop+0x2fc>)
 8005212:	6013      	str	r3, [r2, #0]
			char pibuffer[11];
			uint16_t size = snprintf(pibuffer,11,"SET_K=OK");
 8005214:	f107 031c 	add.w	r3, r7, #28
 8005218:	4a3f      	ldr	r2, [pc, #252]	; (8005318 <Shell_Loop+0x300>)
 800521a:	210b      	movs	r1, #11
 800521c:	4618      	mov	r0, r3
 800521e:	f000 faa5 	bl	800576c <sniprintf>
 8005222:	4603      	mov	r3, r0
 8005224:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			HAL_UART_Transmit(uartShell, pibuffer, size, HAL_MAX_DELAY);
 8005228:	4b25      	ldr	r3, [pc, #148]	; (80052c0 <Shell_Loop+0x2a8>)
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8005230:	f107 011c 	add.w	r1, r7, #28
 8005234:	f04f 33ff 	mov.w	r3, #4294967295
 8005238:	f7fe f947 	bl	80034ca <HAL_UART_Transmit>
 800523c:	e099      	b.n	8005372 <Shell_Loop+0x35a>
		}
		else if(strcmp(argv[0],"GET_K")==0){
 800523e:	4b27      	ldr	r3, [pc, #156]	; (80052dc <Shell_Loop+0x2c4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4936      	ldr	r1, [pc, #216]	; (800531c <Shell_Loop+0x304>)
 8005244:	4618      	mov	r0, r3
 8005246:	f7fa ffe3 	bl	8000210 <strcmp>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d115      	bne.n	800527c <Shell_Loop+0x264>
			char pibuffer[11];
			uint16_t size = snprintf(pibuffer,11,"K=%5d",K);
 8005250:	4b30      	ldr	r3, [pc, #192]	; (8005314 <Shell_Loop+0x2fc>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f107 0010 	add.w	r0, r7, #16
 8005258:	4a31      	ldr	r2, [pc, #196]	; (8005320 <Shell_Loop+0x308>)
 800525a:	210b      	movs	r1, #11
 800525c:	f000 fa86 	bl	800576c <sniprintf>
 8005260:	4603      	mov	r3, r0
 8005262:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			HAL_UART_Transmit(uartShell, pibuffer, size, HAL_MAX_DELAY);
 8005266:	4b16      	ldr	r3, [pc, #88]	; (80052c0 <Shell_Loop+0x2a8>)
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800526e:	f107 0110 	add.w	r1, r7, #16
 8005272:	f04f 33ff 	mov.w	r3, #4294967295
 8005276:	f7fe f928 	bl	80034ca <HAL_UART_Transmit>
 800527a:	e07a      	b.n	8005372 <Shell_Loop+0x35a>
		}
		else if(strcmp(argv[0],"GET_A")==0){
 800527c:	4b17      	ldr	r3, [pc, #92]	; (80052dc <Shell_Loop+0x2c4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4928      	ldr	r1, [pc, #160]	; (8005324 <Shell_Loop+0x30c>)
 8005282:	4618      	mov	r0, r3
 8005284:	f7fa ffc4 	bl	8000210 <strcmp>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d150      	bne.n	8005330 <Shell_Loop+0x318>
			char pibuffer[11];
			uint16_t size = snprintf(pibuffer,11,"A=%5d",A);
 800528e:	4b26      	ldr	r3, [pc, #152]	; (8005328 <Shell_Loop+0x310>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	1d38      	adds	r0, r7, #4
 8005294:	4a25      	ldr	r2, [pc, #148]	; (800532c <Shell_Loop+0x314>)
 8005296:	210b      	movs	r1, #11
 8005298:	f000 fa68 	bl	800576c <sniprintf>
 800529c:	4603      	mov	r3, r0
 800529e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			HAL_UART_Transmit(uartShell, pibuffer, size, HAL_MAX_DELAY);
 80052a2:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <Shell_Loop+0x2a8>)
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80052aa:	1d39      	adds	r1, r7, #4
 80052ac:	f04f 33ff 	mov.w	r3, #4294967295
 80052b0:	f7fe f90b 	bl	80034ca <HAL_UART_Transmit>
 80052b4:	e05d      	b.n	8005372 <Shell_Loop+0x35a>
 80052b6:	bf00      	nop
 80052b8:	20000298 	.word	0x20000298
 80052bc:	2000029c 	.word	0x2000029c
 80052c0:	200000c8 	.word	0x200000c8
 80052c4:	20000090 	.word	0x20000090
 80052c8:	20000320 	.word	0x20000320
 80052cc:	200002e0 	.word	0x200002e0
 80052d0:	20000348 	.word	0x20000348
 80052d4:	08006ac0 	.word	0x08006ac0
 80052d8:	2000034c 	.word	0x2000034c
 80052dc:	20000324 	.word	0x20000324
 80052e0:	20000350 	.word	0x20000350
 80052e4:	20000094 	.word	0x20000094
 80052e8:	08006ac4 	.word	0x08006ac4
 80052ec:	200000ac 	.word	0x200000ac
 80052f0:	08006ad4 	.word	0x08006ad4
 80052f4:	200001c4 	.word	0x200001c4
 80052f8:	51eb851f 	.word	0x51eb851f
 80052fc:	08006adc 	.word	0x08006adc
 8005300:	08006aec 	.word	0x08006aec
 8005304:	6b5fca6b 	.word	0x6b5fca6b
 8005308:	00989680 	.word	0x00989680
 800530c:	08006af4 	.word	0x08006af4
 8005310:	08006afc 	.word	0x08006afc
 8005314:	20000354 	.word	0x20000354
 8005318:	08006b04 	.word	0x08006b04
 800531c:	08006b10 	.word	0x08006b10
 8005320:	08006b18 	.word	0x08006b18
 8005324:	08006b20 	.word	0x08006b20
 8005328:	200000cc 	.word	0x200000cc
 800532c:	08006b28 	.word	0x08006b28
		}
		else if(strcmp(argv[0],"help")==0){
 8005330:	4b17      	ldr	r3, [pc, #92]	; (8005390 <Shell_Loop+0x378>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4917      	ldr	r1, [pc, #92]	; (8005394 <Shell_Loop+0x37c>)
 8005336:	4618      	mov	r0, r3
 8005338:	f7fa ff6a 	bl	8000210 <strcmp>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10f      	bne.n	8005362 <Shell_Loop+0x34a>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 8005342:	4a15      	ldr	r2, [pc, #84]	; (8005398 <Shell_Loop+0x380>)
 8005344:	2140      	movs	r1, #64	; 0x40
 8005346:	4815      	ldr	r0, [pc, #84]	; (800539c <Shell_Loop+0x384>)
 8005348:	f000 fa10 	bl	800576c <sniprintf>
 800534c:	64f8      	str	r0, [r7, #76]	; 0x4c
			HAL_UART_Transmit(uartShell, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800534e:	4b14      	ldr	r3, [pc, #80]	; (80053a0 <Shell_Loop+0x388>)
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005354:	b29a      	uxth	r2, r3
 8005356:	f04f 33ff 	mov.w	r3, #4294967295
 800535a:	4910      	ldr	r1, [pc, #64]	; (800539c <Shell_Loop+0x384>)
 800535c:	f7fe f8b5 	bl	80034ca <HAL_UART_Transmit>
 8005360:	e007      	b.n	8005372 <Shell_Loop+0x35a>
		}
		else{
			HAL_UART_Transmit(uartShell, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8005362:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <Shell_Loop+0x388>)
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	f04f 33ff 	mov.w	r3, #4294967295
 800536a:	2214      	movs	r2, #20
 800536c:	490d      	ldr	r1, [pc, #52]	; (80053a4 <Shell_Loop+0x38c>)
 800536e:	f7fe f8ac 	bl	80034ca <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(uartShell, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8005372:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <Shell_Loop+0x388>)
 8005374:	6818      	ldr	r0, [r3, #0]
 8005376:	f04f 33ff 	mov.w	r3, #4294967295
 800537a:	221c      	movs	r2, #28
 800537c:	490a      	ldr	r1, [pc, #40]	; (80053a8 <Shell_Loop+0x390>)
 800537e:	f7fe f8a4 	bl	80034ca <HAL_UART_Transmit>
		newCmdReady = 0;
 8005382:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <Shell_Loop+0x394>)
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
	}
}
 8005388:	bf00      	nop
 800538a:	3754      	adds	r7, #84	; 0x54
 800538c:	46bd      	mov	sp, r7
 800538e:	bd90      	pop	{r4, r7, pc}
 8005390:	20000324 	.word	0x20000324
 8005394:	08006b30 	.word	0x08006b30
 8005398:	08006b38 	.word	0x08006b38
 800539c:	200002a0 	.word	0x200002a0
 80053a0:	200000c8 	.word	0x200000c8
 80053a4:	20000098 	.word	0x20000098
 80053a8:	2000000c 	.word	0x2000000c
 80053ac:	20000350 	.word	0x20000350

080053b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80053b8:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <HAL_UART_RxCpltCallback+0x24>)
 80053ba:	2201      	movs	r2, #1
 80053bc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(uartShell, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80053be:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <HAL_UART_RxCpltCallback+0x28>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2201      	movs	r2, #1
 80053c4:	4905      	ldr	r1, [pc, #20]	; (80053dc <HAL_UART_RxCpltCallback+0x2c>)
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fe f911 	bl	80035ee <HAL_UART_Receive_IT>
}
 80053cc:	bf00      	nop
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	20000298 	.word	0x20000298
 80053d8:	200000c8 	.word	0x200000c8
 80053dc:	2000029c 	.word	0x2000029c

080053e0 <number_interpretor>:

/////////////////////////////////////////////////////////////////////////////////////////////

int number_interpretor(uint8_t * number_string){
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
	if(number_string[0] >= '0' && number_string[0] <= '9' ){
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b2f      	cmp	r3, #47	; 0x2f
 80053ee:	d908      	bls.n	8005402 <number_interpretor+0x22>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b39      	cmp	r3, #57	; 0x39
 80053f6:	d804      	bhi.n	8005402 <number_interpretor+0x22>
		return atoi(&number_string[0]);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f808 	bl	800540e <atoi>
 80053fe:	4603      	mov	r3, r0
 8005400:	e001      	b.n	8005406 <number_interpretor+0x26>
	}
	else{
		return -1;
 8005402:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <atoi>:
 800540e:	220a      	movs	r2, #10
 8005410:	2100      	movs	r1, #0
 8005412:	f000 b883 	b.w	800551c <strtol>
	...

08005418 <_strtol_l.constprop.0>:
 8005418:	2b01      	cmp	r3, #1
 800541a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800541e:	d001      	beq.n	8005424 <_strtol_l.constprop.0+0xc>
 8005420:	2b24      	cmp	r3, #36	; 0x24
 8005422:	d906      	bls.n	8005432 <_strtol_l.constprop.0+0x1a>
 8005424:	f000 fb58 	bl	8005ad8 <__errno>
 8005428:	2316      	movs	r3, #22
 800542a:	6003      	str	r3, [r0, #0]
 800542c:	2000      	movs	r0, #0
 800542e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005432:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005518 <_strtol_l.constprop.0+0x100>
 8005436:	460d      	mov	r5, r1
 8005438:	462e      	mov	r6, r5
 800543a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800543e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005442:	f017 0708 	ands.w	r7, r7, #8
 8005446:	d1f7      	bne.n	8005438 <_strtol_l.constprop.0+0x20>
 8005448:	2c2d      	cmp	r4, #45	; 0x2d
 800544a:	d132      	bne.n	80054b2 <_strtol_l.constprop.0+0x9a>
 800544c:	782c      	ldrb	r4, [r5, #0]
 800544e:	2701      	movs	r7, #1
 8005450:	1cb5      	adds	r5, r6, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d05b      	beq.n	800550e <_strtol_l.constprop.0+0xf6>
 8005456:	2b10      	cmp	r3, #16
 8005458:	d109      	bne.n	800546e <_strtol_l.constprop.0+0x56>
 800545a:	2c30      	cmp	r4, #48	; 0x30
 800545c:	d107      	bne.n	800546e <_strtol_l.constprop.0+0x56>
 800545e:	782c      	ldrb	r4, [r5, #0]
 8005460:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005464:	2c58      	cmp	r4, #88	; 0x58
 8005466:	d14d      	bne.n	8005504 <_strtol_l.constprop.0+0xec>
 8005468:	786c      	ldrb	r4, [r5, #1]
 800546a:	2310      	movs	r3, #16
 800546c:	3502      	adds	r5, #2
 800546e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005472:	f108 38ff 	add.w	r8, r8, #4294967295
 8005476:	f04f 0e00 	mov.w	lr, #0
 800547a:	fbb8 f9f3 	udiv	r9, r8, r3
 800547e:	4676      	mov	r6, lr
 8005480:	fb03 8a19 	mls	sl, r3, r9, r8
 8005484:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005488:	f1bc 0f09 	cmp.w	ip, #9
 800548c:	d816      	bhi.n	80054bc <_strtol_l.constprop.0+0xa4>
 800548e:	4664      	mov	r4, ip
 8005490:	42a3      	cmp	r3, r4
 8005492:	dd24      	ble.n	80054de <_strtol_l.constprop.0+0xc6>
 8005494:	f1be 3fff 	cmp.w	lr, #4294967295
 8005498:	d008      	beq.n	80054ac <_strtol_l.constprop.0+0x94>
 800549a:	45b1      	cmp	r9, r6
 800549c:	d31c      	bcc.n	80054d8 <_strtol_l.constprop.0+0xc0>
 800549e:	d101      	bne.n	80054a4 <_strtol_l.constprop.0+0x8c>
 80054a0:	45a2      	cmp	sl, r4
 80054a2:	db19      	blt.n	80054d8 <_strtol_l.constprop.0+0xc0>
 80054a4:	fb06 4603 	mla	r6, r6, r3, r4
 80054a8:	f04f 0e01 	mov.w	lr, #1
 80054ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054b0:	e7e8      	b.n	8005484 <_strtol_l.constprop.0+0x6c>
 80054b2:	2c2b      	cmp	r4, #43	; 0x2b
 80054b4:	bf04      	itt	eq
 80054b6:	782c      	ldrbeq	r4, [r5, #0]
 80054b8:	1cb5      	addeq	r5, r6, #2
 80054ba:	e7ca      	b.n	8005452 <_strtol_l.constprop.0+0x3a>
 80054bc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80054c0:	f1bc 0f19 	cmp.w	ip, #25
 80054c4:	d801      	bhi.n	80054ca <_strtol_l.constprop.0+0xb2>
 80054c6:	3c37      	subs	r4, #55	; 0x37
 80054c8:	e7e2      	b.n	8005490 <_strtol_l.constprop.0+0x78>
 80054ca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80054ce:	f1bc 0f19 	cmp.w	ip, #25
 80054d2:	d804      	bhi.n	80054de <_strtol_l.constprop.0+0xc6>
 80054d4:	3c57      	subs	r4, #87	; 0x57
 80054d6:	e7db      	b.n	8005490 <_strtol_l.constprop.0+0x78>
 80054d8:	f04f 3eff 	mov.w	lr, #4294967295
 80054dc:	e7e6      	b.n	80054ac <_strtol_l.constprop.0+0x94>
 80054de:	f1be 3fff 	cmp.w	lr, #4294967295
 80054e2:	d105      	bne.n	80054f0 <_strtol_l.constprop.0+0xd8>
 80054e4:	2322      	movs	r3, #34	; 0x22
 80054e6:	6003      	str	r3, [r0, #0]
 80054e8:	4646      	mov	r6, r8
 80054ea:	b942      	cbnz	r2, 80054fe <_strtol_l.constprop.0+0xe6>
 80054ec:	4630      	mov	r0, r6
 80054ee:	e79e      	b.n	800542e <_strtol_l.constprop.0+0x16>
 80054f0:	b107      	cbz	r7, 80054f4 <_strtol_l.constprop.0+0xdc>
 80054f2:	4276      	negs	r6, r6
 80054f4:	2a00      	cmp	r2, #0
 80054f6:	d0f9      	beq.n	80054ec <_strtol_l.constprop.0+0xd4>
 80054f8:	f1be 0f00 	cmp.w	lr, #0
 80054fc:	d000      	beq.n	8005500 <_strtol_l.constprop.0+0xe8>
 80054fe:	1e69      	subs	r1, r5, #1
 8005500:	6011      	str	r1, [r2, #0]
 8005502:	e7f3      	b.n	80054ec <_strtol_l.constprop.0+0xd4>
 8005504:	2430      	movs	r4, #48	; 0x30
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1b1      	bne.n	800546e <_strtol_l.constprop.0+0x56>
 800550a:	2308      	movs	r3, #8
 800550c:	e7af      	b.n	800546e <_strtol_l.constprop.0+0x56>
 800550e:	2c30      	cmp	r4, #48	; 0x30
 8005510:	d0a5      	beq.n	800545e <_strtol_l.constprop.0+0x46>
 8005512:	230a      	movs	r3, #10
 8005514:	e7ab      	b.n	800546e <_strtol_l.constprop.0+0x56>
 8005516:	bf00      	nop
 8005518:	08006b79 	.word	0x08006b79

0800551c <strtol>:
 800551c:	4613      	mov	r3, r2
 800551e:	460a      	mov	r2, r1
 8005520:	4601      	mov	r1, r0
 8005522:	4802      	ldr	r0, [pc, #8]	; (800552c <strtol+0x10>)
 8005524:	6800      	ldr	r0, [r0, #0]
 8005526:	f7ff bf77 	b.w	8005418 <_strtol_l.constprop.0>
 800552a:	bf00      	nop
 800552c:	20000128 	.word	0x20000128

08005530 <std>:
 8005530:	2300      	movs	r3, #0
 8005532:	b510      	push	{r4, lr}
 8005534:	4604      	mov	r4, r0
 8005536:	e9c0 3300 	strd	r3, r3, [r0]
 800553a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800553e:	6083      	str	r3, [r0, #8]
 8005540:	8181      	strh	r1, [r0, #12]
 8005542:	6643      	str	r3, [r0, #100]	; 0x64
 8005544:	81c2      	strh	r2, [r0, #14]
 8005546:	6183      	str	r3, [r0, #24]
 8005548:	4619      	mov	r1, r3
 800554a:	2208      	movs	r2, #8
 800554c:	305c      	adds	r0, #92	; 0x5c
 800554e:	f000 fa19 	bl	8005984 <memset>
 8005552:	4b05      	ldr	r3, [pc, #20]	; (8005568 <std+0x38>)
 8005554:	6263      	str	r3, [r4, #36]	; 0x24
 8005556:	4b05      	ldr	r3, [pc, #20]	; (800556c <std+0x3c>)
 8005558:	62a3      	str	r3, [r4, #40]	; 0x28
 800555a:	4b05      	ldr	r3, [pc, #20]	; (8005570 <std+0x40>)
 800555c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800555e:	4b05      	ldr	r3, [pc, #20]	; (8005574 <std+0x44>)
 8005560:	6224      	str	r4, [r4, #32]
 8005562:	6323      	str	r3, [r4, #48]	; 0x30
 8005564:	bd10      	pop	{r4, pc}
 8005566:	bf00      	nop
 8005568:	080057d5 	.word	0x080057d5
 800556c:	080057f7 	.word	0x080057f7
 8005570:	0800582f 	.word	0x0800582f
 8005574:	08005853 	.word	0x08005853

08005578 <stdio_exit_handler>:
 8005578:	4a02      	ldr	r2, [pc, #8]	; (8005584 <stdio_exit_handler+0xc>)
 800557a:	4903      	ldr	r1, [pc, #12]	; (8005588 <stdio_exit_handler+0x10>)
 800557c:	4803      	ldr	r0, [pc, #12]	; (800558c <stdio_exit_handler+0x14>)
 800557e:	f000 b869 	b.w	8005654 <_fwalk_sglue>
 8005582:	bf00      	nop
 8005584:	200000d0 	.word	0x200000d0
 8005588:	080066d1 	.word	0x080066d1
 800558c:	200000dc 	.word	0x200000dc

08005590 <cleanup_stdio>:
 8005590:	6841      	ldr	r1, [r0, #4]
 8005592:	4b0c      	ldr	r3, [pc, #48]	; (80055c4 <cleanup_stdio+0x34>)
 8005594:	4299      	cmp	r1, r3
 8005596:	b510      	push	{r4, lr}
 8005598:	4604      	mov	r4, r0
 800559a:	d001      	beq.n	80055a0 <cleanup_stdio+0x10>
 800559c:	f001 f898 	bl	80066d0 <_fflush_r>
 80055a0:	68a1      	ldr	r1, [r4, #8]
 80055a2:	4b09      	ldr	r3, [pc, #36]	; (80055c8 <cleanup_stdio+0x38>)
 80055a4:	4299      	cmp	r1, r3
 80055a6:	d002      	beq.n	80055ae <cleanup_stdio+0x1e>
 80055a8:	4620      	mov	r0, r4
 80055aa:	f001 f891 	bl	80066d0 <_fflush_r>
 80055ae:	68e1      	ldr	r1, [r4, #12]
 80055b0:	4b06      	ldr	r3, [pc, #24]	; (80055cc <cleanup_stdio+0x3c>)
 80055b2:	4299      	cmp	r1, r3
 80055b4:	d004      	beq.n	80055c0 <cleanup_stdio+0x30>
 80055b6:	4620      	mov	r0, r4
 80055b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055bc:	f001 b888 	b.w	80066d0 <_fflush_r>
 80055c0:	bd10      	pop	{r4, pc}
 80055c2:	bf00      	nop
 80055c4:	20000358 	.word	0x20000358
 80055c8:	200003c0 	.word	0x200003c0
 80055cc:	20000428 	.word	0x20000428

080055d0 <global_stdio_init.part.0>:
 80055d0:	b510      	push	{r4, lr}
 80055d2:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <global_stdio_init.part.0+0x30>)
 80055d4:	4c0b      	ldr	r4, [pc, #44]	; (8005604 <global_stdio_init.part.0+0x34>)
 80055d6:	4a0c      	ldr	r2, [pc, #48]	; (8005608 <global_stdio_init.part.0+0x38>)
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	4620      	mov	r0, r4
 80055dc:	2200      	movs	r2, #0
 80055de:	2104      	movs	r1, #4
 80055e0:	f7ff ffa6 	bl	8005530 <std>
 80055e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80055e8:	2201      	movs	r2, #1
 80055ea:	2109      	movs	r1, #9
 80055ec:	f7ff ffa0 	bl	8005530 <std>
 80055f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80055f4:	2202      	movs	r2, #2
 80055f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055fa:	2112      	movs	r1, #18
 80055fc:	f7ff bf98 	b.w	8005530 <std>
 8005600:	20000490 	.word	0x20000490
 8005604:	20000358 	.word	0x20000358
 8005608:	08005579 	.word	0x08005579

0800560c <__sfp_lock_acquire>:
 800560c:	4801      	ldr	r0, [pc, #4]	; (8005614 <__sfp_lock_acquire+0x8>)
 800560e:	f000 ba8d 	b.w	8005b2c <__retarget_lock_acquire_recursive>
 8005612:	bf00      	nop
 8005614:	20000499 	.word	0x20000499

08005618 <__sfp_lock_release>:
 8005618:	4801      	ldr	r0, [pc, #4]	; (8005620 <__sfp_lock_release+0x8>)
 800561a:	f000 ba88 	b.w	8005b2e <__retarget_lock_release_recursive>
 800561e:	bf00      	nop
 8005620:	20000499 	.word	0x20000499

08005624 <__sinit>:
 8005624:	b510      	push	{r4, lr}
 8005626:	4604      	mov	r4, r0
 8005628:	f7ff fff0 	bl	800560c <__sfp_lock_acquire>
 800562c:	6a23      	ldr	r3, [r4, #32]
 800562e:	b11b      	cbz	r3, 8005638 <__sinit+0x14>
 8005630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005634:	f7ff bff0 	b.w	8005618 <__sfp_lock_release>
 8005638:	4b04      	ldr	r3, [pc, #16]	; (800564c <__sinit+0x28>)
 800563a:	6223      	str	r3, [r4, #32]
 800563c:	4b04      	ldr	r3, [pc, #16]	; (8005650 <__sinit+0x2c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1f5      	bne.n	8005630 <__sinit+0xc>
 8005644:	f7ff ffc4 	bl	80055d0 <global_stdio_init.part.0>
 8005648:	e7f2      	b.n	8005630 <__sinit+0xc>
 800564a:	bf00      	nop
 800564c:	08005591 	.word	0x08005591
 8005650:	20000490 	.word	0x20000490

08005654 <_fwalk_sglue>:
 8005654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005658:	4607      	mov	r7, r0
 800565a:	4688      	mov	r8, r1
 800565c:	4614      	mov	r4, r2
 800565e:	2600      	movs	r6, #0
 8005660:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005664:	f1b9 0901 	subs.w	r9, r9, #1
 8005668:	d505      	bpl.n	8005676 <_fwalk_sglue+0x22>
 800566a:	6824      	ldr	r4, [r4, #0]
 800566c:	2c00      	cmp	r4, #0
 800566e:	d1f7      	bne.n	8005660 <_fwalk_sglue+0xc>
 8005670:	4630      	mov	r0, r6
 8005672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005676:	89ab      	ldrh	r3, [r5, #12]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d907      	bls.n	800568c <_fwalk_sglue+0x38>
 800567c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005680:	3301      	adds	r3, #1
 8005682:	d003      	beq.n	800568c <_fwalk_sglue+0x38>
 8005684:	4629      	mov	r1, r5
 8005686:	4638      	mov	r0, r7
 8005688:	47c0      	blx	r8
 800568a:	4306      	orrs	r6, r0
 800568c:	3568      	adds	r5, #104	; 0x68
 800568e:	e7e9      	b.n	8005664 <_fwalk_sglue+0x10>

08005690 <iprintf>:
 8005690:	b40f      	push	{r0, r1, r2, r3}
 8005692:	b507      	push	{r0, r1, r2, lr}
 8005694:	4906      	ldr	r1, [pc, #24]	; (80056b0 <iprintf+0x20>)
 8005696:	ab04      	add	r3, sp, #16
 8005698:	6808      	ldr	r0, [r1, #0]
 800569a:	f853 2b04 	ldr.w	r2, [r3], #4
 800569e:	6881      	ldr	r1, [r0, #8]
 80056a0:	9301      	str	r3, [sp, #4]
 80056a2:	f000 fce5 	bl	8006070 <_vfiprintf_r>
 80056a6:	b003      	add	sp, #12
 80056a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80056ac:	b004      	add	sp, #16
 80056ae:	4770      	bx	lr
 80056b0:	20000128 	.word	0x20000128

080056b4 <_puts_r>:
 80056b4:	6a03      	ldr	r3, [r0, #32]
 80056b6:	b570      	push	{r4, r5, r6, lr}
 80056b8:	6884      	ldr	r4, [r0, #8]
 80056ba:	4605      	mov	r5, r0
 80056bc:	460e      	mov	r6, r1
 80056be:	b90b      	cbnz	r3, 80056c4 <_puts_r+0x10>
 80056c0:	f7ff ffb0 	bl	8005624 <__sinit>
 80056c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056c6:	07db      	lsls	r3, r3, #31
 80056c8:	d405      	bmi.n	80056d6 <_puts_r+0x22>
 80056ca:	89a3      	ldrh	r3, [r4, #12]
 80056cc:	0598      	lsls	r0, r3, #22
 80056ce:	d402      	bmi.n	80056d6 <_puts_r+0x22>
 80056d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056d2:	f000 fa2b 	bl	8005b2c <__retarget_lock_acquire_recursive>
 80056d6:	89a3      	ldrh	r3, [r4, #12]
 80056d8:	0719      	lsls	r1, r3, #28
 80056da:	d513      	bpl.n	8005704 <_puts_r+0x50>
 80056dc:	6923      	ldr	r3, [r4, #16]
 80056de:	b18b      	cbz	r3, 8005704 <_puts_r+0x50>
 80056e0:	3e01      	subs	r6, #1
 80056e2:	68a3      	ldr	r3, [r4, #8]
 80056e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80056e8:	3b01      	subs	r3, #1
 80056ea:	60a3      	str	r3, [r4, #8]
 80056ec:	b9e9      	cbnz	r1, 800572a <_puts_r+0x76>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	da2e      	bge.n	8005750 <_puts_r+0x9c>
 80056f2:	4622      	mov	r2, r4
 80056f4:	210a      	movs	r1, #10
 80056f6:	4628      	mov	r0, r5
 80056f8:	f000 f8af 	bl	800585a <__swbuf_r>
 80056fc:	3001      	adds	r0, #1
 80056fe:	d007      	beq.n	8005710 <_puts_r+0x5c>
 8005700:	250a      	movs	r5, #10
 8005702:	e007      	b.n	8005714 <_puts_r+0x60>
 8005704:	4621      	mov	r1, r4
 8005706:	4628      	mov	r0, r5
 8005708:	f000 f8e4 	bl	80058d4 <__swsetup_r>
 800570c:	2800      	cmp	r0, #0
 800570e:	d0e7      	beq.n	80056e0 <_puts_r+0x2c>
 8005710:	f04f 35ff 	mov.w	r5, #4294967295
 8005714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005716:	07da      	lsls	r2, r3, #31
 8005718:	d405      	bmi.n	8005726 <_puts_r+0x72>
 800571a:	89a3      	ldrh	r3, [r4, #12]
 800571c:	059b      	lsls	r3, r3, #22
 800571e:	d402      	bmi.n	8005726 <_puts_r+0x72>
 8005720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005722:	f000 fa04 	bl	8005b2e <__retarget_lock_release_recursive>
 8005726:	4628      	mov	r0, r5
 8005728:	bd70      	pop	{r4, r5, r6, pc}
 800572a:	2b00      	cmp	r3, #0
 800572c:	da04      	bge.n	8005738 <_puts_r+0x84>
 800572e:	69a2      	ldr	r2, [r4, #24]
 8005730:	429a      	cmp	r2, r3
 8005732:	dc06      	bgt.n	8005742 <_puts_r+0x8e>
 8005734:	290a      	cmp	r1, #10
 8005736:	d004      	beq.n	8005742 <_puts_r+0x8e>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	6022      	str	r2, [r4, #0]
 800573e:	7019      	strb	r1, [r3, #0]
 8005740:	e7cf      	b.n	80056e2 <_puts_r+0x2e>
 8005742:	4622      	mov	r2, r4
 8005744:	4628      	mov	r0, r5
 8005746:	f000 f888 	bl	800585a <__swbuf_r>
 800574a:	3001      	adds	r0, #1
 800574c:	d1c9      	bne.n	80056e2 <_puts_r+0x2e>
 800574e:	e7df      	b.n	8005710 <_puts_r+0x5c>
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	250a      	movs	r5, #10
 8005754:	1c5a      	adds	r2, r3, #1
 8005756:	6022      	str	r2, [r4, #0]
 8005758:	701d      	strb	r5, [r3, #0]
 800575a:	e7db      	b.n	8005714 <_puts_r+0x60>

0800575c <puts>:
 800575c:	4b02      	ldr	r3, [pc, #8]	; (8005768 <puts+0xc>)
 800575e:	4601      	mov	r1, r0
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	f7ff bfa7 	b.w	80056b4 <_puts_r>
 8005766:	bf00      	nop
 8005768:	20000128 	.word	0x20000128

0800576c <sniprintf>:
 800576c:	b40c      	push	{r2, r3}
 800576e:	b530      	push	{r4, r5, lr}
 8005770:	4b17      	ldr	r3, [pc, #92]	; (80057d0 <sniprintf+0x64>)
 8005772:	1e0c      	subs	r4, r1, #0
 8005774:	681d      	ldr	r5, [r3, #0]
 8005776:	b09d      	sub	sp, #116	; 0x74
 8005778:	da08      	bge.n	800578c <sniprintf+0x20>
 800577a:	238b      	movs	r3, #139	; 0x8b
 800577c:	602b      	str	r3, [r5, #0]
 800577e:	f04f 30ff 	mov.w	r0, #4294967295
 8005782:	b01d      	add	sp, #116	; 0x74
 8005784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005788:	b002      	add	sp, #8
 800578a:	4770      	bx	lr
 800578c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005790:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005794:	bf14      	ite	ne
 8005796:	f104 33ff 	addne.w	r3, r4, #4294967295
 800579a:	4623      	moveq	r3, r4
 800579c:	9304      	str	r3, [sp, #16]
 800579e:	9307      	str	r3, [sp, #28]
 80057a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057a4:	9002      	str	r0, [sp, #8]
 80057a6:	9006      	str	r0, [sp, #24]
 80057a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80057ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80057ae:	ab21      	add	r3, sp, #132	; 0x84
 80057b0:	a902      	add	r1, sp, #8
 80057b2:	4628      	mov	r0, r5
 80057b4:	9301      	str	r3, [sp, #4]
 80057b6:	f000 fb33 	bl	8005e20 <_svfiprintf_r>
 80057ba:	1c43      	adds	r3, r0, #1
 80057bc:	bfbc      	itt	lt
 80057be:	238b      	movlt	r3, #139	; 0x8b
 80057c0:	602b      	strlt	r3, [r5, #0]
 80057c2:	2c00      	cmp	r4, #0
 80057c4:	d0dd      	beq.n	8005782 <sniprintf+0x16>
 80057c6:	9b02      	ldr	r3, [sp, #8]
 80057c8:	2200      	movs	r2, #0
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	e7d9      	b.n	8005782 <sniprintf+0x16>
 80057ce:	bf00      	nop
 80057d0:	20000128 	.word	0x20000128

080057d4 <__sread>:
 80057d4:	b510      	push	{r4, lr}
 80057d6:	460c      	mov	r4, r1
 80057d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057dc:	f000 f958 	bl	8005a90 <_read_r>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	bfab      	itete	ge
 80057e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057e6:	89a3      	ldrhlt	r3, [r4, #12]
 80057e8:	181b      	addge	r3, r3, r0
 80057ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057ee:	bfac      	ite	ge
 80057f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80057f2:	81a3      	strhlt	r3, [r4, #12]
 80057f4:	bd10      	pop	{r4, pc}

080057f6 <__swrite>:
 80057f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057fa:	461f      	mov	r7, r3
 80057fc:	898b      	ldrh	r3, [r1, #12]
 80057fe:	05db      	lsls	r3, r3, #23
 8005800:	4605      	mov	r5, r0
 8005802:	460c      	mov	r4, r1
 8005804:	4616      	mov	r6, r2
 8005806:	d505      	bpl.n	8005814 <__swrite+0x1e>
 8005808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800580c:	2302      	movs	r3, #2
 800580e:	2200      	movs	r2, #0
 8005810:	f000 f92c 	bl	8005a6c <_lseek_r>
 8005814:	89a3      	ldrh	r3, [r4, #12]
 8005816:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800581a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800581e:	81a3      	strh	r3, [r4, #12]
 8005820:	4632      	mov	r2, r6
 8005822:	463b      	mov	r3, r7
 8005824:	4628      	mov	r0, r5
 8005826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800582a:	f000 b943 	b.w	8005ab4 <_write_r>

0800582e <__sseek>:
 800582e:	b510      	push	{r4, lr}
 8005830:	460c      	mov	r4, r1
 8005832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005836:	f000 f919 	bl	8005a6c <_lseek_r>
 800583a:	1c43      	adds	r3, r0, #1
 800583c:	89a3      	ldrh	r3, [r4, #12]
 800583e:	bf15      	itete	ne
 8005840:	6560      	strne	r0, [r4, #84]	; 0x54
 8005842:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005846:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800584a:	81a3      	strheq	r3, [r4, #12]
 800584c:	bf18      	it	ne
 800584e:	81a3      	strhne	r3, [r4, #12]
 8005850:	bd10      	pop	{r4, pc}

08005852 <__sclose>:
 8005852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005856:	f000 b8f9 	b.w	8005a4c <_close_r>

0800585a <__swbuf_r>:
 800585a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585c:	460e      	mov	r6, r1
 800585e:	4614      	mov	r4, r2
 8005860:	4605      	mov	r5, r0
 8005862:	b118      	cbz	r0, 800586c <__swbuf_r+0x12>
 8005864:	6a03      	ldr	r3, [r0, #32]
 8005866:	b90b      	cbnz	r3, 800586c <__swbuf_r+0x12>
 8005868:	f7ff fedc 	bl	8005624 <__sinit>
 800586c:	69a3      	ldr	r3, [r4, #24]
 800586e:	60a3      	str	r3, [r4, #8]
 8005870:	89a3      	ldrh	r3, [r4, #12]
 8005872:	071a      	lsls	r2, r3, #28
 8005874:	d525      	bpl.n	80058c2 <__swbuf_r+0x68>
 8005876:	6923      	ldr	r3, [r4, #16]
 8005878:	b31b      	cbz	r3, 80058c2 <__swbuf_r+0x68>
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	6922      	ldr	r2, [r4, #16]
 800587e:	1a98      	subs	r0, r3, r2
 8005880:	6963      	ldr	r3, [r4, #20]
 8005882:	b2f6      	uxtb	r6, r6
 8005884:	4283      	cmp	r3, r0
 8005886:	4637      	mov	r7, r6
 8005888:	dc04      	bgt.n	8005894 <__swbuf_r+0x3a>
 800588a:	4621      	mov	r1, r4
 800588c:	4628      	mov	r0, r5
 800588e:	f000 ff1f 	bl	80066d0 <_fflush_r>
 8005892:	b9e0      	cbnz	r0, 80058ce <__swbuf_r+0x74>
 8005894:	68a3      	ldr	r3, [r4, #8]
 8005896:	3b01      	subs	r3, #1
 8005898:	60a3      	str	r3, [r4, #8]
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	6022      	str	r2, [r4, #0]
 80058a0:	701e      	strb	r6, [r3, #0]
 80058a2:	6962      	ldr	r2, [r4, #20]
 80058a4:	1c43      	adds	r3, r0, #1
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d004      	beq.n	80058b4 <__swbuf_r+0x5a>
 80058aa:	89a3      	ldrh	r3, [r4, #12]
 80058ac:	07db      	lsls	r3, r3, #31
 80058ae:	d506      	bpl.n	80058be <__swbuf_r+0x64>
 80058b0:	2e0a      	cmp	r6, #10
 80058b2:	d104      	bne.n	80058be <__swbuf_r+0x64>
 80058b4:	4621      	mov	r1, r4
 80058b6:	4628      	mov	r0, r5
 80058b8:	f000 ff0a 	bl	80066d0 <_fflush_r>
 80058bc:	b938      	cbnz	r0, 80058ce <__swbuf_r+0x74>
 80058be:	4638      	mov	r0, r7
 80058c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058c2:	4621      	mov	r1, r4
 80058c4:	4628      	mov	r0, r5
 80058c6:	f000 f805 	bl	80058d4 <__swsetup_r>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d0d5      	beq.n	800587a <__swbuf_r+0x20>
 80058ce:	f04f 37ff 	mov.w	r7, #4294967295
 80058d2:	e7f4      	b.n	80058be <__swbuf_r+0x64>

080058d4 <__swsetup_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	4b2a      	ldr	r3, [pc, #168]	; (8005980 <__swsetup_r+0xac>)
 80058d8:	4605      	mov	r5, r0
 80058da:	6818      	ldr	r0, [r3, #0]
 80058dc:	460c      	mov	r4, r1
 80058de:	b118      	cbz	r0, 80058e8 <__swsetup_r+0x14>
 80058e0:	6a03      	ldr	r3, [r0, #32]
 80058e2:	b90b      	cbnz	r3, 80058e8 <__swsetup_r+0x14>
 80058e4:	f7ff fe9e 	bl	8005624 <__sinit>
 80058e8:	89a3      	ldrh	r3, [r4, #12]
 80058ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058ee:	0718      	lsls	r0, r3, #28
 80058f0:	d422      	bmi.n	8005938 <__swsetup_r+0x64>
 80058f2:	06d9      	lsls	r1, r3, #27
 80058f4:	d407      	bmi.n	8005906 <__swsetup_r+0x32>
 80058f6:	2309      	movs	r3, #9
 80058f8:	602b      	str	r3, [r5, #0]
 80058fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058fe:	81a3      	strh	r3, [r4, #12]
 8005900:	f04f 30ff 	mov.w	r0, #4294967295
 8005904:	e034      	b.n	8005970 <__swsetup_r+0x9c>
 8005906:	0758      	lsls	r0, r3, #29
 8005908:	d512      	bpl.n	8005930 <__swsetup_r+0x5c>
 800590a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800590c:	b141      	cbz	r1, 8005920 <__swsetup_r+0x4c>
 800590e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005912:	4299      	cmp	r1, r3
 8005914:	d002      	beq.n	800591c <__swsetup_r+0x48>
 8005916:	4628      	mov	r0, r5
 8005918:	f000 f928 	bl	8005b6c <_free_r>
 800591c:	2300      	movs	r3, #0
 800591e:	6363      	str	r3, [r4, #52]	; 0x34
 8005920:	89a3      	ldrh	r3, [r4, #12]
 8005922:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005926:	81a3      	strh	r3, [r4, #12]
 8005928:	2300      	movs	r3, #0
 800592a:	6063      	str	r3, [r4, #4]
 800592c:	6923      	ldr	r3, [r4, #16]
 800592e:	6023      	str	r3, [r4, #0]
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	f043 0308 	orr.w	r3, r3, #8
 8005936:	81a3      	strh	r3, [r4, #12]
 8005938:	6923      	ldr	r3, [r4, #16]
 800593a:	b94b      	cbnz	r3, 8005950 <__swsetup_r+0x7c>
 800593c:	89a3      	ldrh	r3, [r4, #12]
 800593e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005946:	d003      	beq.n	8005950 <__swsetup_r+0x7c>
 8005948:	4621      	mov	r1, r4
 800594a:	4628      	mov	r0, r5
 800594c:	f000 ff20 	bl	8006790 <__smakebuf_r>
 8005950:	89a0      	ldrh	r0, [r4, #12]
 8005952:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005956:	f010 0301 	ands.w	r3, r0, #1
 800595a:	d00a      	beq.n	8005972 <__swsetup_r+0x9e>
 800595c:	2300      	movs	r3, #0
 800595e:	60a3      	str	r3, [r4, #8]
 8005960:	6963      	ldr	r3, [r4, #20]
 8005962:	425b      	negs	r3, r3
 8005964:	61a3      	str	r3, [r4, #24]
 8005966:	6923      	ldr	r3, [r4, #16]
 8005968:	b943      	cbnz	r3, 800597c <__swsetup_r+0xa8>
 800596a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800596e:	d1c4      	bne.n	80058fa <__swsetup_r+0x26>
 8005970:	bd38      	pop	{r3, r4, r5, pc}
 8005972:	0781      	lsls	r1, r0, #30
 8005974:	bf58      	it	pl
 8005976:	6963      	ldrpl	r3, [r4, #20]
 8005978:	60a3      	str	r3, [r4, #8]
 800597a:	e7f4      	b.n	8005966 <__swsetup_r+0x92>
 800597c:	2000      	movs	r0, #0
 800597e:	e7f7      	b.n	8005970 <__swsetup_r+0x9c>
 8005980:	20000128 	.word	0x20000128

08005984 <memset>:
 8005984:	4402      	add	r2, r0
 8005986:	4603      	mov	r3, r0
 8005988:	4293      	cmp	r3, r2
 800598a:	d100      	bne.n	800598e <memset+0xa>
 800598c:	4770      	bx	lr
 800598e:	f803 1b01 	strb.w	r1, [r3], #1
 8005992:	e7f9      	b.n	8005988 <memset+0x4>

08005994 <strtok>:
 8005994:	4b16      	ldr	r3, [pc, #88]	; (80059f0 <strtok+0x5c>)
 8005996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005998:	681e      	ldr	r6, [r3, #0]
 800599a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800599c:	4605      	mov	r5, r0
 800599e:	b9fc      	cbnz	r4, 80059e0 <strtok+0x4c>
 80059a0:	2050      	movs	r0, #80	; 0x50
 80059a2:	9101      	str	r1, [sp, #4]
 80059a4:	f000 f92e 	bl	8005c04 <malloc>
 80059a8:	9901      	ldr	r1, [sp, #4]
 80059aa:	6470      	str	r0, [r6, #68]	; 0x44
 80059ac:	4602      	mov	r2, r0
 80059ae:	b920      	cbnz	r0, 80059ba <strtok+0x26>
 80059b0:	4b10      	ldr	r3, [pc, #64]	; (80059f4 <strtok+0x60>)
 80059b2:	4811      	ldr	r0, [pc, #68]	; (80059f8 <strtok+0x64>)
 80059b4:	215b      	movs	r1, #91	; 0x5b
 80059b6:	f000 f8bb 	bl	8005b30 <__assert_func>
 80059ba:	e9c0 4400 	strd	r4, r4, [r0]
 80059be:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80059c2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80059c6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80059ca:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80059ce:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80059d2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80059d6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80059da:	6184      	str	r4, [r0, #24]
 80059dc:	7704      	strb	r4, [r0, #28]
 80059de:	6244      	str	r4, [r0, #36]	; 0x24
 80059e0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80059e2:	2301      	movs	r3, #1
 80059e4:	4628      	mov	r0, r5
 80059e6:	b002      	add	sp, #8
 80059e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80059ec:	f000 b806 	b.w	80059fc <__strtok_r>
 80059f0:	20000128 	.word	0x20000128
 80059f4:	08006c79 	.word	0x08006c79
 80059f8:	08006c90 	.word	0x08006c90

080059fc <__strtok_r>:
 80059fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059fe:	b908      	cbnz	r0, 8005a04 <__strtok_r+0x8>
 8005a00:	6810      	ldr	r0, [r2, #0]
 8005a02:	b188      	cbz	r0, 8005a28 <__strtok_r+0x2c>
 8005a04:	4604      	mov	r4, r0
 8005a06:	4620      	mov	r0, r4
 8005a08:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005a0c:	460f      	mov	r7, r1
 8005a0e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005a12:	b91e      	cbnz	r6, 8005a1c <__strtok_r+0x20>
 8005a14:	b965      	cbnz	r5, 8005a30 <__strtok_r+0x34>
 8005a16:	6015      	str	r5, [r2, #0]
 8005a18:	4628      	mov	r0, r5
 8005a1a:	e005      	b.n	8005a28 <__strtok_r+0x2c>
 8005a1c:	42b5      	cmp	r5, r6
 8005a1e:	d1f6      	bne.n	8005a0e <__strtok_r+0x12>
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1f0      	bne.n	8005a06 <__strtok_r+0xa>
 8005a24:	6014      	str	r4, [r2, #0]
 8005a26:	7003      	strb	r3, [r0, #0]
 8005a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a2a:	461c      	mov	r4, r3
 8005a2c:	e00c      	b.n	8005a48 <__strtok_r+0x4c>
 8005a2e:	b915      	cbnz	r5, 8005a36 <__strtok_r+0x3a>
 8005a30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005a34:	460e      	mov	r6, r1
 8005a36:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005a3a:	42ab      	cmp	r3, r5
 8005a3c:	d1f7      	bne.n	8005a2e <__strtok_r+0x32>
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0f3      	beq.n	8005a2a <__strtok_r+0x2e>
 8005a42:	2300      	movs	r3, #0
 8005a44:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005a48:	6014      	str	r4, [r2, #0]
 8005a4a:	e7ed      	b.n	8005a28 <__strtok_r+0x2c>

08005a4c <_close_r>:
 8005a4c:	b538      	push	{r3, r4, r5, lr}
 8005a4e:	4d06      	ldr	r5, [pc, #24]	; (8005a68 <_close_r+0x1c>)
 8005a50:	2300      	movs	r3, #0
 8005a52:	4604      	mov	r4, r0
 8005a54:	4608      	mov	r0, r1
 8005a56:	602b      	str	r3, [r5, #0]
 8005a58:	f7fb f901 	bl	8000c5e <_close>
 8005a5c:	1c43      	adds	r3, r0, #1
 8005a5e:	d102      	bne.n	8005a66 <_close_r+0x1a>
 8005a60:	682b      	ldr	r3, [r5, #0]
 8005a62:	b103      	cbz	r3, 8005a66 <_close_r+0x1a>
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	bd38      	pop	{r3, r4, r5, pc}
 8005a68:	20000494 	.word	0x20000494

08005a6c <_lseek_r>:
 8005a6c:	b538      	push	{r3, r4, r5, lr}
 8005a6e:	4d07      	ldr	r5, [pc, #28]	; (8005a8c <_lseek_r+0x20>)
 8005a70:	4604      	mov	r4, r0
 8005a72:	4608      	mov	r0, r1
 8005a74:	4611      	mov	r1, r2
 8005a76:	2200      	movs	r2, #0
 8005a78:	602a      	str	r2, [r5, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f7fb f916 	bl	8000cac <_lseek>
 8005a80:	1c43      	adds	r3, r0, #1
 8005a82:	d102      	bne.n	8005a8a <_lseek_r+0x1e>
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	b103      	cbz	r3, 8005a8a <_lseek_r+0x1e>
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	bd38      	pop	{r3, r4, r5, pc}
 8005a8c:	20000494 	.word	0x20000494

08005a90 <_read_r>:
 8005a90:	b538      	push	{r3, r4, r5, lr}
 8005a92:	4d07      	ldr	r5, [pc, #28]	; (8005ab0 <_read_r+0x20>)
 8005a94:	4604      	mov	r4, r0
 8005a96:	4608      	mov	r0, r1
 8005a98:	4611      	mov	r1, r2
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	602a      	str	r2, [r5, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f7fb f8c0 	bl	8000c24 <_read>
 8005aa4:	1c43      	adds	r3, r0, #1
 8005aa6:	d102      	bne.n	8005aae <_read_r+0x1e>
 8005aa8:	682b      	ldr	r3, [r5, #0]
 8005aaa:	b103      	cbz	r3, 8005aae <_read_r+0x1e>
 8005aac:	6023      	str	r3, [r4, #0]
 8005aae:	bd38      	pop	{r3, r4, r5, pc}
 8005ab0:	20000494 	.word	0x20000494

08005ab4 <_write_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4d07      	ldr	r5, [pc, #28]	; (8005ad4 <_write_r+0x20>)
 8005ab8:	4604      	mov	r4, r0
 8005aba:	4608      	mov	r0, r1
 8005abc:	4611      	mov	r1, r2
 8005abe:	2200      	movs	r2, #0
 8005ac0:	602a      	str	r2, [r5, #0]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f7fa ff3c 	bl	8000940 <_write>
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	d102      	bne.n	8005ad2 <_write_r+0x1e>
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	b103      	cbz	r3, 8005ad2 <_write_r+0x1e>
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	bd38      	pop	{r3, r4, r5, pc}
 8005ad4:	20000494 	.word	0x20000494

08005ad8 <__errno>:
 8005ad8:	4b01      	ldr	r3, [pc, #4]	; (8005ae0 <__errno+0x8>)
 8005ada:	6818      	ldr	r0, [r3, #0]
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	20000128 	.word	0x20000128

08005ae4 <__libc_init_array>:
 8005ae4:	b570      	push	{r4, r5, r6, lr}
 8005ae6:	4d0d      	ldr	r5, [pc, #52]	; (8005b1c <__libc_init_array+0x38>)
 8005ae8:	4c0d      	ldr	r4, [pc, #52]	; (8005b20 <__libc_init_array+0x3c>)
 8005aea:	1b64      	subs	r4, r4, r5
 8005aec:	10a4      	asrs	r4, r4, #2
 8005aee:	2600      	movs	r6, #0
 8005af0:	42a6      	cmp	r6, r4
 8005af2:	d109      	bne.n	8005b08 <__libc_init_array+0x24>
 8005af4:	4d0b      	ldr	r5, [pc, #44]	; (8005b24 <__libc_init_array+0x40>)
 8005af6:	4c0c      	ldr	r4, [pc, #48]	; (8005b28 <__libc_init_array+0x44>)
 8005af8:	f000 ff62 	bl	80069c0 <_init>
 8005afc:	1b64      	subs	r4, r4, r5
 8005afe:	10a4      	asrs	r4, r4, #2
 8005b00:	2600      	movs	r6, #0
 8005b02:	42a6      	cmp	r6, r4
 8005b04:	d105      	bne.n	8005b12 <__libc_init_array+0x2e>
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b0c:	4798      	blx	r3
 8005b0e:	3601      	adds	r6, #1
 8005b10:	e7ee      	b.n	8005af0 <__libc_init_array+0xc>
 8005b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b16:	4798      	blx	r3
 8005b18:	3601      	adds	r6, #1
 8005b1a:	e7f2      	b.n	8005b02 <__libc_init_array+0x1e>
 8005b1c:	08006d64 	.word	0x08006d64
 8005b20:	08006d64 	.word	0x08006d64
 8005b24:	08006d64 	.word	0x08006d64
 8005b28:	08006d68 	.word	0x08006d68

08005b2c <__retarget_lock_acquire_recursive>:
 8005b2c:	4770      	bx	lr

08005b2e <__retarget_lock_release_recursive>:
 8005b2e:	4770      	bx	lr

08005b30 <__assert_func>:
 8005b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b32:	4614      	mov	r4, r2
 8005b34:	461a      	mov	r2, r3
 8005b36:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <__assert_func+0x2c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4605      	mov	r5, r0
 8005b3c:	68d8      	ldr	r0, [r3, #12]
 8005b3e:	b14c      	cbz	r4, 8005b54 <__assert_func+0x24>
 8005b40:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <__assert_func+0x30>)
 8005b42:	9100      	str	r1, [sp, #0]
 8005b44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b48:	4906      	ldr	r1, [pc, #24]	; (8005b64 <__assert_func+0x34>)
 8005b4a:	462b      	mov	r3, r5
 8005b4c:	f000 fde8 	bl	8006720 <fiprintf>
 8005b50:	f000 feb4 	bl	80068bc <abort>
 8005b54:	4b04      	ldr	r3, [pc, #16]	; (8005b68 <__assert_func+0x38>)
 8005b56:	461c      	mov	r4, r3
 8005b58:	e7f3      	b.n	8005b42 <__assert_func+0x12>
 8005b5a:	bf00      	nop
 8005b5c:	20000128 	.word	0x20000128
 8005b60:	08006cea 	.word	0x08006cea
 8005b64:	08006cf7 	.word	0x08006cf7
 8005b68:	08006d25 	.word	0x08006d25

08005b6c <_free_r>:
 8005b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b6e:	2900      	cmp	r1, #0
 8005b70:	d044      	beq.n	8005bfc <_free_r+0x90>
 8005b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b76:	9001      	str	r0, [sp, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f1a1 0404 	sub.w	r4, r1, #4
 8005b7e:	bfb8      	it	lt
 8005b80:	18e4      	addlt	r4, r4, r3
 8005b82:	f000 f8e7 	bl	8005d54 <__malloc_lock>
 8005b86:	4a1e      	ldr	r2, [pc, #120]	; (8005c00 <_free_r+0x94>)
 8005b88:	9801      	ldr	r0, [sp, #4]
 8005b8a:	6813      	ldr	r3, [r2, #0]
 8005b8c:	b933      	cbnz	r3, 8005b9c <_free_r+0x30>
 8005b8e:	6063      	str	r3, [r4, #4]
 8005b90:	6014      	str	r4, [r2, #0]
 8005b92:	b003      	add	sp, #12
 8005b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b98:	f000 b8e2 	b.w	8005d60 <__malloc_unlock>
 8005b9c:	42a3      	cmp	r3, r4
 8005b9e:	d908      	bls.n	8005bb2 <_free_r+0x46>
 8005ba0:	6825      	ldr	r5, [r4, #0]
 8005ba2:	1961      	adds	r1, r4, r5
 8005ba4:	428b      	cmp	r3, r1
 8005ba6:	bf01      	itttt	eq
 8005ba8:	6819      	ldreq	r1, [r3, #0]
 8005baa:	685b      	ldreq	r3, [r3, #4]
 8005bac:	1949      	addeq	r1, r1, r5
 8005bae:	6021      	streq	r1, [r4, #0]
 8005bb0:	e7ed      	b.n	8005b8e <_free_r+0x22>
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	b10b      	cbz	r3, 8005bbc <_free_r+0x50>
 8005bb8:	42a3      	cmp	r3, r4
 8005bba:	d9fa      	bls.n	8005bb2 <_free_r+0x46>
 8005bbc:	6811      	ldr	r1, [r2, #0]
 8005bbe:	1855      	adds	r5, r2, r1
 8005bc0:	42a5      	cmp	r5, r4
 8005bc2:	d10b      	bne.n	8005bdc <_free_r+0x70>
 8005bc4:	6824      	ldr	r4, [r4, #0]
 8005bc6:	4421      	add	r1, r4
 8005bc8:	1854      	adds	r4, r2, r1
 8005bca:	42a3      	cmp	r3, r4
 8005bcc:	6011      	str	r1, [r2, #0]
 8005bce:	d1e0      	bne.n	8005b92 <_free_r+0x26>
 8005bd0:	681c      	ldr	r4, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	6053      	str	r3, [r2, #4]
 8005bd6:	440c      	add	r4, r1
 8005bd8:	6014      	str	r4, [r2, #0]
 8005bda:	e7da      	b.n	8005b92 <_free_r+0x26>
 8005bdc:	d902      	bls.n	8005be4 <_free_r+0x78>
 8005bde:	230c      	movs	r3, #12
 8005be0:	6003      	str	r3, [r0, #0]
 8005be2:	e7d6      	b.n	8005b92 <_free_r+0x26>
 8005be4:	6825      	ldr	r5, [r4, #0]
 8005be6:	1961      	adds	r1, r4, r5
 8005be8:	428b      	cmp	r3, r1
 8005bea:	bf04      	itt	eq
 8005bec:	6819      	ldreq	r1, [r3, #0]
 8005bee:	685b      	ldreq	r3, [r3, #4]
 8005bf0:	6063      	str	r3, [r4, #4]
 8005bf2:	bf04      	itt	eq
 8005bf4:	1949      	addeq	r1, r1, r5
 8005bf6:	6021      	streq	r1, [r4, #0]
 8005bf8:	6054      	str	r4, [r2, #4]
 8005bfa:	e7ca      	b.n	8005b92 <_free_r+0x26>
 8005bfc:	b003      	add	sp, #12
 8005bfe:	bd30      	pop	{r4, r5, pc}
 8005c00:	2000049c 	.word	0x2000049c

08005c04 <malloc>:
 8005c04:	4b02      	ldr	r3, [pc, #8]	; (8005c10 <malloc+0xc>)
 8005c06:	4601      	mov	r1, r0
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	f000 b823 	b.w	8005c54 <_malloc_r>
 8005c0e:	bf00      	nop
 8005c10:	20000128 	.word	0x20000128

08005c14 <sbrk_aligned>:
 8005c14:	b570      	push	{r4, r5, r6, lr}
 8005c16:	4e0e      	ldr	r6, [pc, #56]	; (8005c50 <sbrk_aligned+0x3c>)
 8005c18:	460c      	mov	r4, r1
 8005c1a:	6831      	ldr	r1, [r6, #0]
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	b911      	cbnz	r1, 8005c26 <sbrk_aligned+0x12>
 8005c20:	f000 fe2e 	bl	8006880 <_sbrk_r>
 8005c24:	6030      	str	r0, [r6, #0]
 8005c26:	4621      	mov	r1, r4
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f000 fe29 	bl	8006880 <_sbrk_r>
 8005c2e:	1c43      	adds	r3, r0, #1
 8005c30:	d00a      	beq.n	8005c48 <sbrk_aligned+0x34>
 8005c32:	1cc4      	adds	r4, r0, #3
 8005c34:	f024 0403 	bic.w	r4, r4, #3
 8005c38:	42a0      	cmp	r0, r4
 8005c3a:	d007      	beq.n	8005c4c <sbrk_aligned+0x38>
 8005c3c:	1a21      	subs	r1, r4, r0
 8005c3e:	4628      	mov	r0, r5
 8005c40:	f000 fe1e 	bl	8006880 <_sbrk_r>
 8005c44:	3001      	adds	r0, #1
 8005c46:	d101      	bne.n	8005c4c <sbrk_aligned+0x38>
 8005c48:	f04f 34ff 	mov.w	r4, #4294967295
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	200004a0 	.word	0x200004a0

08005c54 <_malloc_r>:
 8005c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c58:	1ccd      	adds	r5, r1, #3
 8005c5a:	f025 0503 	bic.w	r5, r5, #3
 8005c5e:	3508      	adds	r5, #8
 8005c60:	2d0c      	cmp	r5, #12
 8005c62:	bf38      	it	cc
 8005c64:	250c      	movcc	r5, #12
 8005c66:	2d00      	cmp	r5, #0
 8005c68:	4607      	mov	r7, r0
 8005c6a:	db01      	blt.n	8005c70 <_malloc_r+0x1c>
 8005c6c:	42a9      	cmp	r1, r5
 8005c6e:	d905      	bls.n	8005c7c <_malloc_r+0x28>
 8005c70:	230c      	movs	r3, #12
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	2600      	movs	r6, #0
 8005c76:	4630      	mov	r0, r6
 8005c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d50 <_malloc_r+0xfc>
 8005c80:	f000 f868 	bl	8005d54 <__malloc_lock>
 8005c84:	f8d8 3000 	ldr.w	r3, [r8]
 8005c88:	461c      	mov	r4, r3
 8005c8a:	bb5c      	cbnz	r4, 8005ce4 <_malloc_r+0x90>
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	4638      	mov	r0, r7
 8005c90:	f7ff ffc0 	bl	8005c14 <sbrk_aligned>
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	4604      	mov	r4, r0
 8005c98:	d155      	bne.n	8005d46 <_malloc_r+0xf2>
 8005c9a:	f8d8 4000 	ldr.w	r4, [r8]
 8005c9e:	4626      	mov	r6, r4
 8005ca0:	2e00      	cmp	r6, #0
 8005ca2:	d145      	bne.n	8005d30 <_malloc_r+0xdc>
 8005ca4:	2c00      	cmp	r4, #0
 8005ca6:	d048      	beq.n	8005d3a <_malloc_r+0xe6>
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	4631      	mov	r1, r6
 8005cac:	4638      	mov	r0, r7
 8005cae:	eb04 0903 	add.w	r9, r4, r3
 8005cb2:	f000 fde5 	bl	8006880 <_sbrk_r>
 8005cb6:	4581      	cmp	r9, r0
 8005cb8:	d13f      	bne.n	8005d3a <_malloc_r+0xe6>
 8005cba:	6821      	ldr	r1, [r4, #0]
 8005cbc:	1a6d      	subs	r5, r5, r1
 8005cbe:	4629      	mov	r1, r5
 8005cc0:	4638      	mov	r0, r7
 8005cc2:	f7ff ffa7 	bl	8005c14 <sbrk_aligned>
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	d037      	beq.n	8005d3a <_malloc_r+0xe6>
 8005cca:	6823      	ldr	r3, [r4, #0]
 8005ccc:	442b      	add	r3, r5
 8005cce:	6023      	str	r3, [r4, #0]
 8005cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d038      	beq.n	8005d4a <_malloc_r+0xf6>
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	42a2      	cmp	r2, r4
 8005cdc:	d12b      	bne.n	8005d36 <_malloc_r+0xe2>
 8005cde:	2200      	movs	r2, #0
 8005ce0:	605a      	str	r2, [r3, #4]
 8005ce2:	e00f      	b.n	8005d04 <_malloc_r+0xb0>
 8005ce4:	6822      	ldr	r2, [r4, #0]
 8005ce6:	1b52      	subs	r2, r2, r5
 8005ce8:	d41f      	bmi.n	8005d2a <_malloc_r+0xd6>
 8005cea:	2a0b      	cmp	r2, #11
 8005cec:	d917      	bls.n	8005d1e <_malloc_r+0xca>
 8005cee:	1961      	adds	r1, r4, r5
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	6025      	str	r5, [r4, #0]
 8005cf4:	bf18      	it	ne
 8005cf6:	6059      	strne	r1, [r3, #4]
 8005cf8:	6863      	ldr	r3, [r4, #4]
 8005cfa:	bf08      	it	eq
 8005cfc:	f8c8 1000 	streq.w	r1, [r8]
 8005d00:	5162      	str	r2, [r4, r5]
 8005d02:	604b      	str	r3, [r1, #4]
 8005d04:	4638      	mov	r0, r7
 8005d06:	f104 060b 	add.w	r6, r4, #11
 8005d0a:	f000 f829 	bl	8005d60 <__malloc_unlock>
 8005d0e:	f026 0607 	bic.w	r6, r6, #7
 8005d12:	1d23      	adds	r3, r4, #4
 8005d14:	1af2      	subs	r2, r6, r3
 8005d16:	d0ae      	beq.n	8005c76 <_malloc_r+0x22>
 8005d18:	1b9b      	subs	r3, r3, r6
 8005d1a:	50a3      	str	r3, [r4, r2]
 8005d1c:	e7ab      	b.n	8005c76 <_malloc_r+0x22>
 8005d1e:	42a3      	cmp	r3, r4
 8005d20:	6862      	ldr	r2, [r4, #4]
 8005d22:	d1dd      	bne.n	8005ce0 <_malloc_r+0x8c>
 8005d24:	f8c8 2000 	str.w	r2, [r8]
 8005d28:	e7ec      	b.n	8005d04 <_malloc_r+0xb0>
 8005d2a:	4623      	mov	r3, r4
 8005d2c:	6864      	ldr	r4, [r4, #4]
 8005d2e:	e7ac      	b.n	8005c8a <_malloc_r+0x36>
 8005d30:	4634      	mov	r4, r6
 8005d32:	6876      	ldr	r6, [r6, #4]
 8005d34:	e7b4      	b.n	8005ca0 <_malloc_r+0x4c>
 8005d36:	4613      	mov	r3, r2
 8005d38:	e7cc      	b.n	8005cd4 <_malloc_r+0x80>
 8005d3a:	230c      	movs	r3, #12
 8005d3c:	603b      	str	r3, [r7, #0]
 8005d3e:	4638      	mov	r0, r7
 8005d40:	f000 f80e 	bl	8005d60 <__malloc_unlock>
 8005d44:	e797      	b.n	8005c76 <_malloc_r+0x22>
 8005d46:	6025      	str	r5, [r4, #0]
 8005d48:	e7dc      	b.n	8005d04 <_malloc_r+0xb0>
 8005d4a:	605b      	str	r3, [r3, #4]
 8005d4c:	deff      	udf	#255	; 0xff
 8005d4e:	bf00      	nop
 8005d50:	2000049c 	.word	0x2000049c

08005d54 <__malloc_lock>:
 8005d54:	4801      	ldr	r0, [pc, #4]	; (8005d5c <__malloc_lock+0x8>)
 8005d56:	f7ff bee9 	b.w	8005b2c <__retarget_lock_acquire_recursive>
 8005d5a:	bf00      	nop
 8005d5c:	20000498 	.word	0x20000498

08005d60 <__malloc_unlock>:
 8005d60:	4801      	ldr	r0, [pc, #4]	; (8005d68 <__malloc_unlock+0x8>)
 8005d62:	f7ff bee4 	b.w	8005b2e <__retarget_lock_release_recursive>
 8005d66:	bf00      	nop
 8005d68:	20000498 	.word	0x20000498

08005d6c <__ssputs_r>:
 8005d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d70:	688e      	ldr	r6, [r1, #8]
 8005d72:	461f      	mov	r7, r3
 8005d74:	42be      	cmp	r6, r7
 8005d76:	680b      	ldr	r3, [r1, #0]
 8005d78:	4682      	mov	sl, r0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	4690      	mov	r8, r2
 8005d7e:	d82c      	bhi.n	8005dda <__ssputs_r+0x6e>
 8005d80:	898a      	ldrh	r2, [r1, #12]
 8005d82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d86:	d026      	beq.n	8005dd6 <__ssputs_r+0x6a>
 8005d88:	6965      	ldr	r5, [r4, #20]
 8005d8a:	6909      	ldr	r1, [r1, #16]
 8005d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d90:	eba3 0901 	sub.w	r9, r3, r1
 8005d94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d98:	1c7b      	adds	r3, r7, #1
 8005d9a:	444b      	add	r3, r9
 8005d9c:	106d      	asrs	r5, r5, #1
 8005d9e:	429d      	cmp	r5, r3
 8005da0:	bf38      	it	cc
 8005da2:	461d      	movcc	r5, r3
 8005da4:	0553      	lsls	r3, r2, #21
 8005da6:	d527      	bpl.n	8005df8 <__ssputs_r+0x8c>
 8005da8:	4629      	mov	r1, r5
 8005daa:	f7ff ff53 	bl	8005c54 <_malloc_r>
 8005dae:	4606      	mov	r6, r0
 8005db0:	b360      	cbz	r0, 8005e0c <__ssputs_r+0xa0>
 8005db2:	6921      	ldr	r1, [r4, #16]
 8005db4:	464a      	mov	r2, r9
 8005db6:	f000 fd73 	bl	80068a0 <memcpy>
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc4:	81a3      	strh	r3, [r4, #12]
 8005dc6:	6126      	str	r6, [r4, #16]
 8005dc8:	6165      	str	r5, [r4, #20]
 8005dca:	444e      	add	r6, r9
 8005dcc:	eba5 0509 	sub.w	r5, r5, r9
 8005dd0:	6026      	str	r6, [r4, #0]
 8005dd2:	60a5      	str	r5, [r4, #8]
 8005dd4:	463e      	mov	r6, r7
 8005dd6:	42be      	cmp	r6, r7
 8005dd8:	d900      	bls.n	8005ddc <__ssputs_r+0x70>
 8005dda:	463e      	mov	r6, r7
 8005ddc:	6820      	ldr	r0, [r4, #0]
 8005dde:	4632      	mov	r2, r6
 8005de0:	4641      	mov	r1, r8
 8005de2:	f000 fd11 	bl	8006808 <memmove>
 8005de6:	68a3      	ldr	r3, [r4, #8]
 8005de8:	1b9b      	subs	r3, r3, r6
 8005dea:	60a3      	str	r3, [r4, #8]
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	4433      	add	r3, r6
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	2000      	movs	r0, #0
 8005df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df8:	462a      	mov	r2, r5
 8005dfa:	f000 fd66 	bl	80068ca <_realloc_r>
 8005dfe:	4606      	mov	r6, r0
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d1e0      	bne.n	8005dc6 <__ssputs_r+0x5a>
 8005e04:	6921      	ldr	r1, [r4, #16]
 8005e06:	4650      	mov	r0, sl
 8005e08:	f7ff feb0 	bl	8005b6c <_free_r>
 8005e0c:	230c      	movs	r3, #12
 8005e0e:	f8ca 3000 	str.w	r3, [sl]
 8005e12:	89a3      	ldrh	r3, [r4, #12]
 8005e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e18:	81a3      	strh	r3, [r4, #12]
 8005e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e1e:	e7e9      	b.n	8005df4 <__ssputs_r+0x88>

08005e20 <_svfiprintf_r>:
 8005e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e24:	4698      	mov	r8, r3
 8005e26:	898b      	ldrh	r3, [r1, #12]
 8005e28:	061b      	lsls	r3, r3, #24
 8005e2a:	b09d      	sub	sp, #116	; 0x74
 8005e2c:	4607      	mov	r7, r0
 8005e2e:	460d      	mov	r5, r1
 8005e30:	4614      	mov	r4, r2
 8005e32:	d50e      	bpl.n	8005e52 <_svfiprintf_r+0x32>
 8005e34:	690b      	ldr	r3, [r1, #16]
 8005e36:	b963      	cbnz	r3, 8005e52 <_svfiprintf_r+0x32>
 8005e38:	2140      	movs	r1, #64	; 0x40
 8005e3a:	f7ff ff0b 	bl	8005c54 <_malloc_r>
 8005e3e:	6028      	str	r0, [r5, #0]
 8005e40:	6128      	str	r0, [r5, #16]
 8005e42:	b920      	cbnz	r0, 8005e4e <_svfiprintf_r+0x2e>
 8005e44:	230c      	movs	r3, #12
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4c:	e0d0      	b.n	8005ff0 <_svfiprintf_r+0x1d0>
 8005e4e:	2340      	movs	r3, #64	; 0x40
 8005e50:	616b      	str	r3, [r5, #20]
 8005e52:	2300      	movs	r3, #0
 8005e54:	9309      	str	r3, [sp, #36]	; 0x24
 8005e56:	2320      	movs	r3, #32
 8005e58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e60:	2330      	movs	r3, #48	; 0x30
 8005e62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006008 <_svfiprintf_r+0x1e8>
 8005e66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e6a:	f04f 0901 	mov.w	r9, #1
 8005e6e:	4623      	mov	r3, r4
 8005e70:	469a      	mov	sl, r3
 8005e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e76:	b10a      	cbz	r2, 8005e7c <_svfiprintf_r+0x5c>
 8005e78:	2a25      	cmp	r2, #37	; 0x25
 8005e7a:	d1f9      	bne.n	8005e70 <_svfiprintf_r+0x50>
 8005e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8005e80:	d00b      	beq.n	8005e9a <_svfiprintf_r+0x7a>
 8005e82:	465b      	mov	r3, fp
 8005e84:	4622      	mov	r2, r4
 8005e86:	4629      	mov	r1, r5
 8005e88:	4638      	mov	r0, r7
 8005e8a:	f7ff ff6f 	bl	8005d6c <__ssputs_r>
 8005e8e:	3001      	adds	r0, #1
 8005e90:	f000 80a9 	beq.w	8005fe6 <_svfiprintf_r+0x1c6>
 8005e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e96:	445a      	add	r2, fp
 8005e98:	9209      	str	r2, [sp, #36]	; 0x24
 8005e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 80a1 	beq.w	8005fe6 <_svfiprintf_r+0x1c6>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eae:	f10a 0a01 	add.w	sl, sl, #1
 8005eb2:	9304      	str	r3, [sp, #16]
 8005eb4:	9307      	str	r3, [sp, #28]
 8005eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005eba:	931a      	str	r3, [sp, #104]	; 0x68
 8005ebc:	4654      	mov	r4, sl
 8005ebe:	2205      	movs	r2, #5
 8005ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ec4:	4850      	ldr	r0, [pc, #320]	; (8006008 <_svfiprintf_r+0x1e8>)
 8005ec6:	f7fa f9bb 	bl	8000240 <memchr>
 8005eca:	9a04      	ldr	r2, [sp, #16]
 8005ecc:	b9d8      	cbnz	r0, 8005f06 <_svfiprintf_r+0xe6>
 8005ece:	06d0      	lsls	r0, r2, #27
 8005ed0:	bf44      	itt	mi
 8005ed2:	2320      	movmi	r3, #32
 8005ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ed8:	0711      	lsls	r1, r2, #28
 8005eda:	bf44      	itt	mi
 8005edc:	232b      	movmi	r3, #43	; 0x2b
 8005ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ee8:	d015      	beq.n	8005f16 <_svfiprintf_r+0xf6>
 8005eea:	9a07      	ldr	r2, [sp, #28]
 8005eec:	4654      	mov	r4, sl
 8005eee:	2000      	movs	r0, #0
 8005ef0:	f04f 0c0a 	mov.w	ip, #10
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005efa:	3b30      	subs	r3, #48	; 0x30
 8005efc:	2b09      	cmp	r3, #9
 8005efe:	d94d      	bls.n	8005f9c <_svfiprintf_r+0x17c>
 8005f00:	b1b0      	cbz	r0, 8005f30 <_svfiprintf_r+0x110>
 8005f02:	9207      	str	r2, [sp, #28]
 8005f04:	e014      	b.n	8005f30 <_svfiprintf_r+0x110>
 8005f06:	eba0 0308 	sub.w	r3, r0, r8
 8005f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	9304      	str	r3, [sp, #16]
 8005f12:	46a2      	mov	sl, r4
 8005f14:	e7d2      	b.n	8005ebc <_svfiprintf_r+0x9c>
 8005f16:	9b03      	ldr	r3, [sp, #12]
 8005f18:	1d19      	adds	r1, r3, #4
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	9103      	str	r1, [sp, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	bfbb      	ittet	lt
 8005f22:	425b      	neglt	r3, r3
 8005f24:	f042 0202 	orrlt.w	r2, r2, #2
 8005f28:	9307      	strge	r3, [sp, #28]
 8005f2a:	9307      	strlt	r3, [sp, #28]
 8005f2c:	bfb8      	it	lt
 8005f2e:	9204      	strlt	r2, [sp, #16]
 8005f30:	7823      	ldrb	r3, [r4, #0]
 8005f32:	2b2e      	cmp	r3, #46	; 0x2e
 8005f34:	d10c      	bne.n	8005f50 <_svfiprintf_r+0x130>
 8005f36:	7863      	ldrb	r3, [r4, #1]
 8005f38:	2b2a      	cmp	r3, #42	; 0x2a
 8005f3a:	d134      	bne.n	8005fa6 <_svfiprintf_r+0x186>
 8005f3c:	9b03      	ldr	r3, [sp, #12]
 8005f3e:	1d1a      	adds	r2, r3, #4
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	9203      	str	r2, [sp, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	bfb8      	it	lt
 8005f48:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f4c:	3402      	adds	r4, #2
 8005f4e:	9305      	str	r3, [sp, #20]
 8005f50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006018 <_svfiprintf_r+0x1f8>
 8005f54:	7821      	ldrb	r1, [r4, #0]
 8005f56:	2203      	movs	r2, #3
 8005f58:	4650      	mov	r0, sl
 8005f5a:	f7fa f971 	bl	8000240 <memchr>
 8005f5e:	b138      	cbz	r0, 8005f70 <_svfiprintf_r+0x150>
 8005f60:	9b04      	ldr	r3, [sp, #16]
 8005f62:	eba0 000a 	sub.w	r0, r0, sl
 8005f66:	2240      	movs	r2, #64	; 0x40
 8005f68:	4082      	lsls	r2, r0
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	3401      	adds	r4, #1
 8005f6e:	9304      	str	r3, [sp, #16]
 8005f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f74:	4825      	ldr	r0, [pc, #148]	; (800600c <_svfiprintf_r+0x1ec>)
 8005f76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f7a:	2206      	movs	r2, #6
 8005f7c:	f7fa f960 	bl	8000240 <memchr>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d038      	beq.n	8005ff6 <_svfiprintf_r+0x1d6>
 8005f84:	4b22      	ldr	r3, [pc, #136]	; (8006010 <_svfiprintf_r+0x1f0>)
 8005f86:	bb1b      	cbnz	r3, 8005fd0 <_svfiprintf_r+0x1b0>
 8005f88:	9b03      	ldr	r3, [sp, #12]
 8005f8a:	3307      	adds	r3, #7
 8005f8c:	f023 0307 	bic.w	r3, r3, #7
 8005f90:	3308      	adds	r3, #8
 8005f92:	9303      	str	r3, [sp, #12]
 8005f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f96:	4433      	add	r3, r6
 8005f98:	9309      	str	r3, [sp, #36]	; 0x24
 8005f9a:	e768      	b.n	8005e6e <_svfiprintf_r+0x4e>
 8005f9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	2001      	movs	r0, #1
 8005fa4:	e7a6      	b.n	8005ef4 <_svfiprintf_r+0xd4>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	3401      	adds	r4, #1
 8005faa:	9305      	str	r3, [sp, #20]
 8005fac:	4619      	mov	r1, r3
 8005fae:	f04f 0c0a 	mov.w	ip, #10
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fb8:	3a30      	subs	r2, #48	; 0x30
 8005fba:	2a09      	cmp	r2, #9
 8005fbc:	d903      	bls.n	8005fc6 <_svfiprintf_r+0x1a6>
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0c6      	beq.n	8005f50 <_svfiprintf_r+0x130>
 8005fc2:	9105      	str	r1, [sp, #20]
 8005fc4:	e7c4      	b.n	8005f50 <_svfiprintf_r+0x130>
 8005fc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fca:	4604      	mov	r4, r0
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e7f0      	b.n	8005fb2 <_svfiprintf_r+0x192>
 8005fd0:	ab03      	add	r3, sp, #12
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	462a      	mov	r2, r5
 8005fd6:	4b0f      	ldr	r3, [pc, #60]	; (8006014 <_svfiprintf_r+0x1f4>)
 8005fd8:	a904      	add	r1, sp, #16
 8005fda:	4638      	mov	r0, r7
 8005fdc:	f3af 8000 	nop.w
 8005fe0:	1c42      	adds	r2, r0, #1
 8005fe2:	4606      	mov	r6, r0
 8005fe4:	d1d6      	bne.n	8005f94 <_svfiprintf_r+0x174>
 8005fe6:	89ab      	ldrh	r3, [r5, #12]
 8005fe8:	065b      	lsls	r3, r3, #25
 8005fea:	f53f af2d 	bmi.w	8005e48 <_svfiprintf_r+0x28>
 8005fee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ff0:	b01d      	add	sp, #116	; 0x74
 8005ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff6:	ab03      	add	r3, sp, #12
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	462a      	mov	r2, r5
 8005ffc:	4b05      	ldr	r3, [pc, #20]	; (8006014 <_svfiprintf_r+0x1f4>)
 8005ffe:	a904      	add	r1, sp, #16
 8006000:	4638      	mov	r0, r7
 8006002:	f000 f9bd 	bl	8006380 <_printf_i>
 8006006:	e7eb      	b.n	8005fe0 <_svfiprintf_r+0x1c0>
 8006008:	08006d26 	.word	0x08006d26
 800600c:	08006d30 	.word	0x08006d30
 8006010:	00000000 	.word	0x00000000
 8006014:	08005d6d 	.word	0x08005d6d
 8006018:	08006d2c 	.word	0x08006d2c

0800601c <__sfputc_r>:
 800601c:	6893      	ldr	r3, [r2, #8]
 800601e:	3b01      	subs	r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	b410      	push	{r4}
 8006024:	6093      	str	r3, [r2, #8]
 8006026:	da08      	bge.n	800603a <__sfputc_r+0x1e>
 8006028:	6994      	ldr	r4, [r2, #24]
 800602a:	42a3      	cmp	r3, r4
 800602c:	db01      	blt.n	8006032 <__sfputc_r+0x16>
 800602e:	290a      	cmp	r1, #10
 8006030:	d103      	bne.n	800603a <__sfputc_r+0x1e>
 8006032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006036:	f7ff bc10 	b.w	800585a <__swbuf_r>
 800603a:	6813      	ldr	r3, [r2, #0]
 800603c:	1c58      	adds	r0, r3, #1
 800603e:	6010      	str	r0, [r2, #0]
 8006040:	7019      	strb	r1, [r3, #0]
 8006042:	4608      	mov	r0, r1
 8006044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006048:	4770      	bx	lr

0800604a <__sfputs_r>:
 800604a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604c:	4606      	mov	r6, r0
 800604e:	460f      	mov	r7, r1
 8006050:	4614      	mov	r4, r2
 8006052:	18d5      	adds	r5, r2, r3
 8006054:	42ac      	cmp	r4, r5
 8006056:	d101      	bne.n	800605c <__sfputs_r+0x12>
 8006058:	2000      	movs	r0, #0
 800605a:	e007      	b.n	800606c <__sfputs_r+0x22>
 800605c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006060:	463a      	mov	r2, r7
 8006062:	4630      	mov	r0, r6
 8006064:	f7ff ffda 	bl	800601c <__sfputc_r>
 8006068:	1c43      	adds	r3, r0, #1
 800606a:	d1f3      	bne.n	8006054 <__sfputs_r+0xa>
 800606c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006070 <_vfiprintf_r>:
 8006070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006074:	460d      	mov	r5, r1
 8006076:	b09d      	sub	sp, #116	; 0x74
 8006078:	4614      	mov	r4, r2
 800607a:	4698      	mov	r8, r3
 800607c:	4606      	mov	r6, r0
 800607e:	b118      	cbz	r0, 8006088 <_vfiprintf_r+0x18>
 8006080:	6a03      	ldr	r3, [r0, #32]
 8006082:	b90b      	cbnz	r3, 8006088 <_vfiprintf_r+0x18>
 8006084:	f7ff face 	bl	8005624 <__sinit>
 8006088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800608a:	07d9      	lsls	r1, r3, #31
 800608c:	d405      	bmi.n	800609a <_vfiprintf_r+0x2a>
 800608e:	89ab      	ldrh	r3, [r5, #12]
 8006090:	059a      	lsls	r2, r3, #22
 8006092:	d402      	bmi.n	800609a <_vfiprintf_r+0x2a>
 8006094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006096:	f7ff fd49 	bl	8005b2c <__retarget_lock_acquire_recursive>
 800609a:	89ab      	ldrh	r3, [r5, #12]
 800609c:	071b      	lsls	r3, r3, #28
 800609e:	d501      	bpl.n	80060a4 <_vfiprintf_r+0x34>
 80060a0:	692b      	ldr	r3, [r5, #16]
 80060a2:	b99b      	cbnz	r3, 80060cc <_vfiprintf_r+0x5c>
 80060a4:	4629      	mov	r1, r5
 80060a6:	4630      	mov	r0, r6
 80060a8:	f7ff fc14 	bl	80058d4 <__swsetup_r>
 80060ac:	b170      	cbz	r0, 80060cc <_vfiprintf_r+0x5c>
 80060ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060b0:	07dc      	lsls	r4, r3, #31
 80060b2:	d504      	bpl.n	80060be <_vfiprintf_r+0x4e>
 80060b4:	f04f 30ff 	mov.w	r0, #4294967295
 80060b8:	b01d      	add	sp, #116	; 0x74
 80060ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060be:	89ab      	ldrh	r3, [r5, #12]
 80060c0:	0598      	lsls	r0, r3, #22
 80060c2:	d4f7      	bmi.n	80060b4 <_vfiprintf_r+0x44>
 80060c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060c6:	f7ff fd32 	bl	8005b2e <__retarget_lock_release_recursive>
 80060ca:	e7f3      	b.n	80060b4 <_vfiprintf_r+0x44>
 80060cc:	2300      	movs	r3, #0
 80060ce:	9309      	str	r3, [sp, #36]	; 0x24
 80060d0:	2320      	movs	r3, #32
 80060d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80060da:	2330      	movs	r3, #48	; 0x30
 80060dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006290 <_vfiprintf_r+0x220>
 80060e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060e4:	f04f 0901 	mov.w	r9, #1
 80060e8:	4623      	mov	r3, r4
 80060ea:	469a      	mov	sl, r3
 80060ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060f0:	b10a      	cbz	r2, 80060f6 <_vfiprintf_r+0x86>
 80060f2:	2a25      	cmp	r2, #37	; 0x25
 80060f4:	d1f9      	bne.n	80060ea <_vfiprintf_r+0x7a>
 80060f6:	ebba 0b04 	subs.w	fp, sl, r4
 80060fa:	d00b      	beq.n	8006114 <_vfiprintf_r+0xa4>
 80060fc:	465b      	mov	r3, fp
 80060fe:	4622      	mov	r2, r4
 8006100:	4629      	mov	r1, r5
 8006102:	4630      	mov	r0, r6
 8006104:	f7ff ffa1 	bl	800604a <__sfputs_r>
 8006108:	3001      	adds	r0, #1
 800610a:	f000 80a9 	beq.w	8006260 <_vfiprintf_r+0x1f0>
 800610e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006110:	445a      	add	r2, fp
 8006112:	9209      	str	r2, [sp, #36]	; 0x24
 8006114:	f89a 3000 	ldrb.w	r3, [sl]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 80a1 	beq.w	8006260 <_vfiprintf_r+0x1f0>
 800611e:	2300      	movs	r3, #0
 8006120:	f04f 32ff 	mov.w	r2, #4294967295
 8006124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006128:	f10a 0a01 	add.w	sl, sl, #1
 800612c:	9304      	str	r3, [sp, #16]
 800612e:	9307      	str	r3, [sp, #28]
 8006130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006134:	931a      	str	r3, [sp, #104]	; 0x68
 8006136:	4654      	mov	r4, sl
 8006138:	2205      	movs	r2, #5
 800613a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800613e:	4854      	ldr	r0, [pc, #336]	; (8006290 <_vfiprintf_r+0x220>)
 8006140:	f7fa f87e 	bl	8000240 <memchr>
 8006144:	9a04      	ldr	r2, [sp, #16]
 8006146:	b9d8      	cbnz	r0, 8006180 <_vfiprintf_r+0x110>
 8006148:	06d1      	lsls	r1, r2, #27
 800614a:	bf44      	itt	mi
 800614c:	2320      	movmi	r3, #32
 800614e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006152:	0713      	lsls	r3, r2, #28
 8006154:	bf44      	itt	mi
 8006156:	232b      	movmi	r3, #43	; 0x2b
 8006158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800615c:	f89a 3000 	ldrb.w	r3, [sl]
 8006160:	2b2a      	cmp	r3, #42	; 0x2a
 8006162:	d015      	beq.n	8006190 <_vfiprintf_r+0x120>
 8006164:	9a07      	ldr	r2, [sp, #28]
 8006166:	4654      	mov	r4, sl
 8006168:	2000      	movs	r0, #0
 800616a:	f04f 0c0a 	mov.w	ip, #10
 800616e:	4621      	mov	r1, r4
 8006170:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006174:	3b30      	subs	r3, #48	; 0x30
 8006176:	2b09      	cmp	r3, #9
 8006178:	d94d      	bls.n	8006216 <_vfiprintf_r+0x1a6>
 800617a:	b1b0      	cbz	r0, 80061aa <_vfiprintf_r+0x13a>
 800617c:	9207      	str	r2, [sp, #28]
 800617e:	e014      	b.n	80061aa <_vfiprintf_r+0x13a>
 8006180:	eba0 0308 	sub.w	r3, r0, r8
 8006184:	fa09 f303 	lsl.w	r3, r9, r3
 8006188:	4313      	orrs	r3, r2
 800618a:	9304      	str	r3, [sp, #16]
 800618c:	46a2      	mov	sl, r4
 800618e:	e7d2      	b.n	8006136 <_vfiprintf_r+0xc6>
 8006190:	9b03      	ldr	r3, [sp, #12]
 8006192:	1d19      	adds	r1, r3, #4
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	9103      	str	r1, [sp, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	bfbb      	ittet	lt
 800619c:	425b      	neglt	r3, r3
 800619e:	f042 0202 	orrlt.w	r2, r2, #2
 80061a2:	9307      	strge	r3, [sp, #28]
 80061a4:	9307      	strlt	r3, [sp, #28]
 80061a6:	bfb8      	it	lt
 80061a8:	9204      	strlt	r2, [sp, #16]
 80061aa:	7823      	ldrb	r3, [r4, #0]
 80061ac:	2b2e      	cmp	r3, #46	; 0x2e
 80061ae:	d10c      	bne.n	80061ca <_vfiprintf_r+0x15a>
 80061b0:	7863      	ldrb	r3, [r4, #1]
 80061b2:	2b2a      	cmp	r3, #42	; 0x2a
 80061b4:	d134      	bne.n	8006220 <_vfiprintf_r+0x1b0>
 80061b6:	9b03      	ldr	r3, [sp, #12]
 80061b8:	1d1a      	adds	r2, r3, #4
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	9203      	str	r2, [sp, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	bfb8      	it	lt
 80061c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80061c6:	3402      	adds	r4, #2
 80061c8:	9305      	str	r3, [sp, #20]
 80061ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80062a0 <_vfiprintf_r+0x230>
 80061ce:	7821      	ldrb	r1, [r4, #0]
 80061d0:	2203      	movs	r2, #3
 80061d2:	4650      	mov	r0, sl
 80061d4:	f7fa f834 	bl	8000240 <memchr>
 80061d8:	b138      	cbz	r0, 80061ea <_vfiprintf_r+0x17a>
 80061da:	9b04      	ldr	r3, [sp, #16]
 80061dc:	eba0 000a 	sub.w	r0, r0, sl
 80061e0:	2240      	movs	r2, #64	; 0x40
 80061e2:	4082      	lsls	r2, r0
 80061e4:	4313      	orrs	r3, r2
 80061e6:	3401      	adds	r4, #1
 80061e8:	9304      	str	r3, [sp, #16]
 80061ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ee:	4829      	ldr	r0, [pc, #164]	; (8006294 <_vfiprintf_r+0x224>)
 80061f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061f4:	2206      	movs	r2, #6
 80061f6:	f7fa f823 	bl	8000240 <memchr>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	d03f      	beq.n	800627e <_vfiprintf_r+0x20e>
 80061fe:	4b26      	ldr	r3, [pc, #152]	; (8006298 <_vfiprintf_r+0x228>)
 8006200:	bb1b      	cbnz	r3, 800624a <_vfiprintf_r+0x1da>
 8006202:	9b03      	ldr	r3, [sp, #12]
 8006204:	3307      	adds	r3, #7
 8006206:	f023 0307 	bic.w	r3, r3, #7
 800620a:	3308      	adds	r3, #8
 800620c:	9303      	str	r3, [sp, #12]
 800620e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006210:	443b      	add	r3, r7
 8006212:	9309      	str	r3, [sp, #36]	; 0x24
 8006214:	e768      	b.n	80060e8 <_vfiprintf_r+0x78>
 8006216:	fb0c 3202 	mla	r2, ip, r2, r3
 800621a:	460c      	mov	r4, r1
 800621c:	2001      	movs	r0, #1
 800621e:	e7a6      	b.n	800616e <_vfiprintf_r+0xfe>
 8006220:	2300      	movs	r3, #0
 8006222:	3401      	adds	r4, #1
 8006224:	9305      	str	r3, [sp, #20]
 8006226:	4619      	mov	r1, r3
 8006228:	f04f 0c0a 	mov.w	ip, #10
 800622c:	4620      	mov	r0, r4
 800622e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006232:	3a30      	subs	r2, #48	; 0x30
 8006234:	2a09      	cmp	r2, #9
 8006236:	d903      	bls.n	8006240 <_vfiprintf_r+0x1d0>
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0c6      	beq.n	80061ca <_vfiprintf_r+0x15a>
 800623c:	9105      	str	r1, [sp, #20]
 800623e:	e7c4      	b.n	80061ca <_vfiprintf_r+0x15a>
 8006240:	fb0c 2101 	mla	r1, ip, r1, r2
 8006244:	4604      	mov	r4, r0
 8006246:	2301      	movs	r3, #1
 8006248:	e7f0      	b.n	800622c <_vfiprintf_r+0x1bc>
 800624a:	ab03      	add	r3, sp, #12
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	462a      	mov	r2, r5
 8006250:	4b12      	ldr	r3, [pc, #72]	; (800629c <_vfiprintf_r+0x22c>)
 8006252:	a904      	add	r1, sp, #16
 8006254:	4630      	mov	r0, r6
 8006256:	f3af 8000 	nop.w
 800625a:	4607      	mov	r7, r0
 800625c:	1c78      	adds	r0, r7, #1
 800625e:	d1d6      	bne.n	800620e <_vfiprintf_r+0x19e>
 8006260:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006262:	07d9      	lsls	r1, r3, #31
 8006264:	d405      	bmi.n	8006272 <_vfiprintf_r+0x202>
 8006266:	89ab      	ldrh	r3, [r5, #12]
 8006268:	059a      	lsls	r2, r3, #22
 800626a:	d402      	bmi.n	8006272 <_vfiprintf_r+0x202>
 800626c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800626e:	f7ff fc5e 	bl	8005b2e <__retarget_lock_release_recursive>
 8006272:	89ab      	ldrh	r3, [r5, #12]
 8006274:	065b      	lsls	r3, r3, #25
 8006276:	f53f af1d 	bmi.w	80060b4 <_vfiprintf_r+0x44>
 800627a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800627c:	e71c      	b.n	80060b8 <_vfiprintf_r+0x48>
 800627e:	ab03      	add	r3, sp, #12
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	462a      	mov	r2, r5
 8006284:	4b05      	ldr	r3, [pc, #20]	; (800629c <_vfiprintf_r+0x22c>)
 8006286:	a904      	add	r1, sp, #16
 8006288:	4630      	mov	r0, r6
 800628a:	f000 f879 	bl	8006380 <_printf_i>
 800628e:	e7e4      	b.n	800625a <_vfiprintf_r+0x1ea>
 8006290:	08006d26 	.word	0x08006d26
 8006294:	08006d30 	.word	0x08006d30
 8006298:	00000000 	.word	0x00000000
 800629c:	0800604b 	.word	0x0800604b
 80062a0:	08006d2c 	.word	0x08006d2c

080062a4 <_printf_common>:
 80062a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062a8:	4616      	mov	r6, r2
 80062aa:	4699      	mov	r9, r3
 80062ac:	688a      	ldr	r2, [r1, #8]
 80062ae:	690b      	ldr	r3, [r1, #16]
 80062b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062b4:	4293      	cmp	r3, r2
 80062b6:	bfb8      	it	lt
 80062b8:	4613      	movlt	r3, r2
 80062ba:	6033      	str	r3, [r6, #0]
 80062bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062c0:	4607      	mov	r7, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	b10a      	cbz	r2, 80062ca <_printf_common+0x26>
 80062c6:	3301      	adds	r3, #1
 80062c8:	6033      	str	r3, [r6, #0]
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	0699      	lsls	r1, r3, #26
 80062ce:	bf42      	ittt	mi
 80062d0:	6833      	ldrmi	r3, [r6, #0]
 80062d2:	3302      	addmi	r3, #2
 80062d4:	6033      	strmi	r3, [r6, #0]
 80062d6:	6825      	ldr	r5, [r4, #0]
 80062d8:	f015 0506 	ands.w	r5, r5, #6
 80062dc:	d106      	bne.n	80062ec <_printf_common+0x48>
 80062de:	f104 0a19 	add.w	sl, r4, #25
 80062e2:	68e3      	ldr	r3, [r4, #12]
 80062e4:	6832      	ldr	r2, [r6, #0]
 80062e6:	1a9b      	subs	r3, r3, r2
 80062e8:	42ab      	cmp	r3, r5
 80062ea:	dc26      	bgt.n	800633a <_printf_common+0x96>
 80062ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062f0:	1e13      	subs	r3, r2, #0
 80062f2:	6822      	ldr	r2, [r4, #0]
 80062f4:	bf18      	it	ne
 80062f6:	2301      	movne	r3, #1
 80062f8:	0692      	lsls	r2, r2, #26
 80062fa:	d42b      	bmi.n	8006354 <_printf_common+0xb0>
 80062fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006300:	4649      	mov	r1, r9
 8006302:	4638      	mov	r0, r7
 8006304:	47c0      	blx	r8
 8006306:	3001      	adds	r0, #1
 8006308:	d01e      	beq.n	8006348 <_printf_common+0xa4>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	6922      	ldr	r2, [r4, #16]
 800630e:	f003 0306 	and.w	r3, r3, #6
 8006312:	2b04      	cmp	r3, #4
 8006314:	bf02      	ittt	eq
 8006316:	68e5      	ldreq	r5, [r4, #12]
 8006318:	6833      	ldreq	r3, [r6, #0]
 800631a:	1aed      	subeq	r5, r5, r3
 800631c:	68a3      	ldr	r3, [r4, #8]
 800631e:	bf0c      	ite	eq
 8006320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006324:	2500      	movne	r5, #0
 8006326:	4293      	cmp	r3, r2
 8006328:	bfc4      	itt	gt
 800632a:	1a9b      	subgt	r3, r3, r2
 800632c:	18ed      	addgt	r5, r5, r3
 800632e:	2600      	movs	r6, #0
 8006330:	341a      	adds	r4, #26
 8006332:	42b5      	cmp	r5, r6
 8006334:	d11a      	bne.n	800636c <_printf_common+0xc8>
 8006336:	2000      	movs	r0, #0
 8006338:	e008      	b.n	800634c <_printf_common+0xa8>
 800633a:	2301      	movs	r3, #1
 800633c:	4652      	mov	r2, sl
 800633e:	4649      	mov	r1, r9
 8006340:	4638      	mov	r0, r7
 8006342:	47c0      	blx	r8
 8006344:	3001      	adds	r0, #1
 8006346:	d103      	bne.n	8006350 <_printf_common+0xac>
 8006348:	f04f 30ff 	mov.w	r0, #4294967295
 800634c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006350:	3501      	adds	r5, #1
 8006352:	e7c6      	b.n	80062e2 <_printf_common+0x3e>
 8006354:	18e1      	adds	r1, r4, r3
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	2030      	movs	r0, #48	; 0x30
 800635a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800635e:	4422      	add	r2, r4
 8006360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006368:	3302      	adds	r3, #2
 800636a:	e7c7      	b.n	80062fc <_printf_common+0x58>
 800636c:	2301      	movs	r3, #1
 800636e:	4622      	mov	r2, r4
 8006370:	4649      	mov	r1, r9
 8006372:	4638      	mov	r0, r7
 8006374:	47c0      	blx	r8
 8006376:	3001      	adds	r0, #1
 8006378:	d0e6      	beq.n	8006348 <_printf_common+0xa4>
 800637a:	3601      	adds	r6, #1
 800637c:	e7d9      	b.n	8006332 <_printf_common+0x8e>
	...

08006380 <_printf_i>:
 8006380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006384:	7e0f      	ldrb	r7, [r1, #24]
 8006386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006388:	2f78      	cmp	r7, #120	; 0x78
 800638a:	4691      	mov	r9, r2
 800638c:	4680      	mov	r8, r0
 800638e:	460c      	mov	r4, r1
 8006390:	469a      	mov	sl, r3
 8006392:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006396:	d807      	bhi.n	80063a8 <_printf_i+0x28>
 8006398:	2f62      	cmp	r7, #98	; 0x62
 800639a:	d80a      	bhi.n	80063b2 <_printf_i+0x32>
 800639c:	2f00      	cmp	r7, #0
 800639e:	f000 80d4 	beq.w	800654a <_printf_i+0x1ca>
 80063a2:	2f58      	cmp	r7, #88	; 0x58
 80063a4:	f000 80c0 	beq.w	8006528 <_printf_i+0x1a8>
 80063a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063b0:	e03a      	b.n	8006428 <_printf_i+0xa8>
 80063b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063b6:	2b15      	cmp	r3, #21
 80063b8:	d8f6      	bhi.n	80063a8 <_printf_i+0x28>
 80063ba:	a101      	add	r1, pc, #4	; (adr r1, 80063c0 <_printf_i+0x40>)
 80063bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063c0:	08006419 	.word	0x08006419
 80063c4:	0800642d 	.word	0x0800642d
 80063c8:	080063a9 	.word	0x080063a9
 80063cc:	080063a9 	.word	0x080063a9
 80063d0:	080063a9 	.word	0x080063a9
 80063d4:	080063a9 	.word	0x080063a9
 80063d8:	0800642d 	.word	0x0800642d
 80063dc:	080063a9 	.word	0x080063a9
 80063e0:	080063a9 	.word	0x080063a9
 80063e4:	080063a9 	.word	0x080063a9
 80063e8:	080063a9 	.word	0x080063a9
 80063ec:	08006531 	.word	0x08006531
 80063f0:	08006459 	.word	0x08006459
 80063f4:	080064eb 	.word	0x080064eb
 80063f8:	080063a9 	.word	0x080063a9
 80063fc:	080063a9 	.word	0x080063a9
 8006400:	08006553 	.word	0x08006553
 8006404:	080063a9 	.word	0x080063a9
 8006408:	08006459 	.word	0x08006459
 800640c:	080063a9 	.word	0x080063a9
 8006410:	080063a9 	.word	0x080063a9
 8006414:	080064f3 	.word	0x080064f3
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	1d1a      	adds	r2, r3, #4
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	602a      	str	r2, [r5, #0]
 8006420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006428:	2301      	movs	r3, #1
 800642a:	e09f      	b.n	800656c <_printf_i+0x1ec>
 800642c:	6820      	ldr	r0, [r4, #0]
 800642e:	682b      	ldr	r3, [r5, #0]
 8006430:	0607      	lsls	r7, r0, #24
 8006432:	f103 0104 	add.w	r1, r3, #4
 8006436:	6029      	str	r1, [r5, #0]
 8006438:	d501      	bpl.n	800643e <_printf_i+0xbe>
 800643a:	681e      	ldr	r6, [r3, #0]
 800643c:	e003      	b.n	8006446 <_printf_i+0xc6>
 800643e:	0646      	lsls	r6, r0, #25
 8006440:	d5fb      	bpl.n	800643a <_printf_i+0xba>
 8006442:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006446:	2e00      	cmp	r6, #0
 8006448:	da03      	bge.n	8006452 <_printf_i+0xd2>
 800644a:	232d      	movs	r3, #45	; 0x2d
 800644c:	4276      	negs	r6, r6
 800644e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006452:	485a      	ldr	r0, [pc, #360]	; (80065bc <_printf_i+0x23c>)
 8006454:	230a      	movs	r3, #10
 8006456:	e012      	b.n	800647e <_printf_i+0xfe>
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	6820      	ldr	r0, [r4, #0]
 800645c:	1d19      	adds	r1, r3, #4
 800645e:	6029      	str	r1, [r5, #0]
 8006460:	0605      	lsls	r5, r0, #24
 8006462:	d501      	bpl.n	8006468 <_printf_i+0xe8>
 8006464:	681e      	ldr	r6, [r3, #0]
 8006466:	e002      	b.n	800646e <_printf_i+0xee>
 8006468:	0641      	lsls	r1, r0, #25
 800646a:	d5fb      	bpl.n	8006464 <_printf_i+0xe4>
 800646c:	881e      	ldrh	r6, [r3, #0]
 800646e:	4853      	ldr	r0, [pc, #332]	; (80065bc <_printf_i+0x23c>)
 8006470:	2f6f      	cmp	r7, #111	; 0x6f
 8006472:	bf0c      	ite	eq
 8006474:	2308      	moveq	r3, #8
 8006476:	230a      	movne	r3, #10
 8006478:	2100      	movs	r1, #0
 800647a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800647e:	6865      	ldr	r5, [r4, #4]
 8006480:	60a5      	str	r5, [r4, #8]
 8006482:	2d00      	cmp	r5, #0
 8006484:	bfa2      	ittt	ge
 8006486:	6821      	ldrge	r1, [r4, #0]
 8006488:	f021 0104 	bicge.w	r1, r1, #4
 800648c:	6021      	strge	r1, [r4, #0]
 800648e:	b90e      	cbnz	r6, 8006494 <_printf_i+0x114>
 8006490:	2d00      	cmp	r5, #0
 8006492:	d04b      	beq.n	800652c <_printf_i+0x1ac>
 8006494:	4615      	mov	r5, r2
 8006496:	fbb6 f1f3 	udiv	r1, r6, r3
 800649a:	fb03 6711 	mls	r7, r3, r1, r6
 800649e:	5dc7      	ldrb	r7, [r0, r7]
 80064a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064a4:	4637      	mov	r7, r6
 80064a6:	42bb      	cmp	r3, r7
 80064a8:	460e      	mov	r6, r1
 80064aa:	d9f4      	bls.n	8006496 <_printf_i+0x116>
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	d10b      	bne.n	80064c8 <_printf_i+0x148>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	07de      	lsls	r6, r3, #31
 80064b4:	d508      	bpl.n	80064c8 <_printf_i+0x148>
 80064b6:	6923      	ldr	r3, [r4, #16]
 80064b8:	6861      	ldr	r1, [r4, #4]
 80064ba:	4299      	cmp	r1, r3
 80064bc:	bfde      	ittt	le
 80064be:	2330      	movle	r3, #48	; 0x30
 80064c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064c8:	1b52      	subs	r2, r2, r5
 80064ca:	6122      	str	r2, [r4, #16]
 80064cc:	f8cd a000 	str.w	sl, [sp]
 80064d0:	464b      	mov	r3, r9
 80064d2:	aa03      	add	r2, sp, #12
 80064d4:	4621      	mov	r1, r4
 80064d6:	4640      	mov	r0, r8
 80064d8:	f7ff fee4 	bl	80062a4 <_printf_common>
 80064dc:	3001      	adds	r0, #1
 80064de:	d14a      	bne.n	8006576 <_printf_i+0x1f6>
 80064e0:	f04f 30ff 	mov.w	r0, #4294967295
 80064e4:	b004      	add	sp, #16
 80064e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	f043 0320 	orr.w	r3, r3, #32
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	4833      	ldr	r0, [pc, #204]	; (80065c0 <_printf_i+0x240>)
 80064f4:	2778      	movs	r7, #120	; 0x78
 80064f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	6829      	ldr	r1, [r5, #0]
 80064fe:	061f      	lsls	r7, r3, #24
 8006500:	f851 6b04 	ldr.w	r6, [r1], #4
 8006504:	d402      	bmi.n	800650c <_printf_i+0x18c>
 8006506:	065f      	lsls	r7, r3, #25
 8006508:	bf48      	it	mi
 800650a:	b2b6      	uxthmi	r6, r6
 800650c:	07df      	lsls	r7, r3, #31
 800650e:	bf48      	it	mi
 8006510:	f043 0320 	orrmi.w	r3, r3, #32
 8006514:	6029      	str	r1, [r5, #0]
 8006516:	bf48      	it	mi
 8006518:	6023      	strmi	r3, [r4, #0]
 800651a:	b91e      	cbnz	r6, 8006524 <_printf_i+0x1a4>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	f023 0320 	bic.w	r3, r3, #32
 8006522:	6023      	str	r3, [r4, #0]
 8006524:	2310      	movs	r3, #16
 8006526:	e7a7      	b.n	8006478 <_printf_i+0xf8>
 8006528:	4824      	ldr	r0, [pc, #144]	; (80065bc <_printf_i+0x23c>)
 800652a:	e7e4      	b.n	80064f6 <_printf_i+0x176>
 800652c:	4615      	mov	r5, r2
 800652e:	e7bd      	b.n	80064ac <_printf_i+0x12c>
 8006530:	682b      	ldr	r3, [r5, #0]
 8006532:	6826      	ldr	r6, [r4, #0]
 8006534:	6961      	ldr	r1, [r4, #20]
 8006536:	1d18      	adds	r0, r3, #4
 8006538:	6028      	str	r0, [r5, #0]
 800653a:	0635      	lsls	r5, r6, #24
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	d501      	bpl.n	8006544 <_printf_i+0x1c4>
 8006540:	6019      	str	r1, [r3, #0]
 8006542:	e002      	b.n	800654a <_printf_i+0x1ca>
 8006544:	0670      	lsls	r0, r6, #25
 8006546:	d5fb      	bpl.n	8006540 <_printf_i+0x1c0>
 8006548:	8019      	strh	r1, [r3, #0]
 800654a:	2300      	movs	r3, #0
 800654c:	6123      	str	r3, [r4, #16]
 800654e:	4615      	mov	r5, r2
 8006550:	e7bc      	b.n	80064cc <_printf_i+0x14c>
 8006552:	682b      	ldr	r3, [r5, #0]
 8006554:	1d1a      	adds	r2, r3, #4
 8006556:	602a      	str	r2, [r5, #0]
 8006558:	681d      	ldr	r5, [r3, #0]
 800655a:	6862      	ldr	r2, [r4, #4]
 800655c:	2100      	movs	r1, #0
 800655e:	4628      	mov	r0, r5
 8006560:	f7f9 fe6e 	bl	8000240 <memchr>
 8006564:	b108      	cbz	r0, 800656a <_printf_i+0x1ea>
 8006566:	1b40      	subs	r0, r0, r5
 8006568:	6060      	str	r0, [r4, #4]
 800656a:	6863      	ldr	r3, [r4, #4]
 800656c:	6123      	str	r3, [r4, #16]
 800656e:	2300      	movs	r3, #0
 8006570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006574:	e7aa      	b.n	80064cc <_printf_i+0x14c>
 8006576:	6923      	ldr	r3, [r4, #16]
 8006578:	462a      	mov	r2, r5
 800657a:	4649      	mov	r1, r9
 800657c:	4640      	mov	r0, r8
 800657e:	47d0      	blx	sl
 8006580:	3001      	adds	r0, #1
 8006582:	d0ad      	beq.n	80064e0 <_printf_i+0x160>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	079b      	lsls	r3, r3, #30
 8006588:	d413      	bmi.n	80065b2 <_printf_i+0x232>
 800658a:	68e0      	ldr	r0, [r4, #12]
 800658c:	9b03      	ldr	r3, [sp, #12]
 800658e:	4298      	cmp	r0, r3
 8006590:	bfb8      	it	lt
 8006592:	4618      	movlt	r0, r3
 8006594:	e7a6      	b.n	80064e4 <_printf_i+0x164>
 8006596:	2301      	movs	r3, #1
 8006598:	4632      	mov	r2, r6
 800659a:	4649      	mov	r1, r9
 800659c:	4640      	mov	r0, r8
 800659e:	47d0      	blx	sl
 80065a0:	3001      	adds	r0, #1
 80065a2:	d09d      	beq.n	80064e0 <_printf_i+0x160>
 80065a4:	3501      	adds	r5, #1
 80065a6:	68e3      	ldr	r3, [r4, #12]
 80065a8:	9903      	ldr	r1, [sp, #12]
 80065aa:	1a5b      	subs	r3, r3, r1
 80065ac:	42ab      	cmp	r3, r5
 80065ae:	dcf2      	bgt.n	8006596 <_printf_i+0x216>
 80065b0:	e7eb      	b.n	800658a <_printf_i+0x20a>
 80065b2:	2500      	movs	r5, #0
 80065b4:	f104 0619 	add.w	r6, r4, #25
 80065b8:	e7f5      	b.n	80065a6 <_printf_i+0x226>
 80065ba:	bf00      	nop
 80065bc:	08006d37 	.word	0x08006d37
 80065c0:	08006d48 	.word	0x08006d48

080065c4 <__sflush_r>:
 80065c4:	898a      	ldrh	r2, [r1, #12]
 80065c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ca:	4605      	mov	r5, r0
 80065cc:	0710      	lsls	r0, r2, #28
 80065ce:	460c      	mov	r4, r1
 80065d0:	d458      	bmi.n	8006684 <__sflush_r+0xc0>
 80065d2:	684b      	ldr	r3, [r1, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dc05      	bgt.n	80065e4 <__sflush_r+0x20>
 80065d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	dc02      	bgt.n	80065e4 <__sflush_r+0x20>
 80065de:	2000      	movs	r0, #0
 80065e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065e6:	2e00      	cmp	r6, #0
 80065e8:	d0f9      	beq.n	80065de <__sflush_r+0x1a>
 80065ea:	2300      	movs	r3, #0
 80065ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065f0:	682f      	ldr	r7, [r5, #0]
 80065f2:	6a21      	ldr	r1, [r4, #32]
 80065f4:	602b      	str	r3, [r5, #0]
 80065f6:	d032      	beq.n	800665e <__sflush_r+0x9a>
 80065f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	075a      	lsls	r2, r3, #29
 80065fe:	d505      	bpl.n	800660c <__sflush_r+0x48>
 8006600:	6863      	ldr	r3, [r4, #4]
 8006602:	1ac0      	subs	r0, r0, r3
 8006604:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006606:	b10b      	cbz	r3, 800660c <__sflush_r+0x48>
 8006608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800660a:	1ac0      	subs	r0, r0, r3
 800660c:	2300      	movs	r3, #0
 800660e:	4602      	mov	r2, r0
 8006610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006612:	6a21      	ldr	r1, [r4, #32]
 8006614:	4628      	mov	r0, r5
 8006616:	47b0      	blx	r6
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	89a3      	ldrh	r3, [r4, #12]
 800661c:	d106      	bne.n	800662c <__sflush_r+0x68>
 800661e:	6829      	ldr	r1, [r5, #0]
 8006620:	291d      	cmp	r1, #29
 8006622:	d82b      	bhi.n	800667c <__sflush_r+0xb8>
 8006624:	4a29      	ldr	r2, [pc, #164]	; (80066cc <__sflush_r+0x108>)
 8006626:	410a      	asrs	r2, r1
 8006628:	07d6      	lsls	r6, r2, #31
 800662a:	d427      	bmi.n	800667c <__sflush_r+0xb8>
 800662c:	2200      	movs	r2, #0
 800662e:	6062      	str	r2, [r4, #4]
 8006630:	04d9      	lsls	r1, r3, #19
 8006632:	6922      	ldr	r2, [r4, #16]
 8006634:	6022      	str	r2, [r4, #0]
 8006636:	d504      	bpl.n	8006642 <__sflush_r+0x7e>
 8006638:	1c42      	adds	r2, r0, #1
 800663a:	d101      	bne.n	8006640 <__sflush_r+0x7c>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	b903      	cbnz	r3, 8006642 <__sflush_r+0x7e>
 8006640:	6560      	str	r0, [r4, #84]	; 0x54
 8006642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006644:	602f      	str	r7, [r5, #0]
 8006646:	2900      	cmp	r1, #0
 8006648:	d0c9      	beq.n	80065de <__sflush_r+0x1a>
 800664a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800664e:	4299      	cmp	r1, r3
 8006650:	d002      	beq.n	8006658 <__sflush_r+0x94>
 8006652:	4628      	mov	r0, r5
 8006654:	f7ff fa8a 	bl	8005b6c <_free_r>
 8006658:	2000      	movs	r0, #0
 800665a:	6360      	str	r0, [r4, #52]	; 0x34
 800665c:	e7c0      	b.n	80065e0 <__sflush_r+0x1c>
 800665e:	2301      	movs	r3, #1
 8006660:	4628      	mov	r0, r5
 8006662:	47b0      	blx	r6
 8006664:	1c41      	adds	r1, r0, #1
 8006666:	d1c8      	bne.n	80065fa <__sflush_r+0x36>
 8006668:	682b      	ldr	r3, [r5, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0c5      	beq.n	80065fa <__sflush_r+0x36>
 800666e:	2b1d      	cmp	r3, #29
 8006670:	d001      	beq.n	8006676 <__sflush_r+0xb2>
 8006672:	2b16      	cmp	r3, #22
 8006674:	d101      	bne.n	800667a <__sflush_r+0xb6>
 8006676:	602f      	str	r7, [r5, #0]
 8006678:	e7b1      	b.n	80065de <__sflush_r+0x1a>
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	e7ad      	b.n	80065e0 <__sflush_r+0x1c>
 8006684:	690f      	ldr	r7, [r1, #16]
 8006686:	2f00      	cmp	r7, #0
 8006688:	d0a9      	beq.n	80065de <__sflush_r+0x1a>
 800668a:	0793      	lsls	r3, r2, #30
 800668c:	680e      	ldr	r6, [r1, #0]
 800668e:	bf08      	it	eq
 8006690:	694b      	ldreq	r3, [r1, #20]
 8006692:	600f      	str	r7, [r1, #0]
 8006694:	bf18      	it	ne
 8006696:	2300      	movne	r3, #0
 8006698:	eba6 0807 	sub.w	r8, r6, r7
 800669c:	608b      	str	r3, [r1, #8]
 800669e:	f1b8 0f00 	cmp.w	r8, #0
 80066a2:	dd9c      	ble.n	80065de <__sflush_r+0x1a>
 80066a4:	6a21      	ldr	r1, [r4, #32]
 80066a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066a8:	4643      	mov	r3, r8
 80066aa:	463a      	mov	r2, r7
 80066ac:	4628      	mov	r0, r5
 80066ae:	47b0      	blx	r6
 80066b0:	2800      	cmp	r0, #0
 80066b2:	dc06      	bgt.n	80066c2 <__sflush_r+0xfe>
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ba:	81a3      	strh	r3, [r4, #12]
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295
 80066c0:	e78e      	b.n	80065e0 <__sflush_r+0x1c>
 80066c2:	4407      	add	r7, r0
 80066c4:	eba8 0800 	sub.w	r8, r8, r0
 80066c8:	e7e9      	b.n	800669e <__sflush_r+0xda>
 80066ca:	bf00      	nop
 80066cc:	dfbffffe 	.word	0xdfbffffe

080066d0 <_fflush_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	690b      	ldr	r3, [r1, #16]
 80066d4:	4605      	mov	r5, r0
 80066d6:	460c      	mov	r4, r1
 80066d8:	b913      	cbnz	r3, 80066e0 <_fflush_r+0x10>
 80066da:	2500      	movs	r5, #0
 80066dc:	4628      	mov	r0, r5
 80066de:	bd38      	pop	{r3, r4, r5, pc}
 80066e0:	b118      	cbz	r0, 80066ea <_fflush_r+0x1a>
 80066e2:	6a03      	ldr	r3, [r0, #32]
 80066e4:	b90b      	cbnz	r3, 80066ea <_fflush_r+0x1a>
 80066e6:	f7fe ff9d 	bl	8005624 <__sinit>
 80066ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0f3      	beq.n	80066da <_fflush_r+0xa>
 80066f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066f4:	07d0      	lsls	r0, r2, #31
 80066f6:	d404      	bmi.n	8006702 <_fflush_r+0x32>
 80066f8:	0599      	lsls	r1, r3, #22
 80066fa:	d402      	bmi.n	8006702 <_fflush_r+0x32>
 80066fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066fe:	f7ff fa15 	bl	8005b2c <__retarget_lock_acquire_recursive>
 8006702:	4628      	mov	r0, r5
 8006704:	4621      	mov	r1, r4
 8006706:	f7ff ff5d 	bl	80065c4 <__sflush_r>
 800670a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800670c:	07da      	lsls	r2, r3, #31
 800670e:	4605      	mov	r5, r0
 8006710:	d4e4      	bmi.n	80066dc <_fflush_r+0xc>
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	059b      	lsls	r3, r3, #22
 8006716:	d4e1      	bmi.n	80066dc <_fflush_r+0xc>
 8006718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800671a:	f7ff fa08 	bl	8005b2e <__retarget_lock_release_recursive>
 800671e:	e7dd      	b.n	80066dc <_fflush_r+0xc>

08006720 <fiprintf>:
 8006720:	b40e      	push	{r1, r2, r3}
 8006722:	b503      	push	{r0, r1, lr}
 8006724:	4601      	mov	r1, r0
 8006726:	ab03      	add	r3, sp, #12
 8006728:	4805      	ldr	r0, [pc, #20]	; (8006740 <fiprintf+0x20>)
 800672a:	f853 2b04 	ldr.w	r2, [r3], #4
 800672e:	6800      	ldr	r0, [r0, #0]
 8006730:	9301      	str	r3, [sp, #4]
 8006732:	f7ff fc9d 	bl	8006070 <_vfiprintf_r>
 8006736:	b002      	add	sp, #8
 8006738:	f85d eb04 	ldr.w	lr, [sp], #4
 800673c:	b003      	add	sp, #12
 800673e:	4770      	bx	lr
 8006740:	20000128 	.word	0x20000128

08006744 <__swhatbuf_r>:
 8006744:	b570      	push	{r4, r5, r6, lr}
 8006746:	460c      	mov	r4, r1
 8006748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800674c:	2900      	cmp	r1, #0
 800674e:	b096      	sub	sp, #88	; 0x58
 8006750:	4615      	mov	r5, r2
 8006752:	461e      	mov	r6, r3
 8006754:	da0d      	bge.n	8006772 <__swhatbuf_r+0x2e>
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	f013 0f80 	tst.w	r3, #128	; 0x80
 800675c:	f04f 0100 	mov.w	r1, #0
 8006760:	bf0c      	ite	eq
 8006762:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006766:	2340      	movne	r3, #64	; 0x40
 8006768:	2000      	movs	r0, #0
 800676a:	6031      	str	r1, [r6, #0]
 800676c:	602b      	str	r3, [r5, #0]
 800676e:	b016      	add	sp, #88	; 0x58
 8006770:	bd70      	pop	{r4, r5, r6, pc}
 8006772:	466a      	mov	r2, sp
 8006774:	f000 f862 	bl	800683c <_fstat_r>
 8006778:	2800      	cmp	r0, #0
 800677a:	dbec      	blt.n	8006756 <__swhatbuf_r+0x12>
 800677c:	9901      	ldr	r1, [sp, #4]
 800677e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006782:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006786:	4259      	negs	r1, r3
 8006788:	4159      	adcs	r1, r3
 800678a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800678e:	e7eb      	b.n	8006768 <__swhatbuf_r+0x24>

08006790 <__smakebuf_r>:
 8006790:	898b      	ldrh	r3, [r1, #12]
 8006792:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006794:	079d      	lsls	r5, r3, #30
 8006796:	4606      	mov	r6, r0
 8006798:	460c      	mov	r4, r1
 800679a:	d507      	bpl.n	80067ac <__smakebuf_r+0x1c>
 800679c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	6123      	str	r3, [r4, #16]
 80067a4:	2301      	movs	r3, #1
 80067a6:	6163      	str	r3, [r4, #20]
 80067a8:	b002      	add	sp, #8
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	ab01      	add	r3, sp, #4
 80067ae:	466a      	mov	r2, sp
 80067b0:	f7ff ffc8 	bl	8006744 <__swhatbuf_r>
 80067b4:	9900      	ldr	r1, [sp, #0]
 80067b6:	4605      	mov	r5, r0
 80067b8:	4630      	mov	r0, r6
 80067ba:	f7ff fa4b 	bl	8005c54 <_malloc_r>
 80067be:	b948      	cbnz	r0, 80067d4 <__smakebuf_r+0x44>
 80067c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067c4:	059a      	lsls	r2, r3, #22
 80067c6:	d4ef      	bmi.n	80067a8 <__smakebuf_r+0x18>
 80067c8:	f023 0303 	bic.w	r3, r3, #3
 80067cc:	f043 0302 	orr.w	r3, r3, #2
 80067d0:	81a3      	strh	r3, [r4, #12]
 80067d2:	e7e3      	b.n	800679c <__smakebuf_r+0xc>
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	6020      	str	r0, [r4, #0]
 80067d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067dc:	81a3      	strh	r3, [r4, #12]
 80067de:	9b00      	ldr	r3, [sp, #0]
 80067e0:	6163      	str	r3, [r4, #20]
 80067e2:	9b01      	ldr	r3, [sp, #4]
 80067e4:	6120      	str	r0, [r4, #16]
 80067e6:	b15b      	cbz	r3, 8006800 <__smakebuf_r+0x70>
 80067e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067ec:	4630      	mov	r0, r6
 80067ee:	f000 f837 	bl	8006860 <_isatty_r>
 80067f2:	b128      	cbz	r0, 8006800 <__smakebuf_r+0x70>
 80067f4:	89a3      	ldrh	r3, [r4, #12]
 80067f6:	f023 0303 	bic.w	r3, r3, #3
 80067fa:	f043 0301 	orr.w	r3, r3, #1
 80067fe:	81a3      	strh	r3, [r4, #12]
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	431d      	orrs	r5, r3
 8006804:	81a5      	strh	r5, [r4, #12]
 8006806:	e7cf      	b.n	80067a8 <__smakebuf_r+0x18>

08006808 <memmove>:
 8006808:	4288      	cmp	r0, r1
 800680a:	b510      	push	{r4, lr}
 800680c:	eb01 0402 	add.w	r4, r1, r2
 8006810:	d902      	bls.n	8006818 <memmove+0x10>
 8006812:	4284      	cmp	r4, r0
 8006814:	4623      	mov	r3, r4
 8006816:	d807      	bhi.n	8006828 <memmove+0x20>
 8006818:	1e43      	subs	r3, r0, #1
 800681a:	42a1      	cmp	r1, r4
 800681c:	d008      	beq.n	8006830 <memmove+0x28>
 800681e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006822:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006826:	e7f8      	b.n	800681a <memmove+0x12>
 8006828:	4402      	add	r2, r0
 800682a:	4601      	mov	r1, r0
 800682c:	428a      	cmp	r2, r1
 800682e:	d100      	bne.n	8006832 <memmove+0x2a>
 8006830:	bd10      	pop	{r4, pc}
 8006832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006836:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800683a:	e7f7      	b.n	800682c <memmove+0x24>

0800683c <_fstat_r>:
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	4d07      	ldr	r5, [pc, #28]	; (800685c <_fstat_r+0x20>)
 8006840:	2300      	movs	r3, #0
 8006842:	4604      	mov	r4, r0
 8006844:	4608      	mov	r0, r1
 8006846:	4611      	mov	r1, r2
 8006848:	602b      	str	r3, [r5, #0]
 800684a:	f7fa fa14 	bl	8000c76 <_fstat>
 800684e:	1c43      	adds	r3, r0, #1
 8006850:	d102      	bne.n	8006858 <_fstat_r+0x1c>
 8006852:	682b      	ldr	r3, [r5, #0]
 8006854:	b103      	cbz	r3, 8006858 <_fstat_r+0x1c>
 8006856:	6023      	str	r3, [r4, #0]
 8006858:	bd38      	pop	{r3, r4, r5, pc}
 800685a:	bf00      	nop
 800685c:	20000494 	.word	0x20000494

08006860 <_isatty_r>:
 8006860:	b538      	push	{r3, r4, r5, lr}
 8006862:	4d06      	ldr	r5, [pc, #24]	; (800687c <_isatty_r+0x1c>)
 8006864:	2300      	movs	r3, #0
 8006866:	4604      	mov	r4, r0
 8006868:	4608      	mov	r0, r1
 800686a:	602b      	str	r3, [r5, #0]
 800686c:	f7fa fa13 	bl	8000c96 <_isatty>
 8006870:	1c43      	adds	r3, r0, #1
 8006872:	d102      	bne.n	800687a <_isatty_r+0x1a>
 8006874:	682b      	ldr	r3, [r5, #0]
 8006876:	b103      	cbz	r3, 800687a <_isatty_r+0x1a>
 8006878:	6023      	str	r3, [r4, #0]
 800687a:	bd38      	pop	{r3, r4, r5, pc}
 800687c:	20000494 	.word	0x20000494

08006880 <_sbrk_r>:
 8006880:	b538      	push	{r3, r4, r5, lr}
 8006882:	4d06      	ldr	r5, [pc, #24]	; (800689c <_sbrk_r+0x1c>)
 8006884:	2300      	movs	r3, #0
 8006886:	4604      	mov	r4, r0
 8006888:	4608      	mov	r0, r1
 800688a:	602b      	str	r3, [r5, #0]
 800688c:	f7fa fa1c 	bl	8000cc8 <_sbrk>
 8006890:	1c43      	adds	r3, r0, #1
 8006892:	d102      	bne.n	800689a <_sbrk_r+0x1a>
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	b103      	cbz	r3, 800689a <_sbrk_r+0x1a>
 8006898:	6023      	str	r3, [r4, #0]
 800689a:	bd38      	pop	{r3, r4, r5, pc}
 800689c:	20000494 	.word	0x20000494

080068a0 <memcpy>:
 80068a0:	440a      	add	r2, r1
 80068a2:	4291      	cmp	r1, r2
 80068a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80068a8:	d100      	bne.n	80068ac <memcpy+0xc>
 80068aa:	4770      	bx	lr
 80068ac:	b510      	push	{r4, lr}
 80068ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068b6:	4291      	cmp	r1, r2
 80068b8:	d1f9      	bne.n	80068ae <memcpy+0xe>
 80068ba:	bd10      	pop	{r4, pc}

080068bc <abort>:
 80068bc:	b508      	push	{r3, lr}
 80068be:	2006      	movs	r0, #6
 80068c0:	f000 f85a 	bl	8006978 <raise>
 80068c4:	2001      	movs	r0, #1
 80068c6:	f7fa f9a3 	bl	8000c10 <_exit>

080068ca <_realloc_r>:
 80068ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ce:	4680      	mov	r8, r0
 80068d0:	4614      	mov	r4, r2
 80068d2:	460e      	mov	r6, r1
 80068d4:	b921      	cbnz	r1, 80068e0 <_realloc_r+0x16>
 80068d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068da:	4611      	mov	r1, r2
 80068dc:	f7ff b9ba 	b.w	8005c54 <_malloc_r>
 80068e0:	b92a      	cbnz	r2, 80068ee <_realloc_r+0x24>
 80068e2:	f7ff f943 	bl	8005b6c <_free_r>
 80068e6:	4625      	mov	r5, r4
 80068e8:	4628      	mov	r0, r5
 80068ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068ee:	f000 f85f 	bl	80069b0 <_malloc_usable_size_r>
 80068f2:	4284      	cmp	r4, r0
 80068f4:	4607      	mov	r7, r0
 80068f6:	d802      	bhi.n	80068fe <_realloc_r+0x34>
 80068f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068fc:	d812      	bhi.n	8006924 <_realloc_r+0x5a>
 80068fe:	4621      	mov	r1, r4
 8006900:	4640      	mov	r0, r8
 8006902:	f7ff f9a7 	bl	8005c54 <_malloc_r>
 8006906:	4605      	mov	r5, r0
 8006908:	2800      	cmp	r0, #0
 800690a:	d0ed      	beq.n	80068e8 <_realloc_r+0x1e>
 800690c:	42bc      	cmp	r4, r7
 800690e:	4622      	mov	r2, r4
 8006910:	4631      	mov	r1, r6
 8006912:	bf28      	it	cs
 8006914:	463a      	movcs	r2, r7
 8006916:	f7ff ffc3 	bl	80068a0 <memcpy>
 800691a:	4631      	mov	r1, r6
 800691c:	4640      	mov	r0, r8
 800691e:	f7ff f925 	bl	8005b6c <_free_r>
 8006922:	e7e1      	b.n	80068e8 <_realloc_r+0x1e>
 8006924:	4635      	mov	r5, r6
 8006926:	e7df      	b.n	80068e8 <_realloc_r+0x1e>

08006928 <_raise_r>:
 8006928:	291f      	cmp	r1, #31
 800692a:	b538      	push	{r3, r4, r5, lr}
 800692c:	4604      	mov	r4, r0
 800692e:	460d      	mov	r5, r1
 8006930:	d904      	bls.n	800693c <_raise_r+0x14>
 8006932:	2316      	movs	r3, #22
 8006934:	6003      	str	r3, [r0, #0]
 8006936:	f04f 30ff 	mov.w	r0, #4294967295
 800693a:	bd38      	pop	{r3, r4, r5, pc}
 800693c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800693e:	b112      	cbz	r2, 8006946 <_raise_r+0x1e>
 8006940:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006944:	b94b      	cbnz	r3, 800695a <_raise_r+0x32>
 8006946:	4620      	mov	r0, r4
 8006948:	f000 f830 	bl	80069ac <_getpid_r>
 800694c:	462a      	mov	r2, r5
 800694e:	4601      	mov	r1, r0
 8006950:	4620      	mov	r0, r4
 8006952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006956:	f000 b817 	b.w	8006988 <_kill_r>
 800695a:	2b01      	cmp	r3, #1
 800695c:	d00a      	beq.n	8006974 <_raise_r+0x4c>
 800695e:	1c59      	adds	r1, r3, #1
 8006960:	d103      	bne.n	800696a <_raise_r+0x42>
 8006962:	2316      	movs	r3, #22
 8006964:	6003      	str	r3, [r0, #0]
 8006966:	2001      	movs	r0, #1
 8006968:	e7e7      	b.n	800693a <_raise_r+0x12>
 800696a:	2400      	movs	r4, #0
 800696c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006970:	4628      	mov	r0, r5
 8006972:	4798      	blx	r3
 8006974:	2000      	movs	r0, #0
 8006976:	e7e0      	b.n	800693a <_raise_r+0x12>

08006978 <raise>:
 8006978:	4b02      	ldr	r3, [pc, #8]	; (8006984 <raise+0xc>)
 800697a:	4601      	mov	r1, r0
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	f7ff bfd3 	b.w	8006928 <_raise_r>
 8006982:	bf00      	nop
 8006984:	20000128 	.word	0x20000128

08006988 <_kill_r>:
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	4d07      	ldr	r5, [pc, #28]	; (80069a8 <_kill_r+0x20>)
 800698c:	2300      	movs	r3, #0
 800698e:	4604      	mov	r4, r0
 8006990:	4608      	mov	r0, r1
 8006992:	4611      	mov	r1, r2
 8006994:	602b      	str	r3, [r5, #0]
 8006996:	f7fa f92b 	bl	8000bf0 <_kill>
 800699a:	1c43      	adds	r3, r0, #1
 800699c:	d102      	bne.n	80069a4 <_kill_r+0x1c>
 800699e:	682b      	ldr	r3, [r5, #0]
 80069a0:	b103      	cbz	r3, 80069a4 <_kill_r+0x1c>
 80069a2:	6023      	str	r3, [r4, #0]
 80069a4:	bd38      	pop	{r3, r4, r5, pc}
 80069a6:	bf00      	nop
 80069a8:	20000494 	.word	0x20000494

080069ac <_getpid_r>:
 80069ac:	f7fa b918 	b.w	8000be0 <_getpid>

080069b0 <_malloc_usable_size_r>:
 80069b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069b4:	1f18      	subs	r0, r3, #4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	bfbc      	itt	lt
 80069ba:	580b      	ldrlt	r3, [r1, r0]
 80069bc:	18c0      	addlt	r0, r0, r3
 80069be:	4770      	bx	lr

080069c0 <_init>:
 80069c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c2:	bf00      	nop
 80069c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069c6:	bc08      	pop	{r3}
 80069c8:	469e      	mov	lr, r3
 80069ca:	4770      	bx	lr

080069cc <_fini>:
 80069cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ce:	bf00      	nop
 80069d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d2:	bc08      	pop	{r3}
 80069d4:	469e      	mov	lr, r3
 80069d6:	4770      	bx	lr
