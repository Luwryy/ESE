
446RE_I2C_CAN_TP4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a88  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005c58  08005c58  00015c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005db8  08005db8  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  08005db8  08005db8  00015db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dc0  08005dc0  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dc0  08005dc0  00015dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dc4  08005dc4  00015dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08005dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  200000f0  08005eb8  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08005eb8  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fbfb  00000000  00000000  00020163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b24  00000000  00000000  0002fd5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  00032888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f4  00000000  00000000  00033578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023813  00000000  00000000  00033f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013155  00000000  00000000  0005777f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf4a4  00000000  00000000  0006a8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003be0  00000000  00000000  00139d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0013d958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000f0 	.word	0x200000f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005c40 	.word	0x08005c40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000f4 	.word	0x200000f4
 800020c:	08005c40 	.word	0x08005c40

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <MX_CAN1_Init+0x64>)
 80005c2:	4a18      	ldr	r2, [pc, #96]	; (8000624 <MX_CAN1_Init+0x68>)
 80005c4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <MX_CAN1_Init+0x64>)
 80005c8:	2206      	movs	r2, #6
 80005ca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <MX_CAN1_Init+0x64>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005d2:	4b13      	ldr	r3, [pc, #76]	; (8000620 <MX_CAN1_Init+0x64>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_CAN1_Init+0x64>)
 80005da:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80005de:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_CAN1_Init+0x64>)
 80005e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005e6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <MX_CAN1_Init+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_CAN1_Init+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_CAN1_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_CAN1_Init+0x64>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <MX_CAN1_Init+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_CAN1_Init+0x64>)
 8000608:	2200      	movs	r2, #0
 800060a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_CAN1_Init+0x64>)
 800060e:	f000 fd33 	bl	8001078 <HAL_CAN_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000618:	f000 fa88 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000010c 	.word	0x2000010c
 8000624:	40006400 	.word	0x40006400

08000628 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a19      	ldr	r2, [pc, #100]	; (80006ac <HAL_CAN_MspInit+0x84>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d12c      	bne.n	80006a4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <HAL_CAN_MspInit+0x88>)
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <HAL_CAN_MspInit+0x88>)
 8000654:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000658:	6413      	str	r3, [r2, #64]	; 0x40
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <HAL_CAN_MspInit+0x88>)
 800065c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_CAN_MspInit+0x88>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <HAL_CAN_MspInit+0x88>)
 8000670:	f043 0302 	orr.w	r3, r3, #2
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <HAL_CAN_MspInit+0x88>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000682:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000694:	2309      	movs	r3, #9
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <HAL_CAN_MspInit+0x8c>)
 80006a0:	f001 f8cc 	bl	800183c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006a4:	bf00      	nop
 80006a6:	3728      	adds	r7, #40	; 0x28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40006400 	.word	0x40006400
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020400 	.word	0x40020400

080006b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a2c      	ldr	r2, [pc, #176]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a25      	ldr	r2, [pc, #148]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MX_GPIO_Init+0xd0>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_GPIO_Init+0xd4>)
 8000744:	f001 fa26 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	480c      	ldr	r0, [pc, #48]	; (8000790 <MX_GPIO_Init+0xd8>)
 8000760:	f001 f86c 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000764:	2320      	movs	r3, #32
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_GPIO_Init+0xd4>)
 800077c:	f001 f85e 	bl	800183c <HAL_GPIO_Init>

}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	; 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000
 8000790:	40020800 	.word	0x40020800

08000794 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x50>)
 800079a:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <MX_I2C1_Init+0x54>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007a0:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_I2C1_Init+0x58>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007d2:	f001 f9f9 	bl	8001bc8 <HAL_I2C_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007dc:	f000 f9a6 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000134 	.word	0x20000134
 80007e8:	40005400 	.word	0x40005400
 80007ec:	000186a0 	.word	0x000186a0

080007f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a19      	ldr	r2, [pc, #100]	; (8000874 <HAL_I2C_MspInit+0x84>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d12b      	bne.n	800086a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a17      	ldr	r2, [pc, #92]	; (8000878 <HAL_I2C_MspInit+0x88>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800082e:	23c0      	movs	r3, #192	; 0xc0
 8000830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000832:	2312      	movs	r3, #18
 8000834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800083e:	2304      	movs	r3, #4
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <HAL_I2C_MspInit+0x8c>)
 800084a:	f000 fff7 	bl	800183c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000858:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800086a:	bf00      	nop
 800086c:	3728      	adds	r7, #40	; 0x28
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40005400 	.word	0x40005400
 8000878:	40023800 	.word	0x40023800
 800087c:	40020400 	.word	0x40020400

08000880 <_write>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	e00b      	b.n	80008aa <_write+0x2a>
		HAL_UART_Transmit(&huart2, (uint8_t *) ptr++, 1, HAL_MAX_DELAY);
 8000892:	68b9      	ldr	r1, [r7, #8]
 8000894:	1c4b      	adds	r3, r1, #1
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	2201      	movs	r2, #1
 800089e:	4811      	ldr	r0, [pc, #68]	; (80008e4 <_write+0x64>)
 80008a0:	f002 ff5d 	bl	800375e <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	3301      	adds	r3, #1
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	697a      	ldr	r2, [r7, #20]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	dbef      	blt.n	8000892 <_write+0x12>
	}
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	e00b      	b.n	80008d0 <_write+0x50>
		HAL_UART_Transmit(&huart1, (uint8_t *) ptr++, 1, HAL_MAX_DELAY);
 80008b8:	68b9      	ldr	r1, [r7, #8]
 80008ba:	1c4b      	adds	r3, r1, #1
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	f04f 33ff 	mov.w	r3, #4294967295
 80008c2:	2201      	movs	r2, #1
 80008c4:	4808      	ldr	r0, [pc, #32]	; (80008e8 <_write+0x68>)
 80008c6:	f002 ff4a 	bl	800375e <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	3301      	adds	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	dbef      	blt.n	80008b8 <_write+0x38>
	}

	return len;
 80008d8:	687b      	ldr	r3, [r7, #4]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000210 	.word	0x20000210
 80008e8:	200001cc 	.word	0x200001cc

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	; 0x30
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f2:	f000 fb2b 	bl	8000f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f6:	f000 f8ab 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fa:	f7ff fedd 	bl	80006b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008fe:	f000 fa45 	bl	8000d8c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000902:	f7ff ff47 	bl	8000794 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000906:	f000 fa17 	bl	8000d38 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 800090a:	f7ff fe57 	bl	80005bc <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  printf("test\r\n");
 800090e:	4844      	ldr	r0, [pc, #272]	; (8000a20 <main+0x134>)
 8000910:	f004 fb2e 	bl	8004f70 <puts>
  bmp_reset(&bmp280);
 8000914:	4843      	ldr	r0, [pc, #268]	; (8000a24 <main+0x138>)
 8000916:	f003 ffef 	bl	80048f8 <bmp_reset>
  printf("reset done\r\n");
 800091a:	4843      	ldr	r0, [pc, #268]	; (8000a28 <main+0x13c>)
 800091c:	f004 fb28 	bl	8004f70 <puts>
  bmp_id(&bmp280);
 8000920:	4840      	ldr	r0, [pc, #256]	; (8000a24 <main+0x138>)
 8000922:	f004 f80f 	bl	8004944 <bmp_id>
  printf("id done\r\n");
 8000926:	4841      	ldr	r0, [pc, #260]	; (8000a2c <main+0x140>)
 8000928:	f004 fb22 	bl	8004f70 <puts>
  bmp_config(&bmp280);
 800092c:	483d      	ldr	r0, [pc, #244]	; (8000a24 <main+0x138>)
 800092e:	f004 f843 	bl	80049b8 <bmp_config>
  printf("config done\r\n");
 8000932:	483f      	ldr	r0, [pc, #252]	; (8000a30 <main+0x144>)
 8000934:	f004 fb1c 	bl	8004f70 <puts>
  HAL_Delay(500);
 8000938:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800093c:	f000 fb78 	bl	8001030 <HAL_Delay>
  bmp_calib_read(&bmp280);
 8000940:	4838      	ldr	r0, [pc, #224]	; (8000a24 <main+0x138>)
 8000942:	f004 f875 	bl	8004a30 <bmp_calib_read>
  printf("calib done\r\n");
 8000946:	483b      	ldr	r0, [pc, #236]	; (8000a34 <main+0x148>)
 8000948:	f004 fb12 	bl	8004f70 <puts>

  HAL_CAN_Start(&hcan1);
 800094c:	483a      	ldr	r0, [pc, #232]	; (8000a38 <main+0x14c>)
 800094e:	f000 fc8e 	bl	800126e <HAL_CAN_Start>
  uint8_t CAN_TxData[CAN_DATA_LENGTH];
  CAN_TxHeaderTypeDef CAN_Header;
  CAN_Header.StdId = 0x062;
 8000952:	2362      	movs	r3, #98	; 0x62
 8000954:	613b      	str	r3, [r7, #16]
  CAN_Header.ExtId = 0x062;
 8000956:	2362      	movs	r3, #98	; 0x62
 8000958:	617b      	str	r3, [r7, #20]
  CAN_Header.IDE = CAN_ID_STD;
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
  CAN_Header.RTR = CAN_RTR_DATA; //DATA c'est qu'en on envoie juste un message au peripherique
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  	  	  	  	  	  	  	  	 //remote c'est quand on attent une réponse
  CAN_Header.DLC = CAN_DATA_LENGTH;
 8000962:	2308      	movs	r3, #8
 8000964:	623b      	str	r3, [r7, #32]
  CAN_Header.TransmitGlobalTime = DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

  uint32_t boiteAuLettre = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]

  HAL_CAN_AddTxMessage(&hcan1, &CAN_Header, CAN_TxData, &boiteAuLettre);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000978:	f107 0110 	add.w	r1, r7, #16
 800097c:	482e      	ldr	r0, [pc, #184]	; (8000a38 <main+0x14c>)
 800097e:	f000 fcba 	bl	80012f6 <HAL_CAN_AddTxMessage>
  while(HAL_CAN_IsTxMessagePending(&hcan1, boiteAuLettre)){
 8000982:	e002      	b.n	800098a <main+0x9e>
	  HAL_Delay(10);
 8000984:	200a      	movs	r0, #10
 8000986:	f000 fb53 	bl	8001030 <HAL_Delay>
  while(HAL_CAN_IsTxMessagePending(&hcan1, boiteAuLettre)){
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	4619      	mov	r1, r3
 800098e:	482a      	ldr	r0, [pc, #168]	; (8000a38 <main+0x14c>)
 8000990:	f000 fd8c 	bl	80014ac <HAL_CAN_IsTxMessagePending>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1f4      	bne.n	8000984 <main+0x98>
  }
  printf("init ok\r\n");
 800099a:	4828      	ldr	r0, [pc, #160]	; (8000a3c <main+0x150>)
 800099c:	f004 fae8 	bl	8004f70 <puts>

  CAN_Header.StdId = 0x061;
 80009a0:	2361      	movs	r3, #97	; 0x61
 80009a2:	613b      	str	r3, [r7, #16]

  CAN_TxData[0] = 45;
 80009a4:	232d      	movs	r3, #45	; 0x2d
 80009a6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  CAN_TxData[1] = 1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

  //bmp_temp_read(&bmp280);
  //bmp_press_read(&bmp280);    */
  Shell_Init();
 80009b0:	f004 f96a 	bl	8004c88 <Shell_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  bmp_temp_read(&bmp280);
 80009b4:	481b      	ldr	r0, [pc, #108]	; (8000a24 <main+0x138>)
 80009b6:	f004 f875 	bl	8004aa4 <bmp_temp_read>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 80009ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009be:	4820      	ldr	r0, [pc, #128]	; (8000a40 <main+0x154>)
 80009c0:	f001 f8d0 	bl	8001b64 <HAL_GPIO_ReadPin>

	  }
	  HAL_CAN_AddTxMessage(&hcan1, &CAN_Header, CAN_TxData, &boiteAuLettre);
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009cc:	f107 0110 	add.w	r1, r7, #16
 80009d0:	4819      	ldr	r0, [pc, #100]	; (8000a38 <main+0x14c>)
 80009d2:	f000 fc90 	bl	80012f6 <HAL_CAN_AddTxMessage>
	  while( HAL_CAN_IsTxMessagePending(&hcan1, boiteAuLettre) ){
 80009d6:	e002      	b.n	80009de <main+0xf2>
		  printf("message CAN pas encore envoye \r\n");
 80009d8:	481a      	ldr	r0, [pc, #104]	; (8000a44 <main+0x158>)
 80009da:	f004 fac9 	bl	8004f70 <puts>
	  while( HAL_CAN_IsTxMessagePending(&hcan1, boiteAuLettre) ){
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	4619      	mov	r1, r3
 80009e2:	4815      	ldr	r0, [pc, #84]	; (8000a38 <main+0x14c>)
 80009e4:	f000 fd62 	bl	80014ac <HAL_CAN_IsTxMessagePending>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d1f4      	bne.n	80009d8 <main+0xec>
	  }
	  /*CAN_TxData[0] += 10;
	  CAN_TxData[0] = CAN_TxData[0] % 180;*/
	  CAN_TxData[0] = (uint8_t) ((bmp280.temp / 10) - 200);
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <main+0x138>)
 80009f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009f2:	4a15      	ldr	r2, [pc, #84]	; (8000a48 <main+0x15c>)
 80009f4:	fb82 1203 	smull	r1, r2, r2, r3
 80009f8:	1092      	asrs	r2, r2, #2
 80009fa:	17db      	asrs	r3, r3, #31
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	3338      	adds	r3, #56	; 0x38
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  HAL_Delay(500);
 8000a08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a0c:	f000 fb10 	bl	8001030 <HAL_Delay>
	  uint8_t mydata[5];
	  HAL_UART_Receive(&huart1, mydata , 1, HAL_MAX_DELAY);
 8000a10:	1d39      	adds	r1, r7, #4
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	2201      	movs	r2, #1
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <main+0x160>)
 8000a1a:	f002 ff32 	bl	8003882 <HAL_UART_Receive>
  {
 8000a1e:	e7c9      	b.n	80009b4 <main+0xc8>
 8000a20:	08005c58 	.word	0x08005c58
 8000a24:	20000188 	.word	0x20000188
 8000a28:	08005c60 	.word	0x08005c60
 8000a2c:	08005c6c 	.word	0x08005c6c
 8000a30:	08005c78 	.word	0x08005c78
 8000a34:	08005c88 	.word	0x08005c88
 8000a38:	2000010c 	.word	0x2000010c
 8000a3c:	08005c94 	.word	0x08005c94
 8000a40:	40020800 	.word	0x40020800
 8000a44:	08005ca0 	.word	0x08005ca0
 8000a48:	66666667 	.word	0x66666667
 8000a4c:	200001cc 	.word	0x200001cc

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b094      	sub	sp, #80	; 0x50
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	2234      	movs	r2, #52	; 0x34
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f004 fb66 	bl	8005130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	f107 0308 	add.w	r3, r7, #8
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <SystemClock_Config+0xd4>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	4a29      	ldr	r2, [pc, #164]	; (8000b24 <SystemClock_Config+0xd4>)
 8000a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a82:	6413      	str	r3, [r2, #64]	; 0x40
 8000a84:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <SystemClock_Config+0xd4>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a90:	2300      	movs	r3, #0
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <SystemClock_Config+0xd8>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a9c:	4a22      	ldr	r2, [pc, #136]	; (8000b28 <SystemClock_Config+0xd8>)
 8000a9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <SystemClock_Config+0xd8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab8:	2310      	movs	r3, #16
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abc:	2302      	movs	r3, #2
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ac8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000acc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f002 fb52 	bl	8003188 <HAL_RCC_OscConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aea:	f000 f81f 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aee:	230f      	movs	r3, #15
 8000af0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af2:	2302      	movs	r3, #2
 8000af4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	2102      	movs	r1, #2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f001 fff2 	bl	8002af4 <HAL_RCC_ClockConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b16:	f000 f809 	bl	8000b2c <Error_Handler>
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3750      	adds	r7, #80	; 0x50
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40007000 	.word	0x40007000

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <Error_Handler+0x8>
	...

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b76:	2007      	movs	r0, #7
 8000b78:	f000 fd8c 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd4:	f000 fa0c 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <USART1_IRQHandler+0x10>)
 8000be2:	f002 ff21 	bl	8003a28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200001cc 	.word	0x200001cc

08000bf0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <USART2_IRQHandler+0x10>)
 8000bf6:	f002 ff17 	bl	8003a28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000210 	.word	0x20000210

08000c04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	e00a      	b.n	8000c2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c16:	f3af 8000 	nop.w
 8000c1a:	4601      	mov	r1, r0
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	60ba      	str	r2, [r7, #8]
 8000c22:	b2ca      	uxtb	r2, r1
 8000c24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbf0      	blt.n	8000c16 <_read+0x12>
  }

  return len;
 8000c34:	687b      	ldr	r3, [r7, #4]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c66:	605a      	str	r2, [r3, #4]
  return 0;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <_isatty>:

int _isatty(int file)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d207      	bcs.n	8000ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd8:	f004 fa78 	bl	80051cc <__errno>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	220c      	movs	r2, #12
 8000ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	e009      	b.n	8000cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <_sbrk+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20020000 	.word	0x20020000
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	200001c8 	.word	0x200001c8
 8000d10:	20000458 	.word	0x20000458

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <MX_USART1_UART_Init+0x50>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d70:	f002 fca8 	bl	80036c4 <HAL_UART_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d7a:	f7ff fed7 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200001cc 	.word	0x200001cc
 8000d88:	40011000 	.word	0x40011000

08000d8c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <MX_USART2_UART_Init+0x50>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000d98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	f002 fc7e 	bl	80036c4 <HAL_UART_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dce:	f7ff fead 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000210 	.word	0x20000210
 8000ddc:	40004400 	.word	0x40004400

08000de0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08c      	sub	sp, #48	; 0x30
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a3a      	ldr	r2, [pc, #232]	; (8000ee8 <HAL_UART_MspInit+0x108>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d135      	bne.n	8000e6e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
 8000e06:	4b39      	ldr	r3, [pc, #228]	; (8000eec <HAL_UART_MspInit+0x10c>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	4a38      	ldr	r2, [pc, #224]	; (8000eec <HAL_UART_MspInit+0x10c>)
 8000e0c:	f043 0310 	orr.w	r3, r3, #16
 8000e10:	6453      	str	r3, [r2, #68]	; 0x44
 8000e12:	4b36      	ldr	r3, [pc, #216]	; (8000eec <HAL_UART_MspInit+0x10c>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f003 0310 	and.w	r3, r3, #16
 8000e1a:	61bb      	str	r3, [r7, #24]
 8000e1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	4b32      	ldr	r3, [pc, #200]	; (8000eec <HAL_UART_MspInit+0x10c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a31      	ldr	r2, [pc, #196]	; (8000eec <HAL_UART_MspInit+0x10c>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <HAL_UART_MspInit+0x10c>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PI_TX_Pin|PI_RX_Pin;
 8000e3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	4826      	ldr	r0, [pc, #152]	; (8000ef0 <HAL_UART_MspInit+0x110>)
 8000e58:	f000 fcf0 	bl	800183c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2025      	movs	r0, #37	; 0x25
 8000e62:	f000 fc22 	bl	80016aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e66:	2025      	movs	r0, #37	; 0x25
 8000e68:	f000 fc3b 	bl	80016e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e6c:	e038      	b.n	8000ee0 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a20      	ldr	r2, [pc, #128]	; (8000ef4 <HAL_UART_MspInit+0x114>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d133      	bne.n	8000ee0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_UART_MspInit+0x10c>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	4a1a      	ldr	r2, [pc, #104]	; (8000eec <HAL_UART_MspInit+0x10c>)
 8000e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e86:	6413      	str	r3, [r2, #64]	; 0x40
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_UART_MspInit+0x10c>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_UART_MspInit+0x10c>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	4a13      	ldr	r2, [pc, #76]	; (8000eec <HAL_UART_MspInit+0x10c>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_UART_MspInit+0x10c>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eb0:	230c      	movs	r3, #12
 8000eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <HAL_UART_MspInit+0x110>)
 8000ecc:	f000 fcb6 	bl	800183c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2026      	movs	r0, #38	; 0x26
 8000ed6:	f000 fbe8 	bl	80016aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eda:	2026      	movs	r0, #38	; 0x26
 8000edc:	f000 fc01 	bl	80016e2 <HAL_NVIC_EnableIRQ>
}
 8000ee0:	bf00      	nop
 8000ee2:	3730      	adds	r7, #48	; 0x30
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40011000 	.word	0x40011000
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	40004400 	.word	0x40004400

08000ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000efc:	480d      	ldr	r0, [pc, #52]	; (8000f34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000efe:	490e      	ldr	r1, [pc, #56]	; (8000f38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f00:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f12:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f14:	4c0b      	ldr	r4, [pc, #44]	; (8000f44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f22:	f7ff fef7 	bl	8000d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f26:	f004 f957 	bl	80051d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2a:	f7ff fcdf 	bl	80008ec <main>
  bx  lr    
 8000f2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f38:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8000f3c:	08005dc8 	.word	0x08005dc8
  ldr r2, =_sbss
 8000f40:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8000f44:	20000454 	.word	0x20000454

08000f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC_IRQHandler>
	...

08000f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <HAL_Init+0x40>)
 8000f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <HAL_Init+0x40>)
 8000f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <HAL_Init+0x40>)
 8000f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 fb8d 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f000 f808 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f80:	f7ff fdda 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023c00 	.word	0x40023c00

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x54>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x58>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 fba5 	bl	80016fe <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f000 fb6d 	bl	80016aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	; (8000fec <HAL_InitTick+0x5c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000004 	.word	0x20000004

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008
 8001014:	20000254 	.word	0x20000254

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000254 	.word	0x20000254

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001038:	f7ff ffee 	bl	8001018 <HAL_GetTick>
 800103c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001048:	d005      	beq.n	8001056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_Delay+0x44>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001056:	bf00      	nop
 8001058:	f7ff ffde 	bl	8001018 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	429a      	cmp	r2, r3
 8001066:	d8f7      	bhi.n	8001058 <HAL_Delay+0x28>
  {
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008

08001078 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0ed      	b.n	8001266 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d102      	bne.n	800109c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fac6 	bl	8000628 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0201 	orr.w	r2, r2, #1
 80010aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010ac:	f7ff ffb4 	bl	8001018 <HAL_GetTick>
 80010b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010b2:	e012      	b.n	80010da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010b4:	f7ff ffb0 	bl	8001018 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b0a      	cmp	r3, #10
 80010c0:	d90b      	bls.n	80010da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2205      	movs	r2, #5
 80010d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e0c5      	b.n	8001266 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0e5      	beq.n	80010b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0202 	bic.w	r2, r2, #2
 80010f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f8:	f7ff ff8e 	bl	8001018 <HAL_GetTick>
 80010fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010fe:	e012      	b.n	8001126 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001100:	f7ff ff8a 	bl	8001018 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b0a      	cmp	r3, #10
 800110c:	d90b      	bls.n	8001126 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2205      	movs	r2, #5
 800111e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e09f      	b.n	8001266 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1e5      	bne.n	8001100 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7e1b      	ldrb	r3, [r3, #24]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d108      	bne.n	800114e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e007      	b.n	800115e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800115c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7e5b      	ldrb	r3, [r3, #25]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d108      	bne.n	8001178 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e007      	b.n	8001188 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001186:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7e9b      	ldrb	r3, [r3, #26]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d108      	bne.n	80011a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0220 	orr.w	r2, r2, #32
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e007      	b.n	80011b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0220 	bic.w	r2, r2, #32
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7edb      	ldrb	r3, [r3, #27]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d108      	bne.n	80011cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0210 	bic.w	r2, r2, #16
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	e007      	b.n	80011dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0210 	orr.w	r2, r2, #16
 80011da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7f1b      	ldrb	r3, [r3, #28]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d108      	bne.n	80011f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0208 	orr.w	r2, r2, #8
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	e007      	b.n	8001206 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0208 	bic.w	r2, r2, #8
 8001204:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7f5b      	ldrb	r3, [r3, #29]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d108      	bne.n	8001220 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f042 0204 	orr.w	r2, r2, #4
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	e007      	b.n	8001230 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0204 	bic.w	r2, r2, #4
 800122e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	ea42 0103 	orr.w	r1, r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	1e5a      	subs	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b084      	sub	sp, #16
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b01      	cmp	r3, #1
 8001280:	d12e      	bne.n	80012e0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2202      	movs	r2, #2
 8001286:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0201 	bic.w	r2, r2, #1
 8001298:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800129a:	f7ff febd 	bl	8001018 <HAL_GetTick>
 800129e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012a0:	e012      	b.n	80012c8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012a2:	f7ff feb9 	bl	8001018 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b0a      	cmp	r3, #10
 80012ae:	d90b      	bls.n	80012c8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2205      	movs	r2, #5
 80012c0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e012      	b.n	80012ee <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1e5      	bne.n	80012a2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	e006      	b.n	80012ee <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
  }
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b089      	sub	sp, #36	; 0x24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f893 3020 	ldrb.w	r3, [r3, #32]
 800130a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001314:	7ffb      	ldrb	r3, [r7, #31]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d003      	beq.n	8001322 <HAL_CAN_AddTxMessage+0x2c>
 800131a:	7ffb      	ldrb	r3, [r7, #31]
 800131c:	2b02      	cmp	r3, #2
 800131e:	f040 80b8 	bne.w	8001492 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10a      	bne.n	8001342 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001332:	2b00      	cmp	r3, #0
 8001334:	d105      	bne.n	8001342 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80a0 	beq.w	8001482 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	0e1b      	lsrs	r3, r3, #24
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d907      	bls.n	8001362 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e09e      	b.n	80014a0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001362:	2201      	movs	r2, #1
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10d      	bne.n	8001390 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800137e:	68f9      	ldr	r1, [r7, #12]
 8001380:	6809      	ldr	r1, [r1, #0]
 8001382:	431a      	orrs	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3318      	adds	r3, #24
 8001388:	011b      	lsls	r3, r3, #4
 800138a:	440b      	add	r3, r1
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	e00f      	b.n	80013b0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800139a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013a0:	68f9      	ldr	r1, [r7, #12]
 80013a2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80013a4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	3318      	adds	r3, #24
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	440b      	add	r3, r1
 80013ae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6819      	ldr	r1, [r3, #0]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	691a      	ldr	r2, [r3, #16]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	3318      	adds	r3, #24
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	440b      	add	r3, r1
 80013c0:	3304      	adds	r3, #4
 80013c2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	7d1b      	ldrb	r3, [r3, #20]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d111      	bne.n	80013f0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3318      	adds	r3, #24
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	4413      	add	r3, r2
 80013d8:	3304      	adds	r3, #4
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	6811      	ldr	r1, [r2, #0]
 80013e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3318      	adds	r3, #24
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	440b      	add	r3, r1
 80013ec:	3304      	adds	r3, #4
 80013ee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3307      	adds	r3, #7
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	061a      	lsls	r2, r3, #24
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3306      	adds	r3, #6
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	041b      	lsls	r3, r3, #16
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3305      	adds	r3, #5
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	4313      	orrs	r3, r2
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	3204      	adds	r2, #4
 8001410:	7812      	ldrb	r2, [r2, #0]
 8001412:	4610      	mov	r0, r2
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	6811      	ldr	r1, [r2, #0]
 8001418:	ea43 0200 	orr.w	r2, r3, r0
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	440b      	add	r3, r1
 8001422:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001426:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3303      	adds	r3, #3
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	061a      	lsls	r2, r3, #24
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3302      	adds	r3, #2
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	041b      	lsls	r3, r3, #16
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3301      	adds	r3, #1
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	4313      	orrs	r3, r2
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	7812      	ldrb	r2, [r2, #0]
 8001448:	4610      	mov	r0, r2
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	6811      	ldr	r1, [r2, #0]
 800144e:	ea43 0200 	orr.w	r2, r3, r0
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	440b      	add	r3, r1
 8001458:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800145c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	3318      	adds	r3, #24
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	4413      	add	r3, r2
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	6811      	ldr	r1, [r2, #0]
 8001470:	f043 0201 	orr.w	r2, r3, #1
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	3318      	adds	r3, #24
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	440b      	add	r3, r1
 800147c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	e00e      	b.n	80014a0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e006      	b.n	80014a0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
  }
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3724      	adds	r7, #36	; 0x24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c0:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d002      	beq.n	80014ce <HAL_CAN_IsTxMessagePending+0x22>
 80014c8:	7afb      	ldrb	r3, [r7, #11]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d10b      	bne.n	80014e6 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	069b      	lsls	r3, r3, #26
 80014d8:	401a      	ands	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	069b      	lsls	r3, r3, #26
 80014de:	429a      	cmp	r2, r3
 80014e0:	d001      	beq.n	80014e6 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80014e2:	2301      	movs	r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db0b      	blt.n	8001582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	4907      	ldr	r1, [pc, #28]	; (8001590 <__NVIC_EnableIRQ+0x38>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001660:	d301      	bcc.n	8001666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001662:	2301      	movs	r3, #1
 8001664:	e00f      	b.n	8001686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <SysTick_Config+0x40>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166e:	210f      	movs	r1, #15
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f7ff ff8e 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <SysTick_Config+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <SysTick_Config+0x40>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff29 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016bc:	f7ff ff3e 	bl	800153c <__NVIC_GetPriorityGrouping>
 80016c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	6978      	ldr	r0, [r7, #20]
 80016c8:	f7ff ff8e 	bl	80015e8 <NVIC_EncodePriority>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff5d 	bl	8001594 <__NVIC_SetPriority>
}
 80016da:	bf00      	nop
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff31 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ffa2 	bl	8001650 <SysTick_Config>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff fc78 	bl	8001018 <HAL_GetTick>
 8001728:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d008      	beq.n	8001748 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e052      	b.n	80017ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0216 	bic.w	r2, r2, #22
 8001756:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	695a      	ldr	r2, [r3, #20]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001766:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	2b00      	cmp	r3, #0
 800176e:	d103      	bne.n	8001778 <HAL_DMA_Abort+0x62>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001774:	2b00      	cmp	r3, #0
 8001776:	d007      	beq.n	8001788 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0208 	bic.w	r2, r2, #8
 8001786:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0201 	bic.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001798:	e013      	b.n	80017c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800179a:	f7ff fc3d 	bl	8001018 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b05      	cmp	r3, #5
 80017a6:	d90c      	bls.n	80017c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2220      	movs	r2, #32
 80017ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2203      	movs	r2, #3
 80017b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e015      	b.n	80017ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1e4      	bne.n	800179a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d4:	223f      	movs	r2, #63	; 0x3f
 80017d6:	409a      	lsls	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d004      	beq.n	8001814 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2280      	movs	r2, #128	; 0x80
 800180e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e00c      	b.n	800182e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2205      	movs	r2, #5
 8001818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0201 	bic.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	e165      	b.n	8001b24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001858:	2201      	movs	r2, #1
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	429a      	cmp	r2, r3
 8001872:	f040 8154 	bne.w	8001b1e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b01      	cmp	r3, #1
 8001880:	d005      	beq.n	800188e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800188a:	2b02      	cmp	r3, #2
 800188c:	d130      	bne.n	80018f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	2203      	movs	r2, #3
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c4:	2201      	movs	r2, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	f003 0201 	and.w	r2, r3, #1
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d017      	beq.n	800192c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d123      	bne.n	8001980 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	08da      	lsrs	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3208      	adds	r2, #8
 8001940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	220f      	movs	r2, #15
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	08da      	lsrs	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3208      	adds	r2, #8
 800197a:	69b9      	ldr	r1, [r7, #24]
 800197c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0203 	and.w	r2, r3, #3
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80ae 	beq.w	8001b1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b5d      	ldr	r3, [pc, #372]	; (8001b3c <HAL_GPIO_Init+0x300>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a5c      	ldr	r2, [pc, #368]	; (8001b3c <HAL_GPIO_Init+0x300>)
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b5a      	ldr	r3, [pc, #360]	; (8001b3c <HAL_GPIO_Init+0x300>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019de:	4a58      	ldr	r2, [pc, #352]	; (8001b40 <HAL_GPIO_Init+0x304>)
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	220f      	movs	r2, #15
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4f      	ldr	r2, [pc, #316]	; (8001b44 <HAL_GPIO_Init+0x308>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d025      	beq.n	8001a56 <HAL_GPIO_Init+0x21a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4e      	ldr	r2, [pc, #312]	; (8001b48 <HAL_GPIO_Init+0x30c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d01f      	beq.n	8001a52 <HAL_GPIO_Init+0x216>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4d      	ldr	r2, [pc, #308]	; (8001b4c <HAL_GPIO_Init+0x310>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d019      	beq.n	8001a4e <HAL_GPIO_Init+0x212>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4c      	ldr	r2, [pc, #304]	; (8001b50 <HAL_GPIO_Init+0x314>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d013      	beq.n	8001a4a <HAL_GPIO_Init+0x20e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4b      	ldr	r2, [pc, #300]	; (8001b54 <HAL_GPIO_Init+0x318>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d00d      	beq.n	8001a46 <HAL_GPIO_Init+0x20a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4a      	ldr	r2, [pc, #296]	; (8001b58 <HAL_GPIO_Init+0x31c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d007      	beq.n	8001a42 <HAL_GPIO_Init+0x206>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a49      	ldr	r2, [pc, #292]	; (8001b5c <HAL_GPIO_Init+0x320>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d101      	bne.n	8001a3e <HAL_GPIO_Init+0x202>
 8001a3a:	2306      	movs	r3, #6
 8001a3c:	e00c      	b.n	8001a58 <HAL_GPIO_Init+0x21c>
 8001a3e:	2307      	movs	r3, #7
 8001a40:	e00a      	b.n	8001a58 <HAL_GPIO_Init+0x21c>
 8001a42:	2305      	movs	r3, #5
 8001a44:	e008      	b.n	8001a58 <HAL_GPIO_Init+0x21c>
 8001a46:	2304      	movs	r3, #4
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_Init+0x21c>
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e004      	b.n	8001a58 <HAL_GPIO_Init+0x21c>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e002      	b.n	8001a58 <HAL_GPIO_Init+0x21c>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_GPIO_Init+0x21c>
 8001a56:	2300      	movs	r3, #0
 8001a58:	69fa      	ldr	r2, [r7, #28]
 8001a5a:	f002 0203 	and.w	r2, r2, #3
 8001a5e:	0092      	lsls	r2, r2, #2
 8001a60:	4093      	lsls	r3, r2
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a68:	4935      	ldr	r1, [pc, #212]	; (8001b40 <HAL_GPIO_Init+0x304>)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	089b      	lsrs	r3, r3, #2
 8001a6e:	3302      	adds	r3, #2
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a76:	4b3a      	ldr	r3, [pc, #232]	; (8001b60 <HAL_GPIO_Init+0x324>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a9a:	4a31      	ldr	r2, [pc, #196]	; (8001b60 <HAL_GPIO_Init+0x324>)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa0:	4b2f      	ldr	r3, [pc, #188]	; (8001b60 <HAL_GPIO_Init+0x324>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ac4:	4a26      	ldr	r2, [pc, #152]	; (8001b60 <HAL_GPIO_Init+0x324>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aca:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_GPIO_Init+0x324>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aee:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <HAL_GPIO_Init+0x324>)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af4:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <HAL_GPIO_Init+0x324>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b18:	4a11      	ldr	r2, [pc, #68]	; (8001b60 <HAL_GPIO_Init+0x324>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3301      	adds	r3, #1
 8001b22:	61fb      	str	r3, [r7, #28]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	2b0f      	cmp	r3, #15
 8001b28:	f67f ae96 	bls.w	8001858 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40013800 	.word	0x40013800
 8001b44:	40020000 	.word	0x40020000
 8001b48:	40020400 	.word	0x40020400
 8001b4c:	40020800 	.word	0x40020800
 8001b50:	40020c00 	.word	0x40020c00
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40021400 	.word	0x40021400
 8001b5c:	40021800 	.word	0x40021800
 8001b60:	40013c00 	.word	0x40013c00

08001b64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	887b      	ldrh	r3, [r7, #2]
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	e001      	b.n	8001b86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba4:	787b      	ldrb	r3, [r7, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb0:	e003      	b.n	8001bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	041a      	lsls	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	619a      	str	r2, [r3, #24]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e12b      	b.n	8001e32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7fe fdfe 	bl	80007f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2224      	movs	r2, #36	; 0x24
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0201 	bic.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c2c:	f001 f854 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8001c30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4a81      	ldr	r2, [pc, #516]	; (8001e3c <HAL_I2C_Init+0x274>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d807      	bhi.n	8001c4c <HAL_I2C_Init+0x84>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4a80      	ldr	r2, [pc, #512]	; (8001e40 <HAL_I2C_Init+0x278>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	bf94      	ite	ls
 8001c44:	2301      	movls	r3, #1
 8001c46:	2300      	movhi	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	e006      	b.n	8001c5a <HAL_I2C_Init+0x92>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4a7d      	ldr	r2, [pc, #500]	; (8001e44 <HAL_I2C_Init+0x27c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	bf94      	ite	ls
 8001c54:	2301      	movls	r3, #1
 8001c56:	2300      	movhi	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0e7      	b.n	8001e32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4a78      	ldr	r2, [pc, #480]	; (8001e48 <HAL_I2C_Init+0x280>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0c9b      	lsrs	r3, r3, #18
 8001c6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4a6a      	ldr	r2, [pc, #424]	; (8001e3c <HAL_I2C_Init+0x274>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d802      	bhi.n	8001c9c <HAL_I2C_Init+0xd4>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	e009      	b.n	8001cb0 <HAL_I2C_Init+0xe8>
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	4a69      	ldr	r2, [pc, #420]	; (8001e4c <HAL_I2C_Init+0x284>)
 8001ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cac:	099b      	lsrs	r3, r3, #6
 8001cae:	3301      	adds	r3, #1
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	495c      	ldr	r1, [pc, #368]	; (8001e3c <HAL_I2C_Init+0x274>)
 8001ccc:	428b      	cmp	r3, r1
 8001cce:	d819      	bhi.n	8001d04 <HAL_I2C_Init+0x13c>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1e59      	subs	r1, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cde:	1c59      	adds	r1, r3, #1
 8001ce0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ce4:	400b      	ands	r3, r1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00a      	beq.n	8001d00 <HAL_I2C_Init+0x138>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1e59      	subs	r1, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfe:	e051      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d00:	2304      	movs	r3, #4
 8001d02:	e04f      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d111      	bne.n	8001d30 <HAL_I2C_Init+0x168>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1e58      	subs	r0, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6859      	ldr	r1, [r3, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	440b      	add	r3, r1
 8001d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf0c      	ite	eq
 8001d28:	2301      	moveq	r3, #1
 8001d2a:	2300      	movne	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	e012      	b.n	8001d56 <HAL_I2C_Init+0x18e>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1e58      	subs	r0, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	0099      	lsls	r1, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d46:	3301      	adds	r3, #1
 8001d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_I2C_Init+0x196>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e022      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10e      	bne.n	8001d84 <HAL_I2C_Init+0x1bc>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1e58      	subs	r0, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6859      	ldr	r1, [r3, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	440b      	add	r3, r1
 8001d74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d82:	e00f      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1e58      	subs	r0, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	0099      	lsls	r1, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	6809      	ldr	r1, [r1, #0]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69da      	ldr	r2, [r3, #28]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6911      	ldr	r1, [r2, #16]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68d2      	ldr	r2, [r2, #12]
 8001dde:	4311      	orrs	r1, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	430b      	orrs	r3, r1
 8001de6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	000186a0 	.word	0x000186a0
 8001e40:	001e847f 	.word	0x001e847f
 8001e44:	003d08ff 	.word	0x003d08ff
 8001e48:	431bde83 	.word	0x431bde83
 8001e4c:	10624dd3 	.word	0x10624dd3

08001e50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	817b      	strh	r3, [r7, #10]
 8001e60:	4613      	mov	r3, r2
 8001e62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff f8d8 	bl	8001018 <HAL_GetTick>
 8001e68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b20      	cmp	r3, #32
 8001e74:	f040 80e0 	bne.w	8002038 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	2319      	movs	r3, #25
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4970      	ldr	r1, [pc, #448]	; (8002044 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 fc58 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e0d3      	b.n	800203a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_I2C_Master_Transmit+0x50>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e0cc      	b.n	800203a <HAL_I2C_Master_Transmit+0x1ea>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d007      	beq.n	8001ec6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0201 	orr.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ed4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2221      	movs	r2, #33	; 0x21
 8001eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2210      	movs	r2, #16
 8001ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	893a      	ldrh	r2, [r7, #8]
 8001ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4a50      	ldr	r2, [pc, #320]	; (8002048 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f08:	8979      	ldrh	r1, [r7, #10]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	6a3a      	ldr	r2, [r7, #32]
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 fac2 	bl	8002498 <I2C_MasterRequestWrite>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e08d      	b.n	800203a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f34:	e066      	b.n	8002004 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	6a39      	ldr	r1, [r7, #32]
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 fcd2 	bl	80028e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00d      	beq.n	8001f62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d107      	bne.n	8001f5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e06b      	b.n	800203a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	781a      	ldrb	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_I2C_Master_Transmit+0x188>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d017      	beq.n	8001fd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	781a      	ldrb	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	6a39      	ldr	r1, [r7, #32]
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 fcc2 	bl	8002966 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00d      	beq.n	8002004 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d107      	bne.n	8002000 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ffe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e01a      	b.n	800203a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002008:	2b00      	cmp	r3, #0
 800200a:	d194      	bne.n	8001f36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800201a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	e000      	b.n	800203a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002038:	2302      	movs	r3, #2
  }
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	00100002 	.word	0x00100002
 8002048:	ffff0000 	.word	0xffff0000

0800204c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08c      	sub	sp, #48	; 0x30
 8002050:	af02      	add	r7, sp, #8
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	461a      	mov	r2, r3
 8002058:	460b      	mov	r3, r1
 800205a:	817b      	strh	r3, [r7, #10]
 800205c:	4613      	mov	r3, r2
 800205e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7fe ffda 	bl	8001018 <HAL_GetTick>
 8002064:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b20      	cmp	r3, #32
 8002070:	f040 820b 	bne.w	800248a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2319      	movs	r3, #25
 800207a:	2201      	movs	r2, #1
 800207c:	497c      	ldr	r1, [pc, #496]	; (8002270 <HAL_I2C_Master_Receive+0x224>)
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 fb5a 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800208a:	2302      	movs	r3, #2
 800208c:	e1fe      	b.n	800248c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_I2C_Master_Receive+0x50>
 8002098:	2302      	movs	r3, #2
 800209a:	e1f7      	b.n	800248c <HAL_I2C_Master_Receive+0x440>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d007      	beq.n	80020c2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2222      	movs	r2, #34	; 0x22
 80020d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2210      	movs	r2, #16
 80020de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	893a      	ldrh	r2, [r7, #8]
 80020f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4a5c      	ldr	r2, [pc, #368]	; (8002274 <HAL_I2C_Master_Receive+0x228>)
 8002102:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002104:	8979      	ldrh	r1, [r7, #10]
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 fa46 	bl	800259c <I2C_MasterRequestRead>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e1b8      	b.n	800248c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211e:	2b00      	cmp	r3, #0
 8002120:	d113      	bne.n	800214a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002122:	2300      	movs	r3, #0
 8002124:	623b      	str	r3, [r7, #32]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	623b      	str	r3, [r7, #32]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	623b      	str	r3, [r7, #32]
 8002136:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	e18c      	b.n	8002464 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214e:	2b01      	cmp	r3, #1
 8002150:	d11b      	bne.n	800218a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002160:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e16c      	b.n	8002464 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218e:	2b02      	cmp	r3, #2
 8002190:	d11b      	bne.n	80021ca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	e14c      	b.n	8002464 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80021f0:	e138      	b.n	8002464 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	f200 80f1 	bhi.w	80023de <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	2b01      	cmp	r3, #1
 8002202:	d123      	bne.n	800224c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002206:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 fbed 	bl	80029e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e139      	b.n	800248c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	855a      	strh	r2, [r3, #42]	; 0x2a
 800224a:	e10b      	b.n	8002464 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002250:	2b02      	cmp	r3, #2
 8002252:	d14e      	bne.n	80022f2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225a:	2200      	movs	r2, #0
 800225c:	4906      	ldr	r1, [pc, #24]	; (8002278 <HAL_I2C_Master_Receive+0x22c>)
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fa6a 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d008      	beq.n	800227c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e10e      	b.n	800248c <HAL_I2C_Master_Receive+0x440>
 800226e:	bf00      	nop
 8002270:	00100002 	.word	0x00100002
 8002274:	ffff0000 	.word	0xffff0000
 8002278:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800228a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691a      	ldr	r2, [r3, #16]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022f0:	e0b8      	b.n	8002464 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f8:	2200      	movs	r2, #0
 80022fa:	4966      	ldr	r1, [pc, #408]	; (8002494 <HAL_I2C_Master_Receive+0x448>)
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 fa1b 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0bf      	b.n	800248c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002354:	2200      	movs	r2, #0
 8002356:	494f      	ldr	r1, [pc, #316]	; (8002494 <HAL_I2C_Master_Receive+0x448>)
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f9ed 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e091      	b.n	800248c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002376:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023dc:	e042      	b.n	8002464 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 fb00 	bl	80029e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e04c      	b.n	800248c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b04      	cmp	r3, #4
 8002430:	d118      	bne.n	8002464 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245a:	b29b      	uxth	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002468:	2b00      	cmp	r3, #0
 800246a:	f47f aec2 	bne.w	80021f2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e000      	b.n	800248c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800248a:	2302      	movs	r3, #2
  }
}
 800248c:	4618      	mov	r0, r3
 800248e:	3728      	adds	r7, #40	; 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	00010004 	.word	0x00010004

08002498 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af02      	add	r7, sp, #8
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	603b      	str	r3, [r7, #0]
 80024a4:	460b      	mov	r3, r1
 80024a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d006      	beq.n	80024c2 <I2C_MasterRequestWrite+0x2a>
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d003      	beq.n	80024c2 <I2C_MasterRequestWrite+0x2a>
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024c0:	d108      	bne.n	80024d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	e00b      	b.n	80024ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	2b12      	cmp	r3, #18
 80024da:	d107      	bne.n	80024ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f91d 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00d      	beq.n	8002520 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002512:	d103      	bne.n	800251c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e035      	b.n	800258c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002528:	d108      	bne.n	800253c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800252a:	897b      	ldrh	r3, [r7, #10]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002538:	611a      	str	r2, [r3, #16]
 800253a:	e01b      	b.n	8002574 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800253c:	897b      	ldrh	r3, [r7, #10]
 800253e:	11db      	asrs	r3, r3, #7
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f003 0306 	and.w	r3, r3, #6
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f063 030f 	orn	r3, r3, #15
 800254c:	b2da      	uxtb	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	490e      	ldr	r1, [pc, #56]	; (8002594 <I2C_MasterRequestWrite+0xfc>)
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f943 	bl	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e010      	b.n	800258c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800256a:	897b      	ldrh	r3, [r7, #10]
 800256c:	b2da      	uxtb	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	4907      	ldr	r1, [pc, #28]	; (8002598 <I2C_MasterRequestWrite+0x100>)
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 f933 	bl	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	00010008 	.word	0x00010008
 8002598:	00010002 	.word	0x00010002

0800259c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	460b      	mov	r3, r1
 80025aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d006      	beq.n	80025d6 <I2C_MasterRequestRead+0x3a>
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d003      	beq.n	80025d6 <I2C_MasterRequestRead+0x3a>
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025d4:	d108      	bne.n	80025e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e00b      	b.n	8002600 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	2b11      	cmp	r3, #17
 80025ee:	d107      	bne.n	8002600 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f893 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00d      	beq.n	8002634 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002626:	d103      	bne.n	8002630 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800262e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e079      	b.n	8002728 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800263c:	d108      	bne.n	8002650 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800263e:	897b      	ldrh	r3, [r7, #10]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	b2da      	uxtb	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	611a      	str	r2, [r3, #16]
 800264e:	e05f      	b.n	8002710 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002650:	897b      	ldrh	r3, [r7, #10]
 8002652:	11db      	asrs	r3, r3, #7
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f003 0306 	and.w	r3, r3, #6
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f063 030f 	orn	r3, r3, #15
 8002660:	b2da      	uxtb	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4930      	ldr	r1, [pc, #192]	; (8002730 <I2C_MasterRequestRead+0x194>)
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f8b9 	bl	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e054      	b.n	8002728 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800267e:	897b      	ldrh	r3, [r7, #10]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4929      	ldr	r1, [pc, #164]	; (8002734 <I2C_MasterRequestRead+0x198>)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f8a9 	bl	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e044      	b.n	8002728 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f831 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00d      	beq.n	80026f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ea:	d103      	bne.n	80026f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e017      	b.n	8002728 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80026f8:	897b      	ldrh	r3, [r7, #10]
 80026fa:	11db      	asrs	r3, r3, #7
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f003 0306 	and.w	r3, r3, #6
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f063 030e 	orn	r3, r3, #14
 8002708:	b2da      	uxtb	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4907      	ldr	r1, [pc, #28]	; (8002734 <I2C_MasterRequestRead+0x198>)
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f865 	bl	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	00010008 	.word	0x00010008
 8002734:	00010002 	.word	0x00010002

08002738 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002748:	e025      	b.n	8002796 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d021      	beq.n	8002796 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002752:	f7fe fc61 	bl	8001018 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d302      	bcc.n	8002768 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d116      	bne.n	8002796 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f043 0220 	orr.w	r2, r3, #32
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e023      	b.n	80027de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	0c1b      	lsrs	r3, r3, #16
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b01      	cmp	r3, #1
 800279e:	d10d      	bne.n	80027bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	43da      	mvns	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4013      	ands	r3, r2
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	e00c      	b.n	80027d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4013      	ands	r3, r2
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d0b6      	beq.n	800274a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027f4:	e051      	b.n	800289a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002804:	d123      	bne.n	800284e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002814:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800281e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f043 0204 	orr.w	r2, r3, #4
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e046      	b.n	80028dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d021      	beq.n	800289a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002856:	f7fe fbdf 	bl	8001018 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	d302      	bcc.n	800286c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d116      	bne.n	800289a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f043 0220 	orr.w	r2, r3, #32
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e020      	b.n	80028dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d10c      	bne.n	80028be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	43da      	mvns	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	4013      	ands	r3, r2
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	bf14      	ite	ne
 80028b6:	2301      	movne	r3, #1
 80028b8:	2300      	moveq	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	e00b      	b.n	80028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	43da      	mvns	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4013      	ands	r3, r2
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf14      	ite	ne
 80028d0:	2301      	movne	r3, #1
 80028d2:	2300      	moveq	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d18d      	bne.n	80027f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028f0:	e02d      	b.n	800294e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f8ce 	bl	8002a94 <I2C_IsAcknowledgeFailed>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e02d      	b.n	800295e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d021      	beq.n	800294e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290a:	f7fe fb85 	bl	8001018 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	429a      	cmp	r2, r3
 8002918:	d302      	bcc.n	8002920 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d116      	bne.n	800294e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f043 0220 	orr.w	r2, r3, #32
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e007      	b.n	800295e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002958:	2b80      	cmp	r3, #128	; 0x80
 800295a:	d1ca      	bne.n	80028f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002972:	e02d      	b.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f88d 	bl	8002a94 <I2C_IsAcknowledgeFailed>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e02d      	b.n	80029e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298a:	d021      	beq.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298c:	f7fe fb44 	bl	8001018 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	429a      	cmp	r2, r3
 800299a:	d302      	bcc.n	80029a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d116      	bne.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e007      	b.n	80029e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d1ca      	bne.n	8002974 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029f4:	e042      	b.n	8002a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b10      	cmp	r3, #16
 8002a02:	d119      	bne.n	8002a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0210 	mvn.w	r2, #16
 8002a0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e029      	b.n	8002a8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a38:	f7fe faee 	bl	8001018 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d302      	bcc.n	8002a4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d116      	bne.n	8002a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f043 0220 	orr.w	r2, r3, #32
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e007      	b.n	8002a8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a86:	2b40      	cmp	r3, #64	; 0x40
 8002a88:	d1b5      	bne.n	80029f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aaa:	d11b      	bne.n	8002ae4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ab4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f043 0204 	orr.w	r2, r3, #4
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0cc      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b08:	4b68      	ldr	r3, [pc, #416]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d90c      	bls.n	8002b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b16:	4b65      	ldr	r3, [pc, #404]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1e:	4b63      	ldr	r3, [pc, #396]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0b8      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d020      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b48:	4b59      	ldr	r3, [pc, #356]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a58      	ldr	r2, [pc, #352]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b60:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a52      	ldr	r2, [pc, #328]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b6c:	4b50      	ldr	r3, [pc, #320]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	494d      	ldr	r1, [pc, #308]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d044      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d107      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	4b47      	ldr	r3, [pc, #284]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d119      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e07f      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d003      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d107      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e06f      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc2:	4b3b      	ldr	r3, [pc, #236]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e067      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd2:	4b37      	ldr	r3, [pc, #220]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f023 0203 	bic.w	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4934      	ldr	r1, [pc, #208]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be4:	f7fe fa18 	bl	8001018 <HAL_GetTick>
 8002be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bec:	f7fe fa14 	bl	8001018 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e04f      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	4b2b      	ldr	r3, [pc, #172]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 020c 	and.w	r2, r3, #12
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d1eb      	bne.n	8002bec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c14:	4b25      	ldr	r3, [pc, #148]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d20c      	bcs.n	8002c3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c22:	4b22      	ldr	r3, [pc, #136]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2a:	4b20      	ldr	r3, [pc, #128]	; (8002cac <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e032      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4916      	ldr	r1, [pc, #88]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	490e      	ldr	r1, [pc, #56]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c7a:	f000 f855 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	091b      	lsrs	r3, r3, #4
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	490a      	ldr	r1, [pc, #40]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c8c:	5ccb      	ldrb	r3, [r1, r3]
 8002c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c92:	4a09      	ldr	r2, [pc, #36]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe f978 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40023c00 	.word	0x40023c00
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	08005d6c 	.word	0x08005d6c
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	20000004 	.word	0x20000004

08002cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20000000 	.word	0x20000000

08002cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cdc:	f7ff fff0 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	0a9b      	lsrs	r3, r3, #10
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	4903      	ldr	r1, [pc, #12]	; (8002cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	08005d7c 	.word	0x08005d7c

08002d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d04:	f7ff ffdc 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	0b5b      	lsrs	r3, r3, #13
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	4903      	ldr	r1, [pc, #12]	; (8002d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d16:	5ccb      	ldrb	r3, [r1, r3]
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40023800 	.word	0x40023800
 8002d24:	08005d7c 	.word	0x08005d7c

08002d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d2c:	b0ae      	sub	sp, #184	; 0xb8
 8002d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d4e:	4bcb      	ldr	r3, [pc, #812]	; (800307c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b0c      	cmp	r3, #12
 8002d58:	f200 8206 	bhi.w	8003168 <HAL_RCC_GetSysClockFreq+0x440>
 8002d5c:	a201      	add	r2, pc, #4	; (adr r2, 8002d64 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d62:	bf00      	nop
 8002d64:	08002d99 	.word	0x08002d99
 8002d68:	08003169 	.word	0x08003169
 8002d6c:	08003169 	.word	0x08003169
 8002d70:	08003169 	.word	0x08003169
 8002d74:	08002da1 	.word	0x08002da1
 8002d78:	08003169 	.word	0x08003169
 8002d7c:	08003169 	.word	0x08003169
 8002d80:	08003169 	.word	0x08003169
 8002d84:	08002da9 	.word	0x08002da9
 8002d88:	08003169 	.word	0x08003169
 8002d8c:	08003169 	.word	0x08003169
 8002d90:	08003169 	.word	0x08003169
 8002d94:	08002f99 	.word	0x08002f99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d98:	4bb9      	ldr	r3, [pc, #740]	; (8003080 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002d9e:	e1e7      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002da0:	4bb8      	ldr	r3, [pc, #736]	; (8003084 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002da2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002da6:	e1e3      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002da8:	4bb4      	ldr	r3, [pc, #720]	; (800307c <HAL_RCC_GetSysClockFreq+0x354>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002db4:	4bb1      	ldr	r3, [pc, #708]	; (800307c <HAL_RCC_GetSysClockFreq+0x354>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d071      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc0:	4bae      	ldr	r3, [pc, #696]	; (800307c <HAL_RCC_GetSysClockFreq+0x354>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	099b      	lsrs	r3, r3, #6
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dcc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002de2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002de6:	4622      	mov	r2, r4
 8002de8:	462b      	mov	r3, r5
 8002dea:	f04f 0000 	mov.w	r0, #0
 8002dee:	f04f 0100 	mov.w	r1, #0
 8002df2:	0159      	lsls	r1, r3, #5
 8002df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df8:	0150      	lsls	r0, r2, #5
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4621      	mov	r1, r4
 8002e00:	1a51      	subs	r1, r2, r1
 8002e02:	6439      	str	r1, [r7, #64]	; 0x40
 8002e04:	4629      	mov	r1, r5
 8002e06:	eb63 0301 	sbc.w	r3, r3, r1
 8002e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e18:	4649      	mov	r1, r9
 8002e1a:	018b      	lsls	r3, r1, #6
 8002e1c:	4641      	mov	r1, r8
 8002e1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e22:	4641      	mov	r1, r8
 8002e24:	018a      	lsls	r2, r1, #6
 8002e26:	4641      	mov	r1, r8
 8002e28:	1a51      	subs	r1, r2, r1
 8002e2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e2c:	4649      	mov	r1, r9
 8002e2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e40:	4649      	mov	r1, r9
 8002e42:	00cb      	lsls	r3, r1, #3
 8002e44:	4641      	mov	r1, r8
 8002e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e4a:	4641      	mov	r1, r8
 8002e4c:	00ca      	lsls	r2, r1, #3
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4619      	mov	r1, r3
 8002e52:	4603      	mov	r3, r0
 8002e54:	4622      	mov	r2, r4
 8002e56:	189b      	adds	r3, r3, r2
 8002e58:	633b      	str	r3, [r7, #48]	; 0x30
 8002e5a:	462b      	mov	r3, r5
 8002e5c:	460a      	mov	r2, r1
 8002e5e:	eb42 0303 	adc.w	r3, r2, r3
 8002e62:	637b      	str	r3, [r7, #52]	; 0x34
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e70:	4629      	mov	r1, r5
 8002e72:	024b      	lsls	r3, r1, #9
 8002e74:	4621      	mov	r1, r4
 8002e76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e7a:	4621      	mov	r1, r4
 8002e7c:	024a      	lsls	r2, r1, #9
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e94:	f7fd fa14 	bl	80002c0 <__aeabi_uldivmod>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ea2:	e067      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea4:	4b75      	ldr	r3, [pc, #468]	; (800307c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	099b      	lsrs	r3, r3, #6
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002eb0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002eb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ebc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ec2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002ec6:	4622      	mov	r2, r4
 8002ec8:	462b      	mov	r3, r5
 8002eca:	f04f 0000 	mov.w	r0, #0
 8002ece:	f04f 0100 	mov.w	r1, #0
 8002ed2:	0159      	lsls	r1, r3, #5
 8002ed4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed8:	0150      	lsls	r0, r2, #5
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4621      	mov	r1, r4
 8002ee0:	1a51      	subs	r1, r2, r1
 8002ee2:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002ef8:	4649      	mov	r1, r9
 8002efa:	018b      	lsls	r3, r1, #6
 8002efc:	4641      	mov	r1, r8
 8002efe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f02:	4641      	mov	r1, r8
 8002f04:	018a      	lsls	r2, r1, #6
 8002f06:	4641      	mov	r1, r8
 8002f08:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f0c:	4649      	mov	r1, r9
 8002f0e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f26:	4692      	mov	sl, r2
 8002f28:	469b      	mov	fp, r3
 8002f2a:	4623      	mov	r3, r4
 8002f2c:	eb1a 0303 	adds.w	r3, sl, r3
 8002f30:	623b      	str	r3, [r7, #32]
 8002f32:	462b      	mov	r3, r5
 8002f34:	eb4b 0303 	adc.w	r3, fp, r3
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f46:	4629      	mov	r1, r5
 8002f48:	028b      	lsls	r3, r1, #10
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f50:	4621      	mov	r1, r4
 8002f52:	028a      	lsls	r2, r1, #10
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	673b      	str	r3, [r7, #112]	; 0x70
 8002f60:	677a      	str	r2, [r7, #116]	; 0x74
 8002f62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f66:	f7fd f9ab 	bl	80002c0 <__aeabi_uldivmod>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4613      	mov	r3, r2
 8002f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f74:	4b41      	ldr	r3, [pc, #260]	; (800307c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	3301      	adds	r3, #1
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f96:	e0eb      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f98:	4b38      	ldr	r3, [pc, #224]	; (800307c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fa4:	4b35      	ldr	r3, [pc, #212]	; (800307c <HAL_RCC_GetSysClockFreq+0x354>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d06b      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb0:	4b32      	ldr	r3, [pc, #200]	; (800307c <HAL_RCC_GetSysClockFreq+0x354>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	099b      	lsrs	r3, r3, #6
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc2:	663b      	str	r3, [r7, #96]	; 0x60
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	667b      	str	r3, [r7, #100]	; 0x64
 8002fc8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002fcc:	4622      	mov	r2, r4
 8002fce:	462b      	mov	r3, r5
 8002fd0:	f04f 0000 	mov.w	r0, #0
 8002fd4:	f04f 0100 	mov.w	r1, #0
 8002fd8:	0159      	lsls	r1, r3, #5
 8002fda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fde:	0150      	lsls	r0, r2, #5
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	1a51      	subs	r1, r2, r1
 8002fe8:	61b9      	str	r1, [r7, #24]
 8002fea:	4629      	mov	r1, r5
 8002fec:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ffe:	4659      	mov	r1, fp
 8003000:	018b      	lsls	r3, r1, #6
 8003002:	4651      	mov	r1, sl
 8003004:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003008:	4651      	mov	r1, sl
 800300a:	018a      	lsls	r2, r1, #6
 800300c:	4651      	mov	r1, sl
 800300e:	ebb2 0801 	subs.w	r8, r2, r1
 8003012:	4659      	mov	r1, fp
 8003014:	eb63 0901 	sbc.w	r9, r3, r1
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003024:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003028:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800302c:	4690      	mov	r8, r2
 800302e:	4699      	mov	r9, r3
 8003030:	4623      	mov	r3, r4
 8003032:	eb18 0303 	adds.w	r3, r8, r3
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	462b      	mov	r3, r5
 800303a:	eb49 0303 	adc.w	r3, r9, r3
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800304c:	4629      	mov	r1, r5
 800304e:	024b      	lsls	r3, r1, #9
 8003050:	4621      	mov	r1, r4
 8003052:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003056:	4621      	mov	r1, r4
 8003058:	024a      	lsls	r2, r1, #9
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003062:	2200      	movs	r2, #0
 8003064:	65bb      	str	r3, [r7, #88]	; 0x58
 8003066:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003068:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800306c:	f7fd f928 	bl	80002c0 <__aeabi_uldivmod>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4613      	mov	r3, r2
 8003076:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800307a:	e065      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x420>
 800307c:	40023800 	.word	0x40023800
 8003080:	00f42400 	.word	0x00f42400
 8003084:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003088:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <HAL_RCC_GetSysClockFreq+0x458>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	2200      	movs	r2, #0
 8003090:	4618      	mov	r0, r3
 8003092:	4611      	mov	r1, r2
 8003094:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003098:	653b      	str	r3, [r7, #80]	; 0x50
 800309a:	2300      	movs	r3, #0
 800309c:	657b      	str	r3, [r7, #84]	; 0x54
 800309e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80030a2:	4642      	mov	r2, r8
 80030a4:	464b      	mov	r3, r9
 80030a6:	f04f 0000 	mov.w	r0, #0
 80030aa:	f04f 0100 	mov.w	r1, #0
 80030ae:	0159      	lsls	r1, r3, #5
 80030b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b4:	0150      	lsls	r0, r2, #5
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4641      	mov	r1, r8
 80030bc:	1a51      	subs	r1, r2, r1
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	4649      	mov	r1, r9
 80030c2:	eb63 0301 	sbc.w	r3, r3, r1
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030d4:	4659      	mov	r1, fp
 80030d6:	018b      	lsls	r3, r1, #6
 80030d8:	4651      	mov	r1, sl
 80030da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030de:	4651      	mov	r1, sl
 80030e0:	018a      	lsls	r2, r1, #6
 80030e2:	4651      	mov	r1, sl
 80030e4:	1a54      	subs	r4, r2, r1
 80030e6:	4659      	mov	r1, fp
 80030e8:	eb63 0501 	sbc.w	r5, r3, r1
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	00eb      	lsls	r3, r5, #3
 80030f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030fa:	00e2      	lsls	r2, r4, #3
 80030fc:	4614      	mov	r4, r2
 80030fe:	461d      	mov	r5, r3
 8003100:	4643      	mov	r3, r8
 8003102:	18e3      	adds	r3, r4, r3
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	464b      	mov	r3, r9
 8003108:	eb45 0303 	adc.w	r3, r5, r3
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9d7 4500 	ldrd	r4, r5, [r7]
 800311a:	4629      	mov	r1, r5
 800311c:	028b      	lsls	r3, r1, #10
 800311e:	4621      	mov	r1, r4
 8003120:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003124:	4621      	mov	r1, r4
 8003126:	028a      	lsls	r2, r1, #10
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003130:	2200      	movs	r2, #0
 8003132:	64bb      	str	r3, [r7, #72]	; 0x48
 8003134:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003136:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800313a:	f7fd f8c1 	bl	80002c0 <__aeabi_uldivmod>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4613      	mov	r3, r2
 8003144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003148:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <HAL_RCC_GetSysClockFreq+0x458>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	0f1b      	lsrs	r3, r3, #28
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003156:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800315a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800315e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003162:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003166:	e003      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_RCC_GetSysClockFreq+0x45c>)
 800316a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800316e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003170:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003174:	4618      	mov	r0, r3
 8003176:	37b8      	adds	r7, #184	; 0xb8
 8003178:	46bd      	mov	sp, r7
 800317a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800
 8003184:	00f42400 	.word	0x00f42400

08003188 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e28d      	b.n	80036b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8083 	beq.w	80032ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031a8:	4b94      	ldr	r3, [pc, #592]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d019      	beq.n	80031e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031b4:	4b91      	ldr	r3, [pc, #580]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d106      	bne.n	80031ce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031c0:	4b8e      	ldr	r3, [pc, #568]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031cc:	d00c      	beq.n	80031e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ce:	4b8b      	ldr	r3, [pc, #556]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031d6:	2b0c      	cmp	r3, #12
 80031d8:	d112      	bne.n	8003200 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031da:	4b88      	ldr	r3, [pc, #544]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031e6:	d10b      	bne.n	8003200 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e8:	4b84      	ldr	r3, [pc, #528]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d05b      	beq.n	80032ac <HAL_RCC_OscConfig+0x124>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d157      	bne.n	80032ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e25a      	b.n	80036b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003208:	d106      	bne.n	8003218 <HAL_RCC_OscConfig+0x90>
 800320a:	4b7c      	ldr	r3, [pc, #496]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a7b      	ldr	r2, [pc, #492]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 8003210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	e01d      	b.n	8003254 <HAL_RCC_OscConfig+0xcc>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003220:	d10c      	bne.n	800323c <HAL_RCC_OscConfig+0xb4>
 8003222:	4b76      	ldr	r3, [pc, #472]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a75      	ldr	r2, [pc, #468]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 8003228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	4b73      	ldr	r3, [pc, #460]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a72      	ldr	r2, [pc, #456]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 8003234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e00b      	b.n	8003254 <HAL_RCC_OscConfig+0xcc>
 800323c:	4b6f      	ldr	r3, [pc, #444]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a6e      	ldr	r2, [pc, #440]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 8003242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	4b6c      	ldr	r3, [pc, #432]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a6b      	ldr	r2, [pc, #428]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 800324e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d013      	beq.n	8003284 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fd fedc 	bl	8001018 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003264:	f7fd fed8 	bl	8001018 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b64      	cmp	r3, #100	; 0x64
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e21f      	b.n	80036b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003276:	4b61      	ldr	r3, [pc, #388]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0xdc>
 8003282:	e014      	b.n	80032ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7fd fec8 	bl	8001018 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800328c:	f7fd fec4 	bl	8001018 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	; 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e20b      	b.n	80036b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329e:	4b57      	ldr	r3, [pc, #348]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x104>
 80032aa:	e000      	b.n	80032ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d06f      	beq.n	800339a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032ba:	4b50      	ldr	r3, [pc, #320]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d017      	beq.n	80032f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032c6:	4b4d      	ldr	r3, [pc, #308]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d105      	bne.n	80032de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032d2:	4b4a      	ldr	r3, [pc, #296]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032de:	4b47      	ldr	r3, [pc, #284]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	d11c      	bne.n	8003324 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ea:	4b44      	ldr	r3, [pc, #272]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d116      	bne.n	8003324 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	4b41      	ldr	r3, [pc, #260]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <HAL_RCC_OscConfig+0x186>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e1d3      	b.n	80036b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330e:	4b3b      	ldr	r3, [pc, #236]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4937      	ldr	r1, [pc, #220]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	e03a      	b.n	800339a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d020      	beq.n	800336e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332c:	4b34      	ldr	r3, [pc, #208]	; (8003400 <HAL_RCC_OscConfig+0x278>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003332:	f7fd fe71 	bl	8001018 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800333a:	f7fd fe6d 	bl	8001018 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e1b4      	b.n	80036b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003358:	4b28      	ldr	r3, [pc, #160]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4925      	ldr	r1, [pc, #148]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]
 800336c:	e015      	b.n	800339a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336e:	4b24      	ldr	r3, [pc, #144]	; (8003400 <HAL_RCC_OscConfig+0x278>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fd fe50 	bl	8001018 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800337c:	f7fd fe4c 	bl	8001018 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e193      	b.n	80036b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d036      	beq.n	8003414 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d016      	beq.n	80033dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fd fe30 	bl	8001018 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033bc:	f7fd fe2c 	bl	8001018 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e173      	b.n	80036b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80033d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x234>
 80033da:	e01b      	b.n	8003414 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_RCC_OscConfig+0x27c>)
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e2:	f7fd fe19 	bl	8001018 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e8:	e00e      	b.n	8003408 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ea:	f7fd fe15 	bl	8001018 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d907      	bls.n	8003408 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e15c      	b.n	80036b6 <HAL_RCC_OscConfig+0x52e>
 80033fc:	40023800 	.word	0x40023800
 8003400:	42470000 	.word	0x42470000
 8003404:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003408:	4b8a      	ldr	r3, [pc, #552]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 800340a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ea      	bne.n	80033ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 8097 	beq.w	8003550 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003426:	4b83      	ldr	r3, [pc, #524]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10f      	bne.n	8003452 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	4b7f      	ldr	r3, [pc, #508]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a7e      	ldr	r2, [pc, #504]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 800343c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
 8003442:	4b7c      	ldr	r3, [pc, #496]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344e:	2301      	movs	r3, #1
 8003450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003452:	4b79      	ldr	r3, [pc, #484]	; (8003638 <HAL_RCC_OscConfig+0x4b0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d118      	bne.n	8003490 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800345e:	4b76      	ldr	r3, [pc, #472]	; (8003638 <HAL_RCC_OscConfig+0x4b0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a75      	ldr	r2, [pc, #468]	; (8003638 <HAL_RCC_OscConfig+0x4b0>)
 8003464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346a:	f7fd fdd5 	bl	8001018 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003472:	f7fd fdd1 	bl	8001018 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e118      	b.n	80036b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003484:	4b6c      	ldr	r3, [pc, #432]	; (8003638 <HAL_RCC_OscConfig+0x4b0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d106      	bne.n	80034a6 <HAL_RCC_OscConfig+0x31e>
 8003498:	4b66      	ldr	r3, [pc, #408]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	4a65      	ldr	r2, [pc, #404]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6713      	str	r3, [r2, #112]	; 0x70
 80034a4:	e01c      	b.n	80034e0 <HAL_RCC_OscConfig+0x358>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x340>
 80034ae:	4b61      	ldr	r3, [pc, #388]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	4a60      	ldr	r2, [pc, #384]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ba:	4b5e      	ldr	r3, [pc, #376]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	4a5d      	ldr	r2, [pc, #372]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	6713      	str	r3, [r2, #112]	; 0x70
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0x358>
 80034c8:	4b5a      	ldr	r3, [pc, #360]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	4a59      	ldr	r2, [pc, #356]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	6713      	str	r3, [r2, #112]	; 0x70
 80034d4:	4b57      	ldr	r3, [pc, #348]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	4a56      	ldr	r2, [pc, #344]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 80034da:	f023 0304 	bic.w	r3, r3, #4
 80034de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d015      	beq.n	8003514 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e8:	f7fd fd96 	bl	8001018 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ee:	e00a      	b.n	8003506 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f0:	f7fd fd92 	bl	8001018 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e0d7      	b.n	80036b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003506:	4b4b      	ldr	r3, [pc, #300]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0ee      	beq.n	80034f0 <HAL_RCC_OscConfig+0x368>
 8003512:	e014      	b.n	800353e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003514:	f7fd fd80 	bl	8001018 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800351a:	e00a      	b.n	8003532 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351c:	f7fd fd7c 	bl	8001018 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e0c1      	b.n	80036b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003532:	4b40      	ldr	r3, [pc, #256]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1ee      	bne.n	800351c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800353e:	7dfb      	ldrb	r3, [r7, #23]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d105      	bne.n	8003550 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003544:	4b3b      	ldr	r3, [pc, #236]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	4a3a      	ldr	r2, [pc, #232]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 800354a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80ad 	beq.w	80036b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800355a:	4b36      	ldr	r3, [pc, #216]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	2b08      	cmp	r3, #8
 8003564:	d060      	beq.n	8003628 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d145      	bne.n	80035fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356e:	4b33      	ldr	r3, [pc, #204]	; (800363c <HAL_RCC_OscConfig+0x4b4>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fd fd50 	bl	8001018 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357c:	f7fd fd4c 	bl	8001018 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e093      	b.n	80036b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	4b29      	ldr	r3, [pc, #164]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69da      	ldr	r2, [r3, #28]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	019b      	lsls	r3, r3, #6
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	3b01      	subs	r3, #1
 80035b4:	041b      	lsls	r3, r3, #16
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	061b      	lsls	r3, r3, #24
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	071b      	lsls	r3, r3, #28
 80035c6:	491b      	ldr	r1, [pc, #108]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035cc:	4b1b      	ldr	r3, [pc, #108]	; (800363c <HAL_RCC_OscConfig+0x4b4>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d2:	f7fd fd21 	bl	8001018 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035da:	f7fd fd1d 	bl	8001018 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e064      	b.n	80036b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ec:	4b11      	ldr	r3, [pc, #68]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f0      	beq.n	80035da <HAL_RCC_OscConfig+0x452>
 80035f8:	e05c      	b.n	80036b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fa:	4b10      	ldr	r3, [pc, #64]	; (800363c <HAL_RCC_OscConfig+0x4b4>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fd fd0a 	bl	8001018 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003608:	f7fd fd06 	bl	8001018 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e04d      	b.n	80036b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <HAL_RCC_OscConfig+0x4ac>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x480>
 8003626:	e045      	b.n	80036b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d107      	bne.n	8003640 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e040      	b.n	80036b6 <HAL_RCC_OscConfig+0x52e>
 8003634:	40023800 	.word	0x40023800
 8003638:	40007000 	.word	0x40007000
 800363c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003640:	4b1f      	ldr	r3, [pc, #124]	; (80036c0 <HAL_RCC_OscConfig+0x538>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d030      	beq.n	80036b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003658:	429a      	cmp	r2, r3
 800365a:	d129      	bne.n	80036b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d122      	bne.n	80036b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003670:	4013      	ands	r3, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003676:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003678:	4293      	cmp	r3, r2
 800367a:	d119      	bne.n	80036b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	085b      	lsrs	r3, r3, #1
 8003688:	3b01      	subs	r3, #1
 800368a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d10f      	bne.n	80036b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d107      	bne.n	80036b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800

080036c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e03f      	b.n	8003756 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fd fb78 	bl	8000de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2224      	movs	r2, #36	; 0x24
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 fe81 	bl	8004410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800371c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695a      	ldr	r2, [r3, #20]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800372c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800373c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b08a      	sub	sp, #40	; 0x28
 8003762:	af02      	add	r7, sp, #8
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	603b      	str	r3, [r7, #0]
 800376a:	4613      	mov	r3, r2
 800376c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b20      	cmp	r3, #32
 800377c:	d17c      	bne.n	8003878 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <HAL_UART_Transmit+0x2c>
 8003784:	88fb      	ldrh	r3, [r7, #6]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e075      	b.n	800387a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_UART_Transmit+0x3e>
 8003798:	2302      	movs	r3, #2
 800379a:	e06e      	b.n	800387a <HAL_UART_Transmit+0x11c>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2221      	movs	r2, #33	; 0x21
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037b2:	f7fd fc31 	bl	8001018 <HAL_GetTick>
 80037b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	88fa      	ldrh	r2, [r7, #6]
 80037bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	88fa      	ldrh	r2, [r7, #6]
 80037c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037cc:	d108      	bne.n	80037e0 <HAL_UART_Transmit+0x82>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d104      	bne.n	80037e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	e003      	b.n	80037e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037f0:	e02a      	b.n	8003848 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2200      	movs	r2, #0
 80037fa:	2180      	movs	r1, #128	; 0x80
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fbc1 	bl	8003f84 <UART_WaitOnFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e036      	b.n	800387a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003820:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	3302      	adds	r3, #2
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	e007      	b.n	800383a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	3301      	adds	r3, #1
 8003838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1cf      	bne.n	80037f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2200      	movs	r2, #0
 800385a:	2140      	movs	r1, #64	; 0x40
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fb91 	bl	8003f84 <UART_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e006      	b.n	800387a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	e000      	b.n	800387a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b08a      	sub	sp, #40	; 0x28
 8003886:	af02      	add	r7, sp, #8
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	603b      	str	r3, [r7, #0]
 800388e:	4613      	mov	r3, r2
 8003890:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b20      	cmp	r3, #32
 80038a0:	f040 808c 	bne.w	80039bc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <HAL_UART_Receive+0x2e>
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e084      	b.n	80039be <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_UART_Receive+0x40>
 80038be:	2302      	movs	r3, #2
 80038c0:	e07d      	b.n	80039be <HAL_UART_Receive+0x13c>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2222      	movs	r2, #34	; 0x22
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038de:	f7fd fb9b 	bl	8001018 <HAL_GetTick>
 80038e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	88fa      	ldrh	r2, [r7, #6]
 80038e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	88fa      	ldrh	r2, [r7, #6]
 80038ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f8:	d108      	bne.n	800390c <HAL_UART_Receive+0x8a>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d104      	bne.n	800390c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	e003      	b.n	8003914 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003910:	2300      	movs	r3, #0
 8003912:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800391c:	e043      	b.n	80039a6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2200      	movs	r2, #0
 8003926:	2120      	movs	r1, #32
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 fb2b 	bl	8003f84 <UART_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e042      	b.n	80039be <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10c      	bne.n	8003958 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	b29b      	uxth	r3, r3
 8003946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394a:	b29a      	uxth	r2, r3
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	3302      	adds	r3, #2
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	e01f      	b.n	8003998 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003960:	d007      	beq.n	8003972 <HAL_UART_Receive+0xf0>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10a      	bne.n	8003980 <HAL_UART_Receive+0xfe>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	b2da      	uxtb	r2, r3
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	701a      	strb	r2, [r3, #0]
 800397e:	e008      	b.n	8003992 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800398c:	b2da      	uxtb	r2, r3
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	3301      	adds	r3, #1
 8003996:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1b6      	bne.n	800391e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e000      	b.n	80039be <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80039bc:	2302      	movs	r3, #2
  }
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	4613      	mov	r3, r2
 80039d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d11d      	bne.n	8003a1c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <HAL_UART_Receive_IT+0x26>
 80039e6:	88fb      	ldrh	r3, [r7, #6]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e016      	b.n	8003a1e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_UART_Receive_IT+0x38>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e00f      	b.n	8003a1e <HAL_UART_Receive_IT+0x58>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 fb24 	bl	8004060 <UART_Start_Receive_IT>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	e000      	b.n	8003a1e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003a1c:	2302      	movs	r3, #2
  }
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b0ba      	sub	sp, #232	; 0xe8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <HAL_UART_IRQHandler+0x66>
 8003a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fc07 	bl	800429a <UART_Receive_IT>
      return;
 8003a8c:	e256      	b.n	8003f3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 80de 	beq.w	8003c54 <HAL_UART_IRQHandler+0x22c>
 8003a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80d1 	beq.w	8003c54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <HAL_UART_IRQHandler+0xae>
 8003abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f043 0201 	orr.w	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00b      	beq.n	8003afa <HAL_UART_IRQHandler+0xd2>
 8003ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d005      	beq.n	8003afa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f043 0202 	orr.w	r2, r3, #2
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00b      	beq.n	8003b1e <HAL_UART_IRQHandler+0xf6>
 8003b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f043 0204 	orr.w	r2, r3, #4
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d011      	beq.n	8003b4e <HAL_UART_IRQHandler+0x126>
 8003b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d105      	bne.n	8003b42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d005      	beq.n	8003b4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f043 0208 	orr.w	r2, r3, #8
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 81ed 	beq.w	8003f32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_UART_IRQHandler+0x14e>
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fb92 	bl	800429a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d103      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x17a>
 8003b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d04f      	beq.n	8003c42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fa9a 	bl	80040dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb2:	2b40      	cmp	r3, #64	; 0x40
 8003bb4:	d141      	bne.n	8003c3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3314      	adds	r3, #20
 8003bbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3314      	adds	r3, #20
 8003bde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003be2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1d9      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d013      	beq.n	8003c32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	4a7d      	ldr	r2, [pc, #500]	; (8003e04 <HAL_UART_IRQHandler+0x3dc>)
 8003c10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fd fded 	bl	80017f6 <HAL_DMA_Abort_IT>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d016      	beq.n	8003c50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c30:	e00e      	b.n	8003c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f990 	bl	8003f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c38:	e00a      	b.n	8003c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f98c 	bl	8003f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c40:	e006      	b.n	8003c50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f988 	bl	8003f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c4e:	e170      	b.n	8003f32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c50:	bf00      	nop
    return;
 8003c52:	e16e      	b.n	8003f32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	f040 814a 	bne.w	8003ef2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 8143 	beq.w	8003ef2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 813c 	beq.w	8003ef2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	2b40      	cmp	r3, #64	; 0x40
 8003c9c:	f040 80b4 	bne.w	8003e08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8140 	beq.w	8003f36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	f080 8139 	bcs.w	8003f36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd6:	f000 8088 	beq.w	8003dea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	330c      	adds	r3, #12
 8003d02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1d9      	bne.n	8003cda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3314      	adds	r3, #20
 8003d2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3314      	adds	r3, #20
 8003d46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e1      	bne.n	8003d26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3314      	adds	r3, #20
 8003d68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3314      	adds	r3, #20
 8003d82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e3      	bne.n	8003d62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	330c      	adds	r3, #12
 8003dae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dba:	f023 0310 	bic.w	r3, r3, #16
 8003dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003dcc:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dd4:	e841 2300 	strex	r3, r2, [r1]
 8003dd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e3      	bne.n	8003da8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fd fc96 	bl	8001716 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	4619      	mov	r1, r3
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f8b6 	bl	8003f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e00:	e099      	b.n	8003f36 <HAL_UART_IRQHandler+0x50e>
 8003e02:	bf00      	nop
 8003e04:	080041a3 	.word	0x080041a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 808b 	beq.w	8003f3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8086 	beq.w	8003f3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	330c      	adds	r3, #12
 8003e34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	330c      	adds	r3, #12
 8003e4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e52:	647a      	str	r2, [r7, #68]	; 0x44
 8003e54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e5a:	e841 2300 	strex	r3, r2, [r1]
 8003e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1e3      	bne.n	8003e2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3314      	adds	r3, #20
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	e853 3f00 	ldrex	r3, [r3]
 8003e74:	623b      	str	r3, [r7, #32]
   return(result);
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3314      	adds	r3, #20
 8003e86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e8a:	633a      	str	r2, [r7, #48]	; 0x30
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e3      	bne.n	8003e66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	e853 3f00 	ldrex	r3, [r3]
 8003eba:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0310 	bic.w	r3, r3, #16
 8003ec2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	330c      	adds	r3, #12
 8003ecc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ed0:	61fa      	str	r2, [r7, #28]
 8003ed2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed4:	69b9      	ldr	r1, [r7, #24]
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	e841 2300 	strex	r3, r2, [r1]
 8003edc:	617b      	str	r3, [r7, #20]
   return(result);
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e3      	bne.n	8003eac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ee4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ee8:	4619      	mov	r1, r3
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f83e 	bl	8003f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ef0:	e023      	b.n	8003f3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d009      	beq.n	8003f12 <HAL_UART_IRQHandler+0x4ea>
 8003efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f95d 	bl	80041ca <UART_Transmit_IT>
    return;
 8003f10:	e014      	b.n	8003f3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00e      	beq.n	8003f3c <HAL_UART_IRQHandler+0x514>
 8003f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d008      	beq.n	8003f3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f99d 	bl	800426a <UART_EndTransmit_IT>
    return;
 8003f30:	e004      	b.n	8003f3c <HAL_UART_IRQHandler+0x514>
    return;
 8003f32:	bf00      	nop
 8003f34:	e002      	b.n	8003f3c <HAL_UART_IRQHandler+0x514>
      return;
 8003f36:	bf00      	nop
 8003f38:	e000      	b.n	8003f3c <HAL_UART_IRQHandler+0x514>
      return;
 8003f3a:	bf00      	nop
  }
}
 8003f3c:	37e8      	adds	r7, #232	; 0xe8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop

08003f44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b090      	sub	sp, #64	; 0x40
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f94:	e050      	b.n	8004038 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d04c      	beq.n	8004038 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fa4:	f7fd f838 	bl	8001018 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d241      	bcs.n	8004038 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fd4:	637a      	str	r2, [r7, #52]	; 0x34
 8003fd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e5      	bne.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3314      	adds	r3, #20
 8003fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3314      	adds	r3, #20
 8004006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004008:	623a      	str	r2, [r7, #32]
 800400a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	69f9      	ldr	r1, [r7, #28]
 800400e:	6a3a      	ldr	r2, [r7, #32]
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	61bb      	str	r3, [r7, #24]
   return(result);
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e5      	bne.n	8003fe8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e00f      	b.n	8004058 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4013      	ands	r3, r2
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	429a      	cmp	r2, r3
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	79fb      	ldrb	r3, [r7, #7]
 8004052:	429a      	cmp	r2, r3
 8004054:	d09f      	beq.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3740      	adds	r7, #64	; 0x40
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	4613      	mov	r3, r2
 800406c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	88fa      	ldrh	r2, [r7, #6]
 8004078:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	88fa      	ldrh	r2, [r7, #6]
 800407e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2222      	movs	r2, #34	; 0x22
 800408a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0201 	orr.w	r2, r2, #1
 80040bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0220 	orr.w	r2, r2, #32
 80040cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040dc:	b480      	push	{r7}
 80040de:	b095      	sub	sp, #84	; 0x54
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	330c      	adds	r3, #12
 80040ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ee:	e853 3f00 	ldrex	r3, [r3]
 80040f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	330c      	adds	r3, #12
 8004102:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004104:	643a      	str	r2, [r7, #64]	; 0x40
 8004106:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004108:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800410a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800410c:	e841 2300 	strex	r3, r2, [r1]
 8004110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e5      	bne.n	80040e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3314      	adds	r3, #20
 800411e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	61fb      	str	r3, [r7, #28]
   return(result);
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f023 0301 	bic.w	r3, r3, #1
 800412e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3314      	adds	r3, #20
 8004136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004138:	62fa      	str	r2, [r7, #44]	; 0x2c
 800413a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800413e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e5      	bne.n	8004118 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	2b01      	cmp	r3, #1
 8004152:	d119      	bne.n	8004188 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	e853 3f00 	ldrex	r3, [r3]
 8004162:	60bb      	str	r3, [r7, #8]
   return(result);
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f023 0310 	bic.w	r3, r3, #16
 800416a:	647b      	str	r3, [r7, #68]	; 0x44
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	330c      	adds	r3, #12
 8004172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004174:	61ba      	str	r2, [r7, #24]
 8004176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004178:	6979      	ldr	r1, [r7, #20]
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	e841 2300 	strex	r3, r2, [r1]
 8004180:	613b      	str	r3, [r7, #16]
   return(result);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e5      	bne.n	8004154 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004196:	bf00      	nop
 8004198:	3754      	adds	r7, #84	; 0x54
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7ff fecb 	bl	8003f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b21      	cmp	r3, #33	; 0x21
 80041dc:	d13e      	bne.n	800425c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e6:	d114      	bne.n	8004212 <UART_Transmit_IT+0x48>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d110      	bne.n	8004212 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004204:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	1c9a      	adds	r2, r3, #2
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	621a      	str	r2, [r3, #32]
 8004210:	e008      	b.n	8004224 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	1c59      	adds	r1, r3, #1
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6211      	str	r1, [r2, #32]
 800421c:	781a      	ldrb	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b29b      	uxth	r3, r3
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	4619      	mov	r1, r3
 8004232:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10f      	bne.n	8004258 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004246:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004256:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800425c:	2302      	movs	r3, #2
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b082      	sub	sp, #8
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004280:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff fe5a 	bl	8003f44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b08c      	sub	sp, #48	; 0x30
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b22      	cmp	r3, #34	; 0x22
 80042ac:	f040 80ab 	bne.w	8004406 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b8:	d117      	bne.n	80042ea <UART_Receive_IT+0x50>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d113      	bne.n	80042ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d8:	b29a      	uxth	r2, r3
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	1c9a      	adds	r2, r3, #2
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	629a      	str	r2, [r3, #40]	; 0x28
 80042e8:	e026      	b.n	8004338 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fc:	d007      	beq.n	800430e <UART_Receive_IT+0x74>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <UART_Receive_IT+0x82>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	b2da      	uxtb	r2, r3
 8004316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	e008      	b.n	800432e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	b2db      	uxtb	r3, r3
 8004324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004328:	b2da      	uxtb	r2, r3
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29b      	uxth	r3, r3
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	4619      	mov	r1, r3
 8004346:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004348:	2b00      	cmp	r3, #0
 800434a:	d15a      	bne.n	8004402 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0220 	bic.w	r2, r2, #32
 800435a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800436a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695a      	ldr	r2, [r3, #20]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0201 	bic.w	r2, r2, #1
 800437a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	2b01      	cmp	r3, #1
 800438a:	d135      	bne.n	80043f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	330c      	adds	r3, #12
 8004398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	613b      	str	r3, [r7, #16]
   return(result);
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f023 0310 	bic.w	r3, r3, #16
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	330c      	adds	r3, #12
 80043b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b2:	623a      	str	r2, [r7, #32]
 80043b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	69f9      	ldr	r1, [r7, #28]
 80043b8:	6a3a      	ldr	r2, [r7, #32]
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	61bb      	str	r3, [r7, #24]
   return(result);
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e5      	bne.n	8004392 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d10a      	bne.n	80043ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043ee:	4619      	mov	r1, r3
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff fdbb 	bl	8003f6c <HAL_UARTEx_RxEventCallback>
 80043f6:	e002      	b.n	80043fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fc8b 	bl	8004d14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e002      	b.n	8004408 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	e000      	b.n	8004408 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004406:	2302      	movs	r3, #2
  }
}
 8004408:	4618      	mov	r0, r3
 800440a:	3730      	adds	r7, #48	; 0x30
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004414:	b0c0      	sub	sp, #256	; 0x100
 8004416:	af00      	add	r7, sp, #0
 8004418:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442c:	68d9      	ldr	r1, [r3, #12]
 800442e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	ea40 0301 	orr.w	r3, r0, r1
 8004438:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800443a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	431a      	orrs	r2, r3
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	431a      	orrs	r2, r3
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004468:	f021 010c 	bic.w	r1, r1, #12
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004476:	430b      	orrs	r3, r1
 8004478:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800447a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448a:	6999      	ldr	r1, [r3, #24]
 800448c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	ea40 0301 	orr.w	r3, r0, r1
 8004496:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b8f      	ldr	r3, [pc, #572]	; (80046dc <UART_SetConfig+0x2cc>)
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d005      	beq.n	80044b0 <UART_SetConfig+0xa0>
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4b8d      	ldr	r3, [pc, #564]	; (80046e0 <UART_SetConfig+0x2d0>)
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d104      	bne.n	80044ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044b0:	f7fe fc26 	bl	8002d00 <HAL_RCC_GetPCLK2Freq>
 80044b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044b8:	e003      	b.n	80044c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044ba:	f7fe fc0d 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 80044be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044cc:	f040 810c 	bne.w	80046e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044e2:	4622      	mov	r2, r4
 80044e4:	462b      	mov	r3, r5
 80044e6:	1891      	adds	r1, r2, r2
 80044e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80044ea:	415b      	adcs	r3, r3
 80044ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044f2:	4621      	mov	r1, r4
 80044f4:	eb12 0801 	adds.w	r8, r2, r1
 80044f8:	4629      	mov	r1, r5
 80044fa:	eb43 0901 	adc.w	r9, r3, r1
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800450a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800450e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004512:	4690      	mov	r8, r2
 8004514:	4699      	mov	r9, r3
 8004516:	4623      	mov	r3, r4
 8004518:	eb18 0303 	adds.w	r3, r8, r3
 800451c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004520:	462b      	mov	r3, r5
 8004522:	eb49 0303 	adc.w	r3, r9, r3
 8004526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800452a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004536:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800453a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800453e:	460b      	mov	r3, r1
 8004540:	18db      	adds	r3, r3, r3
 8004542:	653b      	str	r3, [r7, #80]	; 0x50
 8004544:	4613      	mov	r3, r2
 8004546:	eb42 0303 	adc.w	r3, r2, r3
 800454a:	657b      	str	r3, [r7, #84]	; 0x54
 800454c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004550:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004554:	f7fb feb4 	bl	80002c0 <__aeabi_uldivmod>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4b61      	ldr	r3, [pc, #388]	; (80046e4 <UART_SetConfig+0x2d4>)
 800455e:	fba3 2302 	umull	r2, r3, r3, r2
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	011c      	lsls	r4, r3, #4
 8004566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800456a:	2200      	movs	r2, #0
 800456c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004570:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004574:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004578:	4642      	mov	r2, r8
 800457a:	464b      	mov	r3, r9
 800457c:	1891      	adds	r1, r2, r2
 800457e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004580:	415b      	adcs	r3, r3
 8004582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004584:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004588:	4641      	mov	r1, r8
 800458a:	eb12 0a01 	adds.w	sl, r2, r1
 800458e:	4649      	mov	r1, r9
 8004590:	eb43 0b01 	adc.w	fp, r3, r1
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045a8:	4692      	mov	sl, r2
 80045aa:	469b      	mov	fp, r3
 80045ac:	4643      	mov	r3, r8
 80045ae:	eb1a 0303 	adds.w	r3, sl, r3
 80045b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045b6:	464b      	mov	r3, r9
 80045b8:	eb4b 0303 	adc.w	r3, fp, r3
 80045bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045d4:	460b      	mov	r3, r1
 80045d6:	18db      	adds	r3, r3, r3
 80045d8:	643b      	str	r3, [r7, #64]	; 0x40
 80045da:	4613      	mov	r3, r2
 80045dc:	eb42 0303 	adc.w	r3, r2, r3
 80045e0:	647b      	str	r3, [r7, #68]	; 0x44
 80045e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045ea:	f7fb fe69 	bl	80002c0 <__aeabi_uldivmod>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4611      	mov	r1, r2
 80045f4:	4b3b      	ldr	r3, [pc, #236]	; (80046e4 <UART_SetConfig+0x2d4>)
 80045f6:	fba3 2301 	umull	r2, r3, r3, r1
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	2264      	movs	r2, #100	; 0x64
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	1acb      	subs	r3, r1, r3
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800460a:	4b36      	ldr	r3, [pc, #216]	; (80046e4 <UART_SetConfig+0x2d4>)
 800460c:	fba3 2302 	umull	r2, r3, r3, r2
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004618:	441c      	add	r4, r3
 800461a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004624:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004628:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800462c:	4642      	mov	r2, r8
 800462e:	464b      	mov	r3, r9
 8004630:	1891      	adds	r1, r2, r2
 8004632:	63b9      	str	r1, [r7, #56]	; 0x38
 8004634:	415b      	adcs	r3, r3
 8004636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004638:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800463c:	4641      	mov	r1, r8
 800463e:	1851      	adds	r1, r2, r1
 8004640:	6339      	str	r1, [r7, #48]	; 0x30
 8004642:	4649      	mov	r1, r9
 8004644:	414b      	adcs	r3, r1
 8004646:	637b      	str	r3, [r7, #52]	; 0x34
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004654:	4659      	mov	r1, fp
 8004656:	00cb      	lsls	r3, r1, #3
 8004658:	4651      	mov	r1, sl
 800465a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800465e:	4651      	mov	r1, sl
 8004660:	00ca      	lsls	r2, r1, #3
 8004662:	4610      	mov	r0, r2
 8004664:	4619      	mov	r1, r3
 8004666:	4603      	mov	r3, r0
 8004668:	4642      	mov	r2, r8
 800466a:	189b      	adds	r3, r3, r2
 800466c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004670:	464b      	mov	r3, r9
 8004672:	460a      	mov	r2, r1
 8004674:	eb42 0303 	adc.w	r3, r2, r3
 8004678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004688:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800468c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004690:	460b      	mov	r3, r1
 8004692:	18db      	adds	r3, r3, r3
 8004694:	62bb      	str	r3, [r7, #40]	; 0x28
 8004696:	4613      	mov	r3, r2
 8004698:	eb42 0303 	adc.w	r3, r2, r3
 800469c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800469e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046a6:	f7fb fe0b 	bl	80002c0 <__aeabi_uldivmod>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <UART_SetConfig+0x2d4>)
 80046b0:	fba3 1302 	umull	r1, r3, r3, r2
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	2164      	movs	r1, #100	; 0x64
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	3332      	adds	r3, #50	; 0x32
 80046c2:	4a08      	ldr	r2, [pc, #32]	; (80046e4 <UART_SetConfig+0x2d4>)
 80046c4:	fba2 2303 	umull	r2, r3, r2, r3
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	f003 0207 	and.w	r2, r3, #7
 80046ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4422      	add	r2, r4
 80046d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046d8:	e106      	b.n	80048e8 <UART_SetConfig+0x4d8>
 80046da:	bf00      	nop
 80046dc:	40011000 	.word	0x40011000
 80046e0:	40011400 	.word	0x40011400
 80046e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046fa:	4642      	mov	r2, r8
 80046fc:	464b      	mov	r3, r9
 80046fe:	1891      	adds	r1, r2, r2
 8004700:	6239      	str	r1, [r7, #32]
 8004702:	415b      	adcs	r3, r3
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
 8004706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800470a:	4641      	mov	r1, r8
 800470c:	1854      	adds	r4, r2, r1
 800470e:	4649      	mov	r1, r9
 8004710:	eb43 0501 	adc.w	r5, r3, r1
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	00eb      	lsls	r3, r5, #3
 800471e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004722:	00e2      	lsls	r2, r4, #3
 8004724:	4614      	mov	r4, r2
 8004726:	461d      	mov	r5, r3
 8004728:	4643      	mov	r3, r8
 800472a:	18e3      	adds	r3, r4, r3
 800472c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004730:	464b      	mov	r3, r9
 8004732:	eb45 0303 	adc.w	r3, r5, r3
 8004736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800473a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004746:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004756:	4629      	mov	r1, r5
 8004758:	008b      	lsls	r3, r1, #2
 800475a:	4621      	mov	r1, r4
 800475c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004760:	4621      	mov	r1, r4
 8004762:	008a      	lsls	r2, r1, #2
 8004764:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004768:	f7fb fdaa 	bl	80002c0 <__aeabi_uldivmod>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4b60      	ldr	r3, [pc, #384]	; (80048f4 <UART_SetConfig+0x4e4>)
 8004772:	fba3 2302 	umull	r2, r3, r3, r2
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	011c      	lsls	r4, r3, #4
 800477a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800477e:	2200      	movs	r2, #0
 8004780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004784:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004788:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800478c:	4642      	mov	r2, r8
 800478e:	464b      	mov	r3, r9
 8004790:	1891      	adds	r1, r2, r2
 8004792:	61b9      	str	r1, [r7, #24]
 8004794:	415b      	adcs	r3, r3
 8004796:	61fb      	str	r3, [r7, #28]
 8004798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800479c:	4641      	mov	r1, r8
 800479e:	1851      	adds	r1, r2, r1
 80047a0:	6139      	str	r1, [r7, #16]
 80047a2:	4649      	mov	r1, r9
 80047a4:	414b      	adcs	r3, r1
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047b4:	4659      	mov	r1, fp
 80047b6:	00cb      	lsls	r3, r1, #3
 80047b8:	4651      	mov	r1, sl
 80047ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047be:	4651      	mov	r1, sl
 80047c0:	00ca      	lsls	r2, r1, #3
 80047c2:	4610      	mov	r0, r2
 80047c4:	4619      	mov	r1, r3
 80047c6:	4603      	mov	r3, r0
 80047c8:	4642      	mov	r2, r8
 80047ca:	189b      	adds	r3, r3, r2
 80047cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047d0:	464b      	mov	r3, r9
 80047d2:	460a      	mov	r2, r1
 80047d4:	eb42 0303 	adc.w	r3, r2, r3
 80047d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80047e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047f4:	4649      	mov	r1, r9
 80047f6:	008b      	lsls	r3, r1, #2
 80047f8:	4641      	mov	r1, r8
 80047fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047fe:	4641      	mov	r1, r8
 8004800:	008a      	lsls	r2, r1, #2
 8004802:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004806:	f7fb fd5b 	bl	80002c0 <__aeabi_uldivmod>
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	4611      	mov	r1, r2
 8004810:	4b38      	ldr	r3, [pc, #224]	; (80048f4 <UART_SetConfig+0x4e4>)
 8004812:	fba3 2301 	umull	r2, r3, r3, r1
 8004816:	095b      	lsrs	r3, r3, #5
 8004818:	2264      	movs	r2, #100	; 0x64
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	1acb      	subs	r3, r1, r3
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	3332      	adds	r3, #50	; 0x32
 8004824:	4a33      	ldr	r2, [pc, #204]	; (80048f4 <UART_SetConfig+0x4e4>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004830:	441c      	add	r4, r3
 8004832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004836:	2200      	movs	r2, #0
 8004838:	673b      	str	r3, [r7, #112]	; 0x70
 800483a:	677a      	str	r2, [r7, #116]	; 0x74
 800483c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004840:	4642      	mov	r2, r8
 8004842:	464b      	mov	r3, r9
 8004844:	1891      	adds	r1, r2, r2
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	415b      	adcs	r3, r3
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004850:	4641      	mov	r1, r8
 8004852:	1851      	adds	r1, r2, r1
 8004854:	6039      	str	r1, [r7, #0]
 8004856:	4649      	mov	r1, r9
 8004858:	414b      	adcs	r3, r1
 800485a:	607b      	str	r3, [r7, #4]
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004868:	4659      	mov	r1, fp
 800486a:	00cb      	lsls	r3, r1, #3
 800486c:	4651      	mov	r1, sl
 800486e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004872:	4651      	mov	r1, sl
 8004874:	00ca      	lsls	r2, r1, #3
 8004876:	4610      	mov	r0, r2
 8004878:	4619      	mov	r1, r3
 800487a:	4603      	mov	r3, r0
 800487c:	4642      	mov	r2, r8
 800487e:	189b      	adds	r3, r3, r2
 8004880:	66bb      	str	r3, [r7, #104]	; 0x68
 8004882:	464b      	mov	r3, r9
 8004884:	460a      	mov	r2, r1
 8004886:	eb42 0303 	adc.w	r3, r2, r3
 800488a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	663b      	str	r3, [r7, #96]	; 0x60
 8004896:	667a      	str	r2, [r7, #100]	; 0x64
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80048a4:	4649      	mov	r1, r9
 80048a6:	008b      	lsls	r3, r1, #2
 80048a8:	4641      	mov	r1, r8
 80048aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048ae:	4641      	mov	r1, r8
 80048b0:	008a      	lsls	r2, r1, #2
 80048b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048b6:	f7fb fd03 	bl	80002c0 <__aeabi_uldivmod>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <UART_SetConfig+0x4e4>)
 80048c0:	fba3 1302 	umull	r1, r3, r3, r2
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	2164      	movs	r1, #100	; 0x64
 80048c8:	fb01 f303 	mul.w	r3, r1, r3
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	3332      	adds	r3, #50	; 0x32
 80048d2:	4a08      	ldr	r2, [pc, #32]	; (80048f4 <UART_SetConfig+0x4e4>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	f003 020f 	and.w	r2, r3, #15
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4422      	add	r2, r4
 80048e6:	609a      	str	r2, [r3, #8]
}
 80048e8:	bf00      	nop
 80048ea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048ee:	46bd      	mov	sp, r7
 80048f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048f4:	51eb851f 	.word	0x51eb851f

080048f8 <bmp_reset>:
#include "main.h"
#include <stdio.h>

static int32_t t_fine; //Used by both temp and press functions (needs to be called by the temp funct at first)

void bmp_reset(h_bmp280_t * bmp280){
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af02      	add	r7, sp, #8
 80048fe:	6078      	str	r0, [r7, #4]
	bmp280->registre = reset;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	22e0      	movs	r2, #224	; 0xe0
 8004904:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	781a      	ldrb	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	705a      	strb	r2, [r3, #1]
	bmp280->buf[1]= BMP280_RESET;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	22b6      	movs	r2, #182	; 0xb6
 8004912:	709a      	strb	r2, [r3, #2]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 2, HAL_MAX_DELAY)){
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	f04f 33ff 	mov.w	r3, #4294967295
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	2302      	movs	r3, #2
 8004920:	21ee      	movs	r1, #238	; 0xee
 8004922:	4806      	ldr	r0, [pc, #24]	; (800493c <bmp_reset+0x44>)
 8004924:	f7fd fa94 	bl	8001e50 <HAL_I2C_Master_Transmit>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <bmp_reset+0x3c>
		printf("echec du reset\r\n");
 800492e:	4804      	ldr	r0, [pc, #16]	; (8004940 <bmp_reset+0x48>)
 8004930:	f000 fb1e 	bl	8004f70 <puts>
	}
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	20000134 	.word	0x20000134
 8004940:	08005cc0 	.word	0x08005cc0

08004944 <bmp_id>:

void bmp_id(h_bmp280_t * bmp280){
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af02      	add	r7, sp, #8
 800494a:	6078      	str	r0, [r7, #4]
	bmp280->registre = id;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	22d0      	movs	r2, #208	; 0xd0
 8004950:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	781a      	ldrb	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	f04f 33ff 	mov.w	r3, #4294967295
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	2301      	movs	r3, #1
 8004966:	21ee      	movs	r1, #238	; 0xee
 8004968:	4810      	ldr	r0, [pc, #64]	; (80049ac <bmp_id+0x68>)
 800496a:	f7fd fa71 	bl	8001e50 <HAL_I2C_Master_Transmit>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <bmp_id+0x36>
		printf("echec de l'id\r\n");
 8004974:	480e      	ldr	r0, [pc, #56]	; (80049b0 <bmp_id+0x6c>)
 8004976:	f000 fafb 	bl	8004f70 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, &bmp280->id, 1, 1000)){
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f103 021b 	add.w	r2, r3, #27
 8004980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	2301      	movs	r3, #1
 8004988:	21ee      	movs	r1, #238	; 0xee
 800498a:	4808      	ldr	r0, [pc, #32]	; (80049ac <bmp_id+0x68>)
 800498c:	f7fd fb5e 	bl	800204c <HAL_I2C_Master_Receive>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d105      	bne.n	80049a2 <bmp_id+0x5e>
		printf("val id : %x\r\n",bmp280->id);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	7edb      	ldrb	r3, [r3, #27]
 800499a:	4619      	mov	r1, r3
 800499c:	4805      	ldr	r0, [pc, #20]	; (80049b4 <bmp_id+0x70>)
 800499e:	f000 fa81 	bl	8004ea4 <iprintf>
	}
}
 80049a2:	bf00      	nop
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000134 	.word	0x20000134
 80049b0:	08005cd0 	.word	0x08005cd0
 80049b4:	08005ce0 	.word	0x08005ce0

080049b8 <bmp_config>:
		printf("echec de l'id\r\n");
	}
	printf("val id : %x\r\n",bmp280->id);
}*/

void bmp_config(h_bmp280_t * bmp280){
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af02      	add	r7, sp, #8
 80049be:	6078      	str	r0, [r7, #4]
	bmp280->registre = ctrl_mes;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	22f4      	movs	r2, #244	; 0xf4
 80049c4:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	781a      	ldrb	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	705a      	strb	r2, [r3, #1]
	bmp280->buf[1]= 0b01010111;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2257      	movs	r2, #87	; 0x57
 80049d2:	709a      	strb	r2, [r3, #2]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 2, HAL_MAX_DELAY)){
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	2302      	movs	r3, #2
 80049e0:	21ee      	movs	r1, #238	; 0xee
 80049e2:	4810      	ldr	r0, [pc, #64]	; (8004a24 <bmp_config+0x6c>)
 80049e4:	f7fd fa34 	bl	8001e50 <HAL_I2C_Master_Transmit>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <bmp_config+0x3c>
		printf("echec de config\r\n");
 80049ee:	480e      	ldr	r0, [pc, #56]	; (8004a28 <bmp_config+0x70>)
 80049f0:	f000 fabe 	bl	8004f70 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, &bmp280->config, 1, 1000)){
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f103 021c 	add.w	r2, r3, #28
 80049fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	2301      	movs	r3, #1
 8004a02:	21ee      	movs	r1, #238	; 0xee
 8004a04:	4807      	ldr	r0, [pc, #28]	; (8004a24 <bmp_config+0x6c>)
 8004a06:	f7fd fb21 	bl	800204c <HAL_I2C_Master_Receive>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d105      	bne.n	8004a1c <bmp_config+0x64>
		printf("config value : %x\r\n",bmp280->config);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	7f1b      	ldrb	r3, [r3, #28]
 8004a14:	4619      	mov	r1, r3
 8004a16:	4805      	ldr	r0, [pc, #20]	; (8004a2c <bmp_config+0x74>)
 8004a18:	f000 fa44 	bl	8004ea4 <iprintf>
	}
	//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
}
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20000134 	.word	0x20000134
 8004a28:	08005cf0 	.word	0x08005cf0
 8004a2c:	08005d04 	.word	0x08005d04

08004a30 <bmp_calib_read>:

void bmp_calib_read(h_bmp280_t * bmp280){
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	6078      	str	r0, [r7, #4]
	bmp280->registre = calib00;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2288      	movs	r2, #136	; 0x88
 8004a3c:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	781a      	ldrb	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	2301      	movs	r3, #1
 8004a52:	21ee      	movs	r1, #238	; 0xee
 8004a54:	4810      	ldr	r0, [pc, #64]	; (8004a98 <bmp_calib_read+0x68>)
 8004a56:	f7fd f9fb 	bl	8001e50 <HAL_I2C_Master_Transmit>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <bmp_calib_read+0x36>
		printf("echec de calib\r\n");
 8004a60:	480e      	ldr	r0, [pc, #56]	; (8004a9c <bmp_calib_read+0x6c>)
 8004a62:	f000 fa85 	bl	8004f70 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->calib, 25, HAL_MAX_DELAY)){
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f103 021d 	add.w	r2, r3, #29
 8004a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	2319      	movs	r3, #25
 8004a74:	21ee      	movs	r1, #238	; 0xee
 8004a76:	4808      	ldr	r0, [pc, #32]	; (8004a98 <bmp_calib_read+0x68>)
 8004a78:	f7fd fae8 	bl	800204c <HAL_I2C_Master_Receive>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d105      	bne.n	8004a8e <bmp_calib_read+0x5e>
		printf("calib values : %s\r\n",bmp280->calib);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	331d      	adds	r3, #29
 8004a86:	4619      	mov	r1, r3
 8004a88:	4805      	ldr	r0, [pc, #20]	; (8004aa0 <bmp_calib_read+0x70>)
 8004a8a:	f000 fa0b 	bl	8004ea4 <iprintf>
	}
	//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
}
 8004a8e:	bf00      	nop
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000134 	.word	0x20000134
 8004a9c:	08005d18 	.word	0x08005d18
 8004aa0:	08005d28 	.word	0x08005d28

08004aa4 <bmp_temp_read>:

void bmp_temp_read(h_bmp280_t * bmp280){
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	6078      	str	r0, [r7, #4]
	bmp280->registre = temp_xlsb;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	22fc      	movs	r2, #252	; 0xfc
 8004ab0:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	781a      	ldrb	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	21ee      	movs	r1, #238	; 0xee
 8004ac8:	483f      	ldr	r0, [pc, #252]	; (8004bc8 <bmp_temp_read+0x124>)
 8004aca:	f7fd f9c1 	bl	8001e50 <HAL_I2C_Master_Transmit>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <bmp_temp_read+0x36>
		printf("echec de temp read\r\n");
 8004ad4:	483d      	ldr	r0, [pc, #244]	; (8004bcc <bmp_temp_read+0x128>)
 8004ad6:	f000 fa4b 	bl	8004f70 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	21ee      	movs	r1, #238	; 0xee
 8004ae8:	4837      	ldr	r0, [pc, #220]	; (8004bc8 <bmp_temp_read+0x124>)
 8004aea:	f7fd faaf 	bl	800204c <HAL_I2C_Master_Receive>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d106      	bne.n	8004b02 <bmp_temp_read+0x5e>
		bmp280->temp = (int32_t)((bmp280->buf[0]) >>4);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	785b      	ldrb	r3, [r3, #1]
 8004af8:	091b      	lsrs	r3, r3, #4
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	461a      	mov	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38
		bmp280->temp = ((int32_t)bmp280->buf[0]>>4) + ((int32_t)bmp280->buf[1]<<4) + ((int32_t)bmp280->buf[2]<<12);
		printf("temp brute : %ld\r\n",bmp280->temp);
		bmp280->temp = bmp_compensate_T(bmp280);
		printf("temp : %ld\r\n",bmp280->temp);*/
	}
	bmp280->registre = temp_lsb;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	22fb      	movs	r2, #251	; 0xfb
 8004b06:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	781a      	ldrb	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	f04f 33ff 	mov.w	r3, #4294967295
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	21ee      	movs	r1, #238	; 0xee
 8004b1e:	482a      	ldr	r0, [pc, #168]	; (8004bc8 <bmp_temp_read+0x124>)
 8004b20:	f7fd f996 	bl	8001e50 <HAL_I2C_Master_Transmit>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <bmp_temp_read+0x8c>
		printf("echec de temp read\r\n");
 8004b2a:	4828      	ldr	r0, [pc, #160]	; (8004bcc <bmp_temp_read+0x128>)
 8004b2c:	f000 fa20 	bl	8004f70 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	f04f 33ff 	mov.w	r3, #4294967295
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	21ee      	movs	r1, #238	; 0xee
 8004b3e:	4822      	ldr	r0, [pc, #136]	; (8004bc8 <bmp_temp_read+0x124>)
 8004b40:	f7fd fa84 	bl	800204c <HAL_I2C_Master_Receive>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d107      	bne.n	8004b5a <bmp_temp_read+0xb6>
		bmp280->temp += ((int32_t)(bmp280->buf[0]))<<4;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	785b      	ldrb	r3, [r3, #1]
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	441a      	add	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	639a      	str	r2, [r3, #56]	; 0x38
	}
	bmp280->registre = temp_msb;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	22fa      	movs	r2, #250	; 0xfa
 8004b5e:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	781a      	ldrb	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	2301      	movs	r3, #1
 8004b74:	21ee      	movs	r1, #238	; 0xee
 8004b76:	4814      	ldr	r0, [pc, #80]	; (8004bc8 <bmp_temp_read+0x124>)
 8004b78:	f7fd f96a 	bl	8001e50 <HAL_I2C_Master_Transmit>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <bmp_temp_read+0xe4>
		printf("echec de temp read\r\n");
 8004b82:	4812      	ldr	r0, [pc, #72]	; (8004bcc <bmp_temp_read+0x128>)
 8004b84:	f000 f9f4 	bl	8004f70 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	2301      	movs	r3, #1
 8004b94:	21ee      	movs	r1, #238	; 0xee
 8004b96:	480c      	ldr	r0, [pc, #48]	; (8004bc8 <bmp_temp_read+0x124>)
 8004b98:	f7fd fa58 	bl	800204c <HAL_I2C_Master_Receive>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d107      	bne.n	8004bb2 <bmp_temp_read+0x10e>
		bmp280->temp += ((int32_t)(bmp280->buf[0]))<<12;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	785b      	ldrb	r3, [r3, #1]
 8004baa:	031b      	lsls	r3, r3, #12
 8004bac:	441a      	add	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	639a      	str	r2, [r3, #56]	; 0x38
	}
	//printf("temp : %ld\r\n",bmp280->temp);

	bmp280->temp = bmp_compensate_T(bmp280);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f80c 	bl	8004bd0 <bmp_compensate_T>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38

	//printf("celcius temp : %ld\r\n",bmp280->temp);

}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000134 	.word	0x20000134
 8004bcc:	08005d3c 	.word	0x08005d3c

08004bd0 <bmp_compensate_T>:

	//printf("corrected press : %ld\r\n",bmp280->press);

}

int32_t bmp_compensate_T(h_bmp280_t * bmp280){
 8004bd0:	b480      	push	{r7}
 8004bd2:	b089      	sub	sp, #36	; 0x24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
	int32_t adc_T = bmp280->temp;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	61fb      	str	r3, [r7, #28]

	//Extracting calibration values
	uint16_t dig_T1;
	int16_t	 dig_T2, dig_T3;
	dig_T1 =((uint16_t) bmp280->calib[0]) + (((uint16_t) bmp280->calib[1])<<8);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	7f5b      	ldrb	r3, [r3, #29]
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	7f9b      	ldrb	r3, [r3, #30]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	4413      	add	r3, r2
 8004bf0:	837b      	strh	r3, [r7, #26]
	dig_T2 =((int16_t) bmp280->calib[2]) + (((int16_t) bmp280->calib[3])<<8);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	7fdb      	ldrb	r3, [r3, #31]
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	4413      	add	r3, r2
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	833b      	strh	r3, [r7, #24]
	dig_T3 =((int16_t) bmp280->calib[4]) + (((int16_t) bmp280->calib[5])<<8);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	021b      	lsls	r3, r3, #8
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	4413      	add	r3, r2
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	82fb      	strh	r3, [r7, #22]

	//Temperature calculus (in 1/100th deg C)
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3)-((int32_t)dig_T1<<1)))*((int32_t)dig_T2))>>11;
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	10da      	asrs	r2, r3, #3
 8004c28:	8b7b      	ldrh	r3, [r7, #26]
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004c32:	fb02 f303 	mul.w	r3, r2, r3
 8004c36:	12db      	asrs	r3, r3, #11
 8004c38:	613b      	str	r3, [r7, #16]
	var2 = (((((adc_T>>4)-((int32_t)dig_T1))*((adc_T>>4)-((int32_t)dig_T1)))>>12)*((int32_t)dig_T3))>>14;
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	111a      	asrs	r2, r3, #4
 8004c3e:	8b7b      	ldrh	r3, [r7, #26]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	69fa      	ldr	r2, [r7, #28]
 8004c44:	1111      	asrs	r1, r2, #4
 8004c46:	8b7a      	ldrh	r2, [r7, #26]
 8004c48:	1a8a      	subs	r2, r1, r2
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
 8004c4e:	131b      	asrs	r3, r3, #12
 8004c50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004c54:	fb02 f303 	mul.w	r3, r2, r3
 8004c58:	139b      	asrs	r3, r3, #14
 8004c5a:	60fb      	str	r3, [r7, #12]
	t_fine = var1+ var2;
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4413      	add	r3, r2
 8004c62:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <bmp_compensate_T+0xb4>)
 8004c64:	6013      	str	r3, [r2, #0]
	T = (t_fine*5 + 128)>>8;
 8004c66:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <bmp_compensate_T+0xb4>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	3380      	adds	r3, #128	; 0x80
 8004c72:	121b      	asrs	r3, r3, #8
 8004c74:	60bb      	str	r3, [r7, #8]
	return T;
 8004c76:	68bb      	ldr	r3, [r7, #8]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3724      	adds	r7, #36	; 0x24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	20000258 	.word	0x20000258

08004c88 <Shell_Init>:
 * @brief Initializes the shell environment.
 *
 * This function initializes various buffers and sets up UART communication using
 * the HAL (Hardware Abstraction Layer) for STM32 microcontrollers.
 */
void Shell_Init(void){
 8004c88:	b598      	push	{r3, r4, r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
	memset(argv,(int)NULL, MAX_ARGS*sizeof(char*));
 8004c8c:	2224      	movs	r2, #36	; 0x24
 8004c8e:	2100      	movs	r1, #0
 8004c90:	4819      	ldr	r0, [pc, #100]	; (8004cf8 <Shell_Init+0x70>)
 8004c92:	f000 fa4d 	bl	8005130 <memset>
	memset(cmdBuffer, (int)NULL, CMD_BUFFER_SIZE*sizeof(char));
 8004c96:	2240      	movs	r2, #64	; 0x40
 8004c98:	2100      	movs	r1, #0
 8004c9a:	4818      	ldr	r0, [pc, #96]	; (8004cfc <Shell_Init+0x74>)
 8004c9c:	f000 fa48 	bl	8005130 <memset>
 8004ca0:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <Shell_Init+0x78>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,(int)NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,(int)NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8004ca6:	2240      	movs	r2, #64	; 0x40
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4816      	ldr	r0, [pc, #88]	; (8004d04 <Shell_Init+0x7c>)
 8004cac:	f000 fa40 	bl	8005130 <memset>

	HAL_UART_Receive_IT(uartShell, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8004cb0:	4b15      	ldr	r3, [pc, #84]	; (8004d08 <Shell_Init+0x80>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	4912      	ldr	r1, [pc, #72]	; (8004d00 <Shell_Init+0x78>)
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fe fe84 	bl	80039c6 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(uartShell, started, strlen((char *)started), HAL_MAX_DELAY);
 8004cbe:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <Shell_Init+0x80>)
 8004cc0:	681c      	ldr	r4, [r3, #0]
 8004cc2:	4812      	ldr	r0, [pc, #72]	; (8004d0c <Shell_Init+0x84>)
 8004cc4:	f7fb faa4 	bl	8000210 <strlen>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd0:	490e      	ldr	r1, [pc, #56]	; (8004d0c <Shell_Init+0x84>)
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f7fe fd43 	bl	800375e <HAL_UART_Transmit>
	HAL_UART_Transmit(uartShell, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <Shell_Init+0x80>)
 8004cda:	681c      	ldr	r4, [r3, #0]
 8004cdc:	480c      	ldr	r0, [pc, #48]	; (8004d10 <Shell_Init+0x88>)
 8004cde:	f7fb fa97 	bl	8000210 <strlen>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cea:	4909      	ldr	r1, [pc, #36]	; (8004d10 <Shell_Init+0x88>)
 8004cec:	4620      	mov	r0, r4
 8004cee:	f7fe fd36 	bl	800375e <HAL_UART_Transmit>
}
 8004cf2:	bf00      	nop
 8004cf4:	bd98      	pop	{r3, r4, r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	200002e4 	.word	0x200002e4
 8004cfc:	200002a4 	.word	0x200002a4
 8004d00:	20000260 	.word	0x20000260
 8004d04:	20000264 	.word	0x20000264
 8004d08:	20000090 	.word	0x20000090
 8004d0c:	20000028 	.word	0x20000028
 8004d10:	2000000c 	.word	0x2000000c

08004d14 <HAL_UART_RxCpltCallback>:
		HAL_UART_Transmit(uartShell, prompt, sizeof(prompt), HAL_MAX_DELAY);
		newCmdReady = 0;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <HAL_UART_RxCpltCallback+0x24>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(uartShell, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_UART_RxCpltCallback+0x28>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2201      	movs	r2, #1
 8004d28:	4905      	ldr	r1, [pc, #20]	; (8004d40 <HAL_UART_RxCpltCallback+0x2c>)
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fe fe4b 	bl	80039c6 <HAL_UART_Receive_IT>
}
 8004d30:	bf00      	nop
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	2000025c 	.word	0x2000025c
 8004d3c:	20000090 	.word	0x20000090
 8004d40:	20000260 	.word	0x20000260

08004d44 <std>:
 8004d44:	2300      	movs	r3, #0
 8004d46:	b510      	push	{r4, lr}
 8004d48:	4604      	mov	r4, r0
 8004d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8004d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d52:	6083      	str	r3, [r0, #8]
 8004d54:	8181      	strh	r1, [r0, #12]
 8004d56:	6643      	str	r3, [r0, #100]	; 0x64
 8004d58:	81c2      	strh	r2, [r0, #14]
 8004d5a:	6183      	str	r3, [r0, #24]
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	2208      	movs	r2, #8
 8004d60:	305c      	adds	r0, #92	; 0x5c
 8004d62:	f000 f9e5 	bl	8005130 <memset>
 8004d66:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <std+0x38>)
 8004d68:	6263      	str	r3, [r4, #36]	; 0x24
 8004d6a:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <std+0x3c>)
 8004d6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d6e:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <std+0x40>)
 8004d70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d72:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <std+0x44>)
 8004d74:	6224      	str	r4, [r4, #32]
 8004d76:	6323      	str	r3, [r4, #48]	; 0x30
 8004d78:	bd10      	pop	{r4, pc}
 8004d7a:	bf00      	nop
 8004d7c:	08004f81 	.word	0x08004f81
 8004d80:	08004fa3 	.word	0x08004fa3
 8004d84:	08004fdb 	.word	0x08004fdb
 8004d88:	08004fff 	.word	0x08004fff

08004d8c <stdio_exit_handler>:
 8004d8c:	4a02      	ldr	r2, [pc, #8]	; (8004d98 <stdio_exit_handler+0xc>)
 8004d8e:	4903      	ldr	r1, [pc, #12]	; (8004d9c <stdio_exit_handler+0x10>)
 8004d90:	4803      	ldr	r0, [pc, #12]	; (8004da0 <stdio_exit_handler+0x14>)
 8004d92:	f000 b869 	b.w	8004e68 <_fwalk_sglue>
 8004d96:	bf00      	nop
 8004d98:	20000094 	.word	0x20000094
 8004d9c:	08005ac9 	.word	0x08005ac9
 8004da0:	200000a0 	.word	0x200000a0

08004da4 <cleanup_stdio>:
 8004da4:	6841      	ldr	r1, [r0, #4]
 8004da6:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <cleanup_stdio+0x34>)
 8004da8:	4299      	cmp	r1, r3
 8004daa:	b510      	push	{r4, lr}
 8004dac:	4604      	mov	r4, r0
 8004dae:	d001      	beq.n	8004db4 <cleanup_stdio+0x10>
 8004db0:	f000 fe8a 	bl	8005ac8 <_fflush_r>
 8004db4:	68a1      	ldr	r1, [r4, #8]
 8004db6:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <cleanup_stdio+0x38>)
 8004db8:	4299      	cmp	r1, r3
 8004dba:	d002      	beq.n	8004dc2 <cleanup_stdio+0x1e>
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	f000 fe83 	bl	8005ac8 <_fflush_r>
 8004dc2:	68e1      	ldr	r1, [r4, #12]
 8004dc4:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <cleanup_stdio+0x3c>)
 8004dc6:	4299      	cmp	r1, r3
 8004dc8:	d004      	beq.n	8004dd4 <cleanup_stdio+0x30>
 8004dca:	4620      	mov	r0, r4
 8004dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dd0:	f000 be7a 	b.w	8005ac8 <_fflush_r>
 8004dd4:	bd10      	pop	{r4, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000308 	.word	0x20000308
 8004ddc:	20000370 	.word	0x20000370
 8004de0:	200003d8 	.word	0x200003d8

08004de4 <global_stdio_init.part.0>:
 8004de4:	b510      	push	{r4, lr}
 8004de6:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <global_stdio_init.part.0+0x30>)
 8004de8:	4c0b      	ldr	r4, [pc, #44]	; (8004e18 <global_stdio_init.part.0+0x34>)
 8004dea:	4a0c      	ldr	r2, [pc, #48]	; (8004e1c <global_stdio_init.part.0+0x38>)
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	4620      	mov	r0, r4
 8004df0:	2200      	movs	r2, #0
 8004df2:	2104      	movs	r1, #4
 8004df4:	f7ff ffa6 	bl	8004d44 <std>
 8004df8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	2109      	movs	r1, #9
 8004e00:	f7ff ffa0 	bl	8004d44 <std>
 8004e04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004e08:	2202      	movs	r2, #2
 8004e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e0e:	2112      	movs	r1, #18
 8004e10:	f7ff bf98 	b.w	8004d44 <std>
 8004e14:	20000440 	.word	0x20000440
 8004e18:	20000308 	.word	0x20000308
 8004e1c:	08004d8d 	.word	0x08004d8d

08004e20 <__sfp_lock_acquire>:
 8004e20:	4801      	ldr	r0, [pc, #4]	; (8004e28 <__sfp_lock_acquire+0x8>)
 8004e22:	f000 b9fd 	b.w	8005220 <__retarget_lock_acquire_recursive>
 8004e26:	bf00      	nop
 8004e28:	20000449 	.word	0x20000449

08004e2c <__sfp_lock_release>:
 8004e2c:	4801      	ldr	r0, [pc, #4]	; (8004e34 <__sfp_lock_release+0x8>)
 8004e2e:	f000 b9f8 	b.w	8005222 <__retarget_lock_release_recursive>
 8004e32:	bf00      	nop
 8004e34:	20000449 	.word	0x20000449

08004e38 <__sinit>:
 8004e38:	b510      	push	{r4, lr}
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	f7ff fff0 	bl	8004e20 <__sfp_lock_acquire>
 8004e40:	6a23      	ldr	r3, [r4, #32]
 8004e42:	b11b      	cbz	r3, 8004e4c <__sinit+0x14>
 8004e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e48:	f7ff bff0 	b.w	8004e2c <__sfp_lock_release>
 8004e4c:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <__sinit+0x28>)
 8004e4e:	6223      	str	r3, [r4, #32]
 8004e50:	4b04      	ldr	r3, [pc, #16]	; (8004e64 <__sinit+0x2c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1f5      	bne.n	8004e44 <__sinit+0xc>
 8004e58:	f7ff ffc4 	bl	8004de4 <global_stdio_init.part.0>
 8004e5c:	e7f2      	b.n	8004e44 <__sinit+0xc>
 8004e5e:	bf00      	nop
 8004e60:	08004da5 	.word	0x08004da5
 8004e64:	20000440 	.word	0x20000440

08004e68 <_fwalk_sglue>:
 8004e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e6c:	4607      	mov	r7, r0
 8004e6e:	4688      	mov	r8, r1
 8004e70:	4614      	mov	r4, r2
 8004e72:	2600      	movs	r6, #0
 8004e74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e78:	f1b9 0901 	subs.w	r9, r9, #1
 8004e7c:	d505      	bpl.n	8004e8a <_fwalk_sglue+0x22>
 8004e7e:	6824      	ldr	r4, [r4, #0]
 8004e80:	2c00      	cmp	r4, #0
 8004e82:	d1f7      	bne.n	8004e74 <_fwalk_sglue+0xc>
 8004e84:	4630      	mov	r0, r6
 8004e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e8a:	89ab      	ldrh	r3, [r5, #12]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d907      	bls.n	8004ea0 <_fwalk_sglue+0x38>
 8004e90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e94:	3301      	adds	r3, #1
 8004e96:	d003      	beq.n	8004ea0 <_fwalk_sglue+0x38>
 8004e98:	4629      	mov	r1, r5
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	47c0      	blx	r8
 8004e9e:	4306      	orrs	r6, r0
 8004ea0:	3568      	adds	r5, #104	; 0x68
 8004ea2:	e7e9      	b.n	8004e78 <_fwalk_sglue+0x10>

08004ea4 <iprintf>:
 8004ea4:	b40f      	push	{r0, r1, r2, r3}
 8004ea6:	b507      	push	{r0, r1, r2, lr}
 8004ea8:	4906      	ldr	r1, [pc, #24]	; (8004ec4 <iprintf+0x20>)
 8004eaa:	ab04      	add	r3, sp, #16
 8004eac:	6808      	ldr	r0, [r1, #0]
 8004eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eb2:	6881      	ldr	r1, [r0, #8]
 8004eb4:	9301      	str	r3, [sp, #4]
 8004eb6:	f000 fad7 	bl	8005468 <_vfiprintf_r>
 8004eba:	b003      	add	sp, #12
 8004ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ec0:	b004      	add	sp, #16
 8004ec2:	4770      	bx	lr
 8004ec4:	200000ec 	.word	0x200000ec

08004ec8 <_puts_r>:
 8004ec8:	6a03      	ldr	r3, [r0, #32]
 8004eca:	b570      	push	{r4, r5, r6, lr}
 8004ecc:	6884      	ldr	r4, [r0, #8]
 8004ece:	4605      	mov	r5, r0
 8004ed0:	460e      	mov	r6, r1
 8004ed2:	b90b      	cbnz	r3, 8004ed8 <_puts_r+0x10>
 8004ed4:	f7ff ffb0 	bl	8004e38 <__sinit>
 8004ed8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eda:	07db      	lsls	r3, r3, #31
 8004edc:	d405      	bmi.n	8004eea <_puts_r+0x22>
 8004ede:	89a3      	ldrh	r3, [r4, #12]
 8004ee0:	0598      	lsls	r0, r3, #22
 8004ee2:	d402      	bmi.n	8004eea <_puts_r+0x22>
 8004ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ee6:	f000 f99b 	bl	8005220 <__retarget_lock_acquire_recursive>
 8004eea:	89a3      	ldrh	r3, [r4, #12]
 8004eec:	0719      	lsls	r1, r3, #28
 8004eee:	d513      	bpl.n	8004f18 <_puts_r+0x50>
 8004ef0:	6923      	ldr	r3, [r4, #16]
 8004ef2:	b18b      	cbz	r3, 8004f18 <_puts_r+0x50>
 8004ef4:	3e01      	subs	r6, #1
 8004ef6:	68a3      	ldr	r3, [r4, #8]
 8004ef8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004efc:	3b01      	subs	r3, #1
 8004efe:	60a3      	str	r3, [r4, #8]
 8004f00:	b9e9      	cbnz	r1, 8004f3e <_puts_r+0x76>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	da2e      	bge.n	8004f64 <_puts_r+0x9c>
 8004f06:	4622      	mov	r2, r4
 8004f08:	210a      	movs	r1, #10
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	f000 f87b 	bl	8005006 <__swbuf_r>
 8004f10:	3001      	adds	r0, #1
 8004f12:	d007      	beq.n	8004f24 <_puts_r+0x5c>
 8004f14:	250a      	movs	r5, #10
 8004f16:	e007      	b.n	8004f28 <_puts_r+0x60>
 8004f18:	4621      	mov	r1, r4
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	f000 f8b0 	bl	8005080 <__swsetup_r>
 8004f20:	2800      	cmp	r0, #0
 8004f22:	d0e7      	beq.n	8004ef4 <_puts_r+0x2c>
 8004f24:	f04f 35ff 	mov.w	r5, #4294967295
 8004f28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f2a:	07da      	lsls	r2, r3, #31
 8004f2c:	d405      	bmi.n	8004f3a <_puts_r+0x72>
 8004f2e:	89a3      	ldrh	r3, [r4, #12]
 8004f30:	059b      	lsls	r3, r3, #22
 8004f32:	d402      	bmi.n	8004f3a <_puts_r+0x72>
 8004f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f36:	f000 f974 	bl	8005222 <__retarget_lock_release_recursive>
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	bd70      	pop	{r4, r5, r6, pc}
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	da04      	bge.n	8004f4c <_puts_r+0x84>
 8004f42:	69a2      	ldr	r2, [r4, #24]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	dc06      	bgt.n	8004f56 <_puts_r+0x8e>
 8004f48:	290a      	cmp	r1, #10
 8004f4a:	d004      	beq.n	8004f56 <_puts_r+0x8e>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	6022      	str	r2, [r4, #0]
 8004f52:	7019      	strb	r1, [r3, #0]
 8004f54:	e7cf      	b.n	8004ef6 <_puts_r+0x2e>
 8004f56:	4622      	mov	r2, r4
 8004f58:	4628      	mov	r0, r5
 8004f5a:	f000 f854 	bl	8005006 <__swbuf_r>
 8004f5e:	3001      	adds	r0, #1
 8004f60:	d1c9      	bne.n	8004ef6 <_puts_r+0x2e>
 8004f62:	e7df      	b.n	8004f24 <_puts_r+0x5c>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	250a      	movs	r5, #10
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	6022      	str	r2, [r4, #0]
 8004f6c:	701d      	strb	r5, [r3, #0]
 8004f6e:	e7db      	b.n	8004f28 <_puts_r+0x60>

08004f70 <puts>:
 8004f70:	4b02      	ldr	r3, [pc, #8]	; (8004f7c <puts+0xc>)
 8004f72:	4601      	mov	r1, r0
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	f7ff bfa7 	b.w	8004ec8 <_puts_r>
 8004f7a:	bf00      	nop
 8004f7c:	200000ec 	.word	0x200000ec

08004f80 <__sread>:
 8004f80:	b510      	push	{r4, lr}
 8004f82:	460c      	mov	r4, r1
 8004f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f88:	f000 f8fc 	bl	8005184 <_read_r>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	bfab      	itete	ge
 8004f90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f92:	89a3      	ldrhlt	r3, [r4, #12]
 8004f94:	181b      	addge	r3, r3, r0
 8004f96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f9a:	bfac      	ite	ge
 8004f9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f9e:	81a3      	strhlt	r3, [r4, #12]
 8004fa0:	bd10      	pop	{r4, pc}

08004fa2 <__swrite>:
 8004fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa6:	461f      	mov	r7, r3
 8004fa8:	898b      	ldrh	r3, [r1, #12]
 8004faa:	05db      	lsls	r3, r3, #23
 8004fac:	4605      	mov	r5, r0
 8004fae:	460c      	mov	r4, r1
 8004fb0:	4616      	mov	r6, r2
 8004fb2:	d505      	bpl.n	8004fc0 <__swrite+0x1e>
 8004fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fb8:	2302      	movs	r3, #2
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f000 f8d0 	bl	8005160 <_lseek_r>
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fca:	81a3      	strh	r3, [r4, #12]
 8004fcc:	4632      	mov	r2, r6
 8004fce:	463b      	mov	r3, r7
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd6:	f000 b8e7 	b.w	80051a8 <_write_r>

08004fda <__sseek>:
 8004fda:	b510      	push	{r4, lr}
 8004fdc:	460c      	mov	r4, r1
 8004fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fe2:	f000 f8bd 	bl	8005160 <_lseek_r>
 8004fe6:	1c43      	adds	r3, r0, #1
 8004fe8:	89a3      	ldrh	r3, [r4, #12]
 8004fea:	bf15      	itete	ne
 8004fec:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ff6:	81a3      	strheq	r3, [r4, #12]
 8004ff8:	bf18      	it	ne
 8004ffa:	81a3      	strhne	r3, [r4, #12]
 8004ffc:	bd10      	pop	{r4, pc}

08004ffe <__sclose>:
 8004ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005002:	f000 b89d 	b.w	8005140 <_close_r>

08005006 <__swbuf_r>:
 8005006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005008:	460e      	mov	r6, r1
 800500a:	4614      	mov	r4, r2
 800500c:	4605      	mov	r5, r0
 800500e:	b118      	cbz	r0, 8005018 <__swbuf_r+0x12>
 8005010:	6a03      	ldr	r3, [r0, #32]
 8005012:	b90b      	cbnz	r3, 8005018 <__swbuf_r+0x12>
 8005014:	f7ff ff10 	bl	8004e38 <__sinit>
 8005018:	69a3      	ldr	r3, [r4, #24]
 800501a:	60a3      	str	r3, [r4, #8]
 800501c:	89a3      	ldrh	r3, [r4, #12]
 800501e:	071a      	lsls	r2, r3, #28
 8005020:	d525      	bpl.n	800506e <__swbuf_r+0x68>
 8005022:	6923      	ldr	r3, [r4, #16]
 8005024:	b31b      	cbz	r3, 800506e <__swbuf_r+0x68>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	6922      	ldr	r2, [r4, #16]
 800502a:	1a98      	subs	r0, r3, r2
 800502c:	6963      	ldr	r3, [r4, #20]
 800502e:	b2f6      	uxtb	r6, r6
 8005030:	4283      	cmp	r3, r0
 8005032:	4637      	mov	r7, r6
 8005034:	dc04      	bgt.n	8005040 <__swbuf_r+0x3a>
 8005036:	4621      	mov	r1, r4
 8005038:	4628      	mov	r0, r5
 800503a:	f000 fd45 	bl	8005ac8 <_fflush_r>
 800503e:	b9e0      	cbnz	r0, 800507a <__swbuf_r+0x74>
 8005040:	68a3      	ldr	r3, [r4, #8]
 8005042:	3b01      	subs	r3, #1
 8005044:	60a3      	str	r3, [r4, #8]
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	6022      	str	r2, [r4, #0]
 800504c:	701e      	strb	r6, [r3, #0]
 800504e:	6962      	ldr	r2, [r4, #20]
 8005050:	1c43      	adds	r3, r0, #1
 8005052:	429a      	cmp	r2, r3
 8005054:	d004      	beq.n	8005060 <__swbuf_r+0x5a>
 8005056:	89a3      	ldrh	r3, [r4, #12]
 8005058:	07db      	lsls	r3, r3, #31
 800505a:	d506      	bpl.n	800506a <__swbuf_r+0x64>
 800505c:	2e0a      	cmp	r6, #10
 800505e:	d104      	bne.n	800506a <__swbuf_r+0x64>
 8005060:	4621      	mov	r1, r4
 8005062:	4628      	mov	r0, r5
 8005064:	f000 fd30 	bl	8005ac8 <_fflush_r>
 8005068:	b938      	cbnz	r0, 800507a <__swbuf_r+0x74>
 800506a:	4638      	mov	r0, r7
 800506c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800506e:	4621      	mov	r1, r4
 8005070:	4628      	mov	r0, r5
 8005072:	f000 f805 	bl	8005080 <__swsetup_r>
 8005076:	2800      	cmp	r0, #0
 8005078:	d0d5      	beq.n	8005026 <__swbuf_r+0x20>
 800507a:	f04f 37ff 	mov.w	r7, #4294967295
 800507e:	e7f4      	b.n	800506a <__swbuf_r+0x64>

08005080 <__swsetup_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	4b2a      	ldr	r3, [pc, #168]	; (800512c <__swsetup_r+0xac>)
 8005084:	4605      	mov	r5, r0
 8005086:	6818      	ldr	r0, [r3, #0]
 8005088:	460c      	mov	r4, r1
 800508a:	b118      	cbz	r0, 8005094 <__swsetup_r+0x14>
 800508c:	6a03      	ldr	r3, [r0, #32]
 800508e:	b90b      	cbnz	r3, 8005094 <__swsetup_r+0x14>
 8005090:	f7ff fed2 	bl	8004e38 <__sinit>
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800509a:	0718      	lsls	r0, r3, #28
 800509c:	d422      	bmi.n	80050e4 <__swsetup_r+0x64>
 800509e:	06d9      	lsls	r1, r3, #27
 80050a0:	d407      	bmi.n	80050b2 <__swsetup_r+0x32>
 80050a2:	2309      	movs	r3, #9
 80050a4:	602b      	str	r3, [r5, #0]
 80050a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050aa:	81a3      	strh	r3, [r4, #12]
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295
 80050b0:	e034      	b.n	800511c <__swsetup_r+0x9c>
 80050b2:	0758      	lsls	r0, r3, #29
 80050b4:	d512      	bpl.n	80050dc <__swsetup_r+0x5c>
 80050b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050b8:	b141      	cbz	r1, 80050cc <__swsetup_r+0x4c>
 80050ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050be:	4299      	cmp	r1, r3
 80050c0:	d002      	beq.n	80050c8 <__swsetup_r+0x48>
 80050c2:	4628      	mov	r0, r5
 80050c4:	f000 f8ae 	bl	8005224 <_free_r>
 80050c8:	2300      	movs	r3, #0
 80050ca:	6363      	str	r3, [r4, #52]	; 0x34
 80050cc:	89a3      	ldrh	r3, [r4, #12]
 80050ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050d2:	81a3      	strh	r3, [r4, #12]
 80050d4:	2300      	movs	r3, #0
 80050d6:	6063      	str	r3, [r4, #4]
 80050d8:	6923      	ldr	r3, [r4, #16]
 80050da:	6023      	str	r3, [r4, #0]
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	f043 0308 	orr.w	r3, r3, #8
 80050e2:	81a3      	strh	r3, [r4, #12]
 80050e4:	6923      	ldr	r3, [r4, #16]
 80050e6:	b94b      	cbnz	r3, 80050fc <__swsetup_r+0x7c>
 80050e8:	89a3      	ldrh	r3, [r4, #12]
 80050ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f2:	d003      	beq.n	80050fc <__swsetup_r+0x7c>
 80050f4:	4621      	mov	r1, r4
 80050f6:	4628      	mov	r0, r5
 80050f8:	f000 fd34 	bl	8005b64 <__smakebuf_r>
 80050fc:	89a0      	ldrh	r0, [r4, #12]
 80050fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005102:	f010 0301 	ands.w	r3, r0, #1
 8005106:	d00a      	beq.n	800511e <__swsetup_r+0x9e>
 8005108:	2300      	movs	r3, #0
 800510a:	60a3      	str	r3, [r4, #8]
 800510c:	6963      	ldr	r3, [r4, #20]
 800510e:	425b      	negs	r3, r3
 8005110:	61a3      	str	r3, [r4, #24]
 8005112:	6923      	ldr	r3, [r4, #16]
 8005114:	b943      	cbnz	r3, 8005128 <__swsetup_r+0xa8>
 8005116:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800511a:	d1c4      	bne.n	80050a6 <__swsetup_r+0x26>
 800511c:	bd38      	pop	{r3, r4, r5, pc}
 800511e:	0781      	lsls	r1, r0, #30
 8005120:	bf58      	it	pl
 8005122:	6963      	ldrpl	r3, [r4, #20]
 8005124:	60a3      	str	r3, [r4, #8]
 8005126:	e7f4      	b.n	8005112 <__swsetup_r+0x92>
 8005128:	2000      	movs	r0, #0
 800512a:	e7f7      	b.n	800511c <__swsetup_r+0x9c>
 800512c:	200000ec 	.word	0x200000ec

08005130 <memset>:
 8005130:	4402      	add	r2, r0
 8005132:	4603      	mov	r3, r0
 8005134:	4293      	cmp	r3, r2
 8005136:	d100      	bne.n	800513a <memset+0xa>
 8005138:	4770      	bx	lr
 800513a:	f803 1b01 	strb.w	r1, [r3], #1
 800513e:	e7f9      	b.n	8005134 <memset+0x4>

08005140 <_close_r>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	4d06      	ldr	r5, [pc, #24]	; (800515c <_close_r+0x1c>)
 8005144:	2300      	movs	r3, #0
 8005146:	4604      	mov	r4, r0
 8005148:	4608      	mov	r0, r1
 800514a:	602b      	str	r3, [r5, #0]
 800514c:	f7fb fd77 	bl	8000c3e <_close>
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	d102      	bne.n	800515a <_close_r+0x1a>
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	b103      	cbz	r3, 800515a <_close_r+0x1a>
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	bd38      	pop	{r3, r4, r5, pc}
 800515c:	20000444 	.word	0x20000444

08005160 <_lseek_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	4d07      	ldr	r5, [pc, #28]	; (8005180 <_lseek_r+0x20>)
 8005164:	4604      	mov	r4, r0
 8005166:	4608      	mov	r0, r1
 8005168:	4611      	mov	r1, r2
 800516a:	2200      	movs	r2, #0
 800516c:	602a      	str	r2, [r5, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	f7fb fd8c 	bl	8000c8c <_lseek>
 8005174:	1c43      	adds	r3, r0, #1
 8005176:	d102      	bne.n	800517e <_lseek_r+0x1e>
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	b103      	cbz	r3, 800517e <_lseek_r+0x1e>
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	bd38      	pop	{r3, r4, r5, pc}
 8005180:	20000444 	.word	0x20000444

08005184 <_read_r>:
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	4d07      	ldr	r5, [pc, #28]	; (80051a4 <_read_r+0x20>)
 8005188:	4604      	mov	r4, r0
 800518a:	4608      	mov	r0, r1
 800518c:	4611      	mov	r1, r2
 800518e:	2200      	movs	r2, #0
 8005190:	602a      	str	r2, [r5, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	f7fb fd36 	bl	8000c04 <_read>
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	d102      	bne.n	80051a2 <_read_r+0x1e>
 800519c:	682b      	ldr	r3, [r5, #0]
 800519e:	b103      	cbz	r3, 80051a2 <_read_r+0x1e>
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	20000444 	.word	0x20000444

080051a8 <_write_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4d07      	ldr	r5, [pc, #28]	; (80051c8 <_write_r+0x20>)
 80051ac:	4604      	mov	r4, r0
 80051ae:	4608      	mov	r0, r1
 80051b0:	4611      	mov	r1, r2
 80051b2:	2200      	movs	r2, #0
 80051b4:	602a      	str	r2, [r5, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f7fb fb62 	bl	8000880 <_write>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d102      	bne.n	80051c6 <_write_r+0x1e>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	b103      	cbz	r3, 80051c6 <_write_r+0x1e>
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	bd38      	pop	{r3, r4, r5, pc}
 80051c8:	20000444 	.word	0x20000444

080051cc <__errno>:
 80051cc:	4b01      	ldr	r3, [pc, #4]	; (80051d4 <__errno+0x8>)
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	200000ec 	.word	0x200000ec

080051d8 <__libc_init_array>:
 80051d8:	b570      	push	{r4, r5, r6, lr}
 80051da:	4d0d      	ldr	r5, [pc, #52]	; (8005210 <__libc_init_array+0x38>)
 80051dc:	4c0d      	ldr	r4, [pc, #52]	; (8005214 <__libc_init_array+0x3c>)
 80051de:	1b64      	subs	r4, r4, r5
 80051e0:	10a4      	asrs	r4, r4, #2
 80051e2:	2600      	movs	r6, #0
 80051e4:	42a6      	cmp	r6, r4
 80051e6:	d109      	bne.n	80051fc <__libc_init_array+0x24>
 80051e8:	4d0b      	ldr	r5, [pc, #44]	; (8005218 <__libc_init_array+0x40>)
 80051ea:	4c0c      	ldr	r4, [pc, #48]	; (800521c <__libc_init_array+0x44>)
 80051ec:	f000 fd28 	bl	8005c40 <_init>
 80051f0:	1b64      	subs	r4, r4, r5
 80051f2:	10a4      	asrs	r4, r4, #2
 80051f4:	2600      	movs	r6, #0
 80051f6:	42a6      	cmp	r6, r4
 80051f8:	d105      	bne.n	8005206 <__libc_init_array+0x2e>
 80051fa:	bd70      	pop	{r4, r5, r6, pc}
 80051fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005200:	4798      	blx	r3
 8005202:	3601      	adds	r6, #1
 8005204:	e7ee      	b.n	80051e4 <__libc_init_array+0xc>
 8005206:	f855 3b04 	ldr.w	r3, [r5], #4
 800520a:	4798      	blx	r3
 800520c:	3601      	adds	r6, #1
 800520e:	e7f2      	b.n	80051f6 <__libc_init_array+0x1e>
 8005210:	08005dc0 	.word	0x08005dc0
 8005214:	08005dc0 	.word	0x08005dc0
 8005218:	08005dc0 	.word	0x08005dc0
 800521c:	08005dc4 	.word	0x08005dc4

08005220 <__retarget_lock_acquire_recursive>:
 8005220:	4770      	bx	lr

08005222 <__retarget_lock_release_recursive>:
 8005222:	4770      	bx	lr

08005224 <_free_r>:
 8005224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005226:	2900      	cmp	r1, #0
 8005228:	d044      	beq.n	80052b4 <_free_r+0x90>
 800522a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800522e:	9001      	str	r0, [sp, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f1a1 0404 	sub.w	r4, r1, #4
 8005236:	bfb8      	it	lt
 8005238:	18e4      	addlt	r4, r4, r3
 800523a:	f000 f8df 	bl	80053fc <__malloc_lock>
 800523e:	4a1e      	ldr	r2, [pc, #120]	; (80052b8 <_free_r+0x94>)
 8005240:	9801      	ldr	r0, [sp, #4]
 8005242:	6813      	ldr	r3, [r2, #0]
 8005244:	b933      	cbnz	r3, 8005254 <_free_r+0x30>
 8005246:	6063      	str	r3, [r4, #4]
 8005248:	6014      	str	r4, [r2, #0]
 800524a:	b003      	add	sp, #12
 800524c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005250:	f000 b8da 	b.w	8005408 <__malloc_unlock>
 8005254:	42a3      	cmp	r3, r4
 8005256:	d908      	bls.n	800526a <_free_r+0x46>
 8005258:	6825      	ldr	r5, [r4, #0]
 800525a:	1961      	adds	r1, r4, r5
 800525c:	428b      	cmp	r3, r1
 800525e:	bf01      	itttt	eq
 8005260:	6819      	ldreq	r1, [r3, #0]
 8005262:	685b      	ldreq	r3, [r3, #4]
 8005264:	1949      	addeq	r1, r1, r5
 8005266:	6021      	streq	r1, [r4, #0]
 8005268:	e7ed      	b.n	8005246 <_free_r+0x22>
 800526a:	461a      	mov	r2, r3
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	b10b      	cbz	r3, 8005274 <_free_r+0x50>
 8005270:	42a3      	cmp	r3, r4
 8005272:	d9fa      	bls.n	800526a <_free_r+0x46>
 8005274:	6811      	ldr	r1, [r2, #0]
 8005276:	1855      	adds	r5, r2, r1
 8005278:	42a5      	cmp	r5, r4
 800527a:	d10b      	bne.n	8005294 <_free_r+0x70>
 800527c:	6824      	ldr	r4, [r4, #0]
 800527e:	4421      	add	r1, r4
 8005280:	1854      	adds	r4, r2, r1
 8005282:	42a3      	cmp	r3, r4
 8005284:	6011      	str	r1, [r2, #0]
 8005286:	d1e0      	bne.n	800524a <_free_r+0x26>
 8005288:	681c      	ldr	r4, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	6053      	str	r3, [r2, #4]
 800528e:	440c      	add	r4, r1
 8005290:	6014      	str	r4, [r2, #0]
 8005292:	e7da      	b.n	800524a <_free_r+0x26>
 8005294:	d902      	bls.n	800529c <_free_r+0x78>
 8005296:	230c      	movs	r3, #12
 8005298:	6003      	str	r3, [r0, #0]
 800529a:	e7d6      	b.n	800524a <_free_r+0x26>
 800529c:	6825      	ldr	r5, [r4, #0]
 800529e:	1961      	adds	r1, r4, r5
 80052a0:	428b      	cmp	r3, r1
 80052a2:	bf04      	itt	eq
 80052a4:	6819      	ldreq	r1, [r3, #0]
 80052a6:	685b      	ldreq	r3, [r3, #4]
 80052a8:	6063      	str	r3, [r4, #4]
 80052aa:	bf04      	itt	eq
 80052ac:	1949      	addeq	r1, r1, r5
 80052ae:	6021      	streq	r1, [r4, #0]
 80052b0:	6054      	str	r4, [r2, #4]
 80052b2:	e7ca      	b.n	800524a <_free_r+0x26>
 80052b4:	b003      	add	sp, #12
 80052b6:	bd30      	pop	{r4, r5, pc}
 80052b8:	2000044c 	.word	0x2000044c

080052bc <sbrk_aligned>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	4e0e      	ldr	r6, [pc, #56]	; (80052f8 <sbrk_aligned+0x3c>)
 80052c0:	460c      	mov	r4, r1
 80052c2:	6831      	ldr	r1, [r6, #0]
 80052c4:	4605      	mov	r5, r0
 80052c6:	b911      	cbnz	r1, 80052ce <sbrk_aligned+0x12>
 80052c8:	f000 fcaa 	bl	8005c20 <_sbrk_r>
 80052cc:	6030      	str	r0, [r6, #0]
 80052ce:	4621      	mov	r1, r4
 80052d0:	4628      	mov	r0, r5
 80052d2:	f000 fca5 	bl	8005c20 <_sbrk_r>
 80052d6:	1c43      	adds	r3, r0, #1
 80052d8:	d00a      	beq.n	80052f0 <sbrk_aligned+0x34>
 80052da:	1cc4      	adds	r4, r0, #3
 80052dc:	f024 0403 	bic.w	r4, r4, #3
 80052e0:	42a0      	cmp	r0, r4
 80052e2:	d007      	beq.n	80052f4 <sbrk_aligned+0x38>
 80052e4:	1a21      	subs	r1, r4, r0
 80052e6:	4628      	mov	r0, r5
 80052e8:	f000 fc9a 	bl	8005c20 <_sbrk_r>
 80052ec:	3001      	adds	r0, #1
 80052ee:	d101      	bne.n	80052f4 <sbrk_aligned+0x38>
 80052f0:	f04f 34ff 	mov.w	r4, #4294967295
 80052f4:	4620      	mov	r0, r4
 80052f6:	bd70      	pop	{r4, r5, r6, pc}
 80052f8:	20000450 	.word	0x20000450

080052fc <_malloc_r>:
 80052fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005300:	1ccd      	adds	r5, r1, #3
 8005302:	f025 0503 	bic.w	r5, r5, #3
 8005306:	3508      	adds	r5, #8
 8005308:	2d0c      	cmp	r5, #12
 800530a:	bf38      	it	cc
 800530c:	250c      	movcc	r5, #12
 800530e:	2d00      	cmp	r5, #0
 8005310:	4607      	mov	r7, r0
 8005312:	db01      	blt.n	8005318 <_malloc_r+0x1c>
 8005314:	42a9      	cmp	r1, r5
 8005316:	d905      	bls.n	8005324 <_malloc_r+0x28>
 8005318:	230c      	movs	r3, #12
 800531a:	603b      	str	r3, [r7, #0]
 800531c:	2600      	movs	r6, #0
 800531e:	4630      	mov	r0, r6
 8005320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005324:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80053f8 <_malloc_r+0xfc>
 8005328:	f000 f868 	bl	80053fc <__malloc_lock>
 800532c:	f8d8 3000 	ldr.w	r3, [r8]
 8005330:	461c      	mov	r4, r3
 8005332:	bb5c      	cbnz	r4, 800538c <_malloc_r+0x90>
 8005334:	4629      	mov	r1, r5
 8005336:	4638      	mov	r0, r7
 8005338:	f7ff ffc0 	bl	80052bc <sbrk_aligned>
 800533c:	1c43      	adds	r3, r0, #1
 800533e:	4604      	mov	r4, r0
 8005340:	d155      	bne.n	80053ee <_malloc_r+0xf2>
 8005342:	f8d8 4000 	ldr.w	r4, [r8]
 8005346:	4626      	mov	r6, r4
 8005348:	2e00      	cmp	r6, #0
 800534a:	d145      	bne.n	80053d8 <_malloc_r+0xdc>
 800534c:	2c00      	cmp	r4, #0
 800534e:	d048      	beq.n	80053e2 <_malloc_r+0xe6>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	4631      	mov	r1, r6
 8005354:	4638      	mov	r0, r7
 8005356:	eb04 0903 	add.w	r9, r4, r3
 800535a:	f000 fc61 	bl	8005c20 <_sbrk_r>
 800535e:	4581      	cmp	r9, r0
 8005360:	d13f      	bne.n	80053e2 <_malloc_r+0xe6>
 8005362:	6821      	ldr	r1, [r4, #0]
 8005364:	1a6d      	subs	r5, r5, r1
 8005366:	4629      	mov	r1, r5
 8005368:	4638      	mov	r0, r7
 800536a:	f7ff ffa7 	bl	80052bc <sbrk_aligned>
 800536e:	3001      	adds	r0, #1
 8005370:	d037      	beq.n	80053e2 <_malloc_r+0xe6>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	442b      	add	r3, r5
 8005376:	6023      	str	r3, [r4, #0]
 8005378:	f8d8 3000 	ldr.w	r3, [r8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d038      	beq.n	80053f2 <_malloc_r+0xf6>
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	42a2      	cmp	r2, r4
 8005384:	d12b      	bne.n	80053de <_malloc_r+0xe2>
 8005386:	2200      	movs	r2, #0
 8005388:	605a      	str	r2, [r3, #4]
 800538a:	e00f      	b.n	80053ac <_malloc_r+0xb0>
 800538c:	6822      	ldr	r2, [r4, #0]
 800538e:	1b52      	subs	r2, r2, r5
 8005390:	d41f      	bmi.n	80053d2 <_malloc_r+0xd6>
 8005392:	2a0b      	cmp	r2, #11
 8005394:	d917      	bls.n	80053c6 <_malloc_r+0xca>
 8005396:	1961      	adds	r1, r4, r5
 8005398:	42a3      	cmp	r3, r4
 800539a:	6025      	str	r5, [r4, #0]
 800539c:	bf18      	it	ne
 800539e:	6059      	strne	r1, [r3, #4]
 80053a0:	6863      	ldr	r3, [r4, #4]
 80053a2:	bf08      	it	eq
 80053a4:	f8c8 1000 	streq.w	r1, [r8]
 80053a8:	5162      	str	r2, [r4, r5]
 80053aa:	604b      	str	r3, [r1, #4]
 80053ac:	4638      	mov	r0, r7
 80053ae:	f104 060b 	add.w	r6, r4, #11
 80053b2:	f000 f829 	bl	8005408 <__malloc_unlock>
 80053b6:	f026 0607 	bic.w	r6, r6, #7
 80053ba:	1d23      	adds	r3, r4, #4
 80053bc:	1af2      	subs	r2, r6, r3
 80053be:	d0ae      	beq.n	800531e <_malloc_r+0x22>
 80053c0:	1b9b      	subs	r3, r3, r6
 80053c2:	50a3      	str	r3, [r4, r2]
 80053c4:	e7ab      	b.n	800531e <_malloc_r+0x22>
 80053c6:	42a3      	cmp	r3, r4
 80053c8:	6862      	ldr	r2, [r4, #4]
 80053ca:	d1dd      	bne.n	8005388 <_malloc_r+0x8c>
 80053cc:	f8c8 2000 	str.w	r2, [r8]
 80053d0:	e7ec      	b.n	80053ac <_malloc_r+0xb0>
 80053d2:	4623      	mov	r3, r4
 80053d4:	6864      	ldr	r4, [r4, #4]
 80053d6:	e7ac      	b.n	8005332 <_malloc_r+0x36>
 80053d8:	4634      	mov	r4, r6
 80053da:	6876      	ldr	r6, [r6, #4]
 80053dc:	e7b4      	b.n	8005348 <_malloc_r+0x4c>
 80053de:	4613      	mov	r3, r2
 80053e0:	e7cc      	b.n	800537c <_malloc_r+0x80>
 80053e2:	230c      	movs	r3, #12
 80053e4:	603b      	str	r3, [r7, #0]
 80053e6:	4638      	mov	r0, r7
 80053e8:	f000 f80e 	bl	8005408 <__malloc_unlock>
 80053ec:	e797      	b.n	800531e <_malloc_r+0x22>
 80053ee:	6025      	str	r5, [r4, #0]
 80053f0:	e7dc      	b.n	80053ac <_malloc_r+0xb0>
 80053f2:	605b      	str	r3, [r3, #4]
 80053f4:	deff      	udf	#255	; 0xff
 80053f6:	bf00      	nop
 80053f8:	2000044c 	.word	0x2000044c

080053fc <__malloc_lock>:
 80053fc:	4801      	ldr	r0, [pc, #4]	; (8005404 <__malloc_lock+0x8>)
 80053fe:	f7ff bf0f 	b.w	8005220 <__retarget_lock_acquire_recursive>
 8005402:	bf00      	nop
 8005404:	20000448 	.word	0x20000448

08005408 <__malloc_unlock>:
 8005408:	4801      	ldr	r0, [pc, #4]	; (8005410 <__malloc_unlock+0x8>)
 800540a:	f7ff bf0a 	b.w	8005222 <__retarget_lock_release_recursive>
 800540e:	bf00      	nop
 8005410:	20000448 	.word	0x20000448

08005414 <__sfputc_r>:
 8005414:	6893      	ldr	r3, [r2, #8]
 8005416:	3b01      	subs	r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	b410      	push	{r4}
 800541c:	6093      	str	r3, [r2, #8]
 800541e:	da08      	bge.n	8005432 <__sfputc_r+0x1e>
 8005420:	6994      	ldr	r4, [r2, #24]
 8005422:	42a3      	cmp	r3, r4
 8005424:	db01      	blt.n	800542a <__sfputc_r+0x16>
 8005426:	290a      	cmp	r1, #10
 8005428:	d103      	bne.n	8005432 <__sfputc_r+0x1e>
 800542a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800542e:	f7ff bdea 	b.w	8005006 <__swbuf_r>
 8005432:	6813      	ldr	r3, [r2, #0]
 8005434:	1c58      	adds	r0, r3, #1
 8005436:	6010      	str	r0, [r2, #0]
 8005438:	7019      	strb	r1, [r3, #0]
 800543a:	4608      	mov	r0, r1
 800543c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005440:	4770      	bx	lr

08005442 <__sfputs_r>:
 8005442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005444:	4606      	mov	r6, r0
 8005446:	460f      	mov	r7, r1
 8005448:	4614      	mov	r4, r2
 800544a:	18d5      	adds	r5, r2, r3
 800544c:	42ac      	cmp	r4, r5
 800544e:	d101      	bne.n	8005454 <__sfputs_r+0x12>
 8005450:	2000      	movs	r0, #0
 8005452:	e007      	b.n	8005464 <__sfputs_r+0x22>
 8005454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005458:	463a      	mov	r2, r7
 800545a:	4630      	mov	r0, r6
 800545c:	f7ff ffda 	bl	8005414 <__sfputc_r>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d1f3      	bne.n	800544c <__sfputs_r+0xa>
 8005464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005468 <_vfiprintf_r>:
 8005468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800546c:	460d      	mov	r5, r1
 800546e:	b09d      	sub	sp, #116	; 0x74
 8005470:	4614      	mov	r4, r2
 8005472:	4698      	mov	r8, r3
 8005474:	4606      	mov	r6, r0
 8005476:	b118      	cbz	r0, 8005480 <_vfiprintf_r+0x18>
 8005478:	6a03      	ldr	r3, [r0, #32]
 800547a:	b90b      	cbnz	r3, 8005480 <_vfiprintf_r+0x18>
 800547c:	f7ff fcdc 	bl	8004e38 <__sinit>
 8005480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005482:	07d9      	lsls	r1, r3, #31
 8005484:	d405      	bmi.n	8005492 <_vfiprintf_r+0x2a>
 8005486:	89ab      	ldrh	r3, [r5, #12]
 8005488:	059a      	lsls	r2, r3, #22
 800548a:	d402      	bmi.n	8005492 <_vfiprintf_r+0x2a>
 800548c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800548e:	f7ff fec7 	bl	8005220 <__retarget_lock_acquire_recursive>
 8005492:	89ab      	ldrh	r3, [r5, #12]
 8005494:	071b      	lsls	r3, r3, #28
 8005496:	d501      	bpl.n	800549c <_vfiprintf_r+0x34>
 8005498:	692b      	ldr	r3, [r5, #16]
 800549a:	b99b      	cbnz	r3, 80054c4 <_vfiprintf_r+0x5c>
 800549c:	4629      	mov	r1, r5
 800549e:	4630      	mov	r0, r6
 80054a0:	f7ff fdee 	bl	8005080 <__swsetup_r>
 80054a4:	b170      	cbz	r0, 80054c4 <_vfiprintf_r+0x5c>
 80054a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054a8:	07dc      	lsls	r4, r3, #31
 80054aa:	d504      	bpl.n	80054b6 <_vfiprintf_r+0x4e>
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295
 80054b0:	b01d      	add	sp, #116	; 0x74
 80054b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b6:	89ab      	ldrh	r3, [r5, #12]
 80054b8:	0598      	lsls	r0, r3, #22
 80054ba:	d4f7      	bmi.n	80054ac <_vfiprintf_r+0x44>
 80054bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054be:	f7ff feb0 	bl	8005222 <__retarget_lock_release_recursive>
 80054c2:	e7f3      	b.n	80054ac <_vfiprintf_r+0x44>
 80054c4:	2300      	movs	r3, #0
 80054c6:	9309      	str	r3, [sp, #36]	; 0x24
 80054c8:	2320      	movs	r3, #32
 80054ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80054d2:	2330      	movs	r3, #48	; 0x30
 80054d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005688 <_vfiprintf_r+0x220>
 80054d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054dc:	f04f 0901 	mov.w	r9, #1
 80054e0:	4623      	mov	r3, r4
 80054e2:	469a      	mov	sl, r3
 80054e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054e8:	b10a      	cbz	r2, 80054ee <_vfiprintf_r+0x86>
 80054ea:	2a25      	cmp	r2, #37	; 0x25
 80054ec:	d1f9      	bne.n	80054e2 <_vfiprintf_r+0x7a>
 80054ee:	ebba 0b04 	subs.w	fp, sl, r4
 80054f2:	d00b      	beq.n	800550c <_vfiprintf_r+0xa4>
 80054f4:	465b      	mov	r3, fp
 80054f6:	4622      	mov	r2, r4
 80054f8:	4629      	mov	r1, r5
 80054fa:	4630      	mov	r0, r6
 80054fc:	f7ff ffa1 	bl	8005442 <__sfputs_r>
 8005500:	3001      	adds	r0, #1
 8005502:	f000 80a9 	beq.w	8005658 <_vfiprintf_r+0x1f0>
 8005506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005508:	445a      	add	r2, fp
 800550a:	9209      	str	r2, [sp, #36]	; 0x24
 800550c:	f89a 3000 	ldrb.w	r3, [sl]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 80a1 	beq.w	8005658 <_vfiprintf_r+0x1f0>
 8005516:	2300      	movs	r3, #0
 8005518:	f04f 32ff 	mov.w	r2, #4294967295
 800551c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005520:	f10a 0a01 	add.w	sl, sl, #1
 8005524:	9304      	str	r3, [sp, #16]
 8005526:	9307      	str	r3, [sp, #28]
 8005528:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800552c:	931a      	str	r3, [sp, #104]	; 0x68
 800552e:	4654      	mov	r4, sl
 8005530:	2205      	movs	r2, #5
 8005532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005536:	4854      	ldr	r0, [pc, #336]	; (8005688 <_vfiprintf_r+0x220>)
 8005538:	f7fa fe72 	bl	8000220 <memchr>
 800553c:	9a04      	ldr	r2, [sp, #16]
 800553e:	b9d8      	cbnz	r0, 8005578 <_vfiprintf_r+0x110>
 8005540:	06d1      	lsls	r1, r2, #27
 8005542:	bf44      	itt	mi
 8005544:	2320      	movmi	r3, #32
 8005546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800554a:	0713      	lsls	r3, r2, #28
 800554c:	bf44      	itt	mi
 800554e:	232b      	movmi	r3, #43	; 0x2b
 8005550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005554:	f89a 3000 	ldrb.w	r3, [sl]
 8005558:	2b2a      	cmp	r3, #42	; 0x2a
 800555a:	d015      	beq.n	8005588 <_vfiprintf_r+0x120>
 800555c:	9a07      	ldr	r2, [sp, #28]
 800555e:	4654      	mov	r4, sl
 8005560:	2000      	movs	r0, #0
 8005562:	f04f 0c0a 	mov.w	ip, #10
 8005566:	4621      	mov	r1, r4
 8005568:	f811 3b01 	ldrb.w	r3, [r1], #1
 800556c:	3b30      	subs	r3, #48	; 0x30
 800556e:	2b09      	cmp	r3, #9
 8005570:	d94d      	bls.n	800560e <_vfiprintf_r+0x1a6>
 8005572:	b1b0      	cbz	r0, 80055a2 <_vfiprintf_r+0x13a>
 8005574:	9207      	str	r2, [sp, #28]
 8005576:	e014      	b.n	80055a2 <_vfiprintf_r+0x13a>
 8005578:	eba0 0308 	sub.w	r3, r0, r8
 800557c:	fa09 f303 	lsl.w	r3, r9, r3
 8005580:	4313      	orrs	r3, r2
 8005582:	9304      	str	r3, [sp, #16]
 8005584:	46a2      	mov	sl, r4
 8005586:	e7d2      	b.n	800552e <_vfiprintf_r+0xc6>
 8005588:	9b03      	ldr	r3, [sp, #12]
 800558a:	1d19      	adds	r1, r3, #4
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	9103      	str	r1, [sp, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	bfbb      	ittet	lt
 8005594:	425b      	neglt	r3, r3
 8005596:	f042 0202 	orrlt.w	r2, r2, #2
 800559a:	9307      	strge	r3, [sp, #28]
 800559c:	9307      	strlt	r3, [sp, #28]
 800559e:	bfb8      	it	lt
 80055a0:	9204      	strlt	r2, [sp, #16]
 80055a2:	7823      	ldrb	r3, [r4, #0]
 80055a4:	2b2e      	cmp	r3, #46	; 0x2e
 80055a6:	d10c      	bne.n	80055c2 <_vfiprintf_r+0x15a>
 80055a8:	7863      	ldrb	r3, [r4, #1]
 80055aa:	2b2a      	cmp	r3, #42	; 0x2a
 80055ac:	d134      	bne.n	8005618 <_vfiprintf_r+0x1b0>
 80055ae:	9b03      	ldr	r3, [sp, #12]
 80055b0:	1d1a      	adds	r2, r3, #4
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	9203      	str	r2, [sp, #12]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	bfb8      	it	lt
 80055ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80055be:	3402      	adds	r4, #2
 80055c0:	9305      	str	r3, [sp, #20]
 80055c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005698 <_vfiprintf_r+0x230>
 80055c6:	7821      	ldrb	r1, [r4, #0]
 80055c8:	2203      	movs	r2, #3
 80055ca:	4650      	mov	r0, sl
 80055cc:	f7fa fe28 	bl	8000220 <memchr>
 80055d0:	b138      	cbz	r0, 80055e2 <_vfiprintf_r+0x17a>
 80055d2:	9b04      	ldr	r3, [sp, #16]
 80055d4:	eba0 000a 	sub.w	r0, r0, sl
 80055d8:	2240      	movs	r2, #64	; 0x40
 80055da:	4082      	lsls	r2, r0
 80055dc:	4313      	orrs	r3, r2
 80055de:	3401      	adds	r4, #1
 80055e0:	9304      	str	r3, [sp, #16]
 80055e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055e6:	4829      	ldr	r0, [pc, #164]	; (800568c <_vfiprintf_r+0x224>)
 80055e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055ec:	2206      	movs	r2, #6
 80055ee:	f7fa fe17 	bl	8000220 <memchr>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d03f      	beq.n	8005676 <_vfiprintf_r+0x20e>
 80055f6:	4b26      	ldr	r3, [pc, #152]	; (8005690 <_vfiprintf_r+0x228>)
 80055f8:	bb1b      	cbnz	r3, 8005642 <_vfiprintf_r+0x1da>
 80055fa:	9b03      	ldr	r3, [sp, #12]
 80055fc:	3307      	adds	r3, #7
 80055fe:	f023 0307 	bic.w	r3, r3, #7
 8005602:	3308      	adds	r3, #8
 8005604:	9303      	str	r3, [sp, #12]
 8005606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005608:	443b      	add	r3, r7
 800560a:	9309      	str	r3, [sp, #36]	; 0x24
 800560c:	e768      	b.n	80054e0 <_vfiprintf_r+0x78>
 800560e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005612:	460c      	mov	r4, r1
 8005614:	2001      	movs	r0, #1
 8005616:	e7a6      	b.n	8005566 <_vfiprintf_r+0xfe>
 8005618:	2300      	movs	r3, #0
 800561a:	3401      	adds	r4, #1
 800561c:	9305      	str	r3, [sp, #20]
 800561e:	4619      	mov	r1, r3
 8005620:	f04f 0c0a 	mov.w	ip, #10
 8005624:	4620      	mov	r0, r4
 8005626:	f810 2b01 	ldrb.w	r2, [r0], #1
 800562a:	3a30      	subs	r2, #48	; 0x30
 800562c:	2a09      	cmp	r2, #9
 800562e:	d903      	bls.n	8005638 <_vfiprintf_r+0x1d0>
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0c6      	beq.n	80055c2 <_vfiprintf_r+0x15a>
 8005634:	9105      	str	r1, [sp, #20]
 8005636:	e7c4      	b.n	80055c2 <_vfiprintf_r+0x15a>
 8005638:	fb0c 2101 	mla	r1, ip, r1, r2
 800563c:	4604      	mov	r4, r0
 800563e:	2301      	movs	r3, #1
 8005640:	e7f0      	b.n	8005624 <_vfiprintf_r+0x1bc>
 8005642:	ab03      	add	r3, sp, #12
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	462a      	mov	r2, r5
 8005648:	4b12      	ldr	r3, [pc, #72]	; (8005694 <_vfiprintf_r+0x22c>)
 800564a:	a904      	add	r1, sp, #16
 800564c:	4630      	mov	r0, r6
 800564e:	f3af 8000 	nop.w
 8005652:	4607      	mov	r7, r0
 8005654:	1c78      	adds	r0, r7, #1
 8005656:	d1d6      	bne.n	8005606 <_vfiprintf_r+0x19e>
 8005658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800565a:	07d9      	lsls	r1, r3, #31
 800565c:	d405      	bmi.n	800566a <_vfiprintf_r+0x202>
 800565e:	89ab      	ldrh	r3, [r5, #12]
 8005660:	059a      	lsls	r2, r3, #22
 8005662:	d402      	bmi.n	800566a <_vfiprintf_r+0x202>
 8005664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005666:	f7ff fddc 	bl	8005222 <__retarget_lock_release_recursive>
 800566a:	89ab      	ldrh	r3, [r5, #12]
 800566c:	065b      	lsls	r3, r3, #25
 800566e:	f53f af1d 	bmi.w	80054ac <_vfiprintf_r+0x44>
 8005672:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005674:	e71c      	b.n	80054b0 <_vfiprintf_r+0x48>
 8005676:	ab03      	add	r3, sp, #12
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	462a      	mov	r2, r5
 800567c:	4b05      	ldr	r3, [pc, #20]	; (8005694 <_vfiprintf_r+0x22c>)
 800567e:	a904      	add	r1, sp, #16
 8005680:	4630      	mov	r0, r6
 8005682:	f000 f879 	bl	8005778 <_printf_i>
 8005686:	e7e4      	b.n	8005652 <_vfiprintf_r+0x1ea>
 8005688:	08005d84 	.word	0x08005d84
 800568c:	08005d8e 	.word	0x08005d8e
 8005690:	00000000 	.word	0x00000000
 8005694:	08005443 	.word	0x08005443
 8005698:	08005d8a 	.word	0x08005d8a

0800569c <_printf_common>:
 800569c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a0:	4616      	mov	r6, r2
 80056a2:	4699      	mov	r9, r3
 80056a4:	688a      	ldr	r2, [r1, #8]
 80056a6:	690b      	ldr	r3, [r1, #16]
 80056a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056ac:	4293      	cmp	r3, r2
 80056ae:	bfb8      	it	lt
 80056b0:	4613      	movlt	r3, r2
 80056b2:	6033      	str	r3, [r6, #0]
 80056b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056b8:	4607      	mov	r7, r0
 80056ba:	460c      	mov	r4, r1
 80056bc:	b10a      	cbz	r2, 80056c2 <_printf_common+0x26>
 80056be:	3301      	adds	r3, #1
 80056c0:	6033      	str	r3, [r6, #0]
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	0699      	lsls	r1, r3, #26
 80056c6:	bf42      	ittt	mi
 80056c8:	6833      	ldrmi	r3, [r6, #0]
 80056ca:	3302      	addmi	r3, #2
 80056cc:	6033      	strmi	r3, [r6, #0]
 80056ce:	6825      	ldr	r5, [r4, #0]
 80056d0:	f015 0506 	ands.w	r5, r5, #6
 80056d4:	d106      	bne.n	80056e4 <_printf_common+0x48>
 80056d6:	f104 0a19 	add.w	sl, r4, #25
 80056da:	68e3      	ldr	r3, [r4, #12]
 80056dc:	6832      	ldr	r2, [r6, #0]
 80056de:	1a9b      	subs	r3, r3, r2
 80056e0:	42ab      	cmp	r3, r5
 80056e2:	dc26      	bgt.n	8005732 <_printf_common+0x96>
 80056e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056e8:	1e13      	subs	r3, r2, #0
 80056ea:	6822      	ldr	r2, [r4, #0]
 80056ec:	bf18      	it	ne
 80056ee:	2301      	movne	r3, #1
 80056f0:	0692      	lsls	r2, r2, #26
 80056f2:	d42b      	bmi.n	800574c <_printf_common+0xb0>
 80056f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056f8:	4649      	mov	r1, r9
 80056fa:	4638      	mov	r0, r7
 80056fc:	47c0      	blx	r8
 80056fe:	3001      	adds	r0, #1
 8005700:	d01e      	beq.n	8005740 <_printf_common+0xa4>
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	6922      	ldr	r2, [r4, #16]
 8005706:	f003 0306 	and.w	r3, r3, #6
 800570a:	2b04      	cmp	r3, #4
 800570c:	bf02      	ittt	eq
 800570e:	68e5      	ldreq	r5, [r4, #12]
 8005710:	6833      	ldreq	r3, [r6, #0]
 8005712:	1aed      	subeq	r5, r5, r3
 8005714:	68a3      	ldr	r3, [r4, #8]
 8005716:	bf0c      	ite	eq
 8005718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800571c:	2500      	movne	r5, #0
 800571e:	4293      	cmp	r3, r2
 8005720:	bfc4      	itt	gt
 8005722:	1a9b      	subgt	r3, r3, r2
 8005724:	18ed      	addgt	r5, r5, r3
 8005726:	2600      	movs	r6, #0
 8005728:	341a      	adds	r4, #26
 800572a:	42b5      	cmp	r5, r6
 800572c:	d11a      	bne.n	8005764 <_printf_common+0xc8>
 800572e:	2000      	movs	r0, #0
 8005730:	e008      	b.n	8005744 <_printf_common+0xa8>
 8005732:	2301      	movs	r3, #1
 8005734:	4652      	mov	r2, sl
 8005736:	4649      	mov	r1, r9
 8005738:	4638      	mov	r0, r7
 800573a:	47c0      	blx	r8
 800573c:	3001      	adds	r0, #1
 800573e:	d103      	bne.n	8005748 <_printf_common+0xac>
 8005740:	f04f 30ff 	mov.w	r0, #4294967295
 8005744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005748:	3501      	adds	r5, #1
 800574a:	e7c6      	b.n	80056da <_printf_common+0x3e>
 800574c:	18e1      	adds	r1, r4, r3
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	2030      	movs	r0, #48	; 0x30
 8005752:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005756:	4422      	add	r2, r4
 8005758:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800575c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005760:	3302      	adds	r3, #2
 8005762:	e7c7      	b.n	80056f4 <_printf_common+0x58>
 8005764:	2301      	movs	r3, #1
 8005766:	4622      	mov	r2, r4
 8005768:	4649      	mov	r1, r9
 800576a:	4638      	mov	r0, r7
 800576c:	47c0      	blx	r8
 800576e:	3001      	adds	r0, #1
 8005770:	d0e6      	beq.n	8005740 <_printf_common+0xa4>
 8005772:	3601      	adds	r6, #1
 8005774:	e7d9      	b.n	800572a <_printf_common+0x8e>
	...

08005778 <_printf_i>:
 8005778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800577c:	7e0f      	ldrb	r7, [r1, #24]
 800577e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005780:	2f78      	cmp	r7, #120	; 0x78
 8005782:	4691      	mov	r9, r2
 8005784:	4680      	mov	r8, r0
 8005786:	460c      	mov	r4, r1
 8005788:	469a      	mov	sl, r3
 800578a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800578e:	d807      	bhi.n	80057a0 <_printf_i+0x28>
 8005790:	2f62      	cmp	r7, #98	; 0x62
 8005792:	d80a      	bhi.n	80057aa <_printf_i+0x32>
 8005794:	2f00      	cmp	r7, #0
 8005796:	f000 80d4 	beq.w	8005942 <_printf_i+0x1ca>
 800579a:	2f58      	cmp	r7, #88	; 0x58
 800579c:	f000 80c0 	beq.w	8005920 <_printf_i+0x1a8>
 80057a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057a8:	e03a      	b.n	8005820 <_printf_i+0xa8>
 80057aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057ae:	2b15      	cmp	r3, #21
 80057b0:	d8f6      	bhi.n	80057a0 <_printf_i+0x28>
 80057b2:	a101      	add	r1, pc, #4	; (adr r1, 80057b8 <_printf_i+0x40>)
 80057b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057b8:	08005811 	.word	0x08005811
 80057bc:	08005825 	.word	0x08005825
 80057c0:	080057a1 	.word	0x080057a1
 80057c4:	080057a1 	.word	0x080057a1
 80057c8:	080057a1 	.word	0x080057a1
 80057cc:	080057a1 	.word	0x080057a1
 80057d0:	08005825 	.word	0x08005825
 80057d4:	080057a1 	.word	0x080057a1
 80057d8:	080057a1 	.word	0x080057a1
 80057dc:	080057a1 	.word	0x080057a1
 80057e0:	080057a1 	.word	0x080057a1
 80057e4:	08005929 	.word	0x08005929
 80057e8:	08005851 	.word	0x08005851
 80057ec:	080058e3 	.word	0x080058e3
 80057f0:	080057a1 	.word	0x080057a1
 80057f4:	080057a1 	.word	0x080057a1
 80057f8:	0800594b 	.word	0x0800594b
 80057fc:	080057a1 	.word	0x080057a1
 8005800:	08005851 	.word	0x08005851
 8005804:	080057a1 	.word	0x080057a1
 8005808:	080057a1 	.word	0x080057a1
 800580c:	080058eb 	.word	0x080058eb
 8005810:	682b      	ldr	r3, [r5, #0]
 8005812:	1d1a      	adds	r2, r3, #4
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	602a      	str	r2, [r5, #0]
 8005818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800581c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005820:	2301      	movs	r3, #1
 8005822:	e09f      	b.n	8005964 <_printf_i+0x1ec>
 8005824:	6820      	ldr	r0, [r4, #0]
 8005826:	682b      	ldr	r3, [r5, #0]
 8005828:	0607      	lsls	r7, r0, #24
 800582a:	f103 0104 	add.w	r1, r3, #4
 800582e:	6029      	str	r1, [r5, #0]
 8005830:	d501      	bpl.n	8005836 <_printf_i+0xbe>
 8005832:	681e      	ldr	r6, [r3, #0]
 8005834:	e003      	b.n	800583e <_printf_i+0xc6>
 8005836:	0646      	lsls	r6, r0, #25
 8005838:	d5fb      	bpl.n	8005832 <_printf_i+0xba>
 800583a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800583e:	2e00      	cmp	r6, #0
 8005840:	da03      	bge.n	800584a <_printf_i+0xd2>
 8005842:	232d      	movs	r3, #45	; 0x2d
 8005844:	4276      	negs	r6, r6
 8005846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800584a:	485a      	ldr	r0, [pc, #360]	; (80059b4 <_printf_i+0x23c>)
 800584c:	230a      	movs	r3, #10
 800584e:	e012      	b.n	8005876 <_printf_i+0xfe>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	6820      	ldr	r0, [r4, #0]
 8005854:	1d19      	adds	r1, r3, #4
 8005856:	6029      	str	r1, [r5, #0]
 8005858:	0605      	lsls	r5, r0, #24
 800585a:	d501      	bpl.n	8005860 <_printf_i+0xe8>
 800585c:	681e      	ldr	r6, [r3, #0]
 800585e:	e002      	b.n	8005866 <_printf_i+0xee>
 8005860:	0641      	lsls	r1, r0, #25
 8005862:	d5fb      	bpl.n	800585c <_printf_i+0xe4>
 8005864:	881e      	ldrh	r6, [r3, #0]
 8005866:	4853      	ldr	r0, [pc, #332]	; (80059b4 <_printf_i+0x23c>)
 8005868:	2f6f      	cmp	r7, #111	; 0x6f
 800586a:	bf0c      	ite	eq
 800586c:	2308      	moveq	r3, #8
 800586e:	230a      	movne	r3, #10
 8005870:	2100      	movs	r1, #0
 8005872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005876:	6865      	ldr	r5, [r4, #4]
 8005878:	60a5      	str	r5, [r4, #8]
 800587a:	2d00      	cmp	r5, #0
 800587c:	bfa2      	ittt	ge
 800587e:	6821      	ldrge	r1, [r4, #0]
 8005880:	f021 0104 	bicge.w	r1, r1, #4
 8005884:	6021      	strge	r1, [r4, #0]
 8005886:	b90e      	cbnz	r6, 800588c <_printf_i+0x114>
 8005888:	2d00      	cmp	r5, #0
 800588a:	d04b      	beq.n	8005924 <_printf_i+0x1ac>
 800588c:	4615      	mov	r5, r2
 800588e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005892:	fb03 6711 	mls	r7, r3, r1, r6
 8005896:	5dc7      	ldrb	r7, [r0, r7]
 8005898:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800589c:	4637      	mov	r7, r6
 800589e:	42bb      	cmp	r3, r7
 80058a0:	460e      	mov	r6, r1
 80058a2:	d9f4      	bls.n	800588e <_printf_i+0x116>
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d10b      	bne.n	80058c0 <_printf_i+0x148>
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	07de      	lsls	r6, r3, #31
 80058ac:	d508      	bpl.n	80058c0 <_printf_i+0x148>
 80058ae:	6923      	ldr	r3, [r4, #16]
 80058b0:	6861      	ldr	r1, [r4, #4]
 80058b2:	4299      	cmp	r1, r3
 80058b4:	bfde      	ittt	le
 80058b6:	2330      	movle	r3, #48	; 0x30
 80058b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058c0:	1b52      	subs	r2, r2, r5
 80058c2:	6122      	str	r2, [r4, #16]
 80058c4:	f8cd a000 	str.w	sl, [sp]
 80058c8:	464b      	mov	r3, r9
 80058ca:	aa03      	add	r2, sp, #12
 80058cc:	4621      	mov	r1, r4
 80058ce:	4640      	mov	r0, r8
 80058d0:	f7ff fee4 	bl	800569c <_printf_common>
 80058d4:	3001      	adds	r0, #1
 80058d6:	d14a      	bne.n	800596e <_printf_i+0x1f6>
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	b004      	add	sp, #16
 80058de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	f043 0320 	orr.w	r3, r3, #32
 80058e8:	6023      	str	r3, [r4, #0]
 80058ea:	4833      	ldr	r0, [pc, #204]	; (80059b8 <_printf_i+0x240>)
 80058ec:	2778      	movs	r7, #120	; 0x78
 80058ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	6829      	ldr	r1, [r5, #0]
 80058f6:	061f      	lsls	r7, r3, #24
 80058f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80058fc:	d402      	bmi.n	8005904 <_printf_i+0x18c>
 80058fe:	065f      	lsls	r7, r3, #25
 8005900:	bf48      	it	mi
 8005902:	b2b6      	uxthmi	r6, r6
 8005904:	07df      	lsls	r7, r3, #31
 8005906:	bf48      	it	mi
 8005908:	f043 0320 	orrmi.w	r3, r3, #32
 800590c:	6029      	str	r1, [r5, #0]
 800590e:	bf48      	it	mi
 8005910:	6023      	strmi	r3, [r4, #0]
 8005912:	b91e      	cbnz	r6, 800591c <_printf_i+0x1a4>
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	f023 0320 	bic.w	r3, r3, #32
 800591a:	6023      	str	r3, [r4, #0]
 800591c:	2310      	movs	r3, #16
 800591e:	e7a7      	b.n	8005870 <_printf_i+0xf8>
 8005920:	4824      	ldr	r0, [pc, #144]	; (80059b4 <_printf_i+0x23c>)
 8005922:	e7e4      	b.n	80058ee <_printf_i+0x176>
 8005924:	4615      	mov	r5, r2
 8005926:	e7bd      	b.n	80058a4 <_printf_i+0x12c>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	6826      	ldr	r6, [r4, #0]
 800592c:	6961      	ldr	r1, [r4, #20]
 800592e:	1d18      	adds	r0, r3, #4
 8005930:	6028      	str	r0, [r5, #0]
 8005932:	0635      	lsls	r5, r6, #24
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	d501      	bpl.n	800593c <_printf_i+0x1c4>
 8005938:	6019      	str	r1, [r3, #0]
 800593a:	e002      	b.n	8005942 <_printf_i+0x1ca>
 800593c:	0670      	lsls	r0, r6, #25
 800593e:	d5fb      	bpl.n	8005938 <_printf_i+0x1c0>
 8005940:	8019      	strh	r1, [r3, #0]
 8005942:	2300      	movs	r3, #0
 8005944:	6123      	str	r3, [r4, #16]
 8005946:	4615      	mov	r5, r2
 8005948:	e7bc      	b.n	80058c4 <_printf_i+0x14c>
 800594a:	682b      	ldr	r3, [r5, #0]
 800594c:	1d1a      	adds	r2, r3, #4
 800594e:	602a      	str	r2, [r5, #0]
 8005950:	681d      	ldr	r5, [r3, #0]
 8005952:	6862      	ldr	r2, [r4, #4]
 8005954:	2100      	movs	r1, #0
 8005956:	4628      	mov	r0, r5
 8005958:	f7fa fc62 	bl	8000220 <memchr>
 800595c:	b108      	cbz	r0, 8005962 <_printf_i+0x1ea>
 800595e:	1b40      	subs	r0, r0, r5
 8005960:	6060      	str	r0, [r4, #4]
 8005962:	6863      	ldr	r3, [r4, #4]
 8005964:	6123      	str	r3, [r4, #16]
 8005966:	2300      	movs	r3, #0
 8005968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800596c:	e7aa      	b.n	80058c4 <_printf_i+0x14c>
 800596e:	6923      	ldr	r3, [r4, #16]
 8005970:	462a      	mov	r2, r5
 8005972:	4649      	mov	r1, r9
 8005974:	4640      	mov	r0, r8
 8005976:	47d0      	blx	sl
 8005978:	3001      	adds	r0, #1
 800597a:	d0ad      	beq.n	80058d8 <_printf_i+0x160>
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	079b      	lsls	r3, r3, #30
 8005980:	d413      	bmi.n	80059aa <_printf_i+0x232>
 8005982:	68e0      	ldr	r0, [r4, #12]
 8005984:	9b03      	ldr	r3, [sp, #12]
 8005986:	4298      	cmp	r0, r3
 8005988:	bfb8      	it	lt
 800598a:	4618      	movlt	r0, r3
 800598c:	e7a6      	b.n	80058dc <_printf_i+0x164>
 800598e:	2301      	movs	r3, #1
 8005990:	4632      	mov	r2, r6
 8005992:	4649      	mov	r1, r9
 8005994:	4640      	mov	r0, r8
 8005996:	47d0      	blx	sl
 8005998:	3001      	adds	r0, #1
 800599a:	d09d      	beq.n	80058d8 <_printf_i+0x160>
 800599c:	3501      	adds	r5, #1
 800599e:	68e3      	ldr	r3, [r4, #12]
 80059a0:	9903      	ldr	r1, [sp, #12]
 80059a2:	1a5b      	subs	r3, r3, r1
 80059a4:	42ab      	cmp	r3, r5
 80059a6:	dcf2      	bgt.n	800598e <_printf_i+0x216>
 80059a8:	e7eb      	b.n	8005982 <_printf_i+0x20a>
 80059aa:	2500      	movs	r5, #0
 80059ac:	f104 0619 	add.w	r6, r4, #25
 80059b0:	e7f5      	b.n	800599e <_printf_i+0x226>
 80059b2:	bf00      	nop
 80059b4:	08005d95 	.word	0x08005d95
 80059b8:	08005da6 	.word	0x08005da6

080059bc <__sflush_r>:
 80059bc:	898a      	ldrh	r2, [r1, #12]
 80059be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c2:	4605      	mov	r5, r0
 80059c4:	0710      	lsls	r0, r2, #28
 80059c6:	460c      	mov	r4, r1
 80059c8:	d458      	bmi.n	8005a7c <__sflush_r+0xc0>
 80059ca:	684b      	ldr	r3, [r1, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	dc05      	bgt.n	80059dc <__sflush_r+0x20>
 80059d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	dc02      	bgt.n	80059dc <__sflush_r+0x20>
 80059d6:	2000      	movs	r0, #0
 80059d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059de:	2e00      	cmp	r6, #0
 80059e0:	d0f9      	beq.n	80059d6 <__sflush_r+0x1a>
 80059e2:	2300      	movs	r3, #0
 80059e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059e8:	682f      	ldr	r7, [r5, #0]
 80059ea:	6a21      	ldr	r1, [r4, #32]
 80059ec:	602b      	str	r3, [r5, #0]
 80059ee:	d032      	beq.n	8005a56 <__sflush_r+0x9a>
 80059f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059f2:	89a3      	ldrh	r3, [r4, #12]
 80059f4:	075a      	lsls	r2, r3, #29
 80059f6:	d505      	bpl.n	8005a04 <__sflush_r+0x48>
 80059f8:	6863      	ldr	r3, [r4, #4]
 80059fa:	1ac0      	subs	r0, r0, r3
 80059fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059fe:	b10b      	cbz	r3, 8005a04 <__sflush_r+0x48>
 8005a00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a02:	1ac0      	subs	r0, r0, r3
 8005a04:	2300      	movs	r3, #0
 8005a06:	4602      	mov	r2, r0
 8005a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a0a:	6a21      	ldr	r1, [r4, #32]
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	47b0      	blx	r6
 8005a10:	1c43      	adds	r3, r0, #1
 8005a12:	89a3      	ldrh	r3, [r4, #12]
 8005a14:	d106      	bne.n	8005a24 <__sflush_r+0x68>
 8005a16:	6829      	ldr	r1, [r5, #0]
 8005a18:	291d      	cmp	r1, #29
 8005a1a:	d82b      	bhi.n	8005a74 <__sflush_r+0xb8>
 8005a1c:	4a29      	ldr	r2, [pc, #164]	; (8005ac4 <__sflush_r+0x108>)
 8005a1e:	410a      	asrs	r2, r1
 8005a20:	07d6      	lsls	r6, r2, #31
 8005a22:	d427      	bmi.n	8005a74 <__sflush_r+0xb8>
 8005a24:	2200      	movs	r2, #0
 8005a26:	6062      	str	r2, [r4, #4]
 8005a28:	04d9      	lsls	r1, r3, #19
 8005a2a:	6922      	ldr	r2, [r4, #16]
 8005a2c:	6022      	str	r2, [r4, #0]
 8005a2e:	d504      	bpl.n	8005a3a <__sflush_r+0x7e>
 8005a30:	1c42      	adds	r2, r0, #1
 8005a32:	d101      	bne.n	8005a38 <__sflush_r+0x7c>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	b903      	cbnz	r3, 8005a3a <__sflush_r+0x7e>
 8005a38:	6560      	str	r0, [r4, #84]	; 0x54
 8005a3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a3c:	602f      	str	r7, [r5, #0]
 8005a3e:	2900      	cmp	r1, #0
 8005a40:	d0c9      	beq.n	80059d6 <__sflush_r+0x1a>
 8005a42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a46:	4299      	cmp	r1, r3
 8005a48:	d002      	beq.n	8005a50 <__sflush_r+0x94>
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	f7ff fbea 	bl	8005224 <_free_r>
 8005a50:	2000      	movs	r0, #0
 8005a52:	6360      	str	r0, [r4, #52]	; 0x34
 8005a54:	e7c0      	b.n	80059d8 <__sflush_r+0x1c>
 8005a56:	2301      	movs	r3, #1
 8005a58:	4628      	mov	r0, r5
 8005a5a:	47b0      	blx	r6
 8005a5c:	1c41      	adds	r1, r0, #1
 8005a5e:	d1c8      	bne.n	80059f2 <__sflush_r+0x36>
 8005a60:	682b      	ldr	r3, [r5, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0c5      	beq.n	80059f2 <__sflush_r+0x36>
 8005a66:	2b1d      	cmp	r3, #29
 8005a68:	d001      	beq.n	8005a6e <__sflush_r+0xb2>
 8005a6a:	2b16      	cmp	r3, #22
 8005a6c:	d101      	bne.n	8005a72 <__sflush_r+0xb6>
 8005a6e:	602f      	str	r7, [r5, #0]
 8005a70:	e7b1      	b.n	80059d6 <__sflush_r+0x1a>
 8005a72:	89a3      	ldrh	r3, [r4, #12]
 8005a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a78:	81a3      	strh	r3, [r4, #12]
 8005a7a:	e7ad      	b.n	80059d8 <__sflush_r+0x1c>
 8005a7c:	690f      	ldr	r7, [r1, #16]
 8005a7e:	2f00      	cmp	r7, #0
 8005a80:	d0a9      	beq.n	80059d6 <__sflush_r+0x1a>
 8005a82:	0793      	lsls	r3, r2, #30
 8005a84:	680e      	ldr	r6, [r1, #0]
 8005a86:	bf08      	it	eq
 8005a88:	694b      	ldreq	r3, [r1, #20]
 8005a8a:	600f      	str	r7, [r1, #0]
 8005a8c:	bf18      	it	ne
 8005a8e:	2300      	movne	r3, #0
 8005a90:	eba6 0807 	sub.w	r8, r6, r7
 8005a94:	608b      	str	r3, [r1, #8]
 8005a96:	f1b8 0f00 	cmp.w	r8, #0
 8005a9a:	dd9c      	ble.n	80059d6 <__sflush_r+0x1a>
 8005a9c:	6a21      	ldr	r1, [r4, #32]
 8005a9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005aa0:	4643      	mov	r3, r8
 8005aa2:	463a      	mov	r2, r7
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	47b0      	blx	r6
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	dc06      	bgt.n	8005aba <__sflush_r+0xfe>
 8005aac:	89a3      	ldrh	r3, [r4, #12]
 8005aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ab2:	81a3      	strh	r3, [r4, #12]
 8005ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab8:	e78e      	b.n	80059d8 <__sflush_r+0x1c>
 8005aba:	4407      	add	r7, r0
 8005abc:	eba8 0800 	sub.w	r8, r8, r0
 8005ac0:	e7e9      	b.n	8005a96 <__sflush_r+0xda>
 8005ac2:	bf00      	nop
 8005ac4:	dfbffffe 	.word	0xdfbffffe

08005ac8 <_fflush_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	690b      	ldr	r3, [r1, #16]
 8005acc:	4605      	mov	r5, r0
 8005ace:	460c      	mov	r4, r1
 8005ad0:	b913      	cbnz	r3, 8005ad8 <_fflush_r+0x10>
 8005ad2:	2500      	movs	r5, #0
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	b118      	cbz	r0, 8005ae2 <_fflush_r+0x1a>
 8005ada:	6a03      	ldr	r3, [r0, #32]
 8005adc:	b90b      	cbnz	r3, 8005ae2 <_fflush_r+0x1a>
 8005ade:	f7ff f9ab 	bl	8004e38 <__sinit>
 8005ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0f3      	beq.n	8005ad2 <_fflush_r+0xa>
 8005aea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005aec:	07d0      	lsls	r0, r2, #31
 8005aee:	d404      	bmi.n	8005afa <_fflush_r+0x32>
 8005af0:	0599      	lsls	r1, r3, #22
 8005af2:	d402      	bmi.n	8005afa <_fflush_r+0x32>
 8005af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005af6:	f7ff fb93 	bl	8005220 <__retarget_lock_acquire_recursive>
 8005afa:	4628      	mov	r0, r5
 8005afc:	4621      	mov	r1, r4
 8005afe:	f7ff ff5d 	bl	80059bc <__sflush_r>
 8005b02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b04:	07da      	lsls	r2, r3, #31
 8005b06:	4605      	mov	r5, r0
 8005b08:	d4e4      	bmi.n	8005ad4 <_fflush_r+0xc>
 8005b0a:	89a3      	ldrh	r3, [r4, #12]
 8005b0c:	059b      	lsls	r3, r3, #22
 8005b0e:	d4e1      	bmi.n	8005ad4 <_fflush_r+0xc>
 8005b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b12:	f7ff fb86 	bl	8005222 <__retarget_lock_release_recursive>
 8005b16:	e7dd      	b.n	8005ad4 <_fflush_r+0xc>

08005b18 <__swhatbuf_r>:
 8005b18:	b570      	push	{r4, r5, r6, lr}
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b20:	2900      	cmp	r1, #0
 8005b22:	b096      	sub	sp, #88	; 0x58
 8005b24:	4615      	mov	r5, r2
 8005b26:	461e      	mov	r6, r3
 8005b28:	da0d      	bge.n	8005b46 <__swhatbuf_r+0x2e>
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b30:	f04f 0100 	mov.w	r1, #0
 8005b34:	bf0c      	ite	eq
 8005b36:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005b3a:	2340      	movne	r3, #64	; 0x40
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	6031      	str	r1, [r6, #0]
 8005b40:	602b      	str	r3, [r5, #0]
 8005b42:	b016      	add	sp, #88	; 0x58
 8005b44:	bd70      	pop	{r4, r5, r6, pc}
 8005b46:	466a      	mov	r2, sp
 8005b48:	f000 f848 	bl	8005bdc <_fstat_r>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	dbec      	blt.n	8005b2a <__swhatbuf_r+0x12>
 8005b50:	9901      	ldr	r1, [sp, #4]
 8005b52:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005b56:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005b5a:	4259      	negs	r1, r3
 8005b5c:	4159      	adcs	r1, r3
 8005b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b62:	e7eb      	b.n	8005b3c <__swhatbuf_r+0x24>

08005b64 <__smakebuf_r>:
 8005b64:	898b      	ldrh	r3, [r1, #12]
 8005b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b68:	079d      	lsls	r5, r3, #30
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	d507      	bpl.n	8005b80 <__smakebuf_r+0x1c>
 8005b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	6123      	str	r3, [r4, #16]
 8005b78:	2301      	movs	r3, #1
 8005b7a:	6163      	str	r3, [r4, #20]
 8005b7c:	b002      	add	sp, #8
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	ab01      	add	r3, sp, #4
 8005b82:	466a      	mov	r2, sp
 8005b84:	f7ff ffc8 	bl	8005b18 <__swhatbuf_r>
 8005b88:	9900      	ldr	r1, [sp, #0]
 8005b8a:	4605      	mov	r5, r0
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	f7ff fbb5 	bl	80052fc <_malloc_r>
 8005b92:	b948      	cbnz	r0, 8005ba8 <__smakebuf_r+0x44>
 8005b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b98:	059a      	lsls	r2, r3, #22
 8005b9a:	d4ef      	bmi.n	8005b7c <__smakebuf_r+0x18>
 8005b9c:	f023 0303 	bic.w	r3, r3, #3
 8005ba0:	f043 0302 	orr.w	r3, r3, #2
 8005ba4:	81a3      	strh	r3, [r4, #12]
 8005ba6:	e7e3      	b.n	8005b70 <__smakebuf_r+0xc>
 8005ba8:	89a3      	ldrh	r3, [r4, #12]
 8005baa:	6020      	str	r0, [r4, #0]
 8005bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb0:	81a3      	strh	r3, [r4, #12]
 8005bb2:	9b00      	ldr	r3, [sp, #0]
 8005bb4:	6163      	str	r3, [r4, #20]
 8005bb6:	9b01      	ldr	r3, [sp, #4]
 8005bb8:	6120      	str	r0, [r4, #16]
 8005bba:	b15b      	cbz	r3, 8005bd4 <__smakebuf_r+0x70>
 8005bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	f000 f81d 	bl	8005c00 <_isatty_r>
 8005bc6:	b128      	cbz	r0, 8005bd4 <__smakebuf_r+0x70>
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	f023 0303 	bic.w	r3, r3, #3
 8005bce:	f043 0301 	orr.w	r3, r3, #1
 8005bd2:	81a3      	strh	r3, [r4, #12]
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	431d      	orrs	r5, r3
 8005bd8:	81a5      	strh	r5, [r4, #12]
 8005bda:	e7cf      	b.n	8005b7c <__smakebuf_r+0x18>

08005bdc <_fstat_r>:
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	4d07      	ldr	r5, [pc, #28]	; (8005bfc <_fstat_r+0x20>)
 8005be0:	2300      	movs	r3, #0
 8005be2:	4604      	mov	r4, r0
 8005be4:	4608      	mov	r0, r1
 8005be6:	4611      	mov	r1, r2
 8005be8:	602b      	str	r3, [r5, #0]
 8005bea:	f7fb f834 	bl	8000c56 <_fstat>
 8005bee:	1c43      	adds	r3, r0, #1
 8005bf0:	d102      	bne.n	8005bf8 <_fstat_r+0x1c>
 8005bf2:	682b      	ldr	r3, [r5, #0]
 8005bf4:	b103      	cbz	r3, 8005bf8 <_fstat_r+0x1c>
 8005bf6:	6023      	str	r3, [r4, #0]
 8005bf8:	bd38      	pop	{r3, r4, r5, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000444 	.word	0x20000444

08005c00 <_isatty_r>:
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	4d06      	ldr	r5, [pc, #24]	; (8005c1c <_isatty_r+0x1c>)
 8005c04:	2300      	movs	r3, #0
 8005c06:	4604      	mov	r4, r0
 8005c08:	4608      	mov	r0, r1
 8005c0a:	602b      	str	r3, [r5, #0]
 8005c0c:	f7fb f833 	bl	8000c76 <_isatty>
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	d102      	bne.n	8005c1a <_isatty_r+0x1a>
 8005c14:	682b      	ldr	r3, [r5, #0]
 8005c16:	b103      	cbz	r3, 8005c1a <_isatty_r+0x1a>
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	20000444 	.word	0x20000444

08005c20 <_sbrk_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	4d06      	ldr	r5, [pc, #24]	; (8005c3c <_sbrk_r+0x1c>)
 8005c24:	2300      	movs	r3, #0
 8005c26:	4604      	mov	r4, r0
 8005c28:	4608      	mov	r0, r1
 8005c2a:	602b      	str	r3, [r5, #0]
 8005c2c:	f7fb f83c 	bl	8000ca8 <_sbrk>
 8005c30:	1c43      	adds	r3, r0, #1
 8005c32:	d102      	bne.n	8005c3a <_sbrk_r+0x1a>
 8005c34:	682b      	ldr	r3, [r5, #0]
 8005c36:	b103      	cbz	r3, 8005c3a <_sbrk_r+0x1a>
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
 8005c3c:	20000444 	.word	0x20000444

08005c40 <_init>:
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c42:	bf00      	nop
 8005c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c46:	bc08      	pop	{r3}
 8005c48:	469e      	mov	lr, r3
 8005c4a:	4770      	bx	lr

08005c4c <_fini>:
 8005c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4e:	bf00      	nop
 8005c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c52:	bc08      	pop	{r3}
 8005c54:	469e      	mov	lr, r3
 8005c56:	4770      	bx	lr
