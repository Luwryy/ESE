
446RE_I2C_CAN_TP4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000592c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005afc  08005afc  00015afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c5c  08005c5c  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  08005c5c  08005c5c  00015c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c64  08005c64  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c64  08005c64  00015c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c68  08005c68  00015c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08005c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  200000f0  08005d5c  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08005d5c  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fbad  00000000  00000000  00020163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b24  00000000  00000000  0002fd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  00032838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f4  00000000  00000000  00033528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023813  00000000  00000000  00033f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013152  00000000  00000000  0005772f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf49d  00000000  00000000  0006a881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003be0  00000000  00000000  00139d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0013d900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000f0 	.word	0x200000f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005ae4 	.word	0x08005ae4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000f4 	.word	0x200000f4
 800020c:	08005ae4 	.word	0x08005ae4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <MX_CAN1_Init+0x64>)
 80005c2:	4a18      	ldr	r2, [pc, #96]	; (8000624 <MX_CAN1_Init+0x68>)
 80005c4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80005c6:	4b16      	ldr	r3, [pc, #88]	; (8000620 <MX_CAN1_Init+0x64>)
 80005c8:	2206      	movs	r2, #6
 80005ca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <MX_CAN1_Init+0x64>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005d2:	4b13      	ldr	r3, [pc, #76]	; (8000620 <MX_CAN1_Init+0x64>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_CAN1_Init+0x64>)
 80005da:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80005de:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_CAN1_Init+0x64>)
 80005e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005e6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <MX_CAN1_Init+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_CAN1_Init+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_CAN1_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_CAN1_Init+0x64>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <MX_CAN1_Init+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_CAN1_Init+0x64>)
 8000608:	2200      	movs	r2, #0
 800060a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_CAN1_Init+0x64>)
 800060e:	f000 fd27 	bl	8001060 <HAL_CAN_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000618:	f000 fa7c 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000010c 	.word	0x2000010c
 8000624:	40006400 	.word	0x40006400

08000628 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a19      	ldr	r2, [pc, #100]	; (80006ac <HAL_CAN_MspInit+0x84>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d12c      	bne.n	80006a4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <HAL_CAN_MspInit+0x88>)
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <HAL_CAN_MspInit+0x88>)
 8000654:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000658:	6413      	str	r3, [r2, #64]	; 0x40
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <HAL_CAN_MspInit+0x88>)
 800065c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_CAN_MspInit+0x88>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <HAL_CAN_MspInit+0x88>)
 8000670:	f043 0302 	orr.w	r3, r3, #2
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <HAL_CAN_MspInit+0x88>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000682:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000694:	2309      	movs	r3, #9
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <HAL_CAN_MspInit+0x8c>)
 80006a0:	f001 f8c0 	bl	8001824 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006a4:	bf00      	nop
 80006a6:	3728      	adds	r7, #40	; 0x28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40006400 	.word	0x40006400
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020400 	.word	0x40020400

080006b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a2c      	ldr	r2, [pc, #176]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a25      	ldr	r2, [pc, #148]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MX_GPIO_Init+0xd0>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_GPIO_Init+0xd4>)
 8000744:	f001 fa1a 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	480c      	ldr	r0, [pc, #48]	; (8000790 <MX_GPIO_Init+0xd8>)
 8000760:	f001 f860 	bl	8001824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000764:	2320      	movs	r3, #32
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_GPIO_Init+0xd4>)
 800077c:	f001 f852 	bl	8001824 <HAL_GPIO_Init>

}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	; 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000
 8000790:	40020800 	.word	0x40020800

08000794 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x50>)
 800079a:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <MX_I2C1_Init+0x54>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007a0:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_I2C1_Init+0x58>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_I2C1_Init+0x50>)
 80007d2:	f001 f9ed 	bl	8001bb0 <HAL_I2C_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007dc:	f000 f99a 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000134 	.word	0x20000134
 80007e8:	40005400 	.word	0x40005400
 80007ec:	000186a0 	.word	0x000186a0

080007f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a19      	ldr	r2, [pc, #100]	; (8000874 <HAL_I2C_MspInit+0x84>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d12b      	bne.n	800086a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a17      	ldr	r2, [pc, #92]	; (8000878 <HAL_I2C_MspInit+0x88>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800082e:	23c0      	movs	r3, #192	; 0xc0
 8000830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000832:	2312      	movs	r3, #18
 8000834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800083e:	2304      	movs	r3, #4
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <HAL_I2C_MspInit+0x8c>)
 800084a:	f000 ffeb 	bl	8001824 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000858:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800085c:	6413      	str	r3, [r2, #64]	; 0x40
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_I2C_MspInit+0x88>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800086a:	bf00      	nop
 800086c:	3728      	adds	r7, #40	; 0x28
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40005400 	.word	0x40005400
 8000878:	40023800 	.word	0x40023800
 800087c:	40020400 	.word	0x40020400

08000880 <_write>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	e00b      	b.n	80008aa <_write+0x2a>
		HAL_UART_Transmit(&huart2, (uint8_t *) ptr++, 1, HAL_MAX_DELAY);
 8000892:	68b9      	ldr	r1, [r7, #8]
 8000894:	1c4b      	adds	r3, r1, #1
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	2201      	movs	r2, #1
 800089e:	4811      	ldr	r0, [pc, #68]	; (80008e4 <_write+0x64>)
 80008a0:	f002 ff51 	bl	8003746 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	3301      	adds	r3, #1
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	697a      	ldr	r2, [r7, #20]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	dbef      	blt.n	8000892 <_write+0x12>
	}
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	e00b      	b.n	80008d0 <_write+0x50>
		HAL_UART_Transmit(&huart1, (uint8_t *) ptr++, 1, HAL_MAX_DELAY);
 80008b8:	68b9      	ldr	r1, [r7, #8]
 80008ba:	1c4b      	adds	r3, r1, #1
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	f04f 33ff 	mov.w	r3, #4294967295
 80008c2:	2201      	movs	r2, #1
 80008c4:	4808      	ldr	r0, [pc, #32]	; (80008e8 <_write+0x68>)
 80008c6:	f002 ff3e 	bl	8003746 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	3301      	adds	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	dbef      	blt.n	80008b8 <_write+0x38>
	}

	return len;
 80008d8:	687b      	ldr	r3, [r7, #4]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000210 	.word	0x20000210
 80008e8:	200001cc 	.word	0x200001cc

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f2:	f000 fb1f 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f6:	f000 f89f 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fa:	f7ff fedd 	bl	80006b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008fe:	f000 fa39 	bl	8000d74 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000902:	f7ff ff47 	bl	8000794 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000906:	f000 fa0b 	bl	8000d20 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 800090a:	f7ff fe57 	bl	80005bc <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  printf("test\r\n");
 800090e:	483f      	ldr	r0, [pc, #252]	; (8000a0c <main+0x120>)
 8000910:	f004 fa80 	bl	8004e14 <puts>
  bmp_reset(&bmp280);
 8000914:	483e      	ldr	r0, [pc, #248]	; (8000a10 <main+0x124>)
 8000916:	f003 ff41 	bl	800479c <bmp_reset>
  printf("reset done\r\n");
 800091a:	483e      	ldr	r0, [pc, #248]	; (8000a14 <main+0x128>)
 800091c:	f004 fa7a 	bl	8004e14 <puts>
  bmp_id(&bmp280);
 8000920:	483b      	ldr	r0, [pc, #236]	; (8000a10 <main+0x124>)
 8000922:	f003 ff61 	bl	80047e8 <bmp_id>
  printf("id done\r\n");
 8000926:	483c      	ldr	r0, [pc, #240]	; (8000a18 <main+0x12c>)
 8000928:	f004 fa74 	bl	8004e14 <puts>
  bmp_config(&bmp280);
 800092c:	4838      	ldr	r0, [pc, #224]	; (8000a10 <main+0x124>)
 800092e:	f003 ff95 	bl	800485c <bmp_config>
  printf("config done\r\n");
 8000932:	483a      	ldr	r0, [pc, #232]	; (8000a1c <main+0x130>)
 8000934:	f004 fa6e 	bl	8004e14 <puts>
  HAL_Delay(500);
 8000938:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800093c:	f000 fb6c 	bl	8001018 <HAL_Delay>
  bmp_calib_read(&bmp280);
 8000940:	4833      	ldr	r0, [pc, #204]	; (8000a10 <main+0x124>)
 8000942:	f003 ffc7 	bl	80048d4 <bmp_calib_read>
  printf("calib done\r\n");
 8000946:	4836      	ldr	r0, [pc, #216]	; (8000a20 <main+0x134>)
 8000948:	f004 fa64 	bl	8004e14 <puts>

  HAL_CAN_Start(&hcan1);
 800094c:	4835      	ldr	r0, [pc, #212]	; (8000a24 <main+0x138>)
 800094e:	f000 fc82 	bl	8001256 <HAL_CAN_Start>
  uint8_t CAN_TxData[CAN_DATA_LENGTH];
  CAN_TxHeaderTypeDef CAN_Header;
  CAN_Header.StdId = 0x062;
 8000952:	2362      	movs	r3, #98	; 0x62
 8000954:	60bb      	str	r3, [r7, #8]
  CAN_Header.ExtId = 0x062;
 8000956:	2362      	movs	r3, #98	; 0x62
 8000958:	60fb      	str	r3, [r7, #12]
  CAN_Header.IDE = CAN_ID_STD;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  CAN_Header.RTR = CAN_RTR_DATA; //DATA c'est qu'en on envoie juste un message au peripherique
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
  	  	  	  	  	  	  	  	 //remote c'est quand on attent une réponse
  CAN_Header.DLC = CAN_DATA_LENGTH;
 8000962:	2308      	movs	r3, #8
 8000964:	61bb      	str	r3, [r7, #24]
  CAN_Header.TransmitGlobalTime = DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	773b      	strb	r3, [r7, #28]

  uint32_t boiteAuLettre = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]

  HAL_CAN_AddTxMessage(&hcan1, &CAN_Header, CAN_TxData, &boiteAuLettre);
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	f107 0220 	add.w	r2, r7, #32
 8000974:	f107 0108 	add.w	r1, r7, #8
 8000978:	482a      	ldr	r0, [pc, #168]	; (8000a24 <main+0x138>)
 800097a:	f000 fcb0 	bl	80012de <HAL_CAN_AddTxMessage>
  while(HAL_CAN_IsTxMessagePending(&hcan1, boiteAuLettre)){
 800097e:	e002      	b.n	8000986 <main+0x9a>
	  HAL_Delay(10);
 8000980:	200a      	movs	r0, #10
 8000982:	f000 fb49 	bl	8001018 <HAL_Delay>
  while(HAL_CAN_IsTxMessagePending(&hcan1, boiteAuLettre)){
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4619      	mov	r1, r3
 800098a:	4826      	ldr	r0, [pc, #152]	; (8000a24 <main+0x138>)
 800098c:	f000 fd82 	bl	8001494 <HAL_CAN_IsTxMessagePending>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1f4      	bne.n	8000980 <main+0x94>
  }
  printf("init ok\r\n");
 8000996:	4824      	ldr	r0, [pc, #144]	; (8000a28 <main+0x13c>)
 8000998:	f004 fa3c 	bl	8004e14 <puts>

  CAN_Header.StdId = 0x061;
 800099c:	2361      	movs	r3, #97	; 0x61
 800099e:	60bb      	str	r3, [r7, #8]

  CAN_TxData[0] = 45;
 80009a0:	232d      	movs	r3, #45	; 0x2d
 80009a2:	f887 3020 	strb.w	r3, [r7, #32]
  CAN_TxData[1] = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  //bmp_temp_read(&bmp280);
  //bmp_press_read(&bmp280);    */
  Shell_Init();
 80009ac:	f004 f8be 	bl	8004b2c <Shell_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  bmp_temp_read(&bmp280);
 80009b0:	4817      	ldr	r0, [pc, #92]	; (8000a10 <main+0x124>)
 80009b2:	f003 ffc9 	bl	8004948 <bmp_temp_read>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 80009b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ba:	481c      	ldr	r0, [pc, #112]	; (8000a2c <main+0x140>)
 80009bc:	f001 f8c6 	bl	8001b4c <HAL_GPIO_ReadPin>

	  }
	  HAL_CAN_AddTxMessage(&hcan1, &CAN_Header, CAN_TxData, &boiteAuLettre);
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	f107 0220 	add.w	r2, r7, #32
 80009c6:	f107 0108 	add.w	r1, r7, #8
 80009ca:	4816      	ldr	r0, [pc, #88]	; (8000a24 <main+0x138>)
 80009cc:	f000 fc87 	bl	80012de <HAL_CAN_AddTxMessage>
	  while( HAL_CAN_IsTxMessagePending(&hcan1, boiteAuLettre) ){
 80009d0:	e002      	b.n	80009d8 <main+0xec>
		  printf("message CAN pas encore envoye \r\n");
 80009d2:	4817      	ldr	r0, [pc, #92]	; (8000a30 <main+0x144>)
 80009d4:	f004 fa1e 	bl	8004e14 <puts>
	  while( HAL_CAN_IsTxMessagePending(&hcan1, boiteAuLettre) ){
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4619      	mov	r1, r3
 80009dc:	4811      	ldr	r0, [pc, #68]	; (8000a24 <main+0x138>)
 80009de:	f000 fd59 	bl	8001494 <HAL_CAN_IsTxMessagePending>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1f4      	bne.n	80009d2 <main+0xe6>
	  }
	  /*CAN_TxData[0] += 10;
	  CAN_TxData[0] = CAN_TxData[0] % 180;*/
	  CAN_TxData[0] = (uint8_t) ((bmp280.temp / 10) - 200);
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <main+0x124>)
 80009ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009ec:	4a11      	ldr	r2, [pc, #68]	; (8000a34 <main+0x148>)
 80009ee:	fb82 1203 	smull	r1, r2, r2, r3
 80009f2:	1092      	asrs	r2, r2, #2
 80009f4:	17db      	asrs	r3, r3, #31
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	3338      	adds	r3, #56	; 0x38
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	f887 3020 	strb.w	r3, [r7, #32]
	  HAL_Delay(500);
 8000a02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a06:	f000 fb07 	bl	8001018 <HAL_Delay>
	  bmp_temp_read(&bmp280);
 8000a0a:	e7d1      	b.n	80009b0 <main+0xc4>
 8000a0c:	08005afc 	.word	0x08005afc
 8000a10:	20000188 	.word	0x20000188
 8000a14:	08005b04 	.word	0x08005b04
 8000a18:	08005b10 	.word	0x08005b10
 8000a1c:	08005b1c 	.word	0x08005b1c
 8000a20:	08005b2c 	.word	0x08005b2c
 8000a24:	2000010c 	.word	0x2000010c
 8000a28:	08005b38 	.word	0x08005b38
 8000a2c:	40020800 	.word	0x40020800
 8000a30:	08005b44 	.word	0x08005b44
 8000a34:	66666667 	.word	0x66666667

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b094      	sub	sp, #80	; 0x50
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	2234      	movs	r2, #52	; 0x34
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f004 fac4 	bl	8004fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	4a29      	ldr	r2, [pc, #164]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6c:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <SystemClock_Config+0xd8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a84:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <SystemClock_Config+0xd8>)
 8000a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <SystemClock_Config+0xd8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000aac:	2310      	movs	r3, #16
 8000aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ab0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ab4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 fb52 	bl	8003170 <HAL_RCC_OscConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ad2:	f000 f81f 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ada:	2302      	movs	r3, #2
 8000adc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	2102      	movs	r1, #2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 fff2 	bl	8002adc <HAL_RCC_ClockConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000afe:	f000 f809 	bl	8000b14 <Error_Handler>
  }
}
 8000b02:	bf00      	nop
 8000b04:	3750      	adds	r7, #80	; 0x50
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40007000 	.word	0x40007000

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>
	...

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b5e:	2007      	movs	r0, #7
 8000b60:	f000 fd8c 	bl	800167c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40023800 	.word	0x40023800

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 fa0c 	bl	8000fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <USART1_IRQHandler+0x10>)
 8000bca:	f002 fe7f 	bl	80038cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200001cc 	.word	0x200001cc

08000bd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <USART2_IRQHandler+0x10>)
 8000bde:	f002 fe75 	bl	80038cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000210 	.word	0x20000210

08000bec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	e00a      	b.n	8000c14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bfe:	f3af 8000 	nop.w
 8000c02:	4601      	mov	r1, r0
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	1c5a      	adds	r2, r3, #1
 8000c08:	60ba      	str	r2, [r7, #8]
 8000c0a:	b2ca      	uxtb	r2, r1
 8000c0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dbf0      	blt.n	8000bfe <_read+0x12>
  }

  return len;
 8000c1c:	687b      	ldr	r3, [r7, #4]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <_isatty>:

int _isatty(int file)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d207      	bcs.n	8000cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc0:	f004 f9d6 	bl	8005070 <__errno>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	e009      	b.n	8000ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <_sbrk+0x64>)
 8000ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20020000 	.word	0x20020000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	200001c8 	.word	0x200001c8
 8000cf8:	20000458 	.word	0x20000458

08000cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <MX_USART1_UART_Init+0x50>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d58:	f002 fca8 	bl	80036ac <HAL_UART_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d62:	f7ff fed7 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200001cc 	.word	0x200001cc
 8000d70:	40011000 	.word	0x40011000

08000d74 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_USART2_UART_Init+0x4c>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <MX_USART2_UART_Init+0x50>)
 8000d7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <MX_USART2_UART_Init+0x4c>)
 8000d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_USART2_UART_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_USART2_UART_Init+0x4c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_USART2_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_USART2_UART_Init+0x4c>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_USART2_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_USART2_UART_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_USART2_UART_Init+0x4c>)
 8000dac:	f002 fc7e 	bl	80036ac <HAL_UART_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000db6:	f7ff fead 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000210 	.word	0x20000210
 8000dc4:	40004400 	.word	0x40004400

08000dc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08c      	sub	sp, #48	; 0x30
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a3a      	ldr	r2, [pc, #232]	; (8000ed0 <HAL_UART_MspInit+0x108>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d135      	bne.n	8000e56 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	4b39      	ldr	r3, [pc, #228]	; (8000ed4 <HAL_UART_MspInit+0x10c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	4a38      	ldr	r2, [pc, #224]	; (8000ed4 <HAL_UART_MspInit+0x10c>)
 8000df4:	f043 0310 	orr.w	r3, r3, #16
 8000df8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfa:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <HAL_UART_MspInit+0x10c>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f003 0310 	and.w	r3, r3, #16
 8000e02:	61bb      	str	r3, [r7, #24]
 8000e04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	4b32      	ldr	r3, [pc, #200]	; (8000ed4 <HAL_UART_MspInit+0x10c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a31      	ldr	r2, [pc, #196]	; (8000ed4 <HAL_UART_MspInit+0x10c>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <HAL_UART_MspInit+0x10c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PI_TX_Pin|PI_RX_Pin;
 8000e22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e34:	2307      	movs	r3, #7
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4826      	ldr	r0, [pc, #152]	; (8000ed8 <HAL_UART_MspInit+0x110>)
 8000e40:	f000 fcf0 	bl	8001824 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	2025      	movs	r0, #37	; 0x25
 8000e4a:	f000 fc22 	bl	8001692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e4e:	2025      	movs	r0, #37	; 0x25
 8000e50:	f000 fc3b 	bl	80016ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e54:	e038      	b.n	8000ec8 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a20      	ldr	r2, [pc, #128]	; (8000edc <HAL_UART_MspInit+0x114>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d133      	bne.n	8000ec8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_UART_MspInit+0x10c>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	4a1a      	ldr	r2, [pc, #104]	; (8000ed4 <HAL_UART_MspInit+0x10c>)
 8000e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_UART_MspInit+0x10c>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_UART_MspInit+0x10c>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4a13      	ldr	r2, [pc, #76]	; (8000ed4 <HAL_UART_MspInit+0x10c>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_UART_MspInit+0x10c>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e98:	230c      	movs	r3, #12
 8000e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea8:	2307      	movs	r3, #7
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <HAL_UART_MspInit+0x110>)
 8000eb4:	f000 fcb6 	bl	8001824 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2026      	movs	r0, #38	; 0x26
 8000ebe:	f000 fbe8 	bl	8001692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ec2:	2026      	movs	r0, #38	; 0x26
 8000ec4:	f000 fc01 	bl	80016ca <HAL_NVIC_EnableIRQ>
}
 8000ec8:	bf00      	nop
 8000eca:	3730      	adds	r7, #48	; 0x30
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40011000 	.word	0x40011000
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	40004400 	.word	0x40004400

08000ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee4:	480d      	ldr	r0, [pc, #52]	; (8000f1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ee6:	490e      	ldr	r1, [pc, #56]	; (8000f20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ee8:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000efc:	4c0b      	ldr	r4, [pc, #44]	; (8000f2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f0a:	f7ff fef7 	bl	8000cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f004 f8b5 	bl	800507c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f12:	f7ff fceb 	bl	80008ec <main>
  bx  lr    
 8000f16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8000f24:	08005c6c 	.word	0x08005c6c
  ldr r2, =_sbss
 8000f28:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8000f2c:	20000454 	.word	0x20000454

08000f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC_IRQHandler>
	...

08000f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <HAL_Init+0x40>)
 8000f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_Init+0x40>)
 8000f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <HAL_Init+0x40>)
 8000f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f000 fb8d 	bl	800167c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f62:	2000      	movs	r0, #0
 8000f64:	f000 f808 	bl	8000f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f68:	f7ff fdda 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023c00 	.word	0x40023c00

08000f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_InitTick+0x54>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x58>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 fba5 	bl	80016e6 <HAL_SYSTICK_Config>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00e      	b.n	8000fc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d80a      	bhi.n	8000fc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fac:	2200      	movs	r2, #0
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f000 fb6d 	bl	8001692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb8:	4a06      	ldr	r2, [pc, #24]	; (8000fd4 <HAL_InitTick+0x5c>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e000      	b.n	8000fc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x24>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_IncTick+0x24>)
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000254 	.word	0x20000254

08001000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <HAL_GetTick+0x14>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000254 	.word	0x20000254

08001018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff ffee 	bl	8001000 <HAL_GetTick>
 8001024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001030:	d005      	beq.n	800103e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_Delay+0x44>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4413      	add	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800103e:	bf00      	nop
 8001040:	f7ff ffde 	bl	8001000 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	429a      	cmp	r2, r3
 800104e:	d8f7      	bhi.n	8001040 <HAL_Delay+0x28>
  {
  }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000008 	.word	0x20000008

08001060 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e0ed      	b.n	800124e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d102      	bne.n	8001084 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff fad2 	bl	8000628 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0201 	orr.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001094:	f7ff ffb4 	bl	8001000 <HAL_GetTick>
 8001098:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800109a:	e012      	b.n	80010c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800109c:	f7ff ffb0 	bl	8001000 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b0a      	cmp	r3, #10
 80010a8:	d90b      	bls.n	80010c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2205      	movs	r2, #5
 80010ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e0c5      	b.n	800124e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0e5      	beq.n	800109c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0202 	bic.w	r2, r2, #2
 80010de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010e0:	f7ff ff8e 	bl	8001000 <HAL_GetTick>
 80010e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010e6:	e012      	b.n	800110e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010e8:	f7ff ff8a 	bl	8001000 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b0a      	cmp	r3, #10
 80010f4:	d90b      	bls.n	800110e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2205      	movs	r2, #5
 8001106:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e09f      	b.n	800124e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1e5      	bne.n	80010e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7e1b      	ldrb	r3, [r3, #24]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d108      	bne.n	8001136 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e007      	b.n	8001146 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001144:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	7e5b      	ldrb	r3, [r3, #25]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d108      	bne.n	8001160 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	e007      	b.n	8001170 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800116e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	7e9b      	ldrb	r3, [r3, #26]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d108      	bne.n	800118a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f042 0220 	orr.w	r2, r2, #32
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	e007      	b.n	800119a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0220 	bic.w	r2, r2, #32
 8001198:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7edb      	ldrb	r3, [r3, #27]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d108      	bne.n	80011b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0210 	bic.w	r2, r2, #16
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	e007      	b.n	80011c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0210 	orr.w	r2, r2, #16
 80011c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	7f1b      	ldrb	r3, [r3, #28]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d108      	bne.n	80011de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0208 	orr.w	r2, r2, #8
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e007      	b.n	80011ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0208 	bic.w	r2, r2, #8
 80011ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7f5b      	ldrb	r3, [r3, #29]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d108      	bne.n	8001208 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 0204 	orr.w	r2, r2, #4
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	e007      	b.n	8001218 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0204 	bic.w	r2, r2, #4
 8001216:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	431a      	orrs	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	431a      	orrs	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	ea42 0103 	orr.w	r1, r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	1e5a      	subs	r2, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b01      	cmp	r3, #1
 8001268:	d12e      	bne.n	80012c8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2202      	movs	r2, #2
 800126e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0201 	bic.w	r2, r2, #1
 8001280:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001282:	f7ff febd 	bl	8001000 <HAL_GetTick>
 8001286:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001288:	e012      	b.n	80012b0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800128a:	f7ff feb9 	bl	8001000 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b0a      	cmp	r3, #10
 8001296:	d90b      	bls.n	80012b0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2205      	movs	r2, #5
 80012a8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e012      	b.n	80012d6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1e5      	bne.n	800128a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e006      	b.n	80012d6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
  }
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80012de:	b480      	push	{r7}
 80012e0:	b089      	sub	sp, #36	; 0x24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012fc:	7ffb      	ldrb	r3, [r7, #31]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d003      	beq.n	800130a <HAL_CAN_AddTxMessage+0x2c>
 8001302:	7ffb      	ldrb	r3, [r7, #31]
 8001304:	2b02      	cmp	r3, #2
 8001306:	f040 80b8 	bne.w	800147a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10a      	bne.n	800132a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800131a:	2b00      	cmp	r3, #0
 800131c:	d105      	bne.n	800132a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80a0 	beq.w	800146a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	0e1b      	lsrs	r3, r3, #24
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d907      	bls.n	800134a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e09e      	b.n	8001488 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800134a:	2201      	movs	r2, #1
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10d      	bne.n	8001378 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001366:	68f9      	ldr	r1, [r7, #12]
 8001368:	6809      	ldr	r1, [r1, #0]
 800136a:	431a      	orrs	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	3318      	adds	r3, #24
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	440b      	add	r3, r1
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e00f      	b.n	8001398 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001382:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001388:	68f9      	ldr	r1, [r7, #12]
 800138a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800138c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3318      	adds	r3, #24
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	440b      	add	r3, r1
 8001396:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6819      	ldr	r1, [r3, #0]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3318      	adds	r3, #24
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	440b      	add	r3, r1
 80013a8:	3304      	adds	r3, #4
 80013aa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	7d1b      	ldrb	r3, [r3, #20]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d111      	bne.n	80013d8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	3318      	adds	r3, #24
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	4413      	add	r3, r2
 80013c0:	3304      	adds	r3, #4
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	6811      	ldr	r1, [r2, #0]
 80013c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	3318      	adds	r3, #24
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	440b      	add	r3, r1
 80013d4:	3304      	adds	r3, #4
 80013d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3307      	adds	r3, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	061a      	lsls	r2, r3, #24
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3306      	adds	r3, #6
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	041b      	lsls	r3, r3, #16
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3305      	adds	r3, #5
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	4313      	orrs	r3, r2
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	3204      	adds	r2, #4
 80013f8:	7812      	ldrb	r2, [r2, #0]
 80013fa:	4610      	mov	r0, r2
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	6811      	ldr	r1, [r2, #0]
 8001400:	ea43 0200 	orr.w	r2, r3, r0
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	440b      	add	r3, r1
 800140a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800140e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3303      	adds	r3, #3
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	061a      	lsls	r2, r3, #24
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3302      	adds	r3, #2
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	041b      	lsls	r3, r3, #16
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3301      	adds	r3, #1
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	4313      	orrs	r3, r2
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	7812      	ldrb	r2, [r2, #0]
 8001430:	4610      	mov	r0, r2
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	6811      	ldr	r1, [r2, #0]
 8001436:	ea43 0200 	orr.w	r2, r3, r0
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	440b      	add	r3, r1
 8001440:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001444:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3318      	adds	r3, #24
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	4413      	add	r3, r2
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	6811      	ldr	r1, [r2, #0]
 8001458:	f043 0201 	orr.w	r2, r3, #1
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	3318      	adds	r3, #24
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	440b      	add	r3, r1
 8001464:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e00e      	b.n	8001488 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e006      	b.n	8001488 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
  }
}
 8001488:	4618      	mov	r0, r3
 800148a:	3724      	adds	r7, #36	; 0x24
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80014aa:	7afb      	ldrb	r3, [r7, #11]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d002      	beq.n	80014b6 <HAL_CAN_IsTxMessagePending+0x22>
 80014b0:	7afb      	ldrb	r3, [r7, #11]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d10b      	bne.n	80014ce <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	069b      	lsls	r3, r3, #26
 80014c0:	401a      	ands	r2, r3
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	069b      	lsls	r3, r3, #26
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d001      	beq.n	80014ce <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80014ca:	2301      	movs	r3, #1
 80014cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db0b      	blt.n	800156a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	4907      	ldr	r1, [pc, #28]	; (8001578 <__NVIC_EnableIRQ+0x38>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2001      	movs	r0, #1
 8001562:	fa00 f202 	lsl.w	r2, r0, r2
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	; (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	; (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001648:	d301      	bcc.n	800164e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2301      	movs	r3, #1
 800164c:	e00f      	b.n	800166e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <SysTick_Config+0x40>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001656:	210f      	movs	r1, #15
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	f7ff ff8e 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <SysTick_Config+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <SysTick_Config+0x40>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff29 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a4:	f7ff ff3e 	bl	8001524 <__NVIC_GetPriorityGrouping>
 80016a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7ff ff8e 	bl	80015d0 <NVIC_EncodePriority>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff5d 	bl	800157c <__NVIC_SetPriority>
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff31 	bl	8001540 <__NVIC_EnableIRQ>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffa2 	bl	8001638 <SysTick_Config>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b084      	sub	sp, #16
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff fc78 	bl	8001000 <HAL_GetTick>
 8001710:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d008      	beq.n	8001730 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2280      	movs	r2, #128	; 0x80
 8001722:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e052      	b.n	80017d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0216 	bic.w	r2, r2, #22
 800173e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695a      	ldr	r2, [r3, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800174e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	2b00      	cmp	r3, #0
 8001756:	d103      	bne.n	8001760 <HAL_DMA_Abort+0x62>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800175c:	2b00      	cmp	r3, #0
 800175e:	d007      	beq.n	8001770 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0208 	bic.w	r2, r2, #8
 800176e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001780:	e013      	b.n	80017aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001782:	f7ff fc3d 	bl	8001000 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b05      	cmp	r3, #5
 800178e:	d90c      	bls.n	80017aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2220      	movs	r2, #32
 8001794:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2203      	movs	r2, #3
 800179a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e015      	b.n	80017d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1e4      	bne.n	8001782 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017bc:	223f      	movs	r2, #63	; 0x3f
 80017be:	409a      	lsls	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d004      	beq.n	80017fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2280      	movs	r2, #128	; 0x80
 80017f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e00c      	b.n	8001816 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2205      	movs	r2, #5
 8001800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0201 	bic.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	e165      	b.n	8001b0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001840:	2201      	movs	r2, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	429a      	cmp	r2, r3
 800185a:	f040 8154 	bne.w	8001b06 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b01      	cmp	r3, #1
 8001868:	d005      	beq.n	8001876 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001872:	2b02      	cmp	r3, #2
 8001874:	d130      	bne.n	80018d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	2203      	movs	r2, #3
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ac:	2201      	movs	r2, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 0201 	and.w	r2, r3, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d017      	beq.n	8001914 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d123      	bne.n	8001968 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	08da      	lsrs	r2, r3, #3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3208      	adds	r2, #8
 8001928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	220f      	movs	r2, #15
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	691a      	ldr	r2, [r3, #16]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	08da      	lsrs	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3208      	adds	r2, #8
 8001962:	69b9      	ldr	r1, [r7, #24]
 8001964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0203 	and.w	r2, r3, #3
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80ae 	beq.w	8001b06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b5d      	ldr	r3, [pc, #372]	; (8001b24 <HAL_GPIO_Init+0x300>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a5c      	ldr	r2, [pc, #368]	; (8001b24 <HAL_GPIO_Init+0x300>)
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b5a      	ldr	r3, [pc, #360]	; (8001b24 <HAL_GPIO_Init+0x300>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019c6:	4a58      	ldr	r2, [pc, #352]	; (8001b28 <HAL_GPIO_Init+0x304>)
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	3302      	adds	r3, #2
 80019ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	220f      	movs	r2, #15
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4f      	ldr	r2, [pc, #316]	; (8001b2c <HAL_GPIO_Init+0x308>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d025      	beq.n	8001a3e <HAL_GPIO_Init+0x21a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4e      	ldr	r2, [pc, #312]	; (8001b30 <HAL_GPIO_Init+0x30c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d01f      	beq.n	8001a3a <HAL_GPIO_Init+0x216>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4d      	ldr	r2, [pc, #308]	; (8001b34 <HAL_GPIO_Init+0x310>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d019      	beq.n	8001a36 <HAL_GPIO_Init+0x212>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4c      	ldr	r2, [pc, #304]	; (8001b38 <HAL_GPIO_Init+0x314>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d013      	beq.n	8001a32 <HAL_GPIO_Init+0x20e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4b      	ldr	r2, [pc, #300]	; (8001b3c <HAL_GPIO_Init+0x318>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00d      	beq.n	8001a2e <HAL_GPIO_Init+0x20a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4a      	ldr	r2, [pc, #296]	; (8001b40 <HAL_GPIO_Init+0x31c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d007      	beq.n	8001a2a <HAL_GPIO_Init+0x206>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a49      	ldr	r2, [pc, #292]	; (8001b44 <HAL_GPIO_Init+0x320>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d101      	bne.n	8001a26 <HAL_GPIO_Init+0x202>
 8001a22:	2306      	movs	r3, #6
 8001a24:	e00c      	b.n	8001a40 <HAL_GPIO_Init+0x21c>
 8001a26:	2307      	movs	r3, #7
 8001a28:	e00a      	b.n	8001a40 <HAL_GPIO_Init+0x21c>
 8001a2a:	2305      	movs	r3, #5
 8001a2c:	e008      	b.n	8001a40 <HAL_GPIO_Init+0x21c>
 8001a2e:	2304      	movs	r3, #4
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x21c>
 8001a32:	2303      	movs	r3, #3
 8001a34:	e004      	b.n	8001a40 <HAL_GPIO_Init+0x21c>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e002      	b.n	8001a40 <HAL_GPIO_Init+0x21c>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_GPIO_Init+0x21c>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	f002 0203 	and.w	r2, r2, #3
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	4093      	lsls	r3, r2
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a50:	4935      	ldr	r1, [pc, #212]	; (8001b28 <HAL_GPIO_Init+0x304>)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3302      	adds	r3, #2
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5e:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <HAL_GPIO_Init+0x324>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a82:	4a31      	ldr	r2, [pc, #196]	; (8001b48 <HAL_GPIO_Init+0x324>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a88:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <HAL_GPIO_Init+0x324>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aac:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <HAL_GPIO_Init+0x324>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ab2:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <HAL_GPIO_Init+0x324>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ad6:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <HAL_GPIO_Init+0x324>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_GPIO_Init+0x324>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b00:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <HAL_GPIO_Init+0x324>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2b0f      	cmp	r3, #15
 8001b10:	f67f ae96 	bls.w	8001840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020400 	.word	0x40020400
 8001b34:	40020800 	.word	0x40020800
 8001b38:	40020c00 	.word	0x40020c00
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40021400 	.word	0x40021400
 8001b44:	40021800 	.word	0x40021800
 8001b48:	40013c00 	.word	0x40013c00

08001b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	e001      	b.n	8001b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b8c:	787b      	ldrb	r3, [r7, #1]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b98:	e003      	b.n	8001ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b9a:	887b      	ldrh	r3, [r7, #2]
 8001b9c:	041a      	lsls	r2, r3, #16
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	619a      	str	r2, [r3, #24]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e12b      	b.n	8001e1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d106      	bne.n	8001bdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7fe fe0a 	bl	80007f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2224      	movs	r2, #36	; 0x24
 8001be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c14:	f001 f854 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8001c18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4a81      	ldr	r2, [pc, #516]	; (8001e24 <HAL_I2C_Init+0x274>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d807      	bhi.n	8001c34 <HAL_I2C_Init+0x84>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4a80      	ldr	r2, [pc, #512]	; (8001e28 <HAL_I2C_Init+0x278>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	bf94      	ite	ls
 8001c2c:	2301      	movls	r3, #1
 8001c2e:	2300      	movhi	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	e006      	b.n	8001c42 <HAL_I2C_Init+0x92>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4a7d      	ldr	r2, [pc, #500]	; (8001e2c <HAL_I2C_Init+0x27c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	bf94      	ite	ls
 8001c3c:	2301      	movls	r3, #1
 8001c3e:	2300      	movhi	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e0e7      	b.n	8001e1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4a78      	ldr	r2, [pc, #480]	; (8001e30 <HAL_I2C_Init+0x280>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	0c9b      	lsrs	r3, r3, #18
 8001c54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a6a      	ldr	r2, [pc, #424]	; (8001e24 <HAL_I2C_Init+0x274>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d802      	bhi.n	8001c84 <HAL_I2C_Init+0xd4>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	3301      	adds	r3, #1
 8001c82:	e009      	b.n	8001c98 <HAL_I2C_Init+0xe8>
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	4a69      	ldr	r2, [pc, #420]	; (8001e34 <HAL_I2C_Init+0x284>)
 8001c90:	fba2 2303 	umull	r2, r3, r2, r3
 8001c94:	099b      	lsrs	r3, r3, #6
 8001c96:	3301      	adds	r3, #1
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001caa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	495c      	ldr	r1, [pc, #368]	; (8001e24 <HAL_I2C_Init+0x274>)
 8001cb4:	428b      	cmp	r3, r1
 8001cb6:	d819      	bhi.n	8001cec <HAL_I2C_Init+0x13c>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1e59      	subs	r1, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cc6:	1c59      	adds	r1, r3, #1
 8001cc8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ccc:	400b      	ands	r3, r1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00a      	beq.n	8001ce8 <HAL_I2C_Init+0x138>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1e59      	subs	r1, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce6:	e051      	b.n	8001d8c <HAL_I2C_Init+0x1dc>
 8001ce8:	2304      	movs	r3, #4
 8001cea:	e04f      	b.n	8001d8c <HAL_I2C_Init+0x1dc>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d111      	bne.n	8001d18 <HAL_I2C_Init+0x168>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1e58      	subs	r0, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	440b      	add	r3, r1
 8001d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d06:	3301      	adds	r3, #1
 8001d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bf0c      	ite	eq
 8001d10:	2301      	moveq	r3, #1
 8001d12:	2300      	movne	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	e012      	b.n	8001d3e <HAL_I2C_Init+0x18e>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1e58      	subs	r0, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6859      	ldr	r1, [r3, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	0099      	lsls	r1, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bf0c      	ite	eq
 8001d38:	2301      	moveq	r3, #1
 8001d3a:	2300      	movne	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_I2C_Init+0x196>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e022      	b.n	8001d8c <HAL_I2C_Init+0x1dc>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10e      	bne.n	8001d6c <HAL_I2C_Init+0x1bc>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1e58      	subs	r0, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6859      	ldr	r1, [r3, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	440b      	add	r3, r1
 8001d5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d60:	3301      	adds	r3, #1
 8001d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d6a:	e00f      	b.n	8001d8c <HAL_I2C_Init+0x1dc>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	1e58      	subs	r0, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6859      	ldr	r1, [r3, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	0099      	lsls	r1, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d82:	3301      	adds	r3, #1
 8001d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	6809      	ldr	r1, [r1, #0]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69da      	ldr	r2, [r3, #28]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6911      	ldr	r1, [r2, #16]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	68d2      	ldr	r2, [r2, #12]
 8001dc6:	4311      	orrs	r1, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695a      	ldr	r2, [r3, #20]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2220      	movs	r2, #32
 8001e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	000186a0 	.word	0x000186a0
 8001e28:	001e847f 	.word	0x001e847f
 8001e2c:	003d08ff 	.word	0x003d08ff
 8001e30:	431bde83 	.word	0x431bde83
 8001e34:	10624dd3 	.word	0x10624dd3

08001e38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	461a      	mov	r2, r3
 8001e44:	460b      	mov	r3, r1
 8001e46:	817b      	strh	r3, [r7, #10]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e4c:	f7ff f8d8 	bl	8001000 <HAL_GetTick>
 8001e50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	f040 80e0 	bne.w	8002020 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2319      	movs	r3, #25
 8001e66:	2201      	movs	r2, #1
 8001e68:	4970      	ldr	r1, [pc, #448]	; (800202c <HAL_I2C_Master_Transmit+0x1f4>)
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 fc58 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e76:	2302      	movs	r3, #2
 8001e78:	e0d3      	b.n	8002022 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_I2C_Master_Transmit+0x50>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e0cc      	b.n	8002022 <HAL_I2C_Master_Transmit+0x1ea>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d007      	beq.n	8001eae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0201 	orr.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ebc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2221      	movs	r2, #33	; 0x21
 8001ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2210      	movs	r2, #16
 8001eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	893a      	ldrh	r2, [r7, #8]
 8001ede:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4a50      	ldr	r2, [pc, #320]	; (8002030 <HAL_I2C_Master_Transmit+0x1f8>)
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ef0:	8979      	ldrh	r1, [r7, #10]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	6a3a      	ldr	r2, [r7, #32]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 fac2 	bl	8002480 <I2C_MasterRequestWrite>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e08d      	b.n	8002022 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f1c:	e066      	b.n	8001fec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	6a39      	ldr	r1, [r7, #32]
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 fcd2 	bl	80028cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00d      	beq.n	8001f4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d107      	bne.n	8001f46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e06b      	b.n	8002022 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	781a      	ldrb	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f72:	3b01      	subs	r3, #1
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d11b      	bne.n	8001fc0 <HAL_I2C_Master_Transmit+0x188>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d017      	beq.n	8001fc0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	781a      	ldrb	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	6a39      	ldr	r1, [r7, #32]
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 fcc2 	bl	800294e <I2C_WaitOnBTFFlagUntilTimeout>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00d      	beq.n	8001fec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d107      	bne.n	8001fe8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e01a      	b.n	8002022 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d194      	bne.n	8001f1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	e000      	b.n	8002022 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002020:	2302      	movs	r3, #2
  }
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	00100002 	.word	0x00100002
 8002030:	ffff0000 	.word	0xffff0000

08002034 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08c      	sub	sp, #48	; 0x30
 8002038:	af02      	add	r7, sp, #8
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	461a      	mov	r2, r3
 8002040:	460b      	mov	r3, r1
 8002042:	817b      	strh	r3, [r7, #10]
 8002044:	4613      	mov	r3, r2
 8002046:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7fe ffda 	bl	8001000 <HAL_GetTick>
 800204c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b20      	cmp	r3, #32
 8002058:	f040 820b 	bne.w	8002472 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2319      	movs	r3, #25
 8002062:	2201      	movs	r2, #1
 8002064:	497c      	ldr	r1, [pc, #496]	; (8002258 <HAL_I2C_Master_Receive+0x224>)
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 fb5a 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002072:	2302      	movs	r3, #2
 8002074:	e1fe      	b.n	8002474 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_I2C_Master_Receive+0x50>
 8002080:	2302      	movs	r3, #2
 8002082:	e1f7      	b.n	8002474 <HAL_I2C_Master_Receive+0x440>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b01      	cmp	r3, #1
 8002098:	d007      	beq.n	80020aa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2222      	movs	r2, #34	; 0x22
 80020be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2210      	movs	r2, #16
 80020c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	893a      	ldrh	r2, [r7, #8]
 80020da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4a5c      	ldr	r2, [pc, #368]	; (800225c <HAL_I2C_Master_Receive+0x228>)
 80020ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020ec:	8979      	ldrh	r1, [r7, #10]
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 fa46 	bl	8002584 <I2C_MasterRequestRead>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e1b8      	b.n	8002474 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002106:	2b00      	cmp	r3, #0
 8002108:	d113      	bne.n	8002132 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	623b      	str	r3, [r7, #32]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	623b      	str	r3, [r7, #32]
 800211e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e18c      	b.n	800244c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	2b01      	cmp	r3, #1
 8002138:	d11b      	bne.n	8002172 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002148:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	e16c      	b.n	800244c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002176:	2b02      	cmp	r3, #2
 8002178:	d11b      	bne.n	80021b2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002188:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002198:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	e14c      	b.n	800244c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80021d8:	e138      	b.n	800244c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021de:	2b03      	cmp	r3, #3
 80021e0:	f200 80f1 	bhi.w	80023c6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d123      	bne.n	8002234 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 fbed 	bl	80029d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e139      	b.n	8002474 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002232:	e10b      	b.n	800244c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002238:	2b02      	cmp	r3, #2
 800223a:	d14e      	bne.n	80022da <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002242:	2200      	movs	r2, #0
 8002244:	4906      	ldr	r1, [pc, #24]	; (8002260 <HAL_I2C_Master_Receive+0x22c>)
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 fa6a 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d008      	beq.n	8002264 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e10e      	b.n	8002474 <HAL_I2C_Master_Receive+0x440>
 8002256:	bf00      	nop
 8002258:	00100002 	.word	0x00100002
 800225c:	ffff0000 	.word	0xffff0000
 8002260:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691a      	ldr	r2, [r3, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022d8:	e0b8      	b.n	800244c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e0:	2200      	movs	r2, #0
 80022e2:	4966      	ldr	r1, [pc, #408]	; (800247c <HAL_I2C_Master_Receive+0x448>)
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fa1b 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0bf      	b.n	8002474 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002302:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233c:	2200      	movs	r2, #0
 800233e:	494f      	ldr	r1, [pc, #316]	; (800247c <HAL_I2C_Master_Receive+0x448>)
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f9ed 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e091      	b.n	8002474 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023c4:	e042      	b.n	800244c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fb00 	bl	80029d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e04c      	b.n	8002474 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b04      	cmp	r3, #4
 8002418:	d118      	bne.n	800244c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002450:	2b00      	cmp	r3, #0
 8002452:	f47f aec2 	bne.w	80021da <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	e000      	b.n	8002474 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002472:	2302      	movs	r3, #2
  }
}
 8002474:	4618      	mov	r0, r3
 8002476:	3728      	adds	r7, #40	; 0x28
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	00010004 	.word	0x00010004

08002480 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	460b      	mov	r3, r1
 800248e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b08      	cmp	r3, #8
 800249a:	d006      	beq.n	80024aa <I2C_MasterRequestWrite+0x2a>
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d003      	beq.n	80024aa <I2C_MasterRequestWrite+0x2a>
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024a8:	d108      	bne.n	80024bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	e00b      	b.n	80024d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	2b12      	cmp	r3, #18
 80024c2:	d107      	bne.n	80024d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f91d 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00d      	beq.n	8002508 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024fa:	d103      	bne.n	8002504 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002502:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e035      	b.n	8002574 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002510:	d108      	bne.n	8002524 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002512:	897b      	ldrh	r3, [r7, #10]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002520:	611a      	str	r2, [r3, #16]
 8002522:	e01b      	b.n	800255c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002524:	897b      	ldrh	r3, [r7, #10]
 8002526:	11db      	asrs	r3, r3, #7
 8002528:	b2db      	uxtb	r3, r3
 800252a:	f003 0306 	and.w	r3, r3, #6
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f063 030f 	orn	r3, r3, #15
 8002534:	b2da      	uxtb	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	490e      	ldr	r1, [pc, #56]	; (800257c <I2C_MasterRequestWrite+0xfc>)
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f943 	bl	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e010      	b.n	8002574 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002552:	897b      	ldrh	r3, [r7, #10]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	4907      	ldr	r1, [pc, #28]	; (8002580 <I2C_MasterRequestWrite+0x100>)
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f933 	bl	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	00010008 	.word	0x00010008
 8002580:	00010002 	.word	0x00010002

08002584 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af02      	add	r7, sp, #8
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	460b      	mov	r3, r1
 8002592:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d006      	beq.n	80025be <I2C_MasterRequestRead+0x3a>
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d003      	beq.n	80025be <I2C_MasterRequestRead+0x3a>
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025bc:	d108      	bne.n	80025d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	e00b      	b.n	80025e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	2b11      	cmp	r3, #17
 80025d6:	d107      	bne.n	80025e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f893 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00d      	beq.n	800261c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800260e:	d103      	bne.n	8002618 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e079      	b.n	8002710 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002624:	d108      	bne.n	8002638 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002626:	897b      	ldrh	r3, [r7, #10]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	b2da      	uxtb	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	611a      	str	r2, [r3, #16]
 8002636:	e05f      	b.n	80026f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002638:	897b      	ldrh	r3, [r7, #10]
 800263a:	11db      	asrs	r3, r3, #7
 800263c:	b2db      	uxtb	r3, r3
 800263e:	f003 0306 	and.w	r3, r3, #6
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f063 030f 	orn	r3, r3, #15
 8002648:	b2da      	uxtb	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	4930      	ldr	r1, [pc, #192]	; (8002718 <I2C_MasterRequestRead+0x194>)
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f8b9 	bl	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e054      	b.n	8002710 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002666:	897b      	ldrh	r3, [r7, #10]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	4929      	ldr	r1, [pc, #164]	; (800271c <I2C_MasterRequestRead+0x198>)
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f8a9 	bl	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e044      	b.n	8002710 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f831 	bl	8002720 <I2C_WaitOnFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00d      	beq.n	80026e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d2:	d103      	bne.n	80026dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026da:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e017      	b.n	8002710 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80026e0:	897b      	ldrh	r3, [r7, #10]
 80026e2:	11db      	asrs	r3, r3, #7
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	f003 0306 	and.w	r3, r3, #6
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	f063 030e 	orn	r3, r3, #14
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	4907      	ldr	r1, [pc, #28]	; (800271c <I2C_MasterRequestRead+0x198>)
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f865 	bl	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	00010008 	.word	0x00010008
 800271c:	00010002 	.word	0x00010002

08002720 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	4613      	mov	r3, r2
 800272e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002730:	e025      	b.n	800277e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d021      	beq.n	800277e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273a:	f7fe fc61 	bl	8001000 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d302      	bcc.n	8002750 <I2C_WaitOnFlagUntilTimeout+0x30>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d116      	bne.n	800277e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f043 0220 	orr.w	r2, r3, #32
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e023      	b.n	80027c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	0c1b      	lsrs	r3, r3, #16
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b01      	cmp	r3, #1
 8002786:	d10d      	bne.n	80027a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	43da      	mvns	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4013      	ands	r3, r2
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	bf0c      	ite	eq
 800279a:	2301      	moveq	r3, #1
 800279c:	2300      	movne	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	e00c      	b.n	80027be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	43da      	mvns	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4013      	ands	r3, r2
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	bf0c      	ite	eq
 80027b6:	2301      	moveq	r3, #1
 80027b8:	2300      	movne	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d0b6      	beq.n	8002732 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027dc:	e051      	b.n	8002882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ec:	d123      	bne.n	8002836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002806:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2220      	movs	r2, #32
 8002812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f043 0204 	orr.w	r2, r3, #4
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e046      	b.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d021      	beq.n	8002882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800283e:	f7fe fbdf 	bl	8001000 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	429a      	cmp	r2, r3
 800284c:	d302      	bcc.n	8002854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d116      	bne.n	8002882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f043 0220 	orr.w	r2, r3, #32
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e020      	b.n	80028c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	0c1b      	lsrs	r3, r3, #16
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b01      	cmp	r3, #1
 800288a:	d10c      	bne.n	80028a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	43da      	mvns	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4013      	ands	r3, r2
 8002898:	b29b      	uxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	bf14      	ite	ne
 800289e:	2301      	movne	r3, #1
 80028a0:	2300      	moveq	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	e00b      	b.n	80028be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	43da      	mvns	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	4013      	ands	r3, r2
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bf14      	ite	ne
 80028b8:	2301      	movne	r3, #1
 80028ba:	2300      	moveq	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d18d      	bne.n	80027de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028d8:	e02d      	b.n	8002936 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f8ce 	bl	8002a7c <I2C_IsAcknowledgeFailed>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e02d      	b.n	8002946 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d021      	beq.n	8002936 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f2:	f7fe fb85 	bl	8001000 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d302      	bcc.n	8002908 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d116      	bne.n	8002936 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f043 0220 	orr.w	r2, r3, #32
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e007      	b.n	8002946 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002940:	2b80      	cmp	r3, #128	; 0x80
 8002942:	d1ca      	bne.n	80028da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800295a:	e02d      	b.n	80029b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 f88d 	bl	8002a7c <I2C_IsAcknowledgeFailed>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e02d      	b.n	80029c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002972:	d021      	beq.n	80029b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002974:	f7fe fb44 	bl	8001000 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	429a      	cmp	r2, r3
 8002982:	d302      	bcc.n	800298a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d116      	bne.n	80029b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	f043 0220 	orr.w	r2, r3, #32
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e007      	b.n	80029c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d1ca      	bne.n	800295c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029dc:	e042      	b.n	8002a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d119      	bne.n	8002a20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0210 	mvn.w	r2, #16
 80029f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e029      	b.n	8002a74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a20:	f7fe faee 	bl	8001000 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d302      	bcc.n	8002a36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d116      	bne.n	8002a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f043 0220 	orr.w	r2, r3, #32
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e007      	b.n	8002a74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6e:	2b40      	cmp	r3, #64	; 0x40
 8002a70:	d1b5      	bne.n	80029de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a92:	d11b      	bne.n	8002acc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f043 0204 	orr.w	r2, r3, #4
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0cc      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af0:	4b68      	ldr	r3, [pc, #416]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d90c      	bls.n	8002b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b65      	ldr	r3, [pc, #404]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b63      	ldr	r3, [pc, #396]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0b8      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d020      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b30:	4b59      	ldr	r3, [pc, #356]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a58      	ldr	r2, [pc, #352]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b48:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a52      	ldr	r2, [pc, #328]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b54:	4b50      	ldr	r3, [pc, #320]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	494d      	ldr	r1, [pc, #308]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d044      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7a:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d119      	bne.n	8002bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e07f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d003      	beq.n	8002b9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9a:	4b3f      	ldr	r3, [pc, #252]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d109      	bne.n	8002bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e06f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002baa:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e067      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bba:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f023 0203 	bic.w	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	4934      	ldr	r1, [pc, #208]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bcc:	f7fe fa18 	bl	8001000 <HAL_GetTick>
 8002bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd4:	f7fe fa14 	bl	8001000 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e04f      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bea:	4b2b      	ldr	r3, [pc, #172]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 020c 	and.w	r2, r3, #12
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d1eb      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b25      	ldr	r3, [pc, #148]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d20c      	bcs.n	8002c24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c12:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <HAL_RCC_ClockConfig+0x1b8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e032      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c30:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4916      	ldr	r1, [pc, #88]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	490e      	ldr	r1, [pc, #56]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c62:	f000 f855 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8002c66:	4602      	mov	r2, r0
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	490a      	ldr	r1, [pc, #40]	; (8002c9c <HAL_RCC_ClockConfig+0x1c0>)
 8002c74:	5ccb      	ldrb	r3, [r1, r3]
 8002c76:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7a:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe f978 	bl	8000f78 <HAL_InitTick>

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40023c00 	.word	0x40023c00
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	08005c10 	.word	0x08005c10
 8002ca0:	20000000 	.word	0x20000000
 8002ca4:	20000004 	.word	0x20000004

08002ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000000 	.word	0x20000000

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cc4:	f7ff fff0 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	0a9b      	lsrs	r3, r3, #10
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4903      	ldr	r1, [pc, #12]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	08005c20 	.word	0x08005c20

08002ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cec:	f7ff ffdc 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	0b5b      	lsrs	r3, r3, #13
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4903      	ldr	r1, [pc, #12]	; (8002d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	08005c20 	.word	0x08005c20

08002d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d14:	b0ae      	sub	sp, #184	; 0xb8
 8002d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d36:	4bcb      	ldr	r3, [pc, #812]	; (8003064 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	f200 8206 	bhi.w	8003150 <HAL_RCC_GetSysClockFreq+0x440>
 8002d44:	a201      	add	r2, pc, #4	; (adr r2, 8002d4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4a:	bf00      	nop
 8002d4c:	08002d81 	.word	0x08002d81
 8002d50:	08003151 	.word	0x08003151
 8002d54:	08003151 	.word	0x08003151
 8002d58:	08003151 	.word	0x08003151
 8002d5c:	08002d89 	.word	0x08002d89
 8002d60:	08003151 	.word	0x08003151
 8002d64:	08003151 	.word	0x08003151
 8002d68:	08003151 	.word	0x08003151
 8002d6c:	08002d91 	.word	0x08002d91
 8002d70:	08003151 	.word	0x08003151
 8002d74:	08003151 	.word	0x08003151
 8002d78:	08003151 	.word	0x08003151
 8002d7c:	08002f81 	.word	0x08002f81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d80:	4bb9      	ldr	r3, [pc, #740]	; (8003068 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002d86:	e1e7      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d88:	4bb8      	ldr	r3, [pc, #736]	; (800306c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d8e:	e1e3      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d90:	4bb4      	ldr	r3, [pc, #720]	; (8003064 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d9c:	4bb1      	ldr	r3, [pc, #708]	; (8003064 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d071      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da8:	4bae      	ldr	r3, [pc, #696]	; (8003064 <HAL_RCC_GetSysClockFreq+0x354>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	099b      	lsrs	r3, r3, #6
 8002dae:	2200      	movs	r2, #0
 8002db0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002db4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dce:	4622      	mov	r2, r4
 8002dd0:	462b      	mov	r3, r5
 8002dd2:	f04f 0000 	mov.w	r0, #0
 8002dd6:	f04f 0100 	mov.w	r1, #0
 8002dda:	0159      	lsls	r1, r3, #5
 8002ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de0:	0150      	lsls	r0, r2, #5
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4621      	mov	r1, r4
 8002de8:	1a51      	subs	r1, r2, r1
 8002dea:	6439      	str	r1, [r7, #64]	; 0x40
 8002dec:	4629      	mov	r1, r5
 8002dee:	eb63 0301 	sbc.w	r3, r3, r1
 8002df2:	647b      	str	r3, [r7, #68]	; 0x44
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e00:	4649      	mov	r1, r9
 8002e02:	018b      	lsls	r3, r1, #6
 8002e04:	4641      	mov	r1, r8
 8002e06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e0a:	4641      	mov	r1, r8
 8002e0c:	018a      	lsls	r2, r1, #6
 8002e0e:	4641      	mov	r1, r8
 8002e10:	1a51      	subs	r1, r2, r1
 8002e12:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e14:	4649      	mov	r1, r9
 8002e16:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e28:	4649      	mov	r1, r9
 8002e2a:	00cb      	lsls	r3, r1, #3
 8002e2c:	4641      	mov	r1, r8
 8002e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e32:	4641      	mov	r1, r8
 8002e34:	00ca      	lsls	r2, r1, #3
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	189b      	adds	r3, r3, r2
 8002e40:	633b      	str	r3, [r7, #48]	; 0x30
 8002e42:	462b      	mov	r3, r5
 8002e44:	460a      	mov	r2, r1
 8002e46:	eb42 0303 	adc.w	r3, r2, r3
 8002e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e58:	4629      	mov	r1, r5
 8002e5a:	024b      	lsls	r3, r1, #9
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e62:	4621      	mov	r1, r4
 8002e64:	024a      	lsls	r2, r1, #9
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e7c:	f7fd fa20 	bl	80002c0 <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4613      	mov	r3, r2
 8002e86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e8a:	e067      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8c:	4b75      	ldr	r3, [pc, #468]	; (8003064 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	099b      	lsrs	r3, r3, #6
 8002e92:	2200      	movs	r2, #0
 8002e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e98:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002eaa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002eae:	4622      	mov	r2, r4
 8002eb0:	462b      	mov	r3, r5
 8002eb2:	f04f 0000 	mov.w	r0, #0
 8002eb6:	f04f 0100 	mov.w	r1, #0
 8002eba:	0159      	lsls	r1, r3, #5
 8002ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ec0:	0150      	lsls	r0, r2, #5
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	1a51      	subs	r1, r2, r1
 8002eca:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ecc:	4629      	mov	r1, r5
 8002ece:	eb63 0301 	sbc.w	r3, r3, r1
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002ee0:	4649      	mov	r1, r9
 8002ee2:	018b      	lsls	r3, r1, #6
 8002ee4:	4641      	mov	r1, r8
 8002ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eea:	4641      	mov	r1, r8
 8002eec:	018a      	lsls	r2, r1, #6
 8002eee:	4641      	mov	r1, r8
 8002ef0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f0e:	4692      	mov	sl, r2
 8002f10:	469b      	mov	fp, r3
 8002f12:	4623      	mov	r3, r4
 8002f14:	eb1a 0303 	adds.w	r3, sl, r3
 8002f18:	623b      	str	r3, [r7, #32]
 8002f1a:	462b      	mov	r3, r5
 8002f1c:	eb4b 0303 	adc.w	r3, fp, r3
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f2e:	4629      	mov	r1, r5
 8002f30:	028b      	lsls	r3, r1, #10
 8002f32:	4621      	mov	r1, r4
 8002f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f38:	4621      	mov	r1, r4
 8002f3a:	028a      	lsls	r2, r1, #10
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f44:	2200      	movs	r2, #0
 8002f46:	673b      	str	r3, [r7, #112]	; 0x70
 8002f48:	677a      	str	r2, [r7, #116]	; 0x74
 8002f4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f4e:	f7fd f9b7 	bl	80002c0 <__aeabi_uldivmod>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4613      	mov	r3, r2
 8002f58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f5c:	4b41      	ldr	r3, [pc, #260]	; (8003064 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	0c1b      	lsrs	r3, r3, #16
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	3301      	adds	r3, #1
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f7e:	e0eb      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f80:	4b38      	ldr	r3, [pc, #224]	; (8003064 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f8c:	4b35      	ldr	r3, [pc, #212]	; (8003064 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d06b      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f98:	4b32      	ldr	r3, [pc, #200]	; (8003064 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	099b      	lsrs	r3, r3, #6
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fa2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002faa:	663b      	str	r3, [r7, #96]	; 0x60
 8002fac:	2300      	movs	r3, #0
 8002fae:	667b      	str	r3, [r7, #100]	; 0x64
 8002fb0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002fb4:	4622      	mov	r2, r4
 8002fb6:	462b      	mov	r3, r5
 8002fb8:	f04f 0000 	mov.w	r0, #0
 8002fbc:	f04f 0100 	mov.w	r1, #0
 8002fc0:	0159      	lsls	r1, r3, #5
 8002fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc6:	0150      	lsls	r0, r2, #5
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4621      	mov	r1, r4
 8002fce:	1a51      	subs	r1, r2, r1
 8002fd0:	61b9      	str	r1, [r7, #24]
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	eb63 0301 	sbc.w	r3, r3, r1
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002fe6:	4659      	mov	r1, fp
 8002fe8:	018b      	lsls	r3, r1, #6
 8002fea:	4651      	mov	r1, sl
 8002fec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ff0:	4651      	mov	r1, sl
 8002ff2:	018a      	lsls	r2, r1, #6
 8002ff4:	4651      	mov	r1, sl
 8002ff6:	ebb2 0801 	subs.w	r8, r2, r1
 8002ffa:	4659      	mov	r1, fp
 8002ffc:	eb63 0901 	sbc.w	r9, r3, r1
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800300c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003010:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003014:	4690      	mov	r8, r2
 8003016:	4699      	mov	r9, r3
 8003018:	4623      	mov	r3, r4
 800301a:	eb18 0303 	adds.w	r3, r8, r3
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	462b      	mov	r3, r5
 8003022:	eb49 0303 	adc.w	r3, r9, r3
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003034:	4629      	mov	r1, r5
 8003036:	024b      	lsls	r3, r1, #9
 8003038:	4621      	mov	r1, r4
 800303a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800303e:	4621      	mov	r1, r4
 8003040:	024a      	lsls	r2, r1, #9
 8003042:	4610      	mov	r0, r2
 8003044:	4619      	mov	r1, r3
 8003046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800304a:	2200      	movs	r2, #0
 800304c:	65bb      	str	r3, [r7, #88]	; 0x58
 800304e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003050:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003054:	f7fd f934 	bl	80002c0 <__aeabi_uldivmod>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4613      	mov	r3, r2
 800305e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003062:	e065      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x420>
 8003064:	40023800 	.word	0x40023800
 8003068:	00f42400 	.word	0x00f42400
 800306c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003070:	4b3d      	ldr	r3, [pc, #244]	; (8003168 <HAL_RCC_GetSysClockFreq+0x458>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	2200      	movs	r2, #0
 8003078:	4618      	mov	r0, r3
 800307a:	4611      	mov	r1, r2
 800307c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003080:	653b      	str	r3, [r7, #80]	; 0x50
 8003082:	2300      	movs	r3, #0
 8003084:	657b      	str	r3, [r7, #84]	; 0x54
 8003086:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800308a:	4642      	mov	r2, r8
 800308c:	464b      	mov	r3, r9
 800308e:	f04f 0000 	mov.w	r0, #0
 8003092:	f04f 0100 	mov.w	r1, #0
 8003096:	0159      	lsls	r1, r3, #5
 8003098:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800309c:	0150      	lsls	r0, r2, #5
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4641      	mov	r1, r8
 80030a4:	1a51      	subs	r1, r2, r1
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	4649      	mov	r1, r9
 80030aa:	eb63 0301 	sbc.w	r3, r3, r1
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030bc:	4659      	mov	r1, fp
 80030be:	018b      	lsls	r3, r1, #6
 80030c0:	4651      	mov	r1, sl
 80030c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030c6:	4651      	mov	r1, sl
 80030c8:	018a      	lsls	r2, r1, #6
 80030ca:	4651      	mov	r1, sl
 80030cc:	1a54      	subs	r4, r2, r1
 80030ce:	4659      	mov	r1, fp
 80030d0:	eb63 0501 	sbc.w	r5, r3, r1
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	00eb      	lsls	r3, r5, #3
 80030de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030e2:	00e2      	lsls	r2, r4, #3
 80030e4:	4614      	mov	r4, r2
 80030e6:	461d      	mov	r5, r3
 80030e8:	4643      	mov	r3, r8
 80030ea:	18e3      	adds	r3, r4, r3
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	464b      	mov	r3, r9
 80030f0:	eb45 0303 	adc.w	r3, r5, r3
 80030f4:	607b      	str	r3, [r7, #4]
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003102:	4629      	mov	r1, r5
 8003104:	028b      	lsls	r3, r1, #10
 8003106:	4621      	mov	r1, r4
 8003108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800310c:	4621      	mov	r1, r4
 800310e:	028a      	lsls	r2, r1, #10
 8003110:	4610      	mov	r0, r2
 8003112:	4619      	mov	r1, r3
 8003114:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003118:	2200      	movs	r2, #0
 800311a:	64bb      	str	r3, [r7, #72]	; 0x48
 800311c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800311e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003122:	f7fd f8cd 	bl	80002c0 <__aeabi_uldivmod>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4613      	mov	r3, r2
 800312c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003130:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <HAL_RCC_GetSysClockFreq+0x458>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	0f1b      	lsrs	r3, r3, #28
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800313e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003146:	fbb2 f3f3 	udiv	r3, r2, r3
 800314a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800314e:	e003      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003152:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003156:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003158:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800315c:	4618      	mov	r0, r3
 800315e:	37b8      	adds	r7, #184	; 0xb8
 8003160:	46bd      	mov	sp, r7
 8003162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800
 800316c:	00f42400 	.word	0x00f42400

08003170 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e28d      	b.n	800369e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 8083 	beq.w	8003296 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003190:	4b94      	ldr	r3, [pc, #592]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 030c 	and.w	r3, r3, #12
 8003198:	2b04      	cmp	r3, #4
 800319a:	d019      	beq.n	80031d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800319c:	4b91      	ldr	r3, [pc, #580]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d106      	bne.n	80031b6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031a8:	4b8e      	ldr	r3, [pc, #568]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b4:	d00c      	beq.n	80031d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b6:	4b8b      	ldr	r3, [pc, #556]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031be:	2b0c      	cmp	r3, #12
 80031c0:	d112      	bne.n	80031e8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c2:	4b88      	ldr	r3, [pc, #544]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ce:	d10b      	bne.n	80031e8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d0:	4b84      	ldr	r3, [pc, #528]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d05b      	beq.n	8003294 <HAL_RCC_OscConfig+0x124>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d157      	bne.n	8003294 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e25a      	b.n	800369e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f0:	d106      	bne.n	8003200 <HAL_RCC_OscConfig+0x90>
 80031f2:	4b7c      	ldr	r3, [pc, #496]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a7b      	ldr	r2, [pc, #492]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e01d      	b.n	800323c <HAL_RCC_OscConfig+0xcc>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0xb4>
 800320a:	4b76      	ldr	r3, [pc, #472]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a75      	ldr	r2, [pc, #468]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 8003210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	4b73      	ldr	r3, [pc, #460]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a72      	ldr	r2, [pc, #456]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 800321c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	e00b      	b.n	800323c <HAL_RCC_OscConfig+0xcc>
 8003224:	4b6f      	ldr	r3, [pc, #444]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a6e      	ldr	r2, [pc, #440]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 800322a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	4b6c      	ldr	r3, [pc, #432]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a6b      	ldr	r2, [pc, #428]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 8003236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d013      	beq.n	800326c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003244:	f7fd fedc 	bl	8001000 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800324c:	f7fd fed8 	bl	8001000 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e21f      	b.n	800369e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	4b61      	ldr	r3, [pc, #388]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0xdc>
 800326a:	e014      	b.n	8003296 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7fd fec8 	bl	8001000 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003274:	f7fd fec4 	bl	8001000 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e20b      	b.n	800369e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003286:	4b57      	ldr	r3, [pc, #348]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x104>
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d06f      	beq.n	8003382 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032a2:	4b50      	ldr	r3, [pc, #320]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d017      	beq.n	80032de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032ae:	4b4d      	ldr	r3, [pc, #308]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d105      	bne.n	80032c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032ba:	4b4a      	ldr	r3, [pc, #296]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00b      	beq.n	80032de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032c6:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032ce:	2b0c      	cmp	r3, #12
 80032d0:	d11c      	bne.n	800330c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d2:	4b44      	ldr	r3, [pc, #272]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d116      	bne.n	800330c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032de:	4b41      	ldr	r3, [pc, #260]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_RCC_OscConfig+0x186>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d001      	beq.n	80032f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e1d3      	b.n	800369e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f6:	4b3b      	ldr	r3, [pc, #236]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4937      	ldr	r1, [pc, #220]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330a:	e03a      	b.n	8003382 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d020      	beq.n	8003356 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003314:	4b34      	ldr	r3, [pc, #208]	; (80033e8 <HAL_RCC_OscConfig+0x278>)
 8003316:	2201      	movs	r2, #1
 8003318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331a:	f7fd fe71 	bl	8001000 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003322:	f7fd fe6d 	bl	8001000 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e1b4      	b.n	800369e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003334:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003340:	4b28      	ldr	r3, [pc, #160]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4925      	ldr	r1, [pc, #148]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 8003350:	4313      	orrs	r3, r2
 8003352:	600b      	str	r3, [r1, #0]
 8003354:	e015      	b.n	8003382 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003356:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <HAL_RCC_OscConfig+0x278>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fd fe50 	bl	8001000 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003364:	f7fd fe4c 	bl	8001000 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e193      	b.n	800369e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003376:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f0      	bne.n	8003364 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d036      	beq.n	80033fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d016      	beq.n	80033c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003396:	4b15      	ldr	r3, [pc, #84]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 8003398:	2201      	movs	r2, #1
 800339a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339c:	f7fd fe30 	bl	8001000 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a4:	f7fd fe2c 	bl	8001000 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e173      	b.n	800369e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b6:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HAL_RCC_OscConfig+0x274>)
 80033b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0x234>
 80033c2:	e01b      	b.n	80033fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ca:	f7fd fe19 	bl	8001000 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d0:	e00e      	b.n	80033f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d2:	f7fd fe15 	bl	8001000 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d907      	bls.n	80033f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e15c      	b.n	800369e <HAL_RCC_OscConfig+0x52e>
 80033e4:	40023800 	.word	0x40023800
 80033e8:	42470000 	.word	0x42470000
 80033ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f0:	4b8a      	ldr	r3, [pc, #552]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 80033f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1ea      	bne.n	80033d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 8097 	beq.w	8003538 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340a:	2300      	movs	r3, #0
 800340c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800340e:	4b83      	ldr	r3, [pc, #524]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10f      	bne.n	800343a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	4b7f      	ldr	r3, [pc, #508]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	4a7e      	ldr	r2, [pc, #504]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 8003424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003428:	6413      	str	r3, [r2, #64]	; 0x40
 800342a:	4b7c      	ldr	r3, [pc, #496]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003436:	2301      	movs	r3, #1
 8003438:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343a:	4b79      	ldr	r3, [pc, #484]	; (8003620 <HAL_RCC_OscConfig+0x4b0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d118      	bne.n	8003478 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003446:	4b76      	ldr	r3, [pc, #472]	; (8003620 <HAL_RCC_OscConfig+0x4b0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a75      	ldr	r2, [pc, #468]	; (8003620 <HAL_RCC_OscConfig+0x4b0>)
 800344c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003452:	f7fd fdd5 	bl	8001000 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345a:	f7fd fdd1 	bl	8001000 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e118      	b.n	800369e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346c:	4b6c      	ldr	r3, [pc, #432]	; (8003620 <HAL_RCC_OscConfig+0x4b0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d106      	bne.n	800348e <HAL_RCC_OscConfig+0x31e>
 8003480:	4b66      	ldr	r3, [pc, #408]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	4a65      	ldr	r2, [pc, #404]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	6713      	str	r3, [r2, #112]	; 0x70
 800348c:	e01c      	b.n	80034c8 <HAL_RCC_OscConfig+0x358>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b05      	cmp	r3, #5
 8003494:	d10c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x340>
 8003496:	4b61      	ldr	r3, [pc, #388]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349a:	4a60      	ldr	r2, [pc, #384]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 800349c:	f043 0304 	orr.w	r3, r3, #4
 80034a0:	6713      	str	r3, [r2, #112]	; 0x70
 80034a2:	4b5e      	ldr	r3, [pc, #376]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	4a5d      	ldr	r2, [pc, #372]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	6713      	str	r3, [r2, #112]	; 0x70
 80034ae:	e00b      	b.n	80034c8 <HAL_RCC_OscConfig+0x358>
 80034b0:	4b5a      	ldr	r3, [pc, #360]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b4:	4a59      	ldr	r2, [pc, #356]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 80034b6:	f023 0301 	bic.w	r3, r3, #1
 80034ba:	6713      	str	r3, [r2, #112]	; 0x70
 80034bc:	4b57      	ldr	r3, [pc, #348]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c0:	4a56      	ldr	r2, [pc, #344]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 80034c2:	f023 0304 	bic.w	r3, r3, #4
 80034c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d015      	beq.n	80034fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fd fd96 	bl	8001000 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fd fd92 	bl	8001000 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e0d7      	b.n	800369e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ee:	4b4b      	ldr	r3, [pc, #300]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0ee      	beq.n	80034d8 <HAL_RCC_OscConfig+0x368>
 80034fa:	e014      	b.n	8003526 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fc:	f7fd fd80 	bl	8001000 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003502:	e00a      	b.n	800351a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003504:	f7fd fd7c 	bl	8001000 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e0c1      	b.n	800369e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800351a:	4b40      	ldr	r3, [pc, #256]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1ee      	bne.n	8003504 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003526:	7dfb      	ldrb	r3, [r7, #23]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d105      	bne.n	8003538 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800352c:	4b3b      	ldr	r3, [pc, #236]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	4a3a      	ldr	r2, [pc, #232]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 8003532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003536:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80ad 	beq.w	800369c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003542:	4b36      	ldr	r3, [pc, #216]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b08      	cmp	r3, #8
 800354c:	d060      	beq.n	8003610 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d145      	bne.n	80035e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003556:	4b33      	ldr	r3, [pc, #204]	; (8003624 <HAL_RCC_OscConfig+0x4b4>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7fd fd50 	bl	8001000 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003564:	f7fd fd4c 	bl	8001000 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e093      	b.n	800369e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003576:	4b29      	ldr	r3, [pc, #164]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69da      	ldr	r2, [r3, #28]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	019b      	lsls	r3, r3, #6
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	085b      	lsrs	r3, r3, #1
 800359a:	3b01      	subs	r3, #1
 800359c:	041b      	lsls	r3, r3, #16
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	061b      	lsls	r3, r3, #24
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	071b      	lsls	r3, r3, #28
 80035ae:	491b      	ldr	r1, [pc, #108]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b4:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <HAL_RCC_OscConfig+0x4b4>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ba:	f7fd fd21 	bl	8001000 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c2:	f7fd fd1d 	bl	8001000 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e064      	b.n	800369e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d4:	4b11      	ldr	r3, [pc, #68]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x452>
 80035e0:	e05c      	b.n	800369c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <HAL_RCC_OscConfig+0x4b4>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fd fd0a 	bl	8001000 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fd fd06 	bl	8001000 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e04d      	b.n	800369e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <HAL_RCC_OscConfig+0x4ac>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x480>
 800360e:	e045      	b.n	800369c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d107      	bne.n	8003628 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e040      	b.n	800369e <HAL_RCC_OscConfig+0x52e>
 800361c:	40023800 	.word	0x40023800
 8003620:	40007000 	.word	0x40007000
 8003624:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003628:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <HAL_RCC_OscConfig+0x538>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d030      	beq.n	8003698 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d129      	bne.n	8003698 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364e:	429a      	cmp	r2, r3
 8003650:	d122      	bne.n	8003698 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003658:	4013      	ands	r3, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800365e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003660:	4293      	cmp	r3, r2
 8003662:	d119      	bne.n	8003698 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	085b      	lsrs	r3, r3, #1
 8003670:	3b01      	subs	r3, #1
 8003672:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d10f      	bne.n	8003698 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d107      	bne.n	8003698 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d001      	beq.n	800369c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800

080036ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e03f      	b.n	800373e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d106      	bne.n	80036d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fd fb78 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2224      	movs	r2, #36	; 0x24
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fddf 	bl	80042b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695a      	ldr	r2, [r3, #20]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b08a      	sub	sp, #40	; 0x28
 800374a:	af02      	add	r7, sp, #8
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b20      	cmp	r3, #32
 8003764:	d17c      	bne.n	8003860 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_UART_Transmit+0x2c>
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e075      	b.n	8003862 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_UART_Transmit+0x3e>
 8003780:	2302      	movs	r3, #2
 8003782:	e06e      	b.n	8003862 <HAL_UART_Transmit+0x11c>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2221      	movs	r2, #33	; 0x21
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800379a:	f7fd fc31 	bl	8001000 <HAL_GetTick>
 800379e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	88fa      	ldrh	r2, [r7, #6]
 80037a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	88fa      	ldrh	r2, [r7, #6]
 80037aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b4:	d108      	bne.n	80037c8 <HAL_UART_Transmit+0x82>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d104      	bne.n	80037c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	e003      	b.n	80037d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037d8:	e02a      	b.n	8003830 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2200      	movs	r2, #0
 80037e2:	2180      	movs	r1, #128	; 0x80
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 fb1f 	bl	8003e28 <UART_WaitOnFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e036      	b.n	8003862 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10b      	bne.n	8003812 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003808:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	3302      	adds	r3, #2
 800380e:	61bb      	str	r3, [r7, #24]
 8003810:	e007      	b.n	8003822 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	781a      	ldrb	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	3301      	adds	r3, #1
 8003820:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1cf      	bne.n	80037da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2200      	movs	r2, #0
 8003842:	2140      	movs	r1, #64	; 0x40
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 faef 	bl	8003e28 <UART_WaitOnFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e006      	b.n	8003862 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	e000      	b.n	8003862 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003860:	2302      	movs	r3, #2
  }
}
 8003862:	4618      	mov	r0, r3
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	4613      	mov	r3, r2
 8003876:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b20      	cmp	r3, #32
 8003882:	d11d      	bne.n	80038c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_UART_Receive_IT+0x26>
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e016      	b.n	80038c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_UART_Receive_IT+0x38>
 800389e:	2302      	movs	r3, #2
 80038a0:	e00f      	b.n	80038c2 <HAL_UART_Receive_IT+0x58>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	461a      	mov	r2, r3
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 fb24 	bl	8003f04 <UART_Start_Receive_IT>
 80038bc:	4603      	mov	r3, r0
 80038be:	e000      	b.n	80038c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
  }
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b0ba      	sub	sp, #232	; 0xe8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800390a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10f      	bne.n	8003932 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <HAL_UART_IRQHandler+0x66>
 800391e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fc07 	bl	800413e <UART_Receive_IT>
      return;
 8003930:	e256      	b.n	8003de0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 80de 	beq.w	8003af8 <HAL_UART_IRQHandler+0x22c>
 800393c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d106      	bne.n	8003956 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800394c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80d1 	beq.w	8003af8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_UART_IRQHandler+0xae>
 8003962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f043 0201 	orr.w	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800397a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00b      	beq.n	800399e <HAL_UART_IRQHandler+0xd2>
 8003986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d005      	beq.n	800399e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f043 0202 	orr.w	r2, r3, #2
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800399e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <HAL_UART_IRQHandler+0xf6>
 80039aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f043 0204 	orr.w	r2, r3, #4
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d011      	beq.n	80039f2 <HAL_UART_IRQHandler+0x126>
 80039ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d105      	bne.n	80039e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f043 0208 	orr.w	r2, r3, #8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 81ed 	beq.w	8003dd6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_UART_IRQHandler+0x14e>
 8003a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fb92 	bl	800413e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a24:	2b40      	cmp	r3, #64	; 0x40
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d103      	bne.n	8003a46 <HAL_UART_IRQHandler+0x17a>
 8003a3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d04f      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fa9a 	bl	8003f80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a56:	2b40      	cmp	r3, #64	; 0x40
 8003a58:	d141      	bne.n	8003ade <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3314      	adds	r3, #20
 8003a60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3314      	adds	r3, #20
 8003a82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1d9      	bne.n	8003a5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d013      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	4a7d      	ldr	r2, [pc, #500]	; (8003ca8 <HAL_UART_IRQHandler+0x3dc>)
 8003ab4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fd fe8f 	bl	80017de <HAL_DMA_Abort_IT>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d016      	beq.n	8003af4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad4:	e00e      	b.n	8003af4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f990 	bl	8003dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003adc:	e00a      	b.n	8003af4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f98c 	bl	8003dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae4:	e006      	b.n	8003af4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f988 	bl	8003dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003af2:	e170      	b.n	8003dd6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af4:	bf00      	nop
    return;
 8003af6:	e16e      	b.n	8003dd6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	f040 814a 	bne.w	8003d96 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 8143 	beq.w	8003d96 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b14:	f003 0310 	and.w	r3, r3, #16
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 813c 	beq.w	8003d96 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3e:	2b40      	cmp	r3, #64	; 0x40
 8003b40:	f040 80b4 	bne.w	8003cac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8140 	beq.w	8003dda <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b62:	429a      	cmp	r2, r3
 8003b64:	f080 8139 	bcs.w	8003dda <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7a:	f000 8088 	beq.w	8003c8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	330c      	adds	r3, #12
 8003b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	330c      	adds	r3, #12
 8003ba6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003baa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003bb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1d9      	bne.n	8003b7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3314      	adds	r3, #20
 8003bd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003bda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3314      	adds	r3, #20
 8003bea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bf2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e1      	bne.n	8003bca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3314      	adds	r3, #20
 8003c0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3314      	adds	r3, #20
 8003c26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e3      	bne.n	8003c06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	330c      	adds	r3, #12
 8003c52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5e:	f023 0310 	bic.w	r3, r3, #16
 8003c62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c70:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e3      	bne.n	8003c4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fd fd38 	bl	80016fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f8b6 	bl	8003e10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ca4:	e099      	b.n	8003dda <HAL_UART_IRQHandler+0x50e>
 8003ca6:	bf00      	nop
 8003ca8:	08004047 	.word	0x08004047
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 808b 	beq.w	8003dde <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8086 	beq.w	8003dde <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	330c      	adds	r3, #12
 8003cd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	330c      	adds	r3, #12
 8003cf2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003cf6:	647a      	str	r2, [r7, #68]	; 0x44
 8003cf8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1e3      	bne.n	8003cd2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3314      	adds	r3, #20
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	e853 3f00 	ldrex	r3, [r3]
 8003d18:	623b      	str	r3, [r7, #32]
   return(result);
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3314      	adds	r3, #20
 8003d2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d2e:	633a      	str	r2, [r7, #48]	; 0x30
 8003d30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d36:	e841 2300 	strex	r3, r2, [r1]
 8003d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1e3      	bne.n	8003d0a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	330c      	adds	r3, #12
 8003d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0310 	bic.w	r3, r3, #16
 8003d66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d74:	61fa      	str	r2, [r7, #28]
 8003d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	69b9      	ldr	r1, [r7, #24]
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	617b      	str	r3, [r7, #20]
   return(result);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e3      	bne.n	8003d50 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f83e 	bl	8003e10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d94:	e023      	b.n	8003dde <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <HAL_UART_IRQHandler+0x4ea>
 8003da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f95d 	bl	800406e <UART_Transmit_IT>
    return;
 8003db4:	e014      	b.n	8003de0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00e      	beq.n	8003de0 <HAL_UART_IRQHandler+0x514>
 8003dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d008      	beq.n	8003de0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f99d 	bl	800410e <UART_EndTransmit_IT>
    return;
 8003dd4:	e004      	b.n	8003de0 <HAL_UART_IRQHandler+0x514>
    return;
 8003dd6:	bf00      	nop
 8003dd8:	e002      	b.n	8003de0 <HAL_UART_IRQHandler+0x514>
      return;
 8003dda:	bf00      	nop
 8003ddc:	e000      	b.n	8003de0 <HAL_UART_IRQHandler+0x514>
      return;
 8003dde:	bf00      	nop
  }
}
 8003de0:	37e8      	adds	r7, #232	; 0xe8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop

08003de8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b090      	sub	sp, #64	; 0x40
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	4613      	mov	r3, r2
 8003e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e38:	e050      	b.n	8003edc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d04c      	beq.n	8003edc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d007      	beq.n	8003e58 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e48:	f7fd f8da 	bl	8001000 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d241      	bcs.n	8003edc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	330c      	adds	r3, #12
 8003e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	e853 3f00 	ldrex	r3, [r3]
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	330c      	adds	r3, #12
 8003e76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e78:	637a      	str	r2, [r7, #52]	; 0x34
 8003e7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e5      	bne.n	8003e58 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3314      	adds	r3, #20
 8003e92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	e853 3f00 	ldrex	r3, [r3]
 8003e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3314      	adds	r3, #20
 8003eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eac:	623a      	str	r2, [r7, #32]
 8003eae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb0:	69f9      	ldr	r1, [r7, #28]
 8003eb2:	6a3a      	ldr	r2, [r7, #32]
 8003eb4:	e841 2300 	strex	r3, r2, [r1]
 8003eb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1e5      	bne.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e00f      	b.n	8003efc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d09f      	beq.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3740      	adds	r7, #64	; 0x40
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	88fa      	ldrh	r2, [r7, #6]
 8003f1c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	88fa      	ldrh	r2, [r7, #6]
 8003f22:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2222      	movs	r2, #34	; 0x22
 8003f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d007      	beq.n	8003f52 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f50:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695a      	ldr	r2, [r3, #20]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0201 	orr.w	r2, r2, #1
 8003f60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0220 	orr.w	r2, r2, #32
 8003f70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b095      	sub	sp, #84	; 0x54
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fa8:	643a      	str	r2, [r7, #64]	; 0x40
 8003faa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e5      	bne.n	8003f88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3314      	adds	r3, #20
 8003fc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3314      	adds	r3, #20
 8003fda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe4:	e841 2300 	strex	r3, r2, [r1]
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e5      	bne.n	8003fbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d119      	bne.n	800402c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	330c      	adds	r3, #12
 8003ffe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	60bb      	str	r3, [r7, #8]
   return(result);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f023 0310 	bic.w	r3, r3, #16
 800400e:	647b      	str	r3, [r7, #68]	; 0x44
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	330c      	adds	r3, #12
 8004016:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004018:	61ba      	str	r2, [r7, #24]
 800401a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	6979      	ldr	r1, [r7, #20]
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	613b      	str	r3, [r7, #16]
   return(result);
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e5      	bne.n	8003ff8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	631a      	str	r2, [r3, #48]	; 0x30
}
 800403a:	bf00      	nop
 800403c:	3754      	adds	r7, #84	; 0x54
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7ff fecb 	bl	8003dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b21      	cmp	r3, #33	; 0x21
 8004080:	d13e      	bne.n	8004100 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408a:	d114      	bne.n	80040b6 <UART_Transmit_IT+0x48>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d110      	bne.n	80040b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	1c9a      	adds	r2, r3, #2
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	621a      	str	r2, [r3, #32]
 80040b4:	e008      	b.n	80040c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	1c59      	adds	r1, r3, #1
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6211      	str	r1, [r2, #32]
 80040c0:	781a      	ldrb	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	4619      	mov	r1, r3
 80040d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10f      	bne.n	80040fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e000      	b.n	8004102 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
  }
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004124:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff fe5a 	bl	8003de8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b08c      	sub	sp, #48	; 0x30
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b22      	cmp	r3, #34	; 0x22
 8004150:	f040 80ab 	bne.w	80042aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415c:	d117      	bne.n	800418e <UART_Receive_IT+0x50>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d113      	bne.n	800418e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004166:	2300      	movs	r3, #0
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	b29b      	uxth	r3, r3
 8004178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417c:	b29a      	uxth	r2, r3
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	1c9a      	adds	r2, r3, #2
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	629a      	str	r2, [r3, #40]	; 0x28
 800418c:	e026      	b.n	80041dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004194:	2300      	movs	r3, #0
 8004196:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a0:	d007      	beq.n	80041b2 <UART_Receive_IT+0x74>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <UART_Receive_IT+0x82>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	e008      	b.n	80041d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	4619      	mov	r1, r3
 80041ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d15a      	bne.n	80042a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0220 	bic.w	r2, r2, #32
 80041fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800420e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0201 	bic.w	r2, r2, #1
 800421e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	2b01      	cmp	r3, #1
 800422e:	d135      	bne.n	800429c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	330c      	adds	r3, #12
 800423c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	613b      	str	r3, [r7, #16]
   return(result);
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f023 0310 	bic.w	r3, r3, #16
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004256:	623a      	str	r2, [r7, #32]
 8004258:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	69f9      	ldr	r1, [r7, #28]
 800425c:	6a3a      	ldr	r2, [r7, #32]
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	61bb      	str	r3, [r7, #24]
   return(result);
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e5      	bne.n	8004236 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	2b10      	cmp	r3, #16
 8004276:	d10a      	bne.n	800428e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004292:	4619      	mov	r1, r3
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff fdbb 	bl	8003e10 <HAL_UARTEx_RxEventCallback>
 800429a:	e002      	b.n	80042a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 fc8b 	bl	8004bb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e002      	b.n	80042ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	e000      	b.n	80042ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80042aa:	2302      	movs	r3, #2
  }
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3730      	adds	r7, #48	; 0x30
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b8:	b0c0      	sub	sp, #256	; 0x100
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d0:	68d9      	ldr	r1, [r3, #12]
 80042d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	ea40 0301 	orr.w	r3, r0, r1
 80042dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800430c:	f021 010c 	bic.w	r1, r1, #12
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800431a:	430b      	orrs	r3, r1
 800431c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800432a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432e:	6999      	ldr	r1, [r3, #24]
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	ea40 0301 	orr.w	r3, r0, r1
 800433a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	4b8f      	ldr	r3, [pc, #572]	; (8004580 <UART_SetConfig+0x2cc>)
 8004344:	429a      	cmp	r2, r3
 8004346:	d005      	beq.n	8004354 <UART_SetConfig+0xa0>
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b8d      	ldr	r3, [pc, #564]	; (8004584 <UART_SetConfig+0x2d0>)
 8004350:	429a      	cmp	r2, r3
 8004352:	d104      	bne.n	800435e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004354:	f7fe fcc8 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 8004358:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800435c:	e003      	b.n	8004366 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800435e:	f7fe fcaf 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8004362:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004370:	f040 810c 	bne.w	800458c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004378:	2200      	movs	r2, #0
 800437a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800437e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004382:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004386:	4622      	mov	r2, r4
 8004388:	462b      	mov	r3, r5
 800438a:	1891      	adds	r1, r2, r2
 800438c:	65b9      	str	r1, [r7, #88]	; 0x58
 800438e:	415b      	adcs	r3, r3
 8004390:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004392:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004396:	4621      	mov	r1, r4
 8004398:	eb12 0801 	adds.w	r8, r2, r1
 800439c:	4629      	mov	r1, r5
 800439e:	eb43 0901 	adc.w	r9, r3, r1
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043b6:	4690      	mov	r8, r2
 80043b8:	4699      	mov	r9, r3
 80043ba:	4623      	mov	r3, r4
 80043bc:	eb18 0303 	adds.w	r3, r8, r3
 80043c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043c4:	462b      	mov	r3, r5
 80043c6:	eb49 0303 	adc.w	r3, r9, r3
 80043ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043e2:	460b      	mov	r3, r1
 80043e4:	18db      	adds	r3, r3, r3
 80043e6:	653b      	str	r3, [r7, #80]	; 0x50
 80043e8:	4613      	mov	r3, r2
 80043ea:	eb42 0303 	adc.w	r3, r2, r3
 80043ee:	657b      	str	r3, [r7, #84]	; 0x54
 80043f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043f8:	f7fb ff62 	bl	80002c0 <__aeabi_uldivmod>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4b61      	ldr	r3, [pc, #388]	; (8004588 <UART_SetConfig+0x2d4>)
 8004402:	fba3 2302 	umull	r2, r3, r3, r2
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	011c      	lsls	r4, r3, #4
 800440a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800440e:	2200      	movs	r2, #0
 8004410:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004414:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004418:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800441c:	4642      	mov	r2, r8
 800441e:	464b      	mov	r3, r9
 8004420:	1891      	adds	r1, r2, r2
 8004422:	64b9      	str	r1, [r7, #72]	; 0x48
 8004424:	415b      	adcs	r3, r3
 8004426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004428:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800442c:	4641      	mov	r1, r8
 800442e:	eb12 0a01 	adds.w	sl, r2, r1
 8004432:	4649      	mov	r1, r9
 8004434:	eb43 0b01 	adc.w	fp, r3, r1
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004444:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004448:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800444c:	4692      	mov	sl, r2
 800444e:	469b      	mov	fp, r3
 8004450:	4643      	mov	r3, r8
 8004452:	eb1a 0303 	adds.w	r3, sl, r3
 8004456:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800445a:	464b      	mov	r3, r9
 800445c:	eb4b 0303 	adc.w	r3, fp, r3
 8004460:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004470:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004474:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004478:	460b      	mov	r3, r1
 800447a:	18db      	adds	r3, r3, r3
 800447c:	643b      	str	r3, [r7, #64]	; 0x40
 800447e:	4613      	mov	r3, r2
 8004480:	eb42 0303 	adc.w	r3, r2, r3
 8004484:	647b      	str	r3, [r7, #68]	; 0x44
 8004486:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800448a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800448e:	f7fb ff17 	bl	80002c0 <__aeabi_uldivmod>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	4611      	mov	r1, r2
 8004498:	4b3b      	ldr	r3, [pc, #236]	; (8004588 <UART_SetConfig+0x2d4>)
 800449a:	fba3 2301 	umull	r2, r3, r3, r1
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	2264      	movs	r2, #100	; 0x64
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	1acb      	subs	r3, r1, r3
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044ae:	4b36      	ldr	r3, [pc, #216]	; (8004588 <UART_SetConfig+0x2d4>)
 80044b0:	fba3 2302 	umull	r2, r3, r3, r2
 80044b4:	095b      	lsrs	r3, r3, #5
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044bc:	441c      	add	r4, r3
 80044be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044d0:	4642      	mov	r2, r8
 80044d2:	464b      	mov	r3, r9
 80044d4:	1891      	adds	r1, r2, r2
 80044d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80044d8:	415b      	adcs	r3, r3
 80044da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044e0:	4641      	mov	r1, r8
 80044e2:	1851      	adds	r1, r2, r1
 80044e4:	6339      	str	r1, [r7, #48]	; 0x30
 80044e6:	4649      	mov	r1, r9
 80044e8:	414b      	adcs	r3, r1
 80044ea:	637b      	str	r3, [r7, #52]	; 0x34
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044f8:	4659      	mov	r1, fp
 80044fa:	00cb      	lsls	r3, r1, #3
 80044fc:	4651      	mov	r1, sl
 80044fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004502:	4651      	mov	r1, sl
 8004504:	00ca      	lsls	r2, r1, #3
 8004506:	4610      	mov	r0, r2
 8004508:	4619      	mov	r1, r3
 800450a:	4603      	mov	r3, r0
 800450c:	4642      	mov	r2, r8
 800450e:	189b      	adds	r3, r3, r2
 8004510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004514:	464b      	mov	r3, r9
 8004516:	460a      	mov	r2, r1
 8004518:	eb42 0303 	adc.w	r3, r2, r3
 800451c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800452c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004530:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004534:	460b      	mov	r3, r1
 8004536:	18db      	adds	r3, r3, r3
 8004538:	62bb      	str	r3, [r7, #40]	; 0x28
 800453a:	4613      	mov	r3, r2
 800453c:	eb42 0303 	adc.w	r3, r2, r3
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004542:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004546:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800454a:	f7fb feb9 	bl	80002c0 <__aeabi_uldivmod>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <UART_SetConfig+0x2d4>)
 8004554:	fba3 1302 	umull	r1, r3, r3, r2
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	2164      	movs	r1, #100	; 0x64
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	3332      	adds	r3, #50	; 0x32
 8004566:	4a08      	ldr	r2, [pc, #32]	; (8004588 <UART_SetConfig+0x2d4>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	f003 0207 	and.w	r2, r3, #7
 8004572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4422      	add	r2, r4
 800457a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800457c:	e106      	b.n	800478c <UART_SetConfig+0x4d8>
 800457e:	bf00      	nop
 8004580:	40011000 	.word	0x40011000
 8004584:	40011400 	.word	0x40011400
 8004588:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800458c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004590:	2200      	movs	r2, #0
 8004592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004596:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800459a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800459e:	4642      	mov	r2, r8
 80045a0:	464b      	mov	r3, r9
 80045a2:	1891      	adds	r1, r2, r2
 80045a4:	6239      	str	r1, [r7, #32]
 80045a6:	415b      	adcs	r3, r3
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
 80045aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ae:	4641      	mov	r1, r8
 80045b0:	1854      	adds	r4, r2, r1
 80045b2:	4649      	mov	r1, r9
 80045b4:	eb43 0501 	adc.w	r5, r3, r1
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	00eb      	lsls	r3, r5, #3
 80045c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045c6:	00e2      	lsls	r2, r4, #3
 80045c8:	4614      	mov	r4, r2
 80045ca:	461d      	mov	r5, r3
 80045cc:	4643      	mov	r3, r8
 80045ce:	18e3      	adds	r3, r4, r3
 80045d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045d4:	464b      	mov	r3, r9
 80045d6:	eb45 0303 	adc.w	r3, r5, r3
 80045da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045fa:	4629      	mov	r1, r5
 80045fc:	008b      	lsls	r3, r1, #2
 80045fe:	4621      	mov	r1, r4
 8004600:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004604:	4621      	mov	r1, r4
 8004606:	008a      	lsls	r2, r1, #2
 8004608:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800460c:	f7fb fe58 	bl	80002c0 <__aeabi_uldivmod>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4b60      	ldr	r3, [pc, #384]	; (8004798 <UART_SetConfig+0x4e4>)
 8004616:	fba3 2302 	umull	r2, r3, r3, r2
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	011c      	lsls	r4, r3, #4
 800461e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004622:	2200      	movs	r2, #0
 8004624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004628:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800462c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004630:	4642      	mov	r2, r8
 8004632:	464b      	mov	r3, r9
 8004634:	1891      	adds	r1, r2, r2
 8004636:	61b9      	str	r1, [r7, #24]
 8004638:	415b      	adcs	r3, r3
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004640:	4641      	mov	r1, r8
 8004642:	1851      	adds	r1, r2, r1
 8004644:	6139      	str	r1, [r7, #16]
 8004646:	4649      	mov	r1, r9
 8004648:	414b      	adcs	r3, r1
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004658:	4659      	mov	r1, fp
 800465a:	00cb      	lsls	r3, r1, #3
 800465c:	4651      	mov	r1, sl
 800465e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004662:	4651      	mov	r1, sl
 8004664:	00ca      	lsls	r2, r1, #3
 8004666:	4610      	mov	r0, r2
 8004668:	4619      	mov	r1, r3
 800466a:	4603      	mov	r3, r0
 800466c:	4642      	mov	r2, r8
 800466e:	189b      	adds	r3, r3, r2
 8004670:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004674:	464b      	mov	r3, r9
 8004676:	460a      	mov	r2, r1
 8004678:	eb42 0303 	adc.w	r3, r2, r3
 800467c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	67bb      	str	r3, [r7, #120]	; 0x78
 800468a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004698:	4649      	mov	r1, r9
 800469a:	008b      	lsls	r3, r1, #2
 800469c:	4641      	mov	r1, r8
 800469e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046a2:	4641      	mov	r1, r8
 80046a4:	008a      	lsls	r2, r1, #2
 80046a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046aa:	f7fb fe09 	bl	80002c0 <__aeabi_uldivmod>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4611      	mov	r1, r2
 80046b4:	4b38      	ldr	r3, [pc, #224]	; (8004798 <UART_SetConfig+0x4e4>)
 80046b6:	fba3 2301 	umull	r2, r3, r3, r1
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	2264      	movs	r2, #100	; 0x64
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	1acb      	subs	r3, r1, r3
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	3332      	adds	r3, #50	; 0x32
 80046c8:	4a33      	ldr	r2, [pc, #204]	; (8004798 <UART_SetConfig+0x4e4>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046d4:	441c      	add	r4, r3
 80046d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046da:	2200      	movs	r2, #0
 80046dc:	673b      	str	r3, [r7, #112]	; 0x70
 80046de:	677a      	str	r2, [r7, #116]	; 0x74
 80046e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046e4:	4642      	mov	r2, r8
 80046e6:	464b      	mov	r3, r9
 80046e8:	1891      	adds	r1, r2, r2
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	415b      	adcs	r3, r3
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046f4:	4641      	mov	r1, r8
 80046f6:	1851      	adds	r1, r2, r1
 80046f8:	6039      	str	r1, [r7, #0]
 80046fa:	4649      	mov	r1, r9
 80046fc:	414b      	adcs	r3, r1
 80046fe:	607b      	str	r3, [r7, #4]
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800470c:	4659      	mov	r1, fp
 800470e:	00cb      	lsls	r3, r1, #3
 8004710:	4651      	mov	r1, sl
 8004712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004716:	4651      	mov	r1, sl
 8004718:	00ca      	lsls	r2, r1, #3
 800471a:	4610      	mov	r0, r2
 800471c:	4619      	mov	r1, r3
 800471e:	4603      	mov	r3, r0
 8004720:	4642      	mov	r2, r8
 8004722:	189b      	adds	r3, r3, r2
 8004724:	66bb      	str	r3, [r7, #104]	; 0x68
 8004726:	464b      	mov	r3, r9
 8004728:	460a      	mov	r2, r1
 800472a:	eb42 0303 	adc.w	r3, r2, r3
 800472e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	663b      	str	r3, [r7, #96]	; 0x60
 800473a:	667a      	str	r2, [r7, #100]	; 0x64
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004748:	4649      	mov	r1, r9
 800474a:	008b      	lsls	r3, r1, #2
 800474c:	4641      	mov	r1, r8
 800474e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004752:	4641      	mov	r1, r8
 8004754:	008a      	lsls	r2, r1, #2
 8004756:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800475a:	f7fb fdb1 	bl	80002c0 <__aeabi_uldivmod>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <UART_SetConfig+0x4e4>)
 8004764:	fba3 1302 	umull	r1, r3, r3, r2
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	2164      	movs	r1, #100	; 0x64
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	3332      	adds	r3, #50	; 0x32
 8004776:	4a08      	ldr	r2, [pc, #32]	; (8004798 <UART_SetConfig+0x4e4>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	f003 020f 	and.w	r2, r3, #15
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4422      	add	r2, r4
 800478a:	609a      	str	r2, [r3, #8]
}
 800478c:	bf00      	nop
 800478e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004792:	46bd      	mov	sp, r7
 8004794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004798:	51eb851f 	.word	0x51eb851f

0800479c <bmp_reset>:
#include "main.h"
#include <stdio.h>

static int32_t t_fine; //Used by both temp and press functions (needs to be called by the temp funct at first)

void bmp_reset(h_bmp280_t * bmp280){
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af02      	add	r7, sp, #8
 80047a2:	6078      	str	r0, [r7, #4]
	bmp280->registre = reset;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	22e0      	movs	r2, #224	; 0xe0
 80047a8:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	781a      	ldrb	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	705a      	strb	r2, [r3, #1]
	bmp280->buf[1]= BMP280_RESET;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	22b6      	movs	r2, #182	; 0xb6
 80047b6:	709a      	strb	r2, [r3, #2]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 2, HAL_MAX_DELAY)){
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	f04f 33ff 	mov.w	r3, #4294967295
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	2302      	movs	r3, #2
 80047c4:	21ee      	movs	r1, #238	; 0xee
 80047c6:	4806      	ldr	r0, [pc, #24]	; (80047e0 <bmp_reset+0x44>)
 80047c8:	f7fd fb36 	bl	8001e38 <HAL_I2C_Master_Transmit>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <bmp_reset+0x3c>
		printf("echec du reset\r\n");
 80047d2:	4804      	ldr	r0, [pc, #16]	; (80047e4 <bmp_reset+0x48>)
 80047d4:	f000 fb1e 	bl	8004e14 <puts>
	}
}
 80047d8:	bf00      	nop
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20000134 	.word	0x20000134
 80047e4:	08005b64 	.word	0x08005b64

080047e8 <bmp_id>:

void bmp_id(h_bmp280_t * bmp280){
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af02      	add	r7, sp, #8
 80047ee:	6078      	str	r0, [r7, #4]
	bmp280->registre = id;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	22d0      	movs	r2, #208	; 0xd0
 80047f4:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	781a      	ldrb	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	f04f 33ff 	mov.w	r3, #4294967295
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	2301      	movs	r3, #1
 800480a:	21ee      	movs	r1, #238	; 0xee
 800480c:	4810      	ldr	r0, [pc, #64]	; (8004850 <bmp_id+0x68>)
 800480e:	f7fd fb13 	bl	8001e38 <HAL_I2C_Master_Transmit>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <bmp_id+0x36>
		printf("echec de l'id\r\n");
 8004818:	480e      	ldr	r0, [pc, #56]	; (8004854 <bmp_id+0x6c>)
 800481a:	f000 fafb 	bl	8004e14 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, &bmp280->id, 1, 1000)){
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f103 021b 	add.w	r2, r3, #27
 8004824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	2301      	movs	r3, #1
 800482c:	21ee      	movs	r1, #238	; 0xee
 800482e:	4808      	ldr	r0, [pc, #32]	; (8004850 <bmp_id+0x68>)
 8004830:	f7fd fc00 	bl	8002034 <HAL_I2C_Master_Receive>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d105      	bne.n	8004846 <bmp_id+0x5e>
		printf("val id : %x\r\n",bmp280->id);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	7edb      	ldrb	r3, [r3, #27]
 800483e:	4619      	mov	r1, r3
 8004840:	4805      	ldr	r0, [pc, #20]	; (8004858 <bmp_id+0x70>)
 8004842:	f000 fa81 	bl	8004d48 <iprintf>
	}
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000134 	.word	0x20000134
 8004854:	08005b74 	.word	0x08005b74
 8004858:	08005b84 	.word	0x08005b84

0800485c <bmp_config>:
		printf("echec de l'id\r\n");
	}
	printf("val id : %x\r\n",bmp280->id);
}*/

void bmp_config(h_bmp280_t * bmp280){
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af02      	add	r7, sp, #8
 8004862:	6078      	str	r0, [r7, #4]
	bmp280->registre = ctrl_mes;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	22f4      	movs	r2, #244	; 0xf4
 8004868:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	781a      	ldrb	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	705a      	strb	r2, [r3, #1]
	bmp280->buf[1]= 0b01010111;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2257      	movs	r2, #87	; 0x57
 8004876:	709a      	strb	r2, [r3, #2]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 2, HAL_MAX_DELAY)){
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	f04f 33ff 	mov.w	r3, #4294967295
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	2302      	movs	r3, #2
 8004884:	21ee      	movs	r1, #238	; 0xee
 8004886:	4810      	ldr	r0, [pc, #64]	; (80048c8 <bmp_config+0x6c>)
 8004888:	f7fd fad6 	bl	8001e38 <HAL_I2C_Master_Transmit>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <bmp_config+0x3c>
		printf("echec de config\r\n");
 8004892:	480e      	ldr	r0, [pc, #56]	; (80048cc <bmp_config+0x70>)
 8004894:	f000 fabe 	bl	8004e14 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, &bmp280->config, 1, 1000)){
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f103 021c 	add.w	r2, r3, #28
 800489e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	2301      	movs	r3, #1
 80048a6:	21ee      	movs	r1, #238	; 0xee
 80048a8:	4807      	ldr	r0, [pc, #28]	; (80048c8 <bmp_config+0x6c>)
 80048aa:	f7fd fbc3 	bl	8002034 <HAL_I2C_Master_Receive>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d105      	bne.n	80048c0 <bmp_config+0x64>
		printf("config value : %x\r\n",bmp280->config);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	7f1b      	ldrb	r3, [r3, #28]
 80048b8:	4619      	mov	r1, r3
 80048ba:	4805      	ldr	r0, [pc, #20]	; (80048d0 <bmp_config+0x74>)
 80048bc:	f000 fa44 	bl	8004d48 <iprintf>
	}
	//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
}
 80048c0:	bf00      	nop
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20000134 	.word	0x20000134
 80048cc:	08005b94 	.word	0x08005b94
 80048d0:	08005ba8 	.word	0x08005ba8

080048d4 <bmp_calib_read>:

void bmp_calib_read(h_bmp280_t * bmp280){
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af02      	add	r7, sp, #8
 80048da:	6078      	str	r0, [r7, #4]
	bmp280->registre = calib00;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2288      	movs	r2, #136	; 0x88
 80048e0:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	f04f 33ff 	mov.w	r3, #4294967295
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2301      	movs	r3, #1
 80048f6:	21ee      	movs	r1, #238	; 0xee
 80048f8:	4810      	ldr	r0, [pc, #64]	; (800493c <bmp_calib_read+0x68>)
 80048fa:	f7fd fa9d 	bl	8001e38 <HAL_I2C_Master_Transmit>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <bmp_calib_read+0x36>
		printf("echec de calib\r\n");
 8004904:	480e      	ldr	r0, [pc, #56]	; (8004940 <bmp_calib_read+0x6c>)
 8004906:	f000 fa85 	bl	8004e14 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->calib, 25, HAL_MAX_DELAY)){
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f103 021d 	add.w	r2, r3, #29
 8004910:	f04f 33ff 	mov.w	r3, #4294967295
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	2319      	movs	r3, #25
 8004918:	21ee      	movs	r1, #238	; 0xee
 800491a:	4808      	ldr	r0, [pc, #32]	; (800493c <bmp_calib_read+0x68>)
 800491c:	f7fd fb8a 	bl	8002034 <HAL_I2C_Master_Receive>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d105      	bne.n	8004932 <bmp_calib_read+0x5e>
		printf("calib values : %s\r\n",bmp280->calib);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	331d      	adds	r3, #29
 800492a:	4619      	mov	r1, r3
 800492c:	4805      	ldr	r0, [pc, #20]	; (8004944 <bmp_calib_read+0x70>)
 800492e:	f000 fa0b 	bl	8004d48 <iprintf>
	}
	//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20000134 	.word	0x20000134
 8004940:	08005bbc 	.word	0x08005bbc
 8004944:	08005bcc 	.word	0x08005bcc

08004948 <bmp_temp_read>:

void bmp_temp_read(h_bmp280_t * bmp280){
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af02      	add	r7, sp, #8
 800494e:	6078      	str	r0, [r7, #4]
	bmp280->registre = temp_xlsb;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	22fc      	movs	r2, #252	; 0xfc
 8004954:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	781a      	ldrb	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	f04f 33ff 	mov.w	r3, #4294967295
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	2301      	movs	r3, #1
 800496a:	21ee      	movs	r1, #238	; 0xee
 800496c:	483f      	ldr	r0, [pc, #252]	; (8004a6c <bmp_temp_read+0x124>)
 800496e:	f7fd fa63 	bl	8001e38 <HAL_I2C_Master_Transmit>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <bmp_temp_read+0x36>
		printf("echec de temp read\r\n");
 8004978:	483d      	ldr	r0, [pc, #244]	; (8004a70 <bmp_temp_read+0x128>)
 800497a:	f000 fa4b 	bl	8004e14 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	f04f 33ff 	mov.w	r3, #4294967295
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	2301      	movs	r3, #1
 800498a:	21ee      	movs	r1, #238	; 0xee
 800498c:	4837      	ldr	r0, [pc, #220]	; (8004a6c <bmp_temp_read+0x124>)
 800498e:	f7fd fb51 	bl	8002034 <HAL_I2C_Master_Receive>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d106      	bne.n	80049a6 <bmp_temp_read+0x5e>
		bmp280->temp = (int32_t)((bmp280->buf[0]) >>4);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	785b      	ldrb	r3, [r3, #1]
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	461a      	mov	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38
		bmp280->temp = ((int32_t)bmp280->buf[0]>>4) + ((int32_t)bmp280->buf[1]<<4) + ((int32_t)bmp280->buf[2]<<12);
		printf("temp brute : %ld\r\n",bmp280->temp);
		bmp280->temp = bmp_compensate_T(bmp280);
		printf("temp : %ld\r\n",bmp280->temp);*/
	}
	bmp280->registre = temp_lsb;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	22fb      	movs	r2, #251	; 0xfb
 80049aa:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	781a      	ldrb	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	f04f 33ff 	mov.w	r3, #4294967295
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	2301      	movs	r3, #1
 80049c0:	21ee      	movs	r1, #238	; 0xee
 80049c2:	482a      	ldr	r0, [pc, #168]	; (8004a6c <bmp_temp_read+0x124>)
 80049c4:	f7fd fa38 	bl	8001e38 <HAL_I2C_Master_Transmit>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <bmp_temp_read+0x8c>
		printf("echec de temp read\r\n");
 80049ce:	4828      	ldr	r0, [pc, #160]	; (8004a70 <bmp_temp_read+0x128>)
 80049d0:	f000 fa20 	bl	8004e14 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	2301      	movs	r3, #1
 80049e0:	21ee      	movs	r1, #238	; 0xee
 80049e2:	4822      	ldr	r0, [pc, #136]	; (8004a6c <bmp_temp_read+0x124>)
 80049e4:	f7fd fb26 	bl	8002034 <HAL_I2C_Master_Receive>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d107      	bne.n	80049fe <bmp_temp_read+0xb6>
		bmp280->temp += ((int32_t)(bmp280->buf[0]))<<4;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	785b      	ldrb	r3, [r3, #1]
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	441a      	add	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	639a      	str	r2, [r3, #56]	; 0x38
	}
	bmp280->registre = temp_msb;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	22fa      	movs	r2, #250	; 0xfa
 8004a02:	701a      	strb	r2, [r3, #0]
	bmp280->buf[0]= (bmp280->registre) & 0xFF;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	781a      	ldrb	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	705a      	strb	r2, [r3, #1]
	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	f04f 33ff 	mov.w	r3, #4294967295
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	2301      	movs	r3, #1
 8004a18:	21ee      	movs	r1, #238	; 0xee
 8004a1a:	4814      	ldr	r0, [pc, #80]	; (8004a6c <bmp_temp_read+0x124>)
 8004a1c:	f7fd fa0c 	bl	8001e38 <HAL_I2C_Master_Transmit>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <bmp_temp_read+0xe4>
		printf("echec de temp read\r\n");
 8004a26:	4812      	ldr	r0, [pc, #72]	; (8004a70 <bmp_temp_read+0x128>)
 8004a28:	f000 f9f4 	bl	8004e14 <puts>
	}
	if(!HAL_I2C_Master_Receive(&hi2c1, (uint16_t) BMP280_ADDR<<1, bmp280->buf, 1, HAL_MAX_DELAY)){
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	f04f 33ff 	mov.w	r3, #4294967295
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	2301      	movs	r3, #1
 8004a38:	21ee      	movs	r1, #238	; 0xee
 8004a3a:	480c      	ldr	r0, [pc, #48]	; (8004a6c <bmp_temp_read+0x124>)
 8004a3c:	f7fd fafa 	bl	8002034 <HAL_I2C_Master_Receive>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d107      	bne.n	8004a56 <bmp_temp_read+0x10e>
		bmp280->temp += ((int32_t)(bmp280->buf[0]))<<12;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	785b      	ldrb	r3, [r3, #1]
 8004a4e:	031b      	lsls	r3, r3, #12
 8004a50:	441a      	add	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38
	}
	//printf("temp : %ld\r\n",bmp280->temp);

	bmp280->temp = bmp_compensate_T(bmp280);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f80c 	bl	8004a74 <bmp_compensate_T>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38

	//printf("celcius temp : %ld\r\n",bmp280->temp);

}
 8004a62:	bf00      	nop
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20000134 	.word	0x20000134
 8004a70:	08005be0 	.word	0x08005be0

08004a74 <bmp_compensate_T>:

	//printf("corrected press : %ld\r\n",bmp280->press);

}

int32_t bmp_compensate_T(h_bmp280_t * bmp280){
 8004a74:	b480      	push	{r7}
 8004a76:	b089      	sub	sp, #36	; 0x24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
	int32_t adc_T = bmp280->temp;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	61fb      	str	r3, [r7, #28]

	//Extracting calibration values
	uint16_t dig_T1;
	int16_t	 dig_T2, dig_T3;
	dig_T1 =((uint16_t) bmp280->calib[0]) + (((uint16_t) bmp280->calib[1])<<8);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	7f5b      	ldrb	r3, [r3, #29]
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	7f9b      	ldrb	r3, [r3, #30]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	4413      	add	r3, r2
 8004a94:	837b      	strh	r3, [r7, #26]
	dig_T2 =((int16_t) bmp280->calib[2]) + (((int16_t) bmp280->calib[3])<<8);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	7fdb      	ldrb	r3, [r3, #31]
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	021b      	lsls	r3, r3, #8
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	833b      	strh	r3, [r7, #24]
	dig_T3 =((int16_t) bmp280->calib[4]) + (((int16_t) bmp280->calib[5])<<8);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	82fb      	strh	r3, [r7, #22]

	//Temperature calculus (in 1/100th deg C)
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3)-((int32_t)dig_T1<<1)))*((int32_t)dig_T2))>>11;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	10da      	asrs	r2, r3, #3
 8004acc:	8b7b      	ldrh	r3, [r7, #26]
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004ad6:	fb02 f303 	mul.w	r3, r2, r3
 8004ada:	12db      	asrs	r3, r3, #11
 8004adc:	613b      	str	r3, [r7, #16]
	var2 = (((((adc_T>>4)-((int32_t)dig_T1))*((adc_T>>4)-((int32_t)dig_T1)))>>12)*((int32_t)dig_T3))>>14;
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	111a      	asrs	r2, r3, #4
 8004ae2:	8b7b      	ldrh	r3, [r7, #26]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	1111      	asrs	r1, r2, #4
 8004aea:	8b7a      	ldrh	r2, [r7, #26]
 8004aec:	1a8a      	subs	r2, r1, r2
 8004aee:	fb02 f303 	mul.w	r3, r2, r3
 8004af2:	131b      	asrs	r3, r3, #12
 8004af4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
 8004afc:	139b      	asrs	r3, r3, #14
 8004afe:	60fb      	str	r3, [r7, #12]
	t_fine = var1+ var2;
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	4a08      	ldr	r2, [pc, #32]	; (8004b28 <bmp_compensate_T+0xb4>)
 8004b08:	6013      	str	r3, [r2, #0]
	T = (t_fine*5 + 128)>>8;
 8004b0a:	4b07      	ldr	r3, [pc, #28]	; (8004b28 <bmp_compensate_T+0xb4>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	3380      	adds	r3, #128	; 0x80
 8004b16:	121b      	asrs	r3, r3, #8
 8004b18:	60bb      	str	r3, [r7, #8]
	return T;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3724      	adds	r7, #36	; 0x24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	20000258 	.word	0x20000258

08004b2c <Shell_Init>:
 * @brief Initializes the shell environment.
 *
 * This function initializes various buffers and sets up UART communication using
 * the HAL (Hardware Abstraction Layer) for STM32 microcontrollers.
 */
void Shell_Init(void){
 8004b2c:	b598      	push	{r3, r4, r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
	memset(argv,(int)NULL, MAX_ARGS*sizeof(char*));
 8004b30:	2224      	movs	r2, #36	; 0x24
 8004b32:	2100      	movs	r1, #0
 8004b34:	4819      	ldr	r0, [pc, #100]	; (8004b9c <Shell_Init+0x70>)
 8004b36:	f000 fa4d 	bl	8004fd4 <memset>
	memset(cmdBuffer, (int)NULL, CMD_BUFFER_SIZE*sizeof(char));
 8004b3a:	2240      	movs	r2, #64	; 0x40
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4818      	ldr	r0, [pc, #96]	; (8004ba0 <Shell_Init+0x74>)
 8004b40:	f000 fa48 	bl	8004fd4 <memset>
 8004b44:	4b17      	ldr	r3, [pc, #92]	; (8004ba4 <Shell_Init+0x78>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,(int)NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,(int)NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8004b4a:	2240      	movs	r2, #64	; 0x40
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	4816      	ldr	r0, [pc, #88]	; (8004ba8 <Shell_Init+0x7c>)
 8004b50:	f000 fa40 	bl	8004fd4 <memset>

	HAL_UART_Receive_IT(uartShell, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8004b54:	4b15      	ldr	r3, [pc, #84]	; (8004bac <Shell_Init+0x80>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	4912      	ldr	r1, [pc, #72]	; (8004ba4 <Shell_Init+0x78>)
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fe fe84 	bl	800386a <HAL_UART_Receive_IT>
	HAL_UART_Transmit(uartShell, started, strlen((char *)started), HAL_MAX_DELAY);
 8004b62:	4b12      	ldr	r3, [pc, #72]	; (8004bac <Shell_Init+0x80>)
 8004b64:	681c      	ldr	r4, [r3, #0]
 8004b66:	4812      	ldr	r0, [pc, #72]	; (8004bb0 <Shell_Init+0x84>)
 8004b68:	f7fb fb52 	bl	8000210 <strlen>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	f04f 33ff 	mov.w	r3, #4294967295
 8004b74:	490e      	ldr	r1, [pc, #56]	; (8004bb0 <Shell_Init+0x84>)
 8004b76:	4620      	mov	r0, r4
 8004b78:	f7fe fde5 	bl	8003746 <HAL_UART_Transmit>
	HAL_UART_Transmit(uartShell, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <Shell_Init+0x80>)
 8004b7e:	681c      	ldr	r4, [r3, #0]
 8004b80:	480c      	ldr	r0, [pc, #48]	; (8004bb4 <Shell_Init+0x88>)
 8004b82:	f7fb fb45 	bl	8000210 <strlen>
 8004b86:	4603      	mov	r3, r0
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8e:	4909      	ldr	r1, [pc, #36]	; (8004bb4 <Shell_Init+0x88>)
 8004b90:	4620      	mov	r0, r4
 8004b92:	f7fe fdd8 	bl	8003746 <HAL_UART_Transmit>
}
 8004b96:	bf00      	nop
 8004b98:	bd98      	pop	{r3, r4, r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	200002e4 	.word	0x200002e4
 8004ba0:	200002a4 	.word	0x200002a4
 8004ba4:	20000260 	.word	0x20000260
 8004ba8:	20000264 	.word	0x20000264
 8004bac:	20000090 	.word	0x20000090
 8004bb0:	20000028 	.word	0x20000028
 8004bb4:	2000000c 	.word	0x2000000c

08004bb8 <HAL_UART_RxCpltCallback>:
		HAL_UART_Transmit(uartShell, prompt, sizeof(prompt), HAL_MAX_DELAY);
		newCmdReady = 0;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8004bc0:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <HAL_UART_RxCpltCallback+0x24>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(uartShell, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8004bc6:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <HAL_UART_RxCpltCallback+0x28>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	4905      	ldr	r1, [pc, #20]	; (8004be4 <HAL_UART_RxCpltCallback+0x2c>)
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe fe4b 	bl	800386a <HAL_UART_Receive_IT>
}
 8004bd4:	bf00      	nop
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	2000025c 	.word	0x2000025c
 8004be0:	20000090 	.word	0x20000090
 8004be4:	20000260 	.word	0x20000260

08004be8 <std>:
 8004be8:	2300      	movs	r3, #0
 8004bea:	b510      	push	{r4, lr}
 8004bec:	4604      	mov	r4, r0
 8004bee:	e9c0 3300 	strd	r3, r3, [r0]
 8004bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bf6:	6083      	str	r3, [r0, #8]
 8004bf8:	8181      	strh	r1, [r0, #12]
 8004bfa:	6643      	str	r3, [r0, #100]	; 0x64
 8004bfc:	81c2      	strh	r2, [r0, #14]
 8004bfe:	6183      	str	r3, [r0, #24]
 8004c00:	4619      	mov	r1, r3
 8004c02:	2208      	movs	r2, #8
 8004c04:	305c      	adds	r0, #92	; 0x5c
 8004c06:	f000 f9e5 	bl	8004fd4 <memset>
 8004c0a:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <std+0x38>)
 8004c0c:	6263      	str	r3, [r4, #36]	; 0x24
 8004c0e:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <std+0x3c>)
 8004c10:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c12:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <std+0x40>)
 8004c14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c16:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <std+0x44>)
 8004c18:	6224      	str	r4, [r4, #32]
 8004c1a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c1c:	bd10      	pop	{r4, pc}
 8004c1e:	bf00      	nop
 8004c20:	08004e25 	.word	0x08004e25
 8004c24:	08004e47 	.word	0x08004e47
 8004c28:	08004e7f 	.word	0x08004e7f
 8004c2c:	08004ea3 	.word	0x08004ea3

08004c30 <stdio_exit_handler>:
 8004c30:	4a02      	ldr	r2, [pc, #8]	; (8004c3c <stdio_exit_handler+0xc>)
 8004c32:	4903      	ldr	r1, [pc, #12]	; (8004c40 <stdio_exit_handler+0x10>)
 8004c34:	4803      	ldr	r0, [pc, #12]	; (8004c44 <stdio_exit_handler+0x14>)
 8004c36:	f000 b869 	b.w	8004d0c <_fwalk_sglue>
 8004c3a:	bf00      	nop
 8004c3c:	20000094 	.word	0x20000094
 8004c40:	0800596d 	.word	0x0800596d
 8004c44:	200000a0 	.word	0x200000a0

08004c48 <cleanup_stdio>:
 8004c48:	6841      	ldr	r1, [r0, #4]
 8004c4a:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <cleanup_stdio+0x34>)
 8004c4c:	4299      	cmp	r1, r3
 8004c4e:	b510      	push	{r4, lr}
 8004c50:	4604      	mov	r4, r0
 8004c52:	d001      	beq.n	8004c58 <cleanup_stdio+0x10>
 8004c54:	f000 fe8a 	bl	800596c <_fflush_r>
 8004c58:	68a1      	ldr	r1, [r4, #8]
 8004c5a:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <cleanup_stdio+0x38>)
 8004c5c:	4299      	cmp	r1, r3
 8004c5e:	d002      	beq.n	8004c66 <cleanup_stdio+0x1e>
 8004c60:	4620      	mov	r0, r4
 8004c62:	f000 fe83 	bl	800596c <_fflush_r>
 8004c66:	68e1      	ldr	r1, [r4, #12]
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <cleanup_stdio+0x3c>)
 8004c6a:	4299      	cmp	r1, r3
 8004c6c:	d004      	beq.n	8004c78 <cleanup_stdio+0x30>
 8004c6e:	4620      	mov	r0, r4
 8004c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c74:	f000 be7a 	b.w	800596c <_fflush_r>
 8004c78:	bd10      	pop	{r4, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000308 	.word	0x20000308
 8004c80:	20000370 	.word	0x20000370
 8004c84:	200003d8 	.word	0x200003d8

08004c88 <global_stdio_init.part.0>:
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <global_stdio_init.part.0+0x30>)
 8004c8c:	4c0b      	ldr	r4, [pc, #44]	; (8004cbc <global_stdio_init.part.0+0x34>)
 8004c8e:	4a0c      	ldr	r2, [pc, #48]	; (8004cc0 <global_stdio_init.part.0+0x38>)
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	4620      	mov	r0, r4
 8004c94:	2200      	movs	r2, #0
 8004c96:	2104      	movs	r1, #4
 8004c98:	f7ff ffa6 	bl	8004be8 <std>
 8004c9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	2109      	movs	r1, #9
 8004ca4:	f7ff ffa0 	bl	8004be8 <std>
 8004ca8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004cac:	2202      	movs	r2, #2
 8004cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb2:	2112      	movs	r1, #18
 8004cb4:	f7ff bf98 	b.w	8004be8 <std>
 8004cb8:	20000440 	.word	0x20000440
 8004cbc:	20000308 	.word	0x20000308
 8004cc0:	08004c31 	.word	0x08004c31

08004cc4 <__sfp_lock_acquire>:
 8004cc4:	4801      	ldr	r0, [pc, #4]	; (8004ccc <__sfp_lock_acquire+0x8>)
 8004cc6:	f000 b9fd 	b.w	80050c4 <__retarget_lock_acquire_recursive>
 8004cca:	bf00      	nop
 8004ccc:	20000449 	.word	0x20000449

08004cd0 <__sfp_lock_release>:
 8004cd0:	4801      	ldr	r0, [pc, #4]	; (8004cd8 <__sfp_lock_release+0x8>)
 8004cd2:	f000 b9f8 	b.w	80050c6 <__retarget_lock_release_recursive>
 8004cd6:	bf00      	nop
 8004cd8:	20000449 	.word	0x20000449

08004cdc <__sinit>:
 8004cdc:	b510      	push	{r4, lr}
 8004cde:	4604      	mov	r4, r0
 8004ce0:	f7ff fff0 	bl	8004cc4 <__sfp_lock_acquire>
 8004ce4:	6a23      	ldr	r3, [r4, #32]
 8004ce6:	b11b      	cbz	r3, 8004cf0 <__sinit+0x14>
 8004ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cec:	f7ff bff0 	b.w	8004cd0 <__sfp_lock_release>
 8004cf0:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <__sinit+0x28>)
 8004cf2:	6223      	str	r3, [r4, #32]
 8004cf4:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <__sinit+0x2c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1f5      	bne.n	8004ce8 <__sinit+0xc>
 8004cfc:	f7ff ffc4 	bl	8004c88 <global_stdio_init.part.0>
 8004d00:	e7f2      	b.n	8004ce8 <__sinit+0xc>
 8004d02:	bf00      	nop
 8004d04:	08004c49 	.word	0x08004c49
 8004d08:	20000440 	.word	0x20000440

08004d0c <_fwalk_sglue>:
 8004d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d10:	4607      	mov	r7, r0
 8004d12:	4688      	mov	r8, r1
 8004d14:	4614      	mov	r4, r2
 8004d16:	2600      	movs	r6, #0
 8004d18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d1c:	f1b9 0901 	subs.w	r9, r9, #1
 8004d20:	d505      	bpl.n	8004d2e <_fwalk_sglue+0x22>
 8004d22:	6824      	ldr	r4, [r4, #0]
 8004d24:	2c00      	cmp	r4, #0
 8004d26:	d1f7      	bne.n	8004d18 <_fwalk_sglue+0xc>
 8004d28:	4630      	mov	r0, r6
 8004d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d2e:	89ab      	ldrh	r3, [r5, #12]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d907      	bls.n	8004d44 <_fwalk_sglue+0x38>
 8004d34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	d003      	beq.n	8004d44 <_fwalk_sglue+0x38>
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	4638      	mov	r0, r7
 8004d40:	47c0      	blx	r8
 8004d42:	4306      	orrs	r6, r0
 8004d44:	3568      	adds	r5, #104	; 0x68
 8004d46:	e7e9      	b.n	8004d1c <_fwalk_sglue+0x10>

08004d48 <iprintf>:
 8004d48:	b40f      	push	{r0, r1, r2, r3}
 8004d4a:	b507      	push	{r0, r1, r2, lr}
 8004d4c:	4906      	ldr	r1, [pc, #24]	; (8004d68 <iprintf+0x20>)
 8004d4e:	ab04      	add	r3, sp, #16
 8004d50:	6808      	ldr	r0, [r1, #0]
 8004d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d56:	6881      	ldr	r1, [r0, #8]
 8004d58:	9301      	str	r3, [sp, #4]
 8004d5a:	f000 fad7 	bl	800530c <_vfiprintf_r>
 8004d5e:	b003      	add	sp, #12
 8004d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d64:	b004      	add	sp, #16
 8004d66:	4770      	bx	lr
 8004d68:	200000ec 	.word	0x200000ec

08004d6c <_puts_r>:
 8004d6c:	6a03      	ldr	r3, [r0, #32]
 8004d6e:	b570      	push	{r4, r5, r6, lr}
 8004d70:	6884      	ldr	r4, [r0, #8]
 8004d72:	4605      	mov	r5, r0
 8004d74:	460e      	mov	r6, r1
 8004d76:	b90b      	cbnz	r3, 8004d7c <_puts_r+0x10>
 8004d78:	f7ff ffb0 	bl	8004cdc <__sinit>
 8004d7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d7e:	07db      	lsls	r3, r3, #31
 8004d80:	d405      	bmi.n	8004d8e <_puts_r+0x22>
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	0598      	lsls	r0, r3, #22
 8004d86:	d402      	bmi.n	8004d8e <_puts_r+0x22>
 8004d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d8a:	f000 f99b 	bl	80050c4 <__retarget_lock_acquire_recursive>
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	0719      	lsls	r1, r3, #28
 8004d92:	d513      	bpl.n	8004dbc <_puts_r+0x50>
 8004d94:	6923      	ldr	r3, [r4, #16]
 8004d96:	b18b      	cbz	r3, 8004dbc <_puts_r+0x50>
 8004d98:	3e01      	subs	r6, #1
 8004d9a:	68a3      	ldr	r3, [r4, #8]
 8004d9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004da0:	3b01      	subs	r3, #1
 8004da2:	60a3      	str	r3, [r4, #8]
 8004da4:	b9e9      	cbnz	r1, 8004de2 <_puts_r+0x76>
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	da2e      	bge.n	8004e08 <_puts_r+0x9c>
 8004daa:	4622      	mov	r2, r4
 8004dac:	210a      	movs	r1, #10
 8004dae:	4628      	mov	r0, r5
 8004db0:	f000 f87b 	bl	8004eaa <__swbuf_r>
 8004db4:	3001      	adds	r0, #1
 8004db6:	d007      	beq.n	8004dc8 <_puts_r+0x5c>
 8004db8:	250a      	movs	r5, #10
 8004dba:	e007      	b.n	8004dcc <_puts_r+0x60>
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f000 f8b0 	bl	8004f24 <__swsetup_r>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d0e7      	beq.n	8004d98 <_puts_r+0x2c>
 8004dc8:	f04f 35ff 	mov.w	r5, #4294967295
 8004dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dce:	07da      	lsls	r2, r3, #31
 8004dd0:	d405      	bmi.n	8004dde <_puts_r+0x72>
 8004dd2:	89a3      	ldrh	r3, [r4, #12]
 8004dd4:	059b      	lsls	r3, r3, #22
 8004dd6:	d402      	bmi.n	8004dde <_puts_r+0x72>
 8004dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dda:	f000 f974 	bl	80050c6 <__retarget_lock_release_recursive>
 8004dde:	4628      	mov	r0, r5
 8004de0:	bd70      	pop	{r4, r5, r6, pc}
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	da04      	bge.n	8004df0 <_puts_r+0x84>
 8004de6:	69a2      	ldr	r2, [r4, #24]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	dc06      	bgt.n	8004dfa <_puts_r+0x8e>
 8004dec:	290a      	cmp	r1, #10
 8004dee:	d004      	beq.n	8004dfa <_puts_r+0x8e>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	6022      	str	r2, [r4, #0]
 8004df6:	7019      	strb	r1, [r3, #0]
 8004df8:	e7cf      	b.n	8004d9a <_puts_r+0x2e>
 8004dfa:	4622      	mov	r2, r4
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	f000 f854 	bl	8004eaa <__swbuf_r>
 8004e02:	3001      	adds	r0, #1
 8004e04:	d1c9      	bne.n	8004d9a <_puts_r+0x2e>
 8004e06:	e7df      	b.n	8004dc8 <_puts_r+0x5c>
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	250a      	movs	r5, #10
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	6022      	str	r2, [r4, #0]
 8004e10:	701d      	strb	r5, [r3, #0]
 8004e12:	e7db      	b.n	8004dcc <_puts_r+0x60>

08004e14 <puts>:
 8004e14:	4b02      	ldr	r3, [pc, #8]	; (8004e20 <puts+0xc>)
 8004e16:	4601      	mov	r1, r0
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	f7ff bfa7 	b.w	8004d6c <_puts_r>
 8004e1e:	bf00      	nop
 8004e20:	200000ec 	.word	0x200000ec

08004e24 <__sread>:
 8004e24:	b510      	push	{r4, lr}
 8004e26:	460c      	mov	r4, r1
 8004e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e2c:	f000 f8fc 	bl	8005028 <_read_r>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	bfab      	itete	ge
 8004e34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e36:	89a3      	ldrhlt	r3, [r4, #12]
 8004e38:	181b      	addge	r3, r3, r0
 8004e3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e3e:	bfac      	ite	ge
 8004e40:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e42:	81a3      	strhlt	r3, [r4, #12]
 8004e44:	bd10      	pop	{r4, pc}

08004e46 <__swrite>:
 8004e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e4a:	461f      	mov	r7, r3
 8004e4c:	898b      	ldrh	r3, [r1, #12]
 8004e4e:	05db      	lsls	r3, r3, #23
 8004e50:	4605      	mov	r5, r0
 8004e52:	460c      	mov	r4, r1
 8004e54:	4616      	mov	r6, r2
 8004e56:	d505      	bpl.n	8004e64 <__swrite+0x1e>
 8004e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f000 f8d0 	bl	8005004 <_lseek_r>
 8004e64:	89a3      	ldrh	r3, [r4, #12]
 8004e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e6e:	81a3      	strh	r3, [r4, #12]
 8004e70:	4632      	mov	r2, r6
 8004e72:	463b      	mov	r3, r7
 8004e74:	4628      	mov	r0, r5
 8004e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7a:	f000 b8e7 	b.w	800504c <_write_r>

08004e7e <__sseek>:
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	460c      	mov	r4, r1
 8004e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e86:	f000 f8bd 	bl	8005004 <_lseek_r>
 8004e8a:	1c43      	adds	r3, r0, #1
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	bf15      	itete	ne
 8004e90:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e9a:	81a3      	strheq	r3, [r4, #12]
 8004e9c:	bf18      	it	ne
 8004e9e:	81a3      	strhne	r3, [r4, #12]
 8004ea0:	bd10      	pop	{r4, pc}

08004ea2 <__sclose>:
 8004ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea6:	f000 b89d 	b.w	8004fe4 <_close_r>

08004eaa <__swbuf_r>:
 8004eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eac:	460e      	mov	r6, r1
 8004eae:	4614      	mov	r4, r2
 8004eb0:	4605      	mov	r5, r0
 8004eb2:	b118      	cbz	r0, 8004ebc <__swbuf_r+0x12>
 8004eb4:	6a03      	ldr	r3, [r0, #32]
 8004eb6:	b90b      	cbnz	r3, 8004ebc <__swbuf_r+0x12>
 8004eb8:	f7ff ff10 	bl	8004cdc <__sinit>
 8004ebc:	69a3      	ldr	r3, [r4, #24]
 8004ebe:	60a3      	str	r3, [r4, #8]
 8004ec0:	89a3      	ldrh	r3, [r4, #12]
 8004ec2:	071a      	lsls	r2, r3, #28
 8004ec4:	d525      	bpl.n	8004f12 <__swbuf_r+0x68>
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	b31b      	cbz	r3, 8004f12 <__swbuf_r+0x68>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	6922      	ldr	r2, [r4, #16]
 8004ece:	1a98      	subs	r0, r3, r2
 8004ed0:	6963      	ldr	r3, [r4, #20]
 8004ed2:	b2f6      	uxtb	r6, r6
 8004ed4:	4283      	cmp	r3, r0
 8004ed6:	4637      	mov	r7, r6
 8004ed8:	dc04      	bgt.n	8004ee4 <__swbuf_r+0x3a>
 8004eda:	4621      	mov	r1, r4
 8004edc:	4628      	mov	r0, r5
 8004ede:	f000 fd45 	bl	800596c <_fflush_r>
 8004ee2:	b9e0      	cbnz	r0, 8004f1e <__swbuf_r+0x74>
 8004ee4:	68a3      	ldr	r3, [r4, #8]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	60a3      	str	r3, [r4, #8]
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	6022      	str	r2, [r4, #0]
 8004ef0:	701e      	strb	r6, [r3, #0]
 8004ef2:	6962      	ldr	r2, [r4, #20]
 8004ef4:	1c43      	adds	r3, r0, #1
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d004      	beq.n	8004f04 <__swbuf_r+0x5a>
 8004efa:	89a3      	ldrh	r3, [r4, #12]
 8004efc:	07db      	lsls	r3, r3, #31
 8004efe:	d506      	bpl.n	8004f0e <__swbuf_r+0x64>
 8004f00:	2e0a      	cmp	r6, #10
 8004f02:	d104      	bne.n	8004f0e <__swbuf_r+0x64>
 8004f04:	4621      	mov	r1, r4
 8004f06:	4628      	mov	r0, r5
 8004f08:	f000 fd30 	bl	800596c <_fflush_r>
 8004f0c:	b938      	cbnz	r0, 8004f1e <__swbuf_r+0x74>
 8004f0e:	4638      	mov	r0, r7
 8004f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f12:	4621      	mov	r1, r4
 8004f14:	4628      	mov	r0, r5
 8004f16:	f000 f805 	bl	8004f24 <__swsetup_r>
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	d0d5      	beq.n	8004eca <__swbuf_r+0x20>
 8004f1e:	f04f 37ff 	mov.w	r7, #4294967295
 8004f22:	e7f4      	b.n	8004f0e <__swbuf_r+0x64>

08004f24 <__swsetup_r>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	4b2a      	ldr	r3, [pc, #168]	; (8004fd0 <__swsetup_r+0xac>)
 8004f28:	4605      	mov	r5, r0
 8004f2a:	6818      	ldr	r0, [r3, #0]
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	b118      	cbz	r0, 8004f38 <__swsetup_r+0x14>
 8004f30:	6a03      	ldr	r3, [r0, #32]
 8004f32:	b90b      	cbnz	r3, 8004f38 <__swsetup_r+0x14>
 8004f34:	f7ff fed2 	bl	8004cdc <__sinit>
 8004f38:	89a3      	ldrh	r3, [r4, #12]
 8004f3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f3e:	0718      	lsls	r0, r3, #28
 8004f40:	d422      	bmi.n	8004f88 <__swsetup_r+0x64>
 8004f42:	06d9      	lsls	r1, r3, #27
 8004f44:	d407      	bmi.n	8004f56 <__swsetup_r+0x32>
 8004f46:	2309      	movs	r3, #9
 8004f48:	602b      	str	r3, [r5, #0]
 8004f4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f4e:	81a3      	strh	r3, [r4, #12]
 8004f50:	f04f 30ff 	mov.w	r0, #4294967295
 8004f54:	e034      	b.n	8004fc0 <__swsetup_r+0x9c>
 8004f56:	0758      	lsls	r0, r3, #29
 8004f58:	d512      	bpl.n	8004f80 <__swsetup_r+0x5c>
 8004f5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f5c:	b141      	cbz	r1, 8004f70 <__swsetup_r+0x4c>
 8004f5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f62:	4299      	cmp	r1, r3
 8004f64:	d002      	beq.n	8004f6c <__swsetup_r+0x48>
 8004f66:	4628      	mov	r0, r5
 8004f68:	f000 f8ae 	bl	80050c8 <_free_r>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	6363      	str	r3, [r4, #52]	; 0x34
 8004f70:	89a3      	ldrh	r3, [r4, #12]
 8004f72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f76:	81a3      	strh	r3, [r4, #12]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	6063      	str	r3, [r4, #4]
 8004f7c:	6923      	ldr	r3, [r4, #16]
 8004f7e:	6023      	str	r3, [r4, #0]
 8004f80:	89a3      	ldrh	r3, [r4, #12]
 8004f82:	f043 0308 	orr.w	r3, r3, #8
 8004f86:	81a3      	strh	r3, [r4, #12]
 8004f88:	6923      	ldr	r3, [r4, #16]
 8004f8a:	b94b      	cbnz	r3, 8004fa0 <__swsetup_r+0x7c>
 8004f8c:	89a3      	ldrh	r3, [r4, #12]
 8004f8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f96:	d003      	beq.n	8004fa0 <__swsetup_r+0x7c>
 8004f98:	4621      	mov	r1, r4
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f000 fd34 	bl	8005a08 <__smakebuf_r>
 8004fa0:	89a0      	ldrh	r0, [r4, #12]
 8004fa2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fa6:	f010 0301 	ands.w	r3, r0, #1
 8004faa:	d00a      	beq.n	8004fc2 <__swsetup_r+0x9e>
 8004fac:	2300      	movs	r3, #0
 8004fae:	60a3      	str	r3, [r4, #8]
 8004fb0:	6963      	ldr	r3, [r4, #20]
 8004fb2:	425b      	negs	r3, r3
 8004fb4:	61a3      	str	r3, [r4, #24]
 8004fb6:	6923      	ldr	r3, [r4, #16]
 8004fb8:	b943      	cbnz	r3, 8004fcc <__swsetup_r+0xa8>
 8004fba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fbe:	d1c4      	bne.n	8004f4a <__swsetup_r+0x26>
 8004fc0:	bd38      	pop	{r3, r4, r5, pc}
 8004fc2:	0781      	lsls	r1, r0, #30
 8004fc4:	bf58      	it	pl
 8004fc6:	6963      	ldrpl	r3, [r4, #20]
 8004fc8:	60a3      	str	r3, [r4, #8]
 8004fca:	e7f4      	b.n	8004fb6 <__swsetup_r+0x92>
 8004fcc:	2000      	movs	r0, #0
 8004fce:	e7f7      	b.n	8004fc0 <__swsetup_r+0x9c>
 8004fd0:	200000ec 	.word	0x200000ec

08004fd4 <memset>:
 8004fd4:	4402      	add	r2, r0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d100      	bne.n	8004fde <memset+0xa>
 8004fdc:	4770      	bx	lr
 8004fde:	f803 1b01 	strb.w	r1, [r3], #1
 8004fe2:	e7f9      	b.n	8004fd8 <memset+0x4>

08004fe4 <_close_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4d06      	ldr	r5, [pc, #24]	; (8005000 <_close_r+0x1c>)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	4604      	mov	r4, r0
 8004fec:	4608      	mov	r0, r1
 8004fee:	602b      	str	r3, [r5, #0]
 8004ff0:	f7fb fe19 	bl	8000c26 <_close>
 8004ff4:	1c43      	adds	r3, r0, #1
 8004ff6:	d102      	bne.n	8004ffe <_close_r+0x1a>
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	b103      	cbz	r3, 8004ffe <_close_r+0x1a>
 8004ffc:	6023      	str	r3, [r4, #0]
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
 8005000:	20000444 	.word	0x20000444

08005004 <_lseek_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4d07      	ldr	r5, [pc, #28]	; (8005024 <_lseek_r+0x20>)
 8005008:	4604      	mov	r4, r0
 800500a:	4608      	mov	r0, r1
 800500c:	4611      	mov	r1, r2
 800500e:	2200      	movs	r2, #0
 8005010:	602a      	str	r2, [r5, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	f7fb fe2e 	bl	8000c74 <_lseek>
 8005018:	1c43      	adds	r3, r0, #1
 800501a:	d102      	bne.n	8005022 <_lseek_r+0x1e>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	b103      	cbz	r3, 8005022 <_lseek_r+0x1e>
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	bd38      	pop	{r3, r4, r5, pc}
 8005024:	20000444 	.word	0x20000444

08005028 <_read_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4d07      	ldr	r5, [pc, #28]	; (8005048 <_read_r+0x20>)
 800502c:	4604      	mov	r4, r0
 800502e:	4608      	mov	r0, r1
 8005030:	4611      	mov	r1, r2
 8005032:	2200      	movs	r2, #0
 8005034:	602a      	str	r2, [r5, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	f7fb fdd8 	bl	8000bec <_read>
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	d102      	bne.n	8005046 <_read_r+0x1e>
 8005040:	682b      	ldr	r3, [r5, #0]
 8005042:	b103      	cbz	r3, 8005046 <_read_r+0x1e>
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	bd38      	pop	{r3, r4, r5, pc}
 8005048:	20000444 	.word	0x20000444

0800504c <_write_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	4d07      	ldr	r5, [pc, #28]	; (800506c <_write_r+0x20>)
 8005050:	4604      	mov	r4, r0
 8005052:	4608      	mov	r0, r1
 8005054:	4611      	mov	r1, r2
 8005056:	2200      	movs	r2, #0
 8005058:	602a      	str	r2, [r5, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	f7fb fc10 	bl	8000880 <_write>
 8005060:	1c43      	adds	r3, r0, #1
 8005062:	d102      	bne.n	800506a <_write_r+0x1e>
 8005064:	682b      	ldr	r3, [r5, #0]
 8005066:	b103      	cbz	r3, 800506a <_write_r+0x1e>
 8005068:	6023      	str	r3, [r4, #0]
 800506a:	bd38      	pop	{r3, r4, r5, pc}
 800506c:	20000444 	.word	0x20000444

08005070 <__errno>:
 8005070:	4b01      	ldr	r3, [pc, #4]	; (8005078 <__errno+0x8>)
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	200000ec 	.word	0x200000ec

0800507c <__libc_init_array>:
 800507c:	b570      	push	{r4, r5, r6, lr}
 800507e:	4d0d      	ldr	r5, [pc, #52]	; (80050b4 <__libc_init_array+0x38>)
 8005080:	4c0d      	ldr	r4, [pc, #52]	; (80050b8 <__libc_init_array+0x3c>)
 8005082:	1b64      	subs	r4, r4, r5
 8005084:	10a4      	asrs	r4, r4, #2
 8005086:	2600      	movs	r6, #0
 8005088:	42a6      	cmp	r6, r4
 800508a:	d109      	bne.n	80050a0 <__libc_init_array+0x24>
 800508c:	4d0b      	ldr	r5, [pc, #44]	; (80050bc <__libc_init_array+0x40>)
 800508e:	4c0c      	ldr	r4, [pc, #48]	; (80050c0 <__libc_init_array+0x44>)
 8005090:	f000 fd28 	bl	8005ae4 <_init>
 8005094:	1b64      	subs	r4, r4, r5
 8005096:	10a4      	asrs	r4, r4, #2
 8005098:	2600      	movs	r6, #0
 800509a:	42a6      	cmp	r6, r4
 800509c:	d105      	bne.n	80050aa <__libc_init_array+0x2e>
 800509e:	bd70      	pop	{r4, r5, r6, pc}
 80050a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a4:	4798      	blx	r3
 80050a6:	3601      	adds	r6, #1
 80050a8:	e7ee      	b.n	8005088 <__libc_init_array+0xc>
 80050aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ae:	4798      	blx	r3
 80050b0:	3601      	adds	r6, #1
 80050b2:	e7f2      	b.n	800509a <__libc_init_array+0x1e>
 80050b4:	08005c64 	.word	0x08005c64
 80050b8:	08005c64 	.word	0x08005c64
 80050bc:	08005c64 	.word	0x08005c64
 80050c0:	08005c68 	.word	0x08005c68

080050c4 <__retarget_lock_acquire_recursive>:
 80050c4:	4770      	bx	lr

080050c6 <__retarget_lock_release_recursive>:
 80050c6:	4770      	bx	lr

080050c8 <_free_r>:
 80050c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050ca:	2900      	cmp	r1, #0
 80050cc:	d044      	beq.n	8005158 <_free_r+0x90>
 80050ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050d2:	9001      	str	r0, [sp, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f1a1 0404 	sub.w	r4, r1, #4
 80050da:	bfb8      	it	lt
 80050dc:	18e4      	addlt	r4, r4, r3
 80050de:	f000 f8df 	bl	80052a0 <__malloc_lock>
 80050e2:	4a1e      	ldr	r2, [pc, #120]	; (800515c <_free_r+0x94>)
 80050e4:	9801      	ldr	r0, [sp, #4]
 80050e6:	6813      	ldr	r3, [r2, #0]
 80050e8:	b933      	cbnz	r3, 80050f8 <_free_r+0x30>
 80050ea:	6063      	str	r3, [r4, #4]
 80050ec:	6014      	str	r4, [r2, #0]
 80050ee:	b003      	add	sp, #12
 80050f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050f4:	f000 b8da 	b.w	80052ac <__malloc_unlock>
 80050f8:	42a3      	cmp	r3, r4
 80050fa:	d908      	bls.n	800510e <_free_r+0x46>
 80050fc:	6825      	ldr	r5, [r4, #0]
 80050fe:	1961      	adds	r1, r4, r5
 8005100:	428b      	cmp	r3, r1
 8005102:	bf01      	itttt	eq
 8005104:	6819      	ldreq	r1, [r3, #0]
 8005106:	685b      	ldreq	r3, [r3, #4]
 8005108:	1949      	addeq	r1, r1, r5
 800510a:	6021      	streq	r1, [r4, #0]
 800510c:	e7ed      	b.n	80050ea <_free_r+0x22>
 800510e:	461a      	mov	r2, r3
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	b10b      	cbz	r3, 8005118 <_free_r+0x50>
 8005114:	42a3      	cmp	r3, r4
 8005116:	d9fa      	bls.n	800510e <_free_r+0x46>
 8005118:	6811      	ldr	r1, [r2, #0]
 800511a:	1855      	adds	r5, r2, r1
 800511c:	42a5      	cmp	r5, r4
 800511e:	d10b      	bne.n	8005138 <_free_r+0x70>
 8005120:	6824      	ldr	r4, [r4, #0]
 8005122:	4421      	add	r1, r4
 8005124:	1854      	adds	r4, r2, r1
 8005126:	42a3      	cmp	r3, r4
 8005128:	6011      	str	r1, [r2, #0]
 800512a:	d1e0      	bne.n	80050ee <_free_r+0x26>
 800512c:	681c      	ldr	r4, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	6053      	str	r3, [r2, #4]
 8005132:	440c      	add	r4, r1
 8005134:	6014      	str	r4, [r2, #0]
 8005136:	e7da      	b.n	80050ee <_free_r+0x26>
 8005138:	d902      	bls.n	8005140 <_free_r+0x78>
 800513a:	230c      	movs	r3, #12
 800513c:	6003      	str	r3, [r0, #0]
 800513e:	e7d6      	b.n	80050ee <_free_r+0x26>
 8005140:	6825      	ldr	r5, [r4, #0]
 8005142:	1961      	adds	r1, r4, r5
 8005144:	428b      	cmp	r3, r1
 8005146:	bf04      	itt	eq
 8005148:	6819      	ldreq	r1, [r3, #0]
 800514a:	685b      	ldreq	r3, [r3, #4]
 800514c:	6063      	str	r3, [r4, #4]
 800514e:	bf04      	itt	eq
 8005150:	1949      	addeq	r1, r1, r5
 8005152:	6021      	streq	r1, [r4, #0]
 8005154:	6054      	str	r4, [r2, #4]
 8005156:	e7ca      	b.n	80050ee <_free_r+0x26>
 8005158:	b003      	add	sp, #12
 800515a:	bd30      	pop	{r4, r5, pc}
 800515c:	2000044c 	.word	0x2000044c

08005160 <sbrk_aligned>:
 8005160:	b570      	push	{r4, r5, r6, lr}
 8005162:	4e0e      	ldr	r6, [pc, #56]	; (800519c <sbrk_aligned+0x3c>)
 8005164:	460c      	mov	r4, r1
 8005166:	6831      	ldr	r1, [r6, #0]
 8005168:	4605      	mov	r5, r0
 800516a:	b911      	cbnz	r1, 8005172 <sbrk_aligned+0x12>
 800516c:	f000 fcaa 	bl	8005ac4 <_sbrk_r>
 8005170:	6030      	str	r0, [r6, #0]
 8005172:	4621      	mov	r1, r4
 8005174:	4628      	mov	r0, r5
 8005176:	f000 fca5 	bl	8005ac4 <_sbrk_r>
 800517a:	1c43      	adds	r3, r0, #1
 800517c:	d00a      	beq.n	8005194 <sbrk_aligned+0x34>
 800517e:	1cc4      	adds	r4, r0, #3
 8005180:	f024 0403 	bic.w	r4, r4, #3
 8005184:	42a0      	cmp	r0, r4
 8005186:	d007      	beq.n	8005198 <sbrk_aligned+0x38>
 8005188:	1a21      	subs	r1, r4, r0
 800518a:	4628      	mov	r0, r5
 800518c:	f000 fc9a 	bl	8005ac4 <_sbrk_r>
 8005190:	3001      	adds	r0, #1
 8005192:	d101      	bne.n	8005198 <sbrk_aligned+0x38>
 8005194:	f04f 34ff 	mov.w	r4, #4294967295
 8005198:	4620      	mov	r0, r4
 800519a:	bd70      	pop	{r4, r5, r6, pc}
 800519c:	20000450 	.word	0x20000450

080051a0 <_malloc_r>:
 80051a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051a4:	1ccd      	adds	r5, r1, #3
 80051a6:	f025 0503 	bic.w	r5, r5, #3
 80051aa:	3508      	adds	r5, #8
 80051ac:	2d0c      	cmp	r5, #12
 80051ae:	bf38      	it	cc
 80051b0:	250c      	movcc	r5, #12
 80051b2:	2d00      	cmp	r5, #0
 80051b4:	4607      	mov	r7, r0
 80051b6:	db01      	blt.n	80051bc <_malloc_r+0x1c>
 80051b8:	42a9      	cmp	r1, r5
 80051ba:	d905      	bls.n	80051c8 <_malloc_r+0x28>
 80051bc:	230c      	movs	r3, #12
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	2600      	movs	r6, #0
 80051c2:	4630      	mov	r0, r6
 80051c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800529c <_malloc_r+0xfc>
 80051cc:	f000 f868 	bl	80052a0 <__malloc_lock>
 80051d0:	f8d8 3000 	ldr.w	r3, [r8]
 80051d4:	461c      	mov	r4, r3
 80051d6:	bb5c      	cbnz	r4, 8005230 <_malloc_r+0x90>
 80051d8:	4629      	mov	r1, r5
 80051da:	4638      	mov	r0, r7
 80051dc:	f7ff ffc0 	bl	8005160 <sbrk_aligned>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	4604      	mov	r4, r0
 80051e4:	d155      	bne.n	8005292 <_malloc_r+0xf2>
 80051e6:	f8d8 4000 	ldr.w	r4, [r8]
 80051ea:	4626      	mov	r6, r4
 80051ec:	2e00      	cmp	r6, #0
 80051ee:	d145      	bne.n	800527c <_malloc_r+0xdc>
 80051f0:	2c00      	cmp	r4, #0
 80051f2:	d048      	beq.n	8005286 <_malloc_r+0xe6>
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	4631      	mov	r1, r6
 80051f8:	4638      	mov	r0, r7
 80051fa:	eb04 0903 	add.w	r9, r4, r3
 80051fe:	f000 fc61 	bl	8005ac4 <_sbrk_r>
 8005202:	4581      	cmp	r9, r0
 8005204:	d13f      	bne.n	8005286 <_malloc_r+0xe6>
 8005206:	6821      	ldr	r1, [r4, #0]
 8005208:	1a6d      	subs	r5, r5, r1
 800520a:	4629      	mov	r1, r5
 800520c:	4638      	mov	r0, r7
 800520e:	f7ff ffa7 	bl	8005160 <sbrk_aligned>
 8005212:	3001      	adds	r0, #1
 8005214:	d037      	beq.n	8005286 <_malloc_r+0xe6>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	442b      	add	r3, r5
 800521a:	6023      	str	r3, [r4, #0]
 800521c:	f8d8 3000 	ldr.w	r3, [r8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d038      	beq.n	8005296 <_malloc_r+0xf6>
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	42a2      	cmp	r2, r4
 8005228:	d12b      	bne.n	8005282 <_malloc_r+0xe2>
 800522a:	2200      	movs	r2, #0
 800522c:	605a      	str	r2, [r3, #4]
 800522e:	e00f      	b.n	8005250 <_malloc_r+0xb0>
 8005230:	6822      	ldr	r2, [r4, #0]
 8005232:	1b52      	subs	r2, r2, r5
 8005234:	d41f      	bmi.n	8005276 <_malloc_r+0xd6>
 8005236:	2a0b      	cmp	r2, #11
 8005238:	d917      	bls.n	800526a <_malloc_r+0xca>
 800523a:	1961      	adds	r1, r4, r5
 800523c:	42a3      	cmp	r3, r4
 800523e:	6025      	str	r5, [r4, #0]
 8005240:	bf18      	it	ne
 8005242:	6059      	strne	r1, [r3, #4]
 8005244:	6863      	ldr	r3, [r4, #4]
 8005246:	bf08      	it	eq
 8005248:	f8c8 1000 	streq.w	r1, [r8]
 800524c:	5162      	str	r2, [r4, r5]
 800524e:	604b      	str	r3, [r1, #4]
 8005250:	4638      	mov	r0, r7
 8005252:	f104 060b 	add.w	r6, r4, #11
 8005256:	f000 f829 	bl	80052ac <__malloc_unlock>
 800525a:	f026 0607 	bic.w	r6, r6, #7
 800525e:	1d23      	adds	r3, r4, #4
 8005260:	1af2      	subs	r2, r6, r3
 8005262:	d0ae      	beq.n	80051c2 <_malloc_r+0x22>
 8005264:	1b9b      	subs	r3, r3, r6
 8005266:	50a3      	str	r3, [r4, r2]
 8005268:	e7ab      	b.n	80051c2 <_malloc_r+0x22>
 800526a:	42a3      	cmp	r3, r4
 800526c:	6862      	ldr	r2, [r4, #4]
 800526e:	d1dd      	bne.n	800522c <_malloc_r+0x8c>
 8005270:	f8c8 2000 	str.w	r2, [r8]
 8005274:	e7ec      	b.n	8005250 <_malloc_r+0xb0>
 8005276:	4623      	mov	r3, r4
 8005278:	6864      	ldr	r4, [r4, #4]
 800527a:	e7ac      	b.n	80051d6 <_malloc_r+0x36>
 800527c:	4634      	mov	r4, r6
 800527e:	6876      	ldr	r6, [r6, #4]
 8005280:	e7b4      	b.n	80051ec <_malloc_r+0x4c>
 8005282:	4613      	mov	r3, r2
 8005284:	e7cc      	b.n	8005220 <_malloc_r+0x80>
 8005286:	230c      	movs	r3, #12
 8005288:	603b      	str	r3, [r7, #0]
 800528a:	4638      	mov	r0, r7
 800528c:	f000 f80e 	bl	80052ac <__malloc_unlock>
 8005290:	e797      	b.n	80051c2 <_malloc_r+0x22>
 8005292:	6025      	str	r5, [r4, #0]
 8005294:	e7dc      	b.n	8005250 <_malloc_r+0xb0>
 8005296:	605b      	str	r3, [r3, #4]
 8005298:	deff      	udf	#255	; 0xff
 800529a:	bf00      	nop
 800529c:	2000044c 	.word	0x2000044c

080052a0 <__malloc_lock>:
 80052a0:	4801      	ldr	r0, [pc, #4]	; (80052a8 <__malloc_lock+0x8>)
 80052a2:	f7ff bf0f 	b.w	80050c4 <__retarget_lock_acquire_recursive>
 80052a6:	bf00      	nop
 80052a8:	20000448 	.word	0x20000448

080052ac <__malloc_unlock>:
 80052ac:	4801      	ldr	r0, [pc, #4]	; (80052b4 <__malloc_unlock+0x8>)
 80052ae:	f7ff bf0a 	b.w	80050c6 <__retarget_lock_release_recursive>
 80052b2:	bf00      	nop
 80052b4:	20000448 	.word	0x20000448

080052b8 <__sfputc_r>:
 80052b8:	6893      	ldr	r3, [r2, #8]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	b410      	push	{r4}
 80052c0:	6093      	str	r3, [r2, #8]
 80052c2:	da08      	bge.n	80052d6 <__sfputc_r+0x1e>
 80052c4:	6994      	ldr	r4, [r2, #24]
 80052c6:	42a3      	cmp	r3, r4
 80052c8:	db01      	blt.n	80052ce <__sfputc_r+0x16>
 80052ca:	290a      	cmp	r1, #10
 80052cc:	d103      	bne.n	80052d6 <__sfputc_r+0x1e>
 80052ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052d2:	f7ff bdea 	b.w	8004eaa <__swbuf_r>
 80052d6:	6813      	ldr	r3, [r2, #0]
 80052d8:	1c58      	adds	r0, r3, #1
 80052da:	6010      	str	r0, [r2, #0]
 80052dc:	7019      	strb	r1, [r3, #0]
 80052de:	4608      	mov	r0, r1
 80052e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <__sfputs_r>:
 80052e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e8:	4606      	mov	r6, r0
 80052ea:	460f      	mov	r7, r1
 80052ec:	4614      	mov	r4, r2
 80052ee:	18d5      	adds	r5, r2, r3
 80052f0:	42ac      	cmp	r4, r5
 80052f2:	d101      	bne.n	80052f8 <__sfputs_r+0x12>
 80052f4:	2000      	movs	r0, #0
 80052f6:	e007      	b.n	8005308 <__sfputs_r+0x22>
 80052f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052fc:	463a      	mov	r2, r7
 80052fe:	4630      	mov	r0, r6
 8005300:	f7ff ffda 	bl	80052b8 <__sfputc_r>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	d1f3      	bne.n	80052f0 <__sfputs_r+0xa>
 8005308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800530c <_vfiprintf_r>:
 800530c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005310:	460d      	mov	r5, r1
 8005312:	b09d      	sub	sp, #116	; 0x74
 8005314:	4614      	mov	r4, r2
 8005316:	4698      	mov	r8, r3
 8005318:	4606      	mov	r6, r0
 800531a:	b118      	cbz	r0, 8005324 <_vfiprintf_r+0x18>
 800531c:	6a03      	ldr	r3, [r0, #32]
 800531e:	b90b      	cbnz	r3, 8005324 <_vfiprintf_r+0x18>
 8005320:	f7ff fcdc 	bl	8004cdc <__sinit>
 8005324:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005326:	07d9      	lsls	r1, r3, #31
 8005328:	d405      	bmi.n	8005336 <_vfiprintf_r+0x2a>
 800532a:	89ab      	ldrh	r3, [r5, #12]
 800532c:	059a      	lsls	r2, r3, #22
 800532e:	d402      	bmi.n	8005336 <_vfiprintf_r+0x2a>
 8005330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005332:	f7ff fec7 	bl	80050c4 <__retarget_lock_acquire_recursive>
 8005336:	89ab      	ldrh	r3, [r5, #12]
 8005338:	071b      	lsls	r3, r3, #28
 800533a:	d501      	bpl.n	8005340 <_vfiprintf_r+0x34>
 800533c:	692b      	ldr	r3, [r5, #16]
 800533e:	b99b      	cbnz	r3, 8005368 <_vfiprintf_r+0x5c>
 8005340:	4629      	mov	r1, r5
 8005342:	4630      	mov	r0, r6
 8005344:	f7ff fdee 	bl	8004f24 <__swsetup_r>
 8005348:	b170      	cbz	r0, 8005368 <_vfiprintf_r+0x5c>
 800534a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800534c:	07dc      	lsls	r4, r3, #31
 800534e:	d504      	bpl.n	800535a <_vfiprintf_r+0x4e>
 8005350:	f04f 30ff 	mov.w	r0, #4294967295
 8005354:	b01d      	add	sp, #116	; 0x74
 8005356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535a:	89ab      	ldrh	r3, [r5, #12]
 800535c:	0598      	lsls	r0, r3, #22
 800535e:	d4f7      	bmi.n	8005350 <_vfiprintf_r+0x44>
 8005360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005362:	f7ff feb0 	bl	80050c6 <__retarget_lock_release_recursive>
 8005366:	e7f3      	b.n	8005350 <_vfiprintf_r+0x44>
 8005368:	2300      	movs	r3, #0
 800536a:	9309      	str	r3, [sp, #36]	; 0x24
 800536c:	2320      	movs	r3, #32
 800536e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005372:	f8cd 800c 	str.w	r8, [sp, #12]
 8005376:	2330      	movs	r3, #48	; 0x30
 8005378:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800552c <_vfiprintf_r+0x220>
 800537c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005380:	f04f 0901 	mov.w	r9, #1
 8005384:	4623      	mov	r3, r4
 8005386:	469a      	mov	sl, r3
 8005388:	f813 2b01 	ldrb.w	r2, [r3], #1
 800538c:	b10a      	cbz	r2, 8005392 <_vfiprintf_r+0x86>
 800538e:	2a25      	cmp	r2, #37	; 0x25
 8005390:	d1f9      	bne.n	8005386 <_vfiprintf_r+0x7a>
 8005392:	ebba 0b04 	subs.w	fp, sl, r4
 8005396:	d00b      	beq.n	80053b0 <_vfiprintf_r+0xa4>
 8005398:	465b      	mov	r3, fp
 800539a:	4622      	mov	r2, r4
 800539c:	4629      	mov	r1, r5
 800539e:	4630      	mov	r0, r6
 80053a0:	f7ff ffa1 	bl	80052e6 <__sfputs_r>
 80053a4:	3001      	adds	r0, #1
 80053a6:	f000 80a9 	beq.w	80054fc <_vfiprintf_r+0x1f0>
 80053aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053ac:	445a      	add	r2, fp
 80053ae:	9209      	str	r2, [sp, #36]	; 0x24
 80053b0:	f89a 3000 	ldrb.w	r3, [sl]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80a1 	beq.w	80054fc <_vfiprintf_r+0x1f0>
 80053ba:	2300      	movs	r3, #0
 80053bc:	f04f 32ff 	mov.w	r2, #4294967295
 80053c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053c4:	f10a 0a01 	add.w	sl, sl, #1
 80053c8:	9304      	str	r3, [sp, #16]
 80053ca:	9307      	str	r3, [sp, #28]
 80053cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053d0:	931a      	str	r3, [sp, #104]	; 0x68
 80053d2:	4654      	mov	r4, sl
 80053d4:	2205      	movs	r2, #5
 80053d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053da:	4854      	ldr	r0, [pc, #336]	; (800552c <_vfiprintf_r+0x220>)
 80053dc:	f7fa ff20 	bl	8000220 <memchr>
 80053e0:	9a04      	ldr	r2, [sp, #16]
 80053e2:	b9d8      	cbnz	r0, 800541c <_vfiprintf_r+0x110>
 80053e4:	06d1      	lsls	r1, r2, #27
 80053e6:	bf44      	itt	mi
 80053e8:	2320      	movmi	r3, #32
 80053ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053ee:	0713      	lsls	r3, r2, #28
 80053f0:	bf44      	itt	mi
 80053f2:	232b      	movmi	r3, #43	; 0x2b
 80053f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053f8:	f89a 3000 	ldrb.w	r3, [sl]
 80053fc:	2b2a      	cmp	r3, #42	; 0x2a
 80053fe:	d015      	beq.n	800542c <_vfiprintf_r+0x120>
 8005400:	9a07      	ldr	r2, [sp, #28]
 8005402:	4654      	mov	r4, sl
 8005404:	2000      	movs	r0, #0
 8005406:	f04f 0c0a 	mov.w	ip, #10
 800540a:	4621      	mov	r1, r4
 800540c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005410:	3b30      	subs	r3, #48	; 0x30
 8005412:	2b09      	cmp	r3, #9
 8005414:	d94d      	bls.n	80054b2 <_vfiprintf_r+0x1a6>
 8005416:	b1b0      	cbz	r0, 8005446 <_vfiprintf_r+0x13a>
 8005418:	9207      	str	r2, [sp, #28]
 800541a:	e014      	b.n	8005446 <_vfiprintf_r+0x13a>
 800541c:	eba0 0308 	sub.w	r3, r0, r8
 8005420:	fa09 f303 	lsl.w	r3, r9, r3
 8005424:	4313      	orrs	r3, r2
 8005426:	9304      	str	r3, [sp, #16]
 8005428:	46a2      	mov	sl, r4
 800542a:	e7d2      	b.n	80053d2 <_vfiprintf_r+0xc6>
 800542c:	9b03      	ldr	r3, [sp, #12]
 800542e:	1d19      	adds	r1, r3, #4
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	9103      	str	r1, [sp, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	bfbb      	ittet	lt
 8005438:	425b      	neglt	r3, r3
 800543a:	f042 0202 	orrlt.w	r2, r2, #2
 800543e:	9307      	strge	r3, [sp, #28]
 8005440:	9307      	strlt	r3, [sp, #28]
 8005442:	bfb8      	it	lt
 8005444:	9204      	strlt	r2, [sp, #16]
 8005446:	7823      	ldrb	r3, [r4, #0]
 8005448:	2b2e      	cmp	r3, #46	; 0x2e
 800544a:	d10c      	bne.n	8005466 <_vfiprintf_r+0x15a>
 800544c:	7863      	ldrb	r3, [r4, #1]
 800544e:	2b2a      	cmp	r3, #42	; 0x2a
 8005450:	d134      	bne.n	80054bc <_vfiprintf_r+0x1b0>
 8005452:	9b03      	ldr	r3, [sp, #12]
 8005454:	1d1a      	adds	r2, r3, #4
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	9203      	str	r2, [sp, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	bfb8      	it	lt
 800545e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005462:	3402      	adds	r4, #2
 8005464:	9305      	str	r3, [sp, #20]
 8005466:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800553c <_vfiprintf_r+0x230>
 800546a:	7821      	ldrb	r1, [r4, #0]
 800546c:	2203      	movs	r2, #3
 800546e:	4650      	mov	r0, sl
 8005470:	f7fa fed6 	bl	8000220 <memchr>
 8005474:	b138      	cbz	r0, 8005486 <_vfiprintf_r+0x17a>
 8005476:	9b04      	ldr	r3, [sp, #16]
 8005478:	eba0 000a 	sub.w	r0, r0, sl
 800547c:	2240      	movs	r2, #64	; 0x40
 800547e:	4082      	lsls	r2, r0
 8005480:	4313      	orrs	r3, r2
 8005482:	3401      	adds	r4, #1
 8005484:	9304      	str	r3, [sp, #16]
 8005486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800548a:	4829      	ldr	r0, [pc, #164]	; (8005530 <_vfiprintf_r+0x224>)
 800548c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005490:	2206      	movs	r2, #6
 8005492:	f7fa fec5 	bl	8000220 <memchr>
 8005496:	2800      	cmp	r0, #0
 8005498:	d03f      	beq.n	800551a <_vfiprintf_r+0x20e>
 800549a:	4b26      	ldr	r3, [pc, #152]	; (8005534 <_vfiprintf_r+0x228>)
 800549c:	bb1b      	cbnz	r3, 80054e6 <_vfiprintf_r+0x1da>
 800549e:	9b03      	ldr	r3, [sp, #12]
 80054a0:	3307      	adds	r3, #7
 80054a2:	f023 0307 	bic.w	r3, r3, #7
 80054a6:	3308      	adds	r3, #8
 80054a8:	9303      	str	r3, [sp, #12]
 80054aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ac:	443b      	add	r3, r7
 80054ae:	9309      	str	r3, [sp, #36]	; 0x24
 80054b0:	e768      	b.n	8005384 <_vfiprintf_r+0x78>
 80054b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80054b6:	460c      	mov	r4, r1
 80054b8:	2001      	movs	r0, #1
 80054ba:	e7a6      	b.n	800540a <_vfiprintf_r+0xfe>
 80054bc:	2300      	movs	r3, #0
 80054be:	3401      	adds	r4, #1
 80054c0:	9305      	str	r3, [sp, #20]
 80054c2:	4619      	mov	r1, r3
 80054c4:	f04f 0c0a 	mov.w	ip, #10
 80054c8:	4620      	mov	r0, r4
 80054ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054ce:	3a30      	subs	r2, #48	; 0x30
 80054d0:	2a09      	cmp	r2, #9
 80054d2:	d903      	bls.n	80054dc <_vfiprintf_r+0x1d0>
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0c6      	beq.n	8005466 <_vfiprintf_r+0x15a>
 80054d8:	9105      	str	r1, [sp, #20]
 80054da:	e7c4      	b.n	8005466 <_vfiprintf_r+0x15a>
 80054dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80054e0:	4604      	mov	r4, r0
 80054e2:	2301      	movs	r3, #1
 80054e4:	e7f0      	b.n	80054c8 <_vfiprintf_r+0x1bc>
 80054e6:	ab03      	add	r3, sp, #12
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	462a      	mov	r2, r5
 80054ec:	4b12      	ldr	r3, [pc, #72]	; (8005538 <_vfiprintf_r+0x22c>)
 80054ee:	a904      	add	r1, sp, #16
 80054f0:	4630      	mov	r0, r6
 80054f2:	f3af 8000 	nop.w
 80054f6:	4607      	mov	r7, r0
 80054f8:	1c78      	adds	r0, r7, #1
 80054fa:	d1d6      	bne.n	80054aa <_vfiprintf_r+0x19e>
 80054fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054fe:	07d9      	lsls	r1, r3, #31
 8005500:	d405      	bmi.n	800550e <_vfiprintf_r+0x202>
 8005502:	89ab      	ldrh	r3, [r5, #12]
 8005504:	059a      	lsls	r2, r3, #22
 8005506:	d402      	bmi.n	800550e <_vfiprintf_r+0x202>
 8005508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800550a:	f7ff fddc 	bl	80050c6 <__retarget_lock_release_recursive>
 800550e:	89ab      	ldrh	r3, [r5, #12]
 8005510:	065b      	lsls	r3, r3, #25
 8005512:	f53f af1d 	bmi.w	8005350 <_vfiprintf_r+0x44>
 8005516:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005518:	e71c      	b.n	8005354 <_vfiprintf_r+0x48>
 800551a:	ab03      	add	r3, sp, #12
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	462a      	mov	r2, r5
 8005520:	4b05      	ldr	r3, [pc, #20]	; (8005538 <_vfiprintf_r+0x22c>)
 8005522:	a904      	add	r1, sp, #16
 8005524:	4630      	mov	r0, r6
 8005526:	f000 f879 	bl	800561c <_printf_i>
 800552a:	e7e4      	b.n	80054f6 <_vfiprintf_r+0x1ea>
 800552c:	08005c28 	.word	0x08005c28
 8005530:	08005c32 	.word	0x08005c32
 8005534:	00000000 	.word	0x00000000
 8005538:	080052e7 	.word	0x080052e7
 800553c:	08005c2e 	.word	0x08005c2e

08005540 <_printf_common>:
 8005540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005544:	4616      	mov	r6, r2
 8005546:	4699      	mov	r9, r3
 8005548:	688a      	ldr	r2, [r1, #8]
 800554a:	690b      	ldr	r3, [r1, #16]
 800554c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005550:	4293      	cmp	r3, r2
 8005552:	bfb8      	it	lt
 8005554:	4613      	movlt	r3, r2
 8005556:	6033      	str	r3, [r6, #0]
 8005558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800555c:	4607      	mov	r7, r0
 800555e:	460c      	mov	r4, r1
 8005560:	b10a      	cbz	r2, 8005566 <_printf_common+0x26>
 8005562:	3301      	adds	r3, #1
 8005564:	6033      	str	r3, [r6, #0]
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	0699      	lsls	r1, r3, #26
 800556a:	bf42      	ittt	mi
 800556c:	6833      	ldrmi	r3, [r6, #0]
 800556e:	3302      	addmi	r3, #2
 8005570:	6033      	strmi	r3, [r6, #0]
 8005572:	6825      	ldr	r5, [r4, #0]
 8005574:	f015 0506 	ands.w	r5, r5, #6
 8005578:	d106      	bne.n	8005588 <_printf_common+0x48>
 800557a:	f104 0a19 	add.w	sl, r4, #25
 800557e:	68e3      	ldr	r3, [r4, #12]
 8005580:	6832      	ldr	r2, [r6, #0]
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	42ab      	cmp	r3, r5
 8005586:	dc26      	bgt.n	80055d6 <_printf_common+0x96>
 8005588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800558c:	1e13      	subs	r3, r2, #0
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	bf18      	it	ne
 8005592:	2301      	movne	r3, #1
 8005594:	0692      	lsls	r2, r2, #26
 8005596:	d42b      	bmi.n	80055f0 <_printf_common+0xb0>
 8005598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800559c:	4649      	mov	r1, r9
 800559e:	4638      	mov	r0, r7
 80055a0:	47c0      	blx	r8
 80055a2:	3001      	adds	r0, #1
 80055a4:	d01e      	beq.n	80055e4 <_printf_common+0xa4>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	6922      	ldr	r2, [r4, #16]
 80055aa:	f003 0306 	and.w	r3, r3, #6
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	bf02      	ittt	eq
 80055b2:	68e5      	ldreq	r5, [r4, #12]
 80055b4:	6833      	ldreq	r3, [r6, #0]
 80055b6:	1aed      	subeq	r5, r5, r3
 80055b8:	68a3      	ldr	r3, [r4, #8]
 80055ba:	bf0c      	ite	eq
 80055bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055c0:	2500      	movne	r5, #0
 80055c2:	4293      	cmp	r3, r2
 80055c4:	bfc4      	itt	gt
 80055c6:	1a9b      	subgt	r3, r3, r2
 80055c8:	18ed      	addgt	r5, r5, r3
 80055ca:	2600      	movs	r6, #0
 80055cc:	341a      	adds	r4, #26
 80055ce:	42b5      	cmp	r5, r6
 80055d0:	d11a      	bne.n	8005608 <_printf_common+0xc8>
 80055d2:	2000      	movs	r0, #0
 80055d4:	e008      	b.n	80055e8 <_printf_common+0xa8>
 80055d6:	2301      	movs	r3, #1
 80055d8:	4652      	mov	r2, sl
 80055da:	4649      	mov	r1, r9
 80055dc:	4638      	mov	r0, r7
 80055de:	47c0      	blx	r8
 80055e0:	3001      	adds	r0, #1
 80055e2:	d103      	bne.n	80055ec <_printf_common+0xac>
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295
 80055e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ec:	3501      	adds	r5, #1
 80055ee:	e7c6      	b.n	800557e <_printf_common+0x3e>
 80055f0:	18e1      	adds	r1, r4, r3
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	2030      	movs	r0, #48	; 0x30
 80055f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055fa:	4422      	add	r2, r4
 80055fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005604:	3302      	adds	r3, #2
 8005606:	e7c7      	b.n	8005598 <_printf_common+0x58>
 8005608:	2301      	movs	r3, #1
 800560a:	4622      	mov	r2, r4
 800560c:	4649      	mov	r1, r9
 800560e:	4638      	mov	r0, r7
 8005610:	47c0      	blx	r8
 8005612:	3001      	adds	r0, #1
 8005614:	d0e6      	beq.n	80055e4 <_printf_common+0xa4>
 8005616:	3601      	adds	r6, #1
 8005618:	e7d9      	b.n	80055ce <_printf_common+0x8e>
	...

0800561c <_printf_i>:
 800561c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005620:	7e0f      	ldrb	r7, [r1, #24]
 8005622:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005624:	2f78      	cmp	r7, #120	; 0x78
 8005626:	4691      	mov	r9, r2
 8005628:	4680      	mov	r8, r0
 800562a:	460c      	mov	r4, r1
 800562c:	469a      	mov	sl, r3
 800562e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005632:	d807      	bhi.n	8005644 <_printf_i+0x28>
 8005634:	2f62      	cmp	r7, #98	; 0x62
 8005636:	d80a      	bhi.n	800564e <_printf_i+0x32>
 8005638:	2f00      	cmp	r7, #0
 800563a:	f000 80d4 	beq.w	80057e6 <_printf_i+0x1ca>
 800563e:	2f58      	cmp	r7, #88	; 0x58
 8005640:	f000 80c0 	beq.w	80057c4 <_printf_i+0x1a8>
 8005644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800564c:	e03a      	b.n	80056c4 <_printf_i+0xa8>
 800564e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005652:	2b15      	cmp	r3, #21
 8005654:	d8f6      	bhi.n	8005644 <_printf_i+0x28>
 8005656:	a101      	add	r1, pc, #4	; (adr r1, 800565c <_printf_i+0x40>)
 8005658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800565c:	080056b5 	.word	0x080056b5
 8005660:	080056c9 	.word	0x080056c9
 8005664:	08005645 	.word	0x08005645
 8005668:	08005645 	.word	0x08005645
 800566c:	08005645 	.word	0x08005645
 8005670:	08005645 	.word	0x08005645
 8005674:	080056c9 	.word	0x080056c9
 8005678:	08005645 	.word	0x08005645
 800567c:	08005645 	.word	0x08005645
 8005680:	08005645 	.word	0x08005645
 8005684:	08005645 	.word	0x08005645
 8005688:	080057cd 	.word	0x080057cd
 800568c:	080056f5 	.word	0x080056f5
 8005690:	08005787 	.word	0x08005787
 8005694:	08005645 	.word	0x08005645
 8005698:	08005645 	.word	0x08005645
 800569c:	080057ef 	.word	0x080057ef
 80056a0:	08005645 	.word	0x08005645
 80056a4:	080056f5 	.word	0x080056f5
 80056a8:	08005645 	.word	0x08005645
 80056ac:	08005645 	.word	0x08005645
 80056b0:	0800578f 	.word	0x0800578f
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	1d1a      	adds	r2, r3, #4
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	602a      	str	r2, [r5, #0]
 80056bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056c4:	2301      	movs	r3, #1
 80056c6:	e09f      	b.n	8005808 <_printf_i+0x1ec>
 80056c8:	6820      	ldr	r0, [r4, #0]
 80056ca:	682b      	ldr	r3, [r5, #0]
 80056cc:	0607      	lsls	r7, r0, #24
 80056ce:	f103 0104 	add.w	r1, r3, #4
 80056d2:	6029      	str	r1, [r5, #0]
 80056d4:	d501      	bpl.n	80056da <_printf_i+0xbe>
 80056d6:	681e      	ldr	r6, [r3, #0]
 80056d8:	e003      	b.n	80056e2 <_printf_i+0xc6>
 80056da:	0646      	lsls	r6, r0, #25
 80056dc:	d5fb      	bpl.n	80056d6 <_printf_i+0xba>
 80056de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80056e2:	2e00      	cmp	r6, #0
 80056e4:	da03      	bge.n	80056ee <_printf_i+0xd2>
 80056e6:	232d      	movs	r3, #45	; 0x2d
 80056e8:	4276      	negs	r6, r6
 80056ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ee:	485a      	ldr	r0, [pc, #360]	; (8005858 <_printf_i+0x23c>)
 80056f0:	230a      	movs	r3, #10
 80056f2:	e012      	b.n	800571a <_printf_i+0xfe>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	6820      	ldr	r0, [r4, #0]
 80056f8:	1d19      	adds	r1, r3, #4
 80056fa:	6029      	str	r1, [r5, #0]
 80056fc:	0605      	lsls	r5, r0, #24
 80056fe:	d501      	bpl.n	8005704 <_printf_i+0xe8>
 8005700:	681e      	ldr	r6, [r3, #0]
 8005702:	e002      	b.n	800570a <_printf_i+0xee>
 8005704:	0641      	lsls	r1, r0, #25
 8005706:	d5fb      	bpl.n	8005700 <_printf_i+0xe4>
 8005708:	881e      	ldrh	r6, [r3, #0]
 800570a:	4853      	ldr	r0, [pc, #332]	; (8005858 <_printf_i+0x23c>)
 800570c:	2f6f      	cmp	r7, #111	; 0x6f
 800570e:	bf0c      	ite	eq
 8005710:	2308      	moveq	r3, #8
 8005712:	230a      	movne	r3, #10
 8005714:	2100      	movs	r1, #0
 8005716:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800571a:	6865      	ldr	r5, [r4, #4]
 800571c:	60a5      	str	r5, [r4, #8]
 800571e:	2d00      	cmp	r5, #0
 8005720:	bfa2      	ittt	ge
 8005722:	6821      	ldrge	r1, [r4, #0]
 8005724:	f021 0104 	bicge.w	r1, r1, #4
 8005728:	6021      	strge	r1, [r4, #0]
 800572a:	b90e      	cbnz	r6, 8005730 <_printf_i+0x114>
 800572c:	2d00      	cmp	r5, #0
 800572e:	d04b      	beq.n	80057c8 <_printf_i+0x1ac>
 8005730:	4615      	mov	r5, r2
 8005732:	fbb6 f1f3 	udiv	r1, r6, r3
 8005736:	fb03 6711 	mls	r7, r3, r1, r6
 800573a:	5dc7      	ldrb	r7, [r0, r7]
 800573c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005740:	4637      	mov	r7, r6
 8005742:	42bb      	cmp	r3, r7
 8005744:	460e      	mov	r6, r1
 8005746:	d9f4      	bls.n	8005732 <_printf_i+0x116>
 8005748:	2b08      	cmp	r3, #8
 800574a:	d10b      	bne.n	8005764 <_printf_i+0x148>
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	07de      	lsls	r6, r3, #31
 8005750:	d508      	bpl.n	8005764 <_printf_i+0x148>
 8005752:	6923      	ldr	r3, [r4, #16]
 8005754:	6861      	ldr	r1, [r4, #4]
 8005756:	4299      	cmp	r1, r3
 8005758:	bfde      	ittt	le
 800575a:	2330      	movle	r3, #48	; 0x30
 800575c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005760:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005764:	1b52      	subs	r2, r2, r5
 8005766:	6122      	str	r2, [r4, #16]
 8005768:	f8cd a000 	str.w	sl, [sp]
 800576c:	464b      	mov	r3, r9
 800576e:	aa03      	add	r2, sp, #12
 8005770:	4621      	mov	r1, r4
 8005772:	4640      	mov	r0, r8
 8005774:	f7ff fee4 	bl	8005540 <_printf_common>
 8005778:	3001      	adds	r0, #1
 800577a:	d14a      	bne.n	8005812 <_printf_i+0x1f6>
 800577c:	f04f 30ff 	mov.w	r0, #4294967295
 8005780:	b004      	add	sp, #16
 8005782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	f043 0320 	orr.w	r3, r3, #32
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	4833      	ldr	r0, [pc, #204]	; (800585c <_printf_i+0x240>)
 8005790:	2778      	movs	r7, #120	; 0x78
 8005792:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	6829      	ldr	r1, [r5, #0]
 800579a:	061f      	lsls	r7, r3, #24
 800579c:	f851 6b04 	ldr.w	r6, [r1], #4
 80057a0:	d402      	bmi.n	80057a8 <_printf_i+0x18c>
 80057a2:	065f      	lsls	r7, r3, #25
 80057a4:	bf48      	it	mi
 80057a6:	b2b6      	uxthmi	r6, r6
 80057a8:	07df      	lsls	r7, r3, #31
 80057aa:	bf48      	it	mi
 80057ac:	f043 0320 	orrmi.w	r3, r3, #32
 80057b0:	6029      	str	r1, [r5, #0]
 80057b2:	bf48      	it	mi
 80057b4:	6023      	strmi	r3, [r4, #0]
 80057b6:	b91e      	cbnz	r6, 80057c0 <_printf_i+0x1a4>
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	f023 0320 	bic.w	r3, r3, #32
 80057be:	6023      	str	r3, [r4, #0]
 80057c0:	2310      	movs	r3, #16
 80057c2:	e7a7      	b.n	8005714 <_printf_i+0xf8>
 80057c4:	4824      	ldr	r0, [pc, #144]	; (8005858 <_printf_i+0x23c>)
 80057c6:	e7e4      	b.n	8005792 <_printf_i+0x176>
 80057c8:	4615      	mov	r5, r2
 80057ca:	e7bd      	b.n	8005748 <_printf_i+0x12c>
 80057cc:	682b      	ldr	r3, [r5, #0]
 80057ce:	6826      	ldr	r6, [r4, #0]
 80057d0:	6961      	ldr	r1, [r4, #20]
 80057d2:	1d18      	adds	r0, r3, #4
 80057d4:	6028      	str	r0, [r5, #0]
 80057d6:	0635      	lsls	r5, r6, #24
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	d501      	bpl.n	80057e0 <_printf_i+0x1c4>
 80057dc:	6019      	str	r1, [r3, #0]
 80057de:	e002      	b.n	80057e6 <_printf_i+0x1ca>
 80057e0:	0670      	lsls	r0, r6, #25
 80057e2:	d5fb      	bpl.n	80057dc <_printf_i+0x1c0>
 80057e4:	8019      	strh	r1, [r3, #0]
 80057e6:	2300      	movs	r3, #0
 80057e8:	6123      	str	r3, [r4, #16]
 80057ea:	4615      	mov	r5, r2
 80057ec:	e7bc      	b.n	8005768 <_printf_i+0x14c>
 80057ee:	682b      	ldr	r3, [r5, #0]
 80057f0:	1d1a      	adds	r2, r3, #4
 80057f2:	602a      	str	r2, [r5, #0]
 80057f4:	681d      	ldr	r5, [r3, #0]
 80057f6:	6862      	ldr	r2, [r4, #4]
 80057f8:	2100      	movs	r1, #0
 80057fa:	4628      	mov	r0, r5
 80057fc:	f7fa fd10 	bl	8000220 <memchr>
 8005800:	b108      	cbz	r0, 8005806 <_printf_i+0x1ea>
 8005802:	1b40      	subs	r0, r0, r5
 8005804:	6060      	str	r0, [r4, #4]
 8005806:	6863      	ldr	r3, [r4, #4]
 8005808:	6123      	str	r3, [r4, #16]
 800580a:	2300      	movs	r3, #0
 800580c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005810:	e7aa      	b.n	8005768 <_printf_i+0x14c>
 8005812:	6923      	ldr	r3, [r4, #16]
 8005814:	462a      	mov	r2, r5
 8005816:	4649      	mov	r1, r9
 8005818:	4640      	mov	r0, r8
 800581a:	47d0      	blx	sl
 800581c:	3001      	adds	r0, #1
 800581e:	d0ad      	beq.n	800577c <_printf_i+0x160>
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	079b      	lsls	r3, r3, #30
 8005824:	d413      	bmi.n	800584e <_printf_i+0x232>
 8005826:	68e0      	ldr	r0, [r4, #12]
 8005828:	9b03      	ldr	r3, [sp, #12]
 800582a:	4298      	cmp	r0, r3
 800582c:	bfb8      	it	lt
 800582e:	4618      	movlt	r0, r3
 8005830:	e7a6      	b.n	8005780 <_printf_i+0x164>
 8005832:	2301      	movs	r3, #1
 8005834:	4632      	mov	r2, r6
 8005836:	4649      	mov	r1, r9
 8005838:	4640      	mov	r0, r8
 800583a:	47d0      	blx	sl
 800583c:	3001      	adds	r0, #1
 800583e:	d09d      	beq.n	800577c <_printf_i+0x160>
 8005840:	3501      	adds	r5, #1
 8005842:	68e3      	ldr	r3, [r4, #12]
 8005844:	9903      	ldr	r1, [sp, #12]
 8005846:	1a5b      	subs	r3, r3, r1
 8005848:	42ab      	cmp	r3, r5
 800584a:	dcf2      	bgt.n	8005832 <_printf_i+0x216>
 800584c:	e7eb      	b.n	8005826 <_printf_i+0x20a>
 800584e:	2500      	movs	r5, #0
 8005850:	f104 0619 	add.w	r6, r4, #25
 8005854:	e7f5      	b.n	8005842 <_printf_i+0x226>
 8005856:	bf00      	nop
 8005858:	08005c39 	.word	0x08005c39
 800585c:	08005c4a 	.word	0x08005c4a

08005860 <__sflush_r>:
 8005860:	898a      	ldrh	r2, [r1, #12]
 8005862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005866:	4605      	mov	r5, r0
 8005868:	0710      	lsls	r0, r2, #28
 800586a:	460c      	mov	r4, r1
 800586c:	d458      	bmi.n	8005920 <__sflush_r+0xc0>
 800586e:	684b      	ldr	r3, [r1, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	dc05      	bgt.n	8005880 <__sflush_r+0x20>
 8005874:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	dc02      	bgt.n	8005880 <__sflush_r+0x20>
 800587a:	2000      	movs	r0, #0
 800587c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005880:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005882:	2e00      	cmp	r6, #0
 8005884:	d0f9      	beq.n	800587a <__sflush_r+0x1a>
 8005886:	2300      	movs	r3, #0
 8005888:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800588c:	682f      	ldr	r7, [r5, #0]
 800588e:	6a21      	ldr	r1, [r4, #32]
 8005890:	602b      	str	r3, [r5, #0]
 8005892:	d032      	beq.n	80058fa <__sflush_r+0x9a>
 8005894:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005896:	89a3      	ldrh	r3, [r4, #12]
 8005898:	075a      	lsls	r2, r3, #29
 800589a:	d505      	bpl.n	80058a8 <__sflush_r+0x48>
 800589c:	6863      	ldr	r3, [r4, #4]
 800589e:	1ac0      	subs	r0, r0, r3
 80058a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058a2:	b10b      	cbz	r3, 80058a8 <__sflush_r+0x48>
 80058a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058a6:	1ac0      	subs	r0, r0, r3
 80058a8:	2300      	movs	r3, #0
 80058aa:	4602      	mov	r2, r0
 80058ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058ae:	6a21      	ldr	r1, [r4, #32]
 80058b0:	4628      	mov	r0, r5
 80058b2:	47b0      	blx	r6
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	89a3      	ldrh	r3, [r4, #12]
 80058b8:	d106      	bne.n	80058c8 <__sflush_r+0x68>
 80058ba:	6829      	ldr	r1, [r5, #0]
 80058bc:	291d      	cmp	r1, #29
 80058be:	d82b      	bhi.n	8005918 <__sflush_r+0xb8>
 80058c0:	4a29      	ldr	r2, [pc, #164]	; (8005968 <__sflush_r+0x108>)
 80058c2:	410a      	asrs	r2, r1
 80058c4:	07d6      	lsls	r6, r2, #31
 80058c6:	d427      	bmi.n	8005918 <__sflush_r+0xb8>
 80058c8:	2200      	movs	r2, #0
 80058ca:	6062      	str	r2, [r4, #4]
 80058cc:	04d9      	lsls	r1, r3, #19
 80058ce:	6922      	ldr	r2, [r4, #16]
 80058d0:	6022      	str	r2, [r4, #0]
 80058d2:	d504      	bpl.n	80058de <__sflush_r+0x7e>
 80058d4:	1c42      	adds	r2, r0, #1
 80058d6:	d101      	bne.n	80058dc <__sflush_r+0x7c>
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	b903      	cbnz	r3, 80058de <__sflush_r+0x7e>
 80058dc:	6560      	str	r0, [r4, #84]	; 0x54
 80058de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058e0:	602f      	str	r7, [r5, #0]
 80058e2:	2900      	cmp	r1, #0
 80058e4:	d0c9      	beq.n	800587a <__sflush_r+0x1a>
 80058e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058ea:	4299      	cmp	r1, r3
 80058ec:	d002      	beq.n	80058f4 <__sflush_r+0x94>
 80058ee:	4628      	mov	r0, r5
 80058f0:	f7ff fbea 	bl	80050c8 <_free_r>
 80058f4:	2000      	movs	r0, #0
 80058f6:	6360      	str	r0, [r4, #52]	; 0x34
 80058f8:	e7c0      	b.n	800587c <__sflush_r+0x1c>
 80058fa:	2301      	movs	r3, #1
 80058fc:	4628      	mov	r0, r5
 80058fe:	47b0      	blx	r6
 8005900:	1c41      	adds	r1, r0, #1
 8005902:	d1c8      	bne.n	8005896 <__sflush_r+0x36>
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0c5      	beq.n	8005896 <__sflush_r+0x36>
 800590a:	2b1d      	cmp	r3, #29
 800590c:	d001      	beq.n	8005912 <__sflush_r+0xb2>
 800590e:	2b16      	cmp	r3, #22
 8005910:	d101      	bne.n	8005916 <__sflush_r+0xb6>
 8005912:	602f      	str	r7, [r5, #0]
 8005914:	e7b1      	b.n	800587a <__sflush_r+0x1a>
 8005916:	89a3      	ldrh	r3, [r4, #12]
 8005918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800591c:	81a3      	strh	r3, [r4, #12]
 800591e:	e7ad      	b.n	800587c <__sflush_r+0x1c>
 8005920:	690f      	ldr	r7, [r1, #16]
 8005922:	2f00      	cmp	r7, #0
 8005924:	d0a9      	beq.n	800587a <__sflush_r+0x1a>
 8005926:	0793      	lsls	r3, r2, #30
 8005928:	680e      	ldr	r6, [r1, #0]
 800592a:	bf08      	it	eq
 800592c:	694b      	ldreq	r3, [r1, #20]
 800592e:	600f      	str	r7, [r1, #0]
 8005930:	bf18      	it	ne
 8005932:	2300      	movne	r3, #0
 8005934:	eba6 0807 	sub.w	r8, r6, r7
 8005938:	608b      	str	r3, [r1, #8]
 800593a:	f1b8 0f00 	cmp.w	r8, #0
 800593e:	dd9c      	ble.n	800587a <__sflush_r+0x1a>
 8005940:	6a21      	ldr	r1, [r4, #32]
 8005942:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005944:	4643      	mov	r3, r8
 8005946:	463a      	mov	r2, r7
 8005948:	4628      	mov	r0, r5
 800594a:	47b0      	blx	r6
 800594c:	2800      	cmp	r0, #0
 800594e:	dc06      	bgt.n	800595e <__sflush_r+0xfe>
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005956:	81a3      	strh	r3, [r4, #12]
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	e78e      	b.n	800587c <__sflush_r+0x1c>
 800595e:	4407      	add	r7, r0
 8005960:	eba8 0800 	sub.w	r8, r8, r0
 8005964:	e7e9      	b.n	800593a <__sflush_r+0xda>
 8005966:	bf00      	nop
 8005968:	dfbffffe 	.word	0xdfbffffe

0800596c <_fflush_r>:
 800596c:	b538      	push	{r3, r4, r5, lr}
 800596e:	690b      	ldr	r3, [r1, #16]
 8005970:	4605      	mov	r5, r0
 8005972:	460c      	mov	r4, r1
 8005974:	b913      	cbnz	r3, 800597c <_fflush_r+0x10>
 8005976:	2500      	movs	r5, #0
 8005978:	4628      	mov	r0, r5
 800597a:	bd38      	pop	{r3, r4, r5, pc}
 800597c:	b118      	cbz	r0, 8005986 <_fflush_r+0x1a>
 800597e:	6a03      	ldr	r3, [r0, #32]
 8005980:	b90b      	cbnz	r3, 8005986 <_fflush_r+0x1a>
 8005982:	f7ff f9ab 	bl	8004cdc <__sinit>
 8005986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0f3      	beq.n	8005976 <_fflush_r+0xa>
 800598e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005990:	07d0      	lsls	r0, r2, #31
 8005992:	d404      	bmi.n	800599e <_fflush_r+0x32>
 8005994:	0599      	lsls	r1, r3, #22
 8005996:	d402      	bmi.n	800599e <_fflush_r+0x32>
 8005998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800599a:	f7ff fb93 	bl	80050c4 <__retarget_lock_acquire_recursive>
 800599e:	4628      	mov	r0, r5
 80059a0:	4621      	mov	r1, r4
 80059a2:	f7ff ff5d 	bl	8005860 <__sflush_r>
 80059a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059a8:	07da      	lsls	r2, r3, #31
 80059aa:	4605      	mov	r5, r0
 80059ac:	d4e4      	bmi.n	8005978 <_fflush_r+0xc>
 80059ae:	89a3      	ldrh	r3, [r4, #12]
 80059b0:	059b      	lsls	r3, r3, #22
 80059b2:	d4e1      	bmi.n	8005978 <_fflush_r+0xc>
 80059b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059b6:	f7ff fb86 	bl	80050c6 <__retarget_lock_release_recursive>
 80059ba:	e7dd      	b.n	8005978 <_fflush_r+0xc>

080059bc <__swhatbuf_r>:
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	460c      	mov	r4, r1
 80059c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c4:	2900      	cmp	r1, #0
 80059c6:	b096      	sub	sp, #88	; 0x58
 80059c8:	4615      	mov	r5, r2
 80059ca:	461e      	mov	r6, r3
 80059cc:	da0d      	bge.n	80059ea <__swhatbuf_r+0x2e>
 80059ce:	89a3      	ldrh	r3, [r4, #12]
 80059d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80059d4:	f04f 0100 	mov.w	r1, #0
 80059d8:	bf0c      	ite	eq
 80059da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80059de:	2340      	movne	r3, #64	; 0x40
 80059e0:	2000      	movs	r0, #0
 80059e2:	6031      	str	r1, [r6, #0]
 80059e4:	602b      	str	r3, [r5, #0]
 80059e6:	b016      	add	sp, #88	; 0x58
 80059e8:	bd70      	pop	{r4, r5, r6, pc}
 80059ea:	466a      	mov	r2, sp
 80059ec:	f000 f848 	bl	8005a80 <_fstat_r>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	dbec      	blt.n	80059ce <__swhatbuf_r+0x12>
 80059f4:	9901      	ldr	r1, [sp, #4]
 80059f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80059fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80059fe:	4259      	negs	r1, r3
 8005a00:	4159      	adcs	r1, r3
 8005a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a06:	e7eb      	b.n	80059e0 <__swhatbuf_r+0x24>

08005a08 <__smakebuf_r>:
 8005a08:	898b      	ldrh	r3, [r1, #12]
 8005a0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a0c:	079d      	lsls	r5, r3, #30
 8005a0e:	4606      	mov	r6, r0
 8005a10:	460c      	mov	r4, r1
 8005a12:	d507      	bpl.n	8005a24 <__smakebuf_r+0x1c>
 8005a14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	6123      	str	r3, [r4, #16]
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	6163      	str	r3, [r4, #20]
 8005a20:	b002      	add	sp, #8
 8005a22:	bd70      	pop	{r4, r5, r6, pc}
 8005a24:	ab01      	add	r3, sp, #4
 8005a26:	466a      	mov	r2, sp
 8005a28:	f7ff ffc8 	bl	80059bc <__swhatbuf_r>
 8005a2c:	9900      	ldr	r1, [sp, #0]
 8005a2e:	4605      	mov	r5, r0
 8005a30:	4630      	mov	r0, r6
 8005a32:	f7ff fbb5 	bl	80051a0 <_malloc_r>
 8005a36:	b948      	cbnz	r0, 8005a4c <__smakebuf_r+0x44>
 8005a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a3c:	059a      	lsls	r2, r3, #22
 8005a3e:	d4ef      	bmi.n	8005a20 <__smakebuf_r+0x18>
 8005a40:	f023 0303 	bic.w	r3, r3, #3
 8005a44:	f043 0302 	orr.w	r3, r3, #2
 8005a48:	81a3      	strh	r3, [r4, #12]
 8005a4a:	e7e3      	b.n	8005a14 <__smakebuf_r+0xc>
 8005a4c:	89a3      	ldrh	r3, [r4, #12]
 8005a4e:	6020      	str	r0, [r4, #0]
 8005a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a54:	81a3      	strh	r3, [r4, #12]
 8005a56:	9b00      	ldr	r3, [sp, #0]
 8005a58:	6163      	str	r3, [r4, #20]
 8005a5a:	9b01      	ldr	r3, [sp, #4]
 8005a5c:	6120      	str	r0, [r4, #16]
 8005a5e:	b15b      	cbz	r3, 8005a78 <__smakebuf_r+0x70>
 8005a60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a64:	4630      	mov	r0, r6
 8005a66:	f000 f81d 	bl	8005aa4 <_isatty_r>
 8005a6a:	b128      	cbz	r0, 8005a78 <__smakebuf_r+0x70>
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	f023 0303 	bic.w	r3, r3, #3
 8005a72:	f043 0301 	orr.w	r3, r3, #1
 8005a76:	81a3      	strh	r3, [r4, #12]
 8005a78:	89a3      	ldrh	r3, [r4, #12]
 8005a7a:	431d      	orrs	r5, r3
 8005a7c:	81a5      	strh	r5, [r4, #12]
 8005a7e:	e7cf      	b.n	8005a20 <__smakebuf_r+0x18>

08005a80 <_fstat_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4d07      	ldr	r5, [pc, #28]	; (8005aa0 <_fstat_r+0x20>)
 8005a84:	2300      	movs	r3, #0
 8005a86:	4604      	mov	r4, r0
 8005a88:	4608      	mov	r0, r1
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	602b      	str	r3, [r5, #0]
 8005a8e:	f7fb f8d6 	bl	8000c3e <_fstat>
 8005a92:	1c43      	adds	r3, r0, #1
 8005a94:	d102      	bne.n	8005a9c <_fstat_r+0x1c>
 8005a96:	682b      	ldr	r3, [r5, #0]
 8005a98:	b103      	cbz	r3, 8005a9c <_fstat_r+0x1c>
 8005a9a:	6023      	str	r3, [r4, #0]
 8005a9c:	bd38      	pop	{r3, r4, r5, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000444 	.word	0x20000444

08005aa4 <_isatty_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4d06      	ldr	r5, [pc, #24]	; (8005ac0 <_isatty_r+0x1c>)
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	4604      	mov	r4, r0
 8005aac:	4608      	mov	r0, r1
 8005aae:	602b      	str	r3, [r5, #0]
 8005ab0:	f7fb f8d5 	bl	8000c5e <_isatty>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_isatty_r+0x1a>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_isatty_r+0x1a>
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	20000444 	.word	0x20000444

08005ac4 <_sbrk_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4d06      	ldr	r5, [pc, #24]	; (8005ae0 <_sbrk_r+0x1c>)
 8005ac8:	2300      	movs	r3, #0
 8005aca:	4604      	mov	r4, r0
 8005acc:	4608      	mov	r0, r1
 8005ace:	602b      	str	r3, [r5, #0]
 8005ad0:	f7fb f8de 	bl	8000c90 <_sbrk>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d102      	bne.n	8005ade <_sbrk_r+0x1a>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	b103      	cbz	r3, 8005ade <_sbrk_r+0x1a>
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	bd38      	pop	{r3, r4, r5, pc}
 8005ae0:	20000444 	.word	0x20000444

08005ae4 <_init>:
 8005ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae6:	bf00      	nop
 8005ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aea:	bc08      	pop	{r3}
 8005aec:	469e      	mov	lr, r3
 8005aee:	4770      	bx	lr

08005af0 <_fini>:
 8005af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af2:	bf00      	nop
 8005af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af6:	bc08      	pop	{r3}
 8005af8:	469e      	mov	lr, r3
 8005afa:	4770      	bx	lr
