
G431RB_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d60  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003f38  08003f38  00013f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f88  08003f88  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003f88  08003f88  00013f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f90  08003f90  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f90  08003f90  00013f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f94  08003f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  20000068  08004000  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08004000  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000115a7  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002383  00000000  00000000  00031682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00033a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000baa  00000000  00000000  00034920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001edbd  00000000  00000000  000354ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012500  00000000  00000000  00054287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0602  00000000  00000000  00066787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004588  00000000  00000000  00126d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0012b314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003f20 	.word	0x08003f20

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08003f20 	.word	0x08003f20

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <_write>:
static void MX_LPUART1_UART_Init(void);
static void MX_FDCAN1_Init(void);
static void MX_I2C1_Init(void);
static void MX_UART4_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e00b      	b.n	800053e <_write+0x2a>
		HAL_UART_Transmit(&hlpuart1, (uint8_t *) ptr++, 1, HAL_MAX_DELAY);
 8000526:	68b9      	ldr	r1, [r7, #8]
 8000528:	1c4b      	adds	r3, r1, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	f04f 33ff 	mov.w	r3, #4294967295
 8000530:	2201      	movs	r2, #1
 8000532:	4807      	ldr	r0, [pc, #28]	; (8000550 <_write+0x3c>)
 8000534:	f002 fa42 	bl	80029bc <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	3301      	adds	r3, #1
 800053c:	617b      	str	r3, [r7, #20]
 800053e:	697a      	ldr	r2, [r7, #20]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	429a      	cmp	r2, r3
 8000544:	dbef      	blt.n	8000526 <_write+0x12>
	}
	return len;
 8000546:	687b      	ldr	r3, [r7, #4]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3718      	adds	r7, #24
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000134 	.word	0x20000134

08000554 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000558:	f000 fc43 	bl	8000de2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800055c:	f000 f810 	bl	8000580 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000560:	f000 f976 	bl	8000850 <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 8000564:	f000 f8de 	bl	8000724 <MX_LPUART1_UART_Init>
	MX_FDCAN1_Init();
 8000568:	f000 f856 	bl	8000618 <MX_FDCAN1_Init>
	MX_I2C1_Init();
 800056c:	f000 f89a 	bl	80006a4 <MX_I2C1_Init>
	MX_UART4_Init();
 8000570:	f000 f922 	bl	80007b8 <MX_UART4_Init>
	/* USER CODE BEGIN 2 */
	printf("Begin 2 print\r\n");
 8000574:	4801      	ldr	r0, [pc, #4]	; (800057c <main+0x28>)
 8000576:	f003 f93f 	bl	80037f8 <puts>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800057a:	e7fe      	b.n	800057a <main+0x26>
 800057c:	08003f38 	.word	0x08003f38

08000580 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	2238      	movs	r2, #56	; 0x38
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fa12 	bl	80039b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f001 f9e2 	bl	800196c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b2:	2340      	movs	r3, #64	; 0x40
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005be:	2304      	movs	r3, #4
 80005c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80005c2:	2355      	movs	r3, #85	; 0x55
 80005c4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	f107 0318 	add.w	r3, r7, #24
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fa7c 	bl	8001ad4 <HAL_RCC_OscConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x66>
	{
		Error_Handler();
 80005e2:	f000 f99b 	bl	800091c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ea:	2303      	movs	r3, #3
 80005ec:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2104      	movs	r1, #4
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fd80 	bl	8002104 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x8e>
	{
		Error_Handler();
 800060a:	f000 f987 	bl	800091c <Error_Handler>
	}
}
 800060e:	bf00      	nop
 8000610:	3750      	adds	r7, #80	; 0x50
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <MX_FDCAN1_Init>:
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_FDCAN1_Init+0x84>)
 800061e:	4a20      	ldr	r2, [pc, #128]	; (80006a0 <MX_FDCAN1_Init+0x88>)
 8000620:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_FDCAN1_Init+0x84>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 8000634:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000636:	2200      	movs	r2, #0
 8000638:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_FDCAN1_Init+0x84>)
 800063c:	2200      	movs	r2, #0
 800063e:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000642:	2200      	movs	r2, #0
 8000644:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 16;
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000648:	2210      	movs	r2, #16
 800064a:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_FDCAN1_Init+0x84>)
 800064e:	2201      	movs	r2, #1
 8000650:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 2;
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000654:	2202      	movs	r2, #2
 8000656:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 2;
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_FDCAN1_Init+0x84>)
 800065a:	2202      	movs	r2, #2
 800065c:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000660:	2201      	movs	r2, #1
 8000662:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 8000664:	4b0d      	ldr	r3, [pc, #52]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000666:	2201      	movs	r2, #1
 8000668:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan1.Init.DataTimeSeg1 = 1;
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_FDCAN1_Init+0x84>)
 800066c:	2201      	movs	r2, #1
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan1.Init.DataTimeSeg2 = 1;
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000672:	2201      	movs	r2, #1
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan1.Init.StdFiltersNbr = 0;
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan1.Init.ExtFiltersNbr = 0;
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <MX_FDCAN1_Init+0x84>)
 800067e:	2200      	movs	r2, #0
 8000680:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_FDCAN1_Init+0x84>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_FDCAN1_Init+0x84>)
 800068a:	f000 fcff 	bl	800108c <HAL_FDCAN_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_FDCAN1_Init+0x80>
	{
		Error_Handler();
 8000694:	f000 f942 	bl	800091c <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */

	/* USER CODE END FDCAN1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000084 	.word	0x20000084
 80006a0:	40006400 	.word	0x40006400

080006a4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_I2C1_Init+0x74>)
 80006aa:	4a1c      	ldr	r2, [pc, #112]	; (800071c <MX_I2C1_Init+0x78>)
 80006ac:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x30A0A7FB;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <MX_I2C1_Init+0x74>)
 80006b0:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <MX_I2C1_Init+0x7c>)
 80006b2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_I2C1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_I2C1_Init+0x74>)
 80006bc:	2201      	movs	r2, #1
 80006be:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_I2C1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_I2C1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_I2C1_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <MX_I2C1_Init+0x74>)
 80006e0:	f001 f81e 	bl	8001720 <HAL_I2C_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 80006ea:	f000 f917 	bl	800091c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ee:	2100      	movs	r1, #0
 80006f0:	4809      	ldr	r0, [pc, #36]	; (8000718 <MX_I2C1_Init+0x74>)
 80006f2:	f001 f8a4 	bl	800183e <HAL_I2CEx_ConfigAnalogFilter>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 80006fc:	f000 f90e 	bl	800091c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000700:	2100      	movs	r1, #0
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_I2C1_Init+0x74>)
 8000704:	f001 f8e6 	bl	80018d4 <HAL_I2CEx_ConfigDigitalFilter>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 800070e:	f000 f905 	bl	800091c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000e8 	.word	0x200000e8
 800071c:	40005400 	.word	0x40005400
 8000720:	30a0a7fb 	.word	0x30a0a7fb

08000724 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8000728:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 800072a:	4a22      	ldr	r2, [pc, #136]	; (80007b4 <MX_LPUART1_UART_Init+0x90>)
 800072c:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 800072e:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000766:	4812      	ldr	r0, [pc, #72]	; (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 8000768:	f002 f8d8 	bl	800291c <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_LPUART1_UART_Init+0x52>
	{
		Error_Handler();
 8000772:	f000 f8d3 	bl	800091c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 800077a:	f002 fe6f 	bl	800345c <HAL_UARTEx_SetTxFifoThreshold>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_LPUART1_UART_Init+0x64>
	{
		Error_Handler();
 8000784:	f000 f8ca 	bl	800091c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4809      	ldr	r0, [pc, #36]	; (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 800078c:	f002 fea4 	bl	80034d8 <HAL_UARTEx_SetRxFifoThreshold>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_LPUART1_UART_Init+0x76>
	{
		Error_Handler();
 8000796:	f000 f8c1 	bl	800091c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_LPUART1_UART_Init+0x8c>)
 800079c:	f002 fe25 	bl	80033ea <HAL_UARTEx_DisableFifoMode>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_LPUART1_UART_Init+0x86>
	{
		Error_Handler();
 80007a6:	f000 f8b9 	bl	800091c <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000134 	.word	0x20000134
 80007b4:	40008000 	.word	0x40008000

080007b8 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_UART4_Init+0x90>)
 80007be:	4a23      	ldr	r2, [pc, #140]	; (800084c <MX_UART4_Init+0x94>)
 80007c0:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_UART4_Init+0x90>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_UART4_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_UART4_Init+0x90>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_UART4_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_UART4_Init+0x90>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_UART4_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_UART4_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_UART4_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_UART4_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_UART4_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8000800:	4811      	ldr	r0, [pc, #68]	; (8000848 <MX_UART4_Init+0x90>)
 8000802:	f002 f88b 	bl	800291c <HAL_UART_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_UART4_Init+0x58>
	{
		Error_Handler();
 800080c:	f000 f886 	bl	800091c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_UART4_Init+0x90>)
 8000814:	f002 fe22 	bl	800345c <HAL_UARTEx_SetTxFifoThreshold>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_UART4_Init+0x6a>
	{
		Error_Handler();
 800081e:	f000 f87d 	bl	800091c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000822:	2100      	movs	r1, #0
 8000824:	4808      	ldr	r0, [pc, #32]	; (8000848 <MX_UART4_Init+0x90>)
 8000826:	f002 fe57 	bl	80034d8 <HAL_UARTEx_SetRxFifoThreshold>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_UART4_Init+0x7c>
	{
		Error_Handler();
 8000830:	f000 f874 	bl	800091c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_UART4_Init+0x90>)
 8000836:	f002 fdd8 	bl	80033ea <HAL_UARTEx_DisableFifoMode>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_UART4_Init+0x8c>
	{
		Error_Handler();
 8000840:	f000 f86c 	bl	800091c <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200001c4 	.word	0x200001c4
 800084c:	40004c00 	.word	0x40004c00

08000850 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <MX_GPIO_Init+0xc4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a2a      	ldr	r2, [pc, #168]	; (8000914 <MX_GPIO_Init+0xc4>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b28      	ldr	r3, [pc, #160]	; (8000914 <MX_GPIO_Init+0xc4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800087e:	4b25      	ldr	r3, [pc, #148]	; (8000914 <MX_GPIO_Init+0xc4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a24      	ldr	r2, [pc, #144]	; (8000914 <MX_GPIO_Init+0xc4>)
 8000884:	f043 0320 	orr.w	r3, r3, #32
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_GPIO_Init+0xc4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0320 	and.w	r3, r3, #32
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_GPIO_Init+0xc4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <MX_GPIO_Init+0xc4>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_GPIO_Init+0xc4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_GPIO_Init+0xc4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a18      	ldr	r2, [pc, #96]	; (8000914 <MX_GPIO_Init+0xc4>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_GPIO_Init+0xc4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2120      	movs	r1, #32
 80008ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ce:	f000 ff0f 	bl	80016f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	480b      	ldr	r0, [pc, #44]	; (8000918 <MX_GPIO_Init+0xc8>)
 80008ea:	f000 fd7f 	bl	80013ec <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80008ee:	2320      	movs	r3, #32
 80008f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000908:	f000 fd70 	bl	80013ec <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021000 	.word	0x40021000
 8000918:	48000800 	.word	0x48000800

0800091c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x44>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_MspInit+0x44>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6613      	str	r3, [r2, #96]	; 0x60
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_MspInit+0x44>)
 800093c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_MspInit+0x44>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_MspInit+0x44>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6593      	str	r3, [r2, #88]	; 0x58
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_MspInit+0x44>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800095e:	f001 f8a9 	bl	8001ab4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b09a      	sub	sp, #104	; 0x68
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	2244      	movs	r2, #68	; 0x44
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f003 f811 	bl	80039b8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a20      	ldr	r2, [pc, #128]	; (8000a1c <HAL_FDCAN_MspInit+0xac>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d139      	bne.n	8000a14 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80009a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80009a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009aa:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fdc3 	bl	800253c <HAL_RCCEx_PeriphCLKConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80009bc:	f7ff ffae 	bl	800091c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <HAL_FDCAN_MspInit+0xb0>)
 80009c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c4:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <HAL_FDCAN_MspInit+0xb0>)
 80009c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ca:	6593      	str	r3, [r2, #88]	; 0x58
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <HAL_FDCAN_MspInit+0xb0>)
 80009ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_FDCAN_MspInit+0xb0>)
 80009da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009dc:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <HAL_FDCAN_MspInit+0xb0>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_FDCAN_MspInit+0xb0>)
 80009e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009f4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a02:	2309      	movs	r3, #9
 8000a04:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f000 fcec 	bl	80013ec <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000a14:	bf00      	nop
 8000a16:	3768      	adds	r7, #104	; 0x68
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40006400 	.word	0x40006400
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b09a      	sub	sp, #104	; 0x68
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	2244      	movs	r2, #68	; 0x44
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f002 ffb7 	bl	80039b8 <memset>
  if(hi2c->Instance==I2C1)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <HAL_I2C_MspInit+0xa8>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d136      	bne.n	8000ac2 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a54:	2340      	movs	r3, #64	; 0x40
 8000a56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 fd6b 	bl	800253c <HAL_RCCEx_PeriphCLKConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a6c:	f7ff ff56 	bl	800091c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_I2C_MspInit+0xac>)
 8000a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a74:	4a16      	ldr	r2, [pc, #88]	; (8000ad0 <HAL_I2C_MspInit+0xac>)
 8000a76:	f043 0302 	orr.w	r3, r3, #2
 8000a7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <HAL_I2C_MspInit+0xac>)
 8000a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a80:	f003 0302 	and.w	r3, r3, #2
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a8c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8e:	2312      	movs	r3, #18
 8000a90:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <HAL_I2C_MspInit+0xb0>)
 8000aa6:	f000 fca1 	bl	80013ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <HAL_I2C_MspInit+0xac>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <HAL_I2C_MspInit+0xac>)
 8000ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_I2C_MspInit+0xac>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3768      	adds	r7, #104	; 0x68
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40005400 	.word	0x40005400
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	48000400 	.word	0x48000400

08000ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b09c      	sub	sp, #112	; 0x70
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af0:	f107 0318 	add.w	r3, r7, #24
 8000af4:	2244      	movs	r2, #68	; 0x44
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f002 ff5d 	bl	80039b8 <memset>
  if(huart->Instance==LPUART1)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a3d      	ldr	r2, [pc, #244]	; (8000bf8 <HAL_UART_MspInit+0x120>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d137      	bne.n	8000b78 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b10:	f107 0318 	add.w	r3, r7, #24
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fd11 	bl	800253c <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b20:	f7ff fefc 	bl	800091c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b24:	4b35      	ldr	r3, [pc, #212]	; (8000bfc <HAL_UART_MspInit+0x124>)
 8000b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b28:	4a34      	ldr	r2, [pc, #208]	; (8000bfc <HAL_UART_MspInit+0x124>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b30:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <HAL_UART_MspInit+0x124>)
 8000b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <HAL_UART_MspInit+0x124>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b40:	4a2e      	ldr	r2, [pc, #184]	; (8000bfc <HAL_UART_MspInit+0x124>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b48:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <HAL_UART_MspInit+0x124>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b54:	230c      	movs	r3, #12
 8000b56:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b64:	230c      	movs	r3, #12
 8000b66:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b72:	f000 fc3b 	bl	80013ec <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000b76:	e03b      	b.n	8000bf0 <HAL_UART_MspInit+0x118>
  else if(huart->Instance==UART4)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a20      	ldr	r2, [pc, #128]	; (8000c00 <HAL_UART_MspInit+0x128>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d136      	bne.n	8000bf0 <HAL_UART_MspInit+0x118>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000b82:	2308      	movs	r3, #8
 8000b84:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b8a:	f107 0318 	add.w	r3, r7, #24
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 fcd4 	bl	800253c <HAL_RCCEx_PeriphCLKConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000b9a:	f7ff febf 	bl	800091c <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <HAL_UART_MspInit+0x124>)
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba2:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <HAL_UART_MspInit+0x124>)
 8000ba4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_UART_MspInit+0x124>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_UART_MspInit+0x124>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <HAL_UART_MspInit+0x124>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_UART_MspInit+0x124>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX_RASP_Pin|RX_RASP_Pin;
 8000bce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000be0:	2305      	movs	r3, #5
 8000be2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000be8:	4619      	mov	r1, r3
 8000bea:	4806      	ldr	r0, [pc, #24]	; (8000c04 <HAL_UART_MspInit+0x12c>)
 8000bec:	f000 fbfe 	bl	80013ec <HAL_GPIO_Init>
}
 8000bf0:	bf00      	nop
 8000bf2:	3770      	adds	r7, #112	; 0x70
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40008000 	.word	0x40008000
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40004c00 	.word	0x40004c00
 8000c04:	48000800 	.word	0x48000800

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c54:	f000 f918 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	e00a      	b.n	8000c84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c6e:	f3af 8000 	nop.w
 8000c72:	4601      	mov	r1, r0
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	60ba      	str	r2, [r7, #8]
 8000c7a:	b2ca      	uxtb	r2, r1
 8000c7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	dbf0      	blt.n	8000c6e <_read+0x12>
  }

  return len;
 8000c8c:	687b      	ldr	r3, [r7, #4]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
 8000cb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cbe:	605a      	str	r2, [r3, #4]
  return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <_isatty>:

int _isatty(int file)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d08:	4a14      	ldr	r2, [pc, #80]	; (8000d5c <_sbrk+0x5c>)
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <_sbrk+0x60>)
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <_sbrk+0x64>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <_sbrk+0x68>)
 8000d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d207      	bcs.n	8000d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d30:	f002 fe90 	bl	8003a54 <__errno>
 8000d34:	4603      	mov	r3, r0
 8000d36:	220c      	movs	r2, #12
 8000d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	e009      	b.n	8000d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d46:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <_sbrk+0x64>)
 8000d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d52:	68fb      	ldr	r3, [r7, #12]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20008000 	.word	0x20008000
 8000d60:	00000400 	.word	0x00000400
 8000d64:	20000254 	.word	0x20000254
 8000d68:	200003a8 	.word	0x200003a8

08000d6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <SystemInit+0x20>)
 8000d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <SystemInit+0x20>)
 8000d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d92:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d96:	490e      	ldr	r1, [pc, #56]	; (8000dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d98:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <LoopForever+0xe>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dac:	4c0b      	ldr	r4, [pc, #44]	; (8000ddc <LoopForever+0x16>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dba:	f7ff ffd7 	bl	8000d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f002 fe4f 	bl	8003a60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dc2:	f7ff fbc7 	bl	8000554 <main>

08000dc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc6:	e7fe      	b.n	8000dc6 <LoopForever>
  ldr   r0, =_estack
 8000dc8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dd4:	08003f98 	.word	0x08003f98
  ldr r2, =_sbss
 8000dd8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ddc:	200003a8 	.word	0x200003a8

08000de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC1_2_IRQHandler>

08000de2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f91b 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 f80e 	bl	8000e14 <HAL_InitTick>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	71fb      	strb	r3, [r7, #7]
 8000e02:	e001      	b.n	8000e08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e04:	f7ff fd90 	bl	8000928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e08:	79fb      	ldrb	r3, [r7, #7]

}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_InitTick+0x68>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d022      	beq.n	8000e6e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_InitTick+0x6c>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <HAL_InitTick+0x68>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e34:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f918 	bl	8001072 <HAL_SYSTICK_Config>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d10f      	bne.n	8000e68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b0f      	cmp	r3, #15
 8000e4c:	d809      	bhi.n	8000e62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	f04f 30ff 	mov.w	r0, #4294967295
 8000e56:	f000 f8f2 	bl	800103e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_InitTick+0x70>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	e007      	b.n	8000e72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	e004      	b.n	8000e72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
 8000e6c:	e001      	b.n	8000e72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000004 	.word	0x20000004

08000e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_IncTick+0x1c>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a03      	ldr	r2, [pc, #12]	; (8000ea4 <HAL_IncTick+0x1c>)
 8000e98:	6013      	str	r3, [r2, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	20000258 	.word	0x20000258
 8000ea8:	20000008 	.word	0x20000008

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000258 	.word	0x20000258

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	; (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff4:	d301      	bcc.n	8000ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00f      	b.n	800101a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <SysTick_Config+0x40>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001002:	210f      	movs	r1, #15
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f7ff ff8e 	bl	8000f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <SysTick_Config+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <SysTick_Config+0x40>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff47 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800104c:	f7ff ff5e 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 8001050:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	f7ff ff90 	bl	8000f7c <NVIC_EncodePriority>
 800105c:	4602      	mov	r2, r0
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff5f 	bl	8000f28 <__NVIC_SetPriority>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffb2 	bl	8000fe4 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e147      	b.n	800132e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d106      	bne.n	80010b8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff fc5c 	bl	8000970 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	699a      	ldr	r2, [r3, #24]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0210 	bic.w	r2, r2, #16
 80010c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c8:	f7ff fef0 	bl	8000eac <HAL_GetTick>
 80010cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010ce:	e012      	b.n	80010f6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010d0:	f7ff feec 	bl	8000eac <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b0a      	cmp	r3, #10
 80010dc:	d90b      	bls.n	80010f6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	f043 0201 	orr.w	r2, r3, #1
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2203      	movs	r2, #3
 80010ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e11b      	b.n	800132e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b08      	cmp	r3, #8
 8001102:	d0e5      	beq.n	80010d0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	699a      	ldr	r2, [r3, #24]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0201 	orr.w	r2, r2, #1
 8001112:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001114:	f7ff feca 	bl	8000eac <HAL_GetTick>
 8001118:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800111a:	e012      	b.n	8001142 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800111c:	f7ff fec6 	bl	8000eac <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b0a      	cmp	r3, #10
 8001128:	d90b      	bls.n	8001142 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112e:	f043 0201 	orr.w	r2, r3, #1
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2203      	movs	r2, #3
 800113a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e0f5      	b.n	800132e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0e5      	beq.n	800111c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	699a      	ldr	r2, [r3, #24]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0202 	orr.w	r2, r2, #2
 800115e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a74      	ldr	r2, [pc, #464]	; (8001338 <HAL_FDCAN_Init+0x2ac>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d103      	bne.n	8001172 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800116a:	4a74      	ldr	r2, [pc, #464]	; (800133c <HAL_FDCAN_Init+0x2b0>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	7c1b      	ldrb	r3, [r3, #16]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d108      	bne.n	800118c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	699a      	ldr	r2, [r3, #24]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001188:	619a      	str	r2, [r3, #24]
 800118a:	e007      	b.n	800119c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	699a      	ldr	r2, [r3, #24]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800119a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7c5b      	ldrb	r3, [r3, #17]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d108      	bne.n	80011b6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	699a      	ldr	r2, [r3, #24]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011b2:	619a      	str	r2, [r3, #24]
 80011b4:	e007      	b.n	80011c6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	699a      	ldr	r2, [r3, #24]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011c4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7c9b      	ldrb	r3, [r3, #18]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d108      	bne.n	80011e0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	699a      	ldr	r2, [r3, #24]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011dc:	619a      	str	r2, [r3, #24]
 80011de:	e007      	b.n	80011f0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	699a      	ldr	r2, [r3, #24]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011ee:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	699a      	ldr	r2, [r3, #24]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001214:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0210 	bic.w	r2, r2, #16
 8001224:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d108      	bne.n	8001240 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	699a      	ldr	r2, [r3, #24]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f042 0204 	orr.w	r2, r2, #4
 800123c:	619a      	str	r2, [r3, #24]
 800123e:	e02c      	b.n	800129a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d028      	beq.n	800129a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d01c      	beq.n	800128a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	699a      	ldr	r2, [r3, #24]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800125e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	691a      	ldr	r2, [r3, #16]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0210 	orr.w	r2, r2, #16
 800126e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b03      	cmp	r3, #3
 8001276:	d110      	bne.n	800129a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	699a      	ldr	r2, [r3, #24]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 0220 	orr.w	r2, r2, #32
 8001286:	619a      	str	r2, [r3, #24]
 8001288:	e007      	b.n	800129a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	699a      	ldr	r2, [r3, #24]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f042 0220 	orr.w	r2, r2, #32
 8001298:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	3b01      	subs	r3, #1
 80012a0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012aa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012b2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012c2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012c4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80012ce:	d115      	bne.n	80012fc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	3b01      	subs	r3, #1
 80012dc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012de:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	3b01      	subs	r3, #1
 80012e6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012e8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f0:	3b01      	subs	r3, #1
 80012f2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012f8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012fa:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f814 	bl	8001340 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40006400 	.word	0x40006400
 800133c:	40006500 	.word	0x40006500

08001340 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001348:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800134a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800135a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001362:	041a      	lsls	r2, r3, #16
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001380:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001388:	061a      	lsls	r2, r3, #24
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	e005      	b.n	80013ce <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3304      	adds	r3, #4
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d3f3      	bcc.n	80013c2 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80013da:	bf00      	nop
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	4000a400 	.word	0x4000a400

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013fa:	e15a      	b.n	80016b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2101      	movs	r1, #1
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	4013      	ands	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 814c 	beq.w	80016ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b01      	cmp	r3, #1
 800141e:	d005      	beq.n	800142c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001428:	2b02      	cmp	r3, #2
 800142a:	d130      	bne.n	800148e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001462:	2201      	movs	r2, #1
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	091b      	lsrs	r3, r3, #4
 8001478:	f003 0201 	and.w	r2, r3, #1
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b03      	cmp	r3, #3
 8001498:	d017      	beq.n	80014ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d123      	bne.n	800151e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	220f      	movs	r2, #15
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	08da      	lsrs	r2, r3, #3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3208      	adds	r2, #8
 8001518:	6939      	ldr	r1, [r7, #16]
 800151a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2203      	movs	r2, #3
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0203 	and.w	r2, r3, #3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 80a6 	beq.w	80016ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001560:	4b5b      	ldr	r3, [pc, #364]	; (80016d0 <HAL_GPIO_Init+0x2e4>)
 8001562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001564:	4a5a      	ldr	r2, [pc, #360]	; (80016d0 <HAL_GPIO_Init+0x2e4>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6613      	str	r3, [r2, #96]	; 0x60
 800156c:	4b58      	ldr	r3, [pc, #352]	; (80016d0 <HAL_GPIO_Init+0x2e4>)
 800156e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001578:	4a56      	ldr	r2, [pc, #344]	; (80016d4 <HAL_GPIO_Init+0x2e8>)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	089b      	lsrs	r3, r3, #2
 800157e:	3302      	adds	r3, #2
 8001580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	220f      	movs	r2, #15
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015a2:	d01f      	beq.n	80015e4 <HAL_GPIO_Init+0x1f8>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a4c      	ldr	r2, [pc, #304]	; (80016d8 <HAL_GPIO_Init+0x2ec>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d019      	beq.n	80015e0 <HAL_GPIO_Init+0x1f4>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a4b      	ldr	r2, [pc, #300]	; (80016dc <HAL_GPIO_Init+0x2f0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d013      	beq.n	80015dc <HAL_GPIO_Init+0x1f0>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a4a      	ldr	r2, [pc, #296]	; (80016e0 <HAL_GPIO_Init+0x2f4>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d00d      	beq.n	80015d8 <HAL_GPIO_Init+0x1ec>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a49      	ldr	r2, [pc, #292]	; (80016e4 <HAL_GPIO_Init+0x2f8>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d007      	beq.n	80015d4 <HAL_GPIO_Init+0x1e8>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a48      	ldr	r2, [pc, #288]	; (80016e8 <HAL_GPIO_Init+0x2fc>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d101      	bne.n	80015d0 <HAL_GPIO_Init+0x1e4>
 80015cc:	2305      	movs	r3, #5
 80015ce:	e00a      	b.n	80015e6 <HAL_GPIO_Init+0x1fa>
 80015d0:	2306      	movs	r3, #6
 80015d2:	e008      	b.n	80015e6 <HAL_GPIO_Init+0x1fa>
 80015d4:	2304      	movs	r3, #4
 80015d6:	e006      	b.n	80015e6 <HAL_GPIO_Init+0x1fa>
 80015d8:	2303      	movs	r3, #3
 80015da:	e004      	b.n	80015e6 <HAL_GPIO_Init+0x1fa>
 80015dc:	2302      	movs	r3, #2
 80015de:	e002      	b.n	80015e6 <HAL_GPIO_Init+0x1fa>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <HAL_GPIO_Init+0x1fa>
 80015e4:	2300      	movs	r3, #0
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	f002 0203 	and.w	r2, r2, #3
 80015ec:	0092      	lsls	r2, r2, #2
 80015ee:	4093      	lsls	r3, r2
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f6:	4937      	ldr	r1, [pc, #220]	; (80016d4 <HAL_GPIO_Init+0x2e8>)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001604:	4b39      	ldr	r3, [pc, #228]	; (80016ec <HAL_GPIO_Init+0x300>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	43db      	mvns	r3, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001628:	4a30      	ldr	r2, [pc, #192]	; (80016ec <HAL_GPIO_Init+0x300>)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800162e:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <HAL_GPIO_Init+0x300>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4313      	orrs	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001652:	4a26      	ldr	r2, [pc, #152]	; (80016ec <HAL_GPIO_Init+0x300>)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <HAL_GPIO_Init+0x300>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	43db      	mvns	r3, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800167c:	4a1b      	ldr	r2, [pc, #108]	; (80016ec <HAL_GPIO_Init+0x300>)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <HAL_GPIO_Init+0x300>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016a6:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_GPIO_Init+0x300>)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3301      	adds	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f47f ae9d 	bne.w	80013fc <HAL_GPIO_Init+0x10>
  }
}
 80016c2:	bf00      	nop
 80016c4:	bf00      	nop
 80016c6:	371c      	adds	r7, #28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010000 	.word	0x40010000
 80016d8:	48000400 	.word	0x48000400
 80016dc:	48000800 	.word	0x48000800
 80016e0:	48000c00 	.word	0x48000c00
 80016e4:	48001000 	.word	0x48001000
 80016e8:	48001400 	.word	0x48001400
 80016ec:	40010400 	.word	0x40010400

080016f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
 80016fc:	4613      	mov	r3, r2
 80016fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001700:	787b      	ldrb	r3, [r7, #1]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800170c:	e002      	b.n	8001714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800170e:	887a      	ldrh	r2, [r7, #2]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e081      	b.n	8001836 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d106      	bne.n	800174c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff f96c 	bl	8000a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2224      	movs	r2, #36	; 0x24
 8001750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0201 	bic.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001770:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001780:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d107      	bne.n	800179a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	e006      	b.n	80017a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d104      	bne.n	80017ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69d9      	ldr	r1, [r3, #28]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1a      	ldr	r2, [r3, #32]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0201 	orr.w	r2, r2, #1
 8001816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2220      	movs	r2, #32
 8001822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b20      	cmp	r3, #32
 8001852:	d138      	bne.n	80018c6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800185e:	2302      	movs	r3, #2
 8001860:	e032      	b.n	80018c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2224      	movs	r2, #36	; 0x24
 800186e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0201 	bic.w	r2, r2, #1
 8001880:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001890:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0201 	orr.w	r2, r2, #1
 80018b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2220      	movs	r2, #32
 80018b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018c6:	2302      	movs	r3, #2
  }
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b20      	cmp	r3, #32
 80018e8:	d139      	bne.n	800195e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e033      	b.n	8001960 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2224      	movs	r2, #36	; 0x24
 8001904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0201 	bic.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001926:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f042 0201 	orr.w	r2, r2, #1
 8001948:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2220      	movs	r2, #32
 800194e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	e000      	b.n	8001960 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800195e:	2302      	movs	r3, #2
  }
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d141      	bne.n	80019fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800197a:	4b4b      	ldr	r3, [pc, #300]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001986:	d131      	bne.n	80019ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001988:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800198e:	4a46      	ldr	r2, [pc, #280]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001994:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001998:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019a0:	4a41      	ldr	r2, [pc, #260]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019a8:	4b40      	ldr	r3, [pc, #256]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2232      	movs	r2, #50	; 0x32
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	4a3f      	ldr	r2, [pc, #252]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019b4:	fba2 2303 	umull	r2, r3, r2, r3
 80019b8:	0c9b      	lsrs	r3, r3, #18
 80019ba:	3301      	adds	r3, #1
 80019bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019be:	e002      	b.n	80019c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019c6:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d2:	d102      	bne.n	80019da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f2      	bne.n	80019c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019da:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e6:	d158      	bne.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e057      	b.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019ec:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019f2:	4a2d      	ldr	r2, [pc, #180]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019fc:	e04d      	b.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a04:	d141      	bne.n	8001a8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a06:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a12:	d131      	bne.n	8001a78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a14:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a1a:	4a23      	ldr	r2, [pc, #140]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a24:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a2c:	4a1e      	ldr	r2, [pc, #120]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2232      	movs	r2, #50	; 0x32
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	4a1c      	ldr	r2, [pc, #112]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	0c9b      	lsrs	r3, r3, #18
 8001a46:	3301      	adds	r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a4a:	e002      	b.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5e:	d102      	bne.n	8001a66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f2      	bne.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a72:	d112      	bne.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e011      	b.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a88:	e007      	b.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a98:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	40007000 	.word	0x40007000
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	431bde83 	.word	0x431bde83

08001ab4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001abe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac2:	6093      	str	r3, [r2, #8]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40007000 	.word	0x40007000

08001ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e306      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d075      	beq.n	8001bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001af2:	4b97      	ldr	r3, [pc, #604]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001afc:	4b94      	ldr	r3, [pc, #592]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b0c      	cmp	r3, #12
 8001b0a:	d102      	bne.n	8001b12 <HAL_RCC_OscConfig+0x3e>
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d002      	beq.n	8001b18 <HAL_RCC_OscConfig+0x44>
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d10b      	bne.n	8001b30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b18:	4b8d      	ldr	r3, [pc, #564]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d05b      	beq.n	8001bdc <HAL_RCC_OscConfig+0x108>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d157      	bne.n	8001bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e2e1      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b38:	d106      	bne.n	8001b48 <HAL_RCC_OscConfig+0x74>
 8001b3a:	4b85      	ldr	r3, [pc, #532]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a84      	ldr	r2, [pc, #528]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e01d      	b.n	8001b84 <HAL_RCC_OscConfig+0xb0>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x98>
 8001b52:	4b7f      	ldr	r3, [pc, #508]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a7e      	ldr	r2, [pc, #504]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	4b7c      	ldr	r3, [pc, #496]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a7b      	ldr	r2, [pc, #492]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0xb0>
 8001b6c:	4b78      	ldr	r3, [pc, #480]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a77      	ldr	r2, [pc, #476]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b75      	ldr	r3, [pc, #468]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a74      	ldr	r2, [pc, #464]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d013      	beq.n	8001bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f98e 	bl	8000eac <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7ff f98a 	bl	8000eac <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	; 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e2a6      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba6:	4b6a      	ldr	r3, [pc, #424]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0xc0>
 8001bb2:	e014      	b.n	8001bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f97a 	bl	8000eac <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff f976 	bl	8000eac <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e292      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bce:	4b60      	ldr	r3, [pc, #384]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0xe8>
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d075      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bea:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bf4:	4b56      	ldr	r3, [pc, #344]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	2b0c      	cmp	r3, #12
 8001c02:	d102      	bne.n	8001c0a <HAL_RCC_OscConfig+0x136>
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d002      	beq.n	8001c10 <HAL_RCC_OscConfig+0x13c>
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d11f      	bne.n	8001c50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c10:	4b4f      	ldr	r3, [pc, #316]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_OscConfig+0x154>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e265      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b49      	ldr	r3, [pc, #292]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	061b      	lsls	r3, r3, #24
 8001c36:	4946      	ldr	r1, [pc, #280]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c3c:	4b45      	ldr	r3, [pc, #276]	; (8001d54 <HAL_RCC_OscConfig+0x280>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f8e7 	bl	8000e14 <HAL_InitTick>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d043      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e251      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d023      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c58:	4b3d      	ldr	r3, [pc, #244]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a3c      	ldr	r2, [pc, #240]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff f922 	bl	8000eac <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6c:	f7ff f91e 	bl	8000eac <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e23a      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c7e:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8a:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	061b      	lsls	r3, r3, #24
 8001c98:	492d      	ldr	r1, [pc, #180]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
 8001c9e:	e01a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca0:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a2a      	ldr	r2, [pc, #168]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001ca6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7ff f8fe 	bl	8000eac <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb4:	f7ff f8fa 	bl	8000eac <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e216      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc6:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x1e0>
 8001cd2:	e000      	b.n	8001cd6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d041      	beq.n	8001d66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d01c      	beq.n	8001d24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf0:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f8d7 	bl	8000eac <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d02:	f7ff f8d3 	bl	8000eac <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e1ef      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0ef      	beq.n	8001d02 <HAL_RCC_OscConfig+0x22e>
 8001d22:	e020      	b.n	8001d66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d2a:	4a09      	ldr	r2, [pc, #36]	; (8001d50 <HAL_RCC_OscConfig+0x27c>)
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff f8ba 	bl	8000eac <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d3a:	e00d      	b.n	8001d58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3c:	f7ff f8b6 	bl	8000eac <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d906      	bls.n	8001d58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e1d2      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d58:	4b8c      	ldr	r3, [pc, #560]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1ea      	bne.n	8001d3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80a6 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d74:	2300      	movs	r3, #0
 8001d76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d78:	4b84      	ldr	r3, [pc, #528]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_OscConfig+0x2b4>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <HAL_RCC_OscConfig+0x2b6>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00d      	beq.n	8001daa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	4b7f      	ldr	r3, [pc, #508]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	4a7e      	ldr	r2, [pc, #504]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d98:	6593      	str	r3, [r2, #88]	; 0x58
 8001d9a:	4b7c      	ldr	r3, [pc, #496]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001da6:	2301      	movs	r3, #1
 8001da8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001daa:	4b79      	ldr	r3, [pc, #484]	; (8001f90 <HAL_RCC_OscConfig+0x4bc>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d118      	bne.n	8001de8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001db6:	4b76      	ldr	r3, [pc, #472]	; (8001f90 <HAL_RCC_OscConfig+0x4bc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a75      	ldr	r2, [pc, #468]	; (8001f90 <HAL_RCC_OscConfig+0x4bc>)
 8001dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff f873 	bl	8000eac <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dca:	f7ff f86f 	bl	8000eac <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e18b      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ddc:	4b6c      	ldr	r3, [pc, #432]	; (8001f90 <HAL_RCC_OscConfig+0x4bc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d108      	bne.n	8001e02 <HAL_RCC_OscConfig+0x32e>
 8001df0:	4b66      	ldr	r3, [pc, #408]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df6:	4a65      	ldr	r2, [pc, #404]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e00:	e024      	b.n	8001e4c <HAL_RCC_OscConfig+0x378>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b05      	cmp	r3, #5
 8001e08:	d110      	bne.n	8001e2c <HAL_RCC_OscConfig+0x358>
 8001e0a:	4b60      	ldr	r3, [pc, #384]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e10:	4a5e      	ldr	r2, [pc, #376]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e1a:	4b5c      	ldr	r3, [pc, #368]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e20:	4a5a      	ldr	r2, [pc, #360]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e2a:	e00f      	b.n	8001e4c <HAL_RCC_OscConfig+0x378>
 8001e2c:	4b57      	ldr	r3, [pc, #348]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	4a56      	ldr	r2, [pc, #344]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e3c:	4b53      	ldr	r3, [pc, #332]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	4a52      	ldr	r2, [pc, #328]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d016      	beq.n	8001e82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7ff f82a 	bl	8000eac <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5c:	f7ff f826 	bl	8000eac <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e140      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e72:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ed      	beq.n	8001e5c <HAL_RCC_OscConfig+0x388>
 8001e80:	e015      	b.n	8001eae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7ff f813 	bl	8000eac <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7ff f80f 	bl	8000eac <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e129      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea0:	4b3a      	ldr	r3, [pc, #232]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ed      	bne.n	8001e8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eae:	7ffb      	ldrb	r3, [r7, #31]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b35      	ldr	r3, [pc, #212]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	4a34      	ldr	r2, [pc, #208]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d03c      	beq.n	8001f46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01c      	beq.n	8001f0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eda:	4a2c      	ldr	r2, [pc, #176]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7fe ffe2 	bl	8000eac <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eec:	f7fe ffde 	bl	8000eac <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e0fa      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001efe:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ef      	beq.n	8001eec <HAL_RCC_OscConfig+0x418>
 8001f0c:	e01b      	b.n	8001f46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f14:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1e:	f7fe ffc5 	bl	8000eac <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f26:	f7fe ffc1 	bl	8000eac <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0dd      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ef      	bne.n	8001f26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80d1 	beq.w	80020f2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b0c      	cmp	r3, #12
 8001f5a:	f000 808b 	beq.w	8002074 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d15e      	bne.n	8002024 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <HAL_RCC_OscConfig+0x4b8>)
 8001f6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7fe ff9b 	bl	8000eac <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f78:	e00c      	b.n	8001f94 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7a:	f7fe ff97 	bl	8000eac <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d905      	bls.n	8001f94 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e0b3      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f94:	4b59      	ldr	r3, [pc, #356]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ec      	bne.n	8001f7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa0:	4b56      	ldr	r3, [pc, #344]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	4b56      	ldr	r3, [pc, #344]	; (8002100 <HAL_RCC_OscConfig+0x62c>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6a11      	ldr	r1, [r2, #32]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fb0:	3a01      	subs	r2, #1
 8001fb2:	0112      	lsls	r2, r2, #4
 8001fb4:	4311      	orrs	r1, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001fba:	0212      	lsls	r2, r2, #8
 8001fbc:	4311      	orrs	r1, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fc2:	0852      	lsrs	r2, r2, #1
 8001fc4:	3a01      	subs	r2, #1
 8001fc6:	0552      	lsls	r2, r2, #21
 8001fc8:	4311      	orrs	r1, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fce:	0852      	lsrs	r2, r2, #1
 8001fd0:	3a01      	subs	r2, #1
 8001fd2:	0652      	lsls	r2, r2, #25
 8001fd4:	4311      	orrs	r1, r2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fda:	06d2      	lsls	r2, r2, #27
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	4947      	ldr	r1, [pc, #284]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe4:	4b45      	ldr	r3, [pc, #276]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a44      	ldr	r2, [pc, #272]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 8001fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ff0:	4b42      	ldr	r3, [pc, #264]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a41      	ldr	r2, [pc, #260]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 8001ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7fe ff56 	bl	8000eac <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002004:	f7fe ff52 	bl	8000eac <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e06e      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002016:	4b39      	ldr	r3, [pc, #228]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x530>
 8002022:	e066      	b.n	80020f2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002024:	4b35      	ldr	r3, [pc, #212]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a34      	ldr	r2, [pc, #208]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 800202a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800202e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002030:	4b32      	ldr	r3, [pc, #200]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4a31      	ldr	r2, [pc, #196]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 8002036:	f023 0303 	bic.w	r3, r3, #3
 800203a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800203c:	4b2f      	ldr	r3, [pc, #188]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4a2e      	ldr	r2, [pc, #184]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 8002042:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7fe ff2e 	bl	8000eac <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7fe ff2a 	bl	8000eac <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e046      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002066:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x580>
 8002072:	e03e      	b.n	80020f2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e039      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002080:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 0203 	and.w	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	429a      	cmp	r2, r3
 8002092:	d12c      	bne.n	80020ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	3b01      	subs	r3, #1
 80020a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d123      	bne.n	80020ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d11b      	bne.n	80020ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d113      	bne.n	80020ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	3b01      	subs	r3, #1
 80020d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d109      	bne.n	80020ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	3b01      	subs	r3, #1
 80020e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3720      	adds	r7, #32
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	019f800c 	.word	0x019f800c

08002104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e11e      	b.n	800235a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b91      	ldr	r3, [pc, #580]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d910      	bls.n	800214c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b8e      	ldr	r3, [pc, #568]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 020f 	bic.w	r2, r3, #15
 8002132:	498c      	ldr	r1, [pc, #560]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b8a      	ldr	r3, [pc, #552]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e106      	b.n	800235a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d073      	beq.n	8002240 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b03      	cmp	r3, #3
 800215e:	d129      	bne.n	80021b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002160:	4b81      	ldr	r3, [pc, #516]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0f4      	b.n	800235a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002170:	f000 f99e 	bl	80024b0 <RCC_GetSysClockFreqFromPLLSource>
 8002174:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4a7c      	ldr	r2, [pc, #496]	; (800236c <HAL_RCC_ClockConfig+0x268>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d93f      	bls.n	80021fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800217e:	4b7a      	ldr	r3, [pc, #488]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d009      	beq.n	800219e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002192:	2b00      	cmp	r3, #0
 8002194:	d033      	beq.n	80021fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800219a:	2b00      	cmp	r3, #0
 800219c:	d12f      	bne.n	80021fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800219e:	4b72      	ldr	r3, [pc, #456]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021a6:	4a70      	ldr	r2, [pc, #448]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 80021a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	e024      	b.n	80021fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021bc:	4b6a      	ldr	r3, [pc, #424]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d109      	bne.n	80021dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0c6      	b.n	800235a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021cc:	4b66      	ldr	r3, [pc, #408]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0be      	b.n	800235a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80021dc:	f000 f8ce 	bl	800237c <HAL_RCC_GetSysClockFreq>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4a61      	ldr	r2, [pc, #388]	; (800236c <HAL_RCC_ClockConfig+0x268>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d909      	bls.n	80021fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021ea:	4b5f      	ldr	r3, [pc, #380]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021f2:	4a5d      	ldr	r2, [pc, #372]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 80021f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021fe:	4b5a      	ldr	r3, [pc, #360]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f023 0203 	bic.w	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4957      	ldr	r1, [pc, #348]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 800220c:	4313      	orrs	r3, r2
 800220e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002210:	f7fe fe4c 	bl	8000eac <HAL_GetTick>
 8002214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	e00a      	b.n	800222e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002218:	f7fe fe48 	bl	8000eac <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e095      	b.n	800235a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	4b4e      	ldr	r3, [pc, #312]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 020c 	and.w	r2, r3, #12
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	429a      	cmp	r2, r3
 800223e:	d1eb      	bne.n	8002218 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d023      	beq.n	8002294 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002258:	4b43      	ldr	r3, [pc, #268]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a42      	ldr	r2, [pc, #264]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 800225e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002262:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b00      	cmp	r3, #0
 800226e:	d007      	beq.n	8002280 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002270:	4b3d      	ldr	r3, [pc, #244]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002278:	4a3b      	ldr	r2, [pc, #236]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 800227a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800227e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002280:	4b39      	ldr	r3, [pc, #228]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	4936      	ldr	r1, [pc, #216]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 800228e:	4313      	orrs	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
 8002292:	e008      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b80      	cmp	r3, #128	; 0x80
 8002298:	d105      	bne.n	80022a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800229a:	4b33      	ldr	r3, [pc, #204]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	4a32      	ldr	r2, [pc, #200]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 80022a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a6:	4b2f      	ldr	r3, [pc, #188]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d21d      	bcs.n	80022f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b4:	4b2b      	ldr	r3, [pc, #172]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f023 020f 	bic.w	r2, r3, #15
 80022bc:	4929      	ldr	r1, [pc, #164]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022c4:	f7fe fdf2 	bl	8000eac <HAL_GetTick>
 80022c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022cc:	f7fe fdee 	bl	8000eac <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e03b      	b.n	800235a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d1ed      	bne.n	80022cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022fc:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4917      	ldr	r1, [pc, #92]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d009      	beq.n	800232e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	490f      	ldr	r1, [pc, #60]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 800232a:	4313      	orrs	r3, r2
 800232c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800232e:	f000 f825 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8002332:	4602      	mov	r2, r0
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <HAL_RCC_ClockConfig+0x264>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	490c      	ldr	r1, [pc, #48]	; (8002370 <HAL_RCC_ClockConfig+0x26c>)
 8002340:	5ccb      	ldrb	r3, [r1, r3]
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <HAL_RCC_ClockConfig+0x270>)
 800234c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_RCC_ClockConfig+0x274>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fd5e 	bl	8000e14 <HAL_InitTick>
 8002358:	4603      	mov	r3, r0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40022000 	.word	0x40022000
 8002368:	40021000 	.word	0x40021000
 800236c:	04c4b400 	.word	0x04c4b400
 8002370:	08003f48 	.word	0x08003f48
 8002374:	20000000 	.word	0x20000000
 8002378:	20000004 	.word	0x20000004

0800237c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002382:	4b2c      	ldr	r3, [pc, #176]	; (8002434 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b04      	cmp	r3, #4
 800238c:	d102      	bne.n	8002394 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800238e:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	e047      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002394:	4b27      	ldr	r3, [pc, #156]	; (8002434 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b08      	cmp	r3, #8
 800239e:	d102      	bne.n	80023a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023a0:	4b26      	ldr	r3, [pc, #152]	; (800243c <HAL_RCC_GetSysClockFreq+0xc0>)
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	e03e      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80023a6:	4b23      	ldr	r3, [pc, #140]	; (8002434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b0c      	cmp	r3, #12
 80023b0:	d136      	bne.n	8002420 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023b2:	4b20      	ldr	r3, [pc, #128]	; (8002434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023bc:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	3301      	adds	r3, #1
 80023c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d10c      	bne.n	80023ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023d0:	4a1a      	ldr	r2, [pc, #104]	; (800243c <HAL_RCC_GetSysClockFreq+0xc0>)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d8:	4a16      	ldr	r2, [pc, #88]	; (8002434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023da:	68d2      	ldr	r2, [r2, #12]
 80023dc:	0a12      	lsrs	r2, r2, #8
 80023de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023e2:	fb02 f303 	mul.w	r3, r2, r3
 80023e6:	617b      	str	r3, [r7, #20]
      break;
 80023e8:	e00c      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023ea:	4a13      	ldr	r2, [pc, #76]	; (8002438 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f2:	4a10      	ldr	r2, [pc, #64]	; (8002434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f4:	68d2      	ldr	r2, [r2, #12]
 80023f6:	0a12      	lsrs	r2, r2, #8
 80023f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023fc:	fb02 f303 	mul.w	r3, r2, r3
 8002400:	617b      	str	r3, [r7, #20]
      break;
 8002402:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0e5b      	lsrs	r3, r3, #25
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	3301      	adds	r3, #1
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	fbb2 f3f3 	udiv	r3, r2, r3
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	e001      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002424:	693b      	ldr	r3, [r7, #16]
}
 8002426:	4618      	mov	r0, r3
 8002428:	371c      	adds	r7, #28
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
 8002438:	00f42400 	.word	0x00f42400
 800243c:	016e3600 	.word	0x016e3600

08002440 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <HAL_RCC_GetHCLKFreq+0x14>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20000000 	.word	0x20000000

08002458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800245c:	f7ff fff0 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	0a1b      	lsrs	r3, r3, #8
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4904      	ldr	r1, [pc, #16]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x28>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	08003f58 	.word	0x08003f58

08002484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002488:	f7ff ffda 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 800248c:	4602      	mov	r2, r0
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	0adb      	lsrs	r3, r3, #11
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	4904      	ldr	r1, [pc, #16]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800249a:	5ccb      	ldrb	r3, [r1, r3]
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000
 80024ac:	08003f58 	.word	0x08003f58

080024b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024b6:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	3301      	adds	r3, #1
 80024cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d10c      	bne.n	80024ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024d4:	4a17      	ldr	r2, [pc, #92]	; (8002534 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024de:	68d2      	ldr	r2, [r2, #12]
 80024e0:	0a12      	lsrs	r2, r2, #8
 80024e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	617b      	str	r3, [r7, #20]
    break;
 80024ec:	e00c      	b.n	8002508 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024ee:	4a12      	ldr	r2, [pc, #72]	; (8002538 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f6:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024f8:	68d2      	ldr	r2, [r2, #12]
 80024fa:	0a12      	lsrs	r2, r2, #8
 80024fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002500:	fb02 f303 	mul.w	r3, r2, r3
 8002504:	617b      	str	r3, [r7, #20]
    break;
 8002506:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002508:	4b09      	ldr	r3, [pc, #36]	; (8002530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	0e5b      	lsrs	r3, r3, #25
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	3301      	adds	r3, #1
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002522:	687b      	ldr	r3, [r7, #4]
}
 8002524:	4618      	mov	r0, r3
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	40021000 	.word	0x40021000
 8002534:	016e3600 	.word	0x016e3600
 8002538:	00f42400 	.word	0x00f42400

0800253c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002544:	2300      	movs	r3, #0
 8002546:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002548:	2300      	movs	r3, #0
 800254a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 8098 	beq.w	800268a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255e:	4b43      	ldr	r3, [pc, #268]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10d      	bne.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	4b40      	ldr	r3, [pc, #256]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800256c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256e:	4a3f      	ldr	r2, [pc, #252]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002574:	6593      	str	r3, [r2, #88]	; 0x58
 8002576:	4b3d      	ldr	r3, [pc, #244]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002582:	2301      	movs	r3, #1
 8002584:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002586:	4b3a      	ldr	r3, [pc, #232]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a39      	ldr	r2, [pc, #228]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800258c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002590:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002592:	f7fe fc8b 	bl	8000eac <HAL_GetTick>
 8002596:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002598:	e009      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259a:	f7fe fc87 	bl	8000eac <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d902      	bls.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	74fb      	strb	r3, [r7, #19]
        break;
 80025ac:	e005      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025ae:	4b30      	ldr	r3, [pc, #192]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0ef      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80025ba:	7cfb      	ldrb	r3, [r7, #19]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d159      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025c0:	4b2a      	ldr	r3, [pc, #168]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d01e      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d019      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025dc:	4b23      	ldr	r3, [pc, #140]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025e8:	4b20      	ldr	r3, [pc, #128]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	4a1f      	ldr	r2, [pc, #124]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025f8:	4b1c      	ldr	r3, [pc, #112]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	4a1b      	ldr	r2, [pc, #108]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002608:	4a18      	ldr	r2, [pc, #96]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d016      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7fe fc47 	bl	8000eac <HAL_GetTick>
 800261e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002620:	e00b      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7fe fc43 	bl	8000eac <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d902      	bls.n	800263a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	74fb      	strb	r3, [r7, #19]
            break;
 8002638:	e006      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ec      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10b      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800264e:	4b07      	ldr	r3, [pc, #28]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	4903      	ldr	r1, [pc, #12]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002664:	e008      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002666:	7cfb      	ldrb	r3, [r7, #19]
 8002668:	74bb      	strb	r3, [r7, #18]
 800266a:	e005      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800266c:	40021000 	.word	0x40021000
 8002670:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002678:	7c7b      	ldrb	r3, [r7, #17]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d105      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267e:	4ba6      	ldr	r3, [pc, #664]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002682:	4aa5      	ldr	r2, [pc, #660]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002688:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002696:	4ba0      	ldr	r3, [pc, #640]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269c:	f023 0203 	bic.w	r2, r3, #3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	499c      	ldr	r1, [pc, #624]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026b8:	4b97      	ldr	r3, [pc, #604]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	f023 020c 	bic.w	r2, r3, #12
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	4994      	ldr	r1, [pc, #592]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026da:	4b8f      	ldr	r3, [pc, #572]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	498b      	ldr	r1, [pc, #556]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026fc:	4b86      	ldr	r3, [pc, #536]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	4983      	ldr	r1, [pc, #524]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800271e:	4b7e      	ldr	r3, [pc, #504]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	497a      	ldr	r1, [pc, #488]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002740:	4b75      	ldr	r3, [pc, #468]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	4972      	ldr	r1, [pc, #456]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002762:	4b6d      	ldr	r3, [pc, #436]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	4969      	ldr	r1, [pc, #420]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002784:	4b64      	ldr	r3, [pc, #400]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	4961      	ldr	r1, [pc, #388]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027a6:	4b5c      	ldr	r3, [pc, #368]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	4958      	ldr	r1, [pc, #352]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d015      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027c8:	4b53      	ldr	r3, [pc, #332]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	4950      	ldr	r1, [pc, #320]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027e6:	d105      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027e8:	4b4b      	ldr	r3, [pc, #300]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4a4a      	ldr	r2, [pc, #296]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d015      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002800:	4b45      	ldr	r3, [pc, #276]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	4942      	ldr	r1, [pc, #264]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800281e:	d105      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002820:	4b3d      	ldr	r3, [pc, #244]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4a3c      	ldr	r2, [pc, #240]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800282a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d015      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002838:	4b37      	ldr	r3, [pc, #220]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4934      	ldr	r1, [pc, #208]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002856:	d105      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002858:	4b2f      	ldr	r3, [pc, #188]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4a2e      	ldr	r2, [pc, #184]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800285e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002862:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d015      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002870:	4b29      	ldr	r3, [pc, #164]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287e:	4926      	ldr	r1, [pc, #152]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800288e:	d105      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002890:	4b21      	ldr	r3, [pc, #132]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4a20      	ldr	r2, [pc, #128]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800289a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d015      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	4918      	ldr	r1, [pc, #96]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028c6:	d105      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a12      	ldr	r2, [pc, #72]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d015      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028e0:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	490a      	ldr	r1, [pc, #40]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028fe:	d105      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800290c:	7cbb      	ldrb	r3, [r7, #18]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000

0800291c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e042      	b.n	80029b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002934:	2b00      	cmp	r3, #0
 8002936:	d106      	bne.n	8002946 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7fe f8c9 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2224      	movs	r2, #36	; 0x24
 800294a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0201 	bic.w	r2, r2, #1
 800295c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f8c2 	bl	8002ae8 <UART_SetConfig>
 8002964:	4603      	mov	r3, r0
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e022      	b.n	80029b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fb82 	bl	8003080 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800298a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800299a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 fc09 	bl	80031c4 <UART_CheckIdleState>
 80029b2:	4603      	mov	r3, r0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	f040 8083 	bne.w	8002ade <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_UART_Transmit+0x28>
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e07b      	b.n	8002ae0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_UART_Transmit+0x3a>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e074      	b.n	8002ae0 <HAL_UART_Transmit+0x124>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2221      	movs	r2, #33	; 0x21
 8002a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a0e:	f7fe fa4d 	bl	8000eac <HAL_GetTick>
 8002a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	88fa      	ldrh	r2, [r7, #6]
 8002a18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	88fa      	ldrh	r2, [r7, #6]
 8002a20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a2c:	d108      	bne.n	8002a40 <HAL_UART_Transmit+0x84>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d104      	bne.n	8002a40 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	e003      	b.n	8002a48 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002a50:	e02c      	b.n	8002aac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2180      	movs	r1, #128	; 0x80
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fbfc 	bl	800325a <UART_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e039      	b.n	8002ae0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10b      	bne.n	8002a8a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	3302      	adds	r3, #2
 8002a86:	61bb      	str	r3, [r7, #24]
 8002a88:	e007      	b.n	8002a9a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	3301      	adds	r3, #1
 8002a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1cc      	bne.n	8002a52 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2140      	movs	r1, #64	; 0x40
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 fbc9 	bl	800325a <UART_WaitOnFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e006      	b.n	8002ae0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e000      	b.n	8002ae0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002ade:	2302      	movs	r3, #2
  }
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3720      	adds	r7, #32
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aec:	b08c      	sub	sp, #48	; 0x30
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4bab      	ldr	r3, [pc, #684]	; (8002dc4 <UART_SetConfig+0x2dc>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4aa0      	ldr	r2, [pc, #640]	; (8002dc8 <UART_SetConfig+0x2e0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d004      	beq.n	8002b54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b50:	4313      	orrs	r3, r2
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002b5e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	f023 010f 	bic.w	r1, r3, #15
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a91      	ldr	r2, [pc, #580]	; (8002dcc <UART_SetConfig+0x2e4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d125      	bne.n	8002bd8 <UART_SetConfig+0xf0>
 8002b8c:	4b90      	ldr	r3, [pc, #576]	; (8002dd0 <UART_SetConfig+0x2e8>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d81a      	bhi.n	8002bd0 <UART_SetConfig+0xe8>
 8002b9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ba0 <UART_SetConfig+0xb8>)
 8002b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba0:	08002bb1 	.word	0x08002bb1
 8002ba4:	08002bc1 	.word	0x08002bc1
 8002ba8:	08002bb9 	.word	0x08002bb9
 8002bac:	08002bc9 	.word	0x08002bc9
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bb6:	e0d6      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bbe:	e0d2      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bc6:	e0ce      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002bc8:	2308      	movs	r3, #8
 8002bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bce:	e0ca      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002bd0:	2310      	movs	r3, #16
 8002bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bd6:	e0c6      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a7d      	ldr	r2, [pc, #500]	; (8002dd4 <UART_SetConfig+0x2ec>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d138      	bne.n	8002c54 <UART_SetConfig+0x16c>
 8002be2:	4b7b      	ldr	r3, [pc, #492]	; (8002dd0 <UART_SetConfig+0x2e8>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b0c      	cmp	r3, #12
 8002bee:	d82d      	bhi.n	8002c4c <UART_SetConfig+0x164>
 8002bf0:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <UART_SetConfig+0x110>)
 8002bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf6:	bf00      	nop
 8002bf8:	08002c2d 	.word	0x08002c2d
 8002bfc:	08002c4d 	.word	0x08002c4d
 8002c00:	08002c4d 	.word	0x08002c4d
 8002c04:	08002c4d 	.word	0x08002c4d
 8002c08:	08002c3d 	.word	0x08002c3d
 8002c0c:	08002c4d 	.word	0x08002c4d
 8002c10:	08002c4d 	.word	0x08002c4d
 8002c14:	08002c4d 	.word	0x08002c4d
 8002c18:	08002c35 	.word	0x08002c35
 8002c1c:	08002c4d 	.word	0x08002c4d
 8002c20:	08002c4d 	.word	0x08002c4d
 8002c24:	08002c4d 	.word	0x08002c4d
 8002c28:	08002c45 	.word	0x08002c45
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c32:	e098      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002c34:	2302      	movs	r3, #2
 8002c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c3a:	e094      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c42:	e090      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002c44:	2308      	movs	r3, #8
 8002c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c4a:	e08c      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002c4c:	2310      	movs	r3, #16
 8002c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c52:	e088      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a5f      	ldr	r2, [pc, #380]	; (8002dd8 <UART_SetConfig+0x2f0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d125      	bne.n	8002caa <UART_SetConfig+0x1c2>
 8002c5e:	4b5c      	ldr	r3, [pc, #368]	; (8002dd0 <UART_SetConfig+0x2e8>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c68:	2b30      	cmp	r3, #48	; 0x30
 8002c6a:	d016      	beq.n	8002c9a <UART_SetConfig+0x1b2>
 8002c6c:	2b30      	cmp	r3, #48	; 0x30
 8002c6e:	d818      	bhi.n	8002ca2 <UART_SetConfig+0x1ba>
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d00a      	beq.n	8002c8a <UART_SetConfig+0x1a2>
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d814      	bhi.n	8002ca2 <UART_SetConfig+0x1ba>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <UART_SetConfig+0x19a>
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d008      	beq.n	8002c92 <UART_SetConfig+0x1aa>
 8002c80:	e00f      	b.n	8002ca2 <UART_SetConfig+0x1ba>
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c88:	e06d      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c90:	e069      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002c92:	2304      	movs	r3, #4
 8002c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c98:	e065      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002c9a:	2308      	movs	r3, #8
 8002c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ca0:	e061      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002ca2:	2310      	movs	r3, #16
 8002ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ca8:	e05d      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a4b      	ldr	r2, [pc, #300]	; (8002ddc <UART_SetConfig+0x2f4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d125      	bne.n	8002d00 <UART_SetConfig+0x218>
 8002cb4:	4b46      	ldr	r3, [pc, #280]	; (8002dd0 <UART_SetConfig+0x2e8>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002cbe:	2bc0      	cmp	r3, #192	; 0xc0
 8002cc0:	d016      	beq.n	8002cf0 <UART_SetConfig+0x208>
 8002cc2:	2bc0      	cmp	r3, #192	; 0xc0
 8002cc4:	d818      	bhi.n	8002cf8 <UART_SetConfig+0x210>
 8002cc6:	2b80      	cmp	r3, #128	; 0x80
 8002cc8:	d00a      	beq.n	8002ce0 <UART_SetConfig+0x1f8>
 8002cca:	2b80      	cmp	r3, #128	; 0x80
 8002ccc:	d814      	bhi.n	8002cf8 <UART_SetConfig+0x210>
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <UART_SetConfig+0x1f0>
 8002cd2:	2b40      	cmp	r3, #64	; 0x40
 8002cd4:	d008      	beq.n	8002ce8 <UART_SetConfig+0x200>
 8002cd6:	e00f      	b.n	8002cf8 <UART_SetConfig+0x210>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cde:	e042      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ce6:	e03e      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002ce8:	2304      	movs	r3, #4
 8002cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cee:	e03a      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002cf0:	2308      	movs	r3, #8
 8002cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cf6:	e036      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002cf8:	2310      	movs	r3, #16
 8002cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cfe:	e032      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a30      	ldr	r2, [pc, #192]	; (8002dc8 <UART_SetConfig+0x2e0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d12a      	bne.n	8002d60 <UART_SetConfig+0x278>
 8002d0a:	4b31      	ldr	r3, [pc, #196]	; (8002dd0 <UART_SetConfig+0x2e8>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d18:	d01a      	beq.n	8002d50 <UART_SetConfig+0x268>
 8002d1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d1e:	d81b      	bhi.n	8002d58 <UART_SetConfig+0x270>
 8002d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d24:	d00c      	beq.n	8002d40 <UART_SetConfig+0x258>
 8002d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d2a:	d815      	bhi.n	8002d58 <UART_SetConfig+0x270>
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <UART_SetConfig+0x250>
 8002d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d34:	d008      	beq.n	8002d48 <UART_SetConfig+0x260>
 8002d36:	e00f      	b.n	8002d58 <UART_SetConfig+0x270>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d3e:	e012      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002d40:	2302      	movs	r3, #2
 8002d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d46:	e00e      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002d48:	2304      	movs	r3, #4
 8002d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d4e:	e00a      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002d50:	2308      	movs	r3, #8
 8002d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d56:	e006      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002d58:	2310      	movs	r3, #16
 8002d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d5e:	e002      	b.n	8002d66 <UART_SetConfig+0x27e>
 8002d60:	2310      	movs	r3, #16
 8002d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a17      	ldr	r2, [pc, #92]	; (8002dc8 <UART_SetConfig+0x2e0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	f040 80a8 	bne.w	8002ec2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d834      	bhi.n	8002de4 <UART_SetConfig+0x2fc>
 8002d7a:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <UART_SetConfig+0x298>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002da5 	.word	0x08002da5
 8002d84:	08002de5 	.word	0x08002de5
 8002d88:	08002dad 	.word	0x08002dad
 8002d8c:	08002de5 	.word	0x08002de5
 8002d90:	08002db3 	.word	0x08002db3
 8002d94:	08002de5 	.word	0x08002de5
 8002d98:	08002de5 	.word	0x08002de5
 8002d9c:	08002de5 	.word	0x08002de5
 8002da0:	08002dbb 	.word	0x08002dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002da4:	f7ff fb58 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8002da8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002daa:	e021      	b.n	8002df0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <UART_SetConfig+0x2f8>)
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002db0:	e01e      	b.n	8002df0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002db2:	f7ff fae3 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8002db6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002db8:	e01a      	b.n	8002df0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002dc0:	e016      	b.n	8002df0 <UART_SetConfig+0x308>
 8002dc2:	bf00      	nop
 8002dc4:	cfff69f3 	.word	0xcfff69f3
 8002dc8:	40008000 	.word	0x40008000
 8002dcc:	40013800 	.word	0x40013800
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40004400 	.word	0x40004400
 8002dd8:	40004800 	.word	0x40004800
 8002ddc:	40004c00 	.word	0x40004c00
 8002de0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002dee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 812a 	beq.w	800304c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	4a9e      	ldr	r2, [pc, #632]	; (8003078 <UART_SetConfig+0x590>)
 8002dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e02:	461a      	mov	r2, r3
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d305      	bcc.n	8002e28 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d903      	bls.n	8002e30 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002e2e:	e10d      	b.n	800304c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	2200      	movs	r2, #0
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	60fa      	str	r2, [r7, #12]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	4a8e      	ldr	r2, [pc, #568]	; (8003078 <UART_SetConfig+0x590>)
 8002e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2200      	movs	r2, #0
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e52:	f7fd f9e1 	bl	8000218 <__aeabi_uldivmod>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	020b      	lsls	r3, r1, #8
 8002e68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002e6c:	0202      	lsls	r2, r0, #8
 8002e6e:	6979      	ldr	r1, [r7, #20]
 8002e70:	6849      	ldr	r1, [r1, #4]
 8002e72:	0849      	lsrs	r1, r1, #1
 8002e74:	2000      	movs	r0, #0
 8002e76:	460c      	mov	r4, r1
 8002e78:	4605      	mov	r5, r0
 8002e7a:	eb12 0804 	adds.w	r8, r2, r4
 8002e7e:	eb43 0905 	adc.w	r9, r3, r5
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	469a      	mov	sl, r3
 8002e8a:	4693      	mov	fp, r2
 8002e8c:	4652      	mov	r2, sl
 8002e8e:	465b      	mov	r3, fp
 8002e90:	4640      	mov	r0, r8
 8002e92:	4649      	mov	r1, r9
 8002e94:	f7fd f9c0 	bl	8000218 <__aeabi_uldivmod>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ea6:	d308      	bcc.n	8002eba <UART_SetConfig+0x3d2>
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eae:	d204      	bcs.n	8002eba <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6a3a      	ldr	r2, [r7, #32]
 8002eb6:	60da      	str	r2, [r3, #12]
 8002eb8:	e0c8      	b.n	800304c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002ec0:	e0c4      	b.n	800304c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eca:	d167      	bne.n	8002f9c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002ecc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d828      	bhi.n	8002f26 <UART_SetConfig+0x43e>
 8002ed4:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <UART_SetConfig+0x3f4>)
 8002ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eda:	bf00      	nop
 8002edc:	08002f01 	.word	0x08002f01
 8002ee0:	08002f09 	.word	0x08002f09
 8002ee4:	08002f11 	.word	0x08002f11
 8002ee8:	08002f27 	.word	0x08002f27
 8002eec:	08002f17 	.word	0x08002f17
 8002ef0:	08002f27 	.word	0x08002f27
 8002ef4:	08002f27 	.word	0x08002f27
 8002ef8:	08002f27 	.word	0x08002f27
 8002efc:	08002f1f 	.word	0x08002f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f00:	f7ff faaa 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8002f04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f06:	e014      	b.n	8002f32 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f08:	f7ff fabc 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 8002f0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f0e:	e010      	b.n	8002f32 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f10:	4b5a      	ldr	r3, [pc, #360]	; (800307c <UART_SetConfig+0x594>)
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f14:	e00d      	b.n	8002f32 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f16:	f7ff fa31 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8002f1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f1c:	e009      	b.n	8002f32 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f24:	e005      	b.n	8002f32 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002f30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8089 	beq.w	800304c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	4a4e      	ldr	r2, [pc, #312]	; (8003078 <UART_SetConfig+0x590>)
 8002f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f44:	461a      	mov	r2, r3
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f4c:	005a      	lsls	r2, r3, #1
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	085b      	lsrs	r3, r3, #1
 8002f54:	441a      	add	r2, r3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	2b0f      	cmp	r3, #15
 8002f64:	d916      	bls.n	8002f94 <UART_SetConfig+0x4ac>
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6c:	d212      	bcs.n	8002f94 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	f023 030f 	bic.w	r3, r3, #15
 8002f76:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	8bfb      	ldrh	r3, [r7, #30]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	8bfa      	ldrh	r2, [r7, #30]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	e05b      	b.n	800304c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002f9a:	e057      	b.n	800304c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d828      	bhi.n	8002ff6 <UART_SetConfig+0x50e>
 8002fa4:	a201      	add	r2, pc, #4	; (adr r2, 8002fac <UART_SetConfig+0x4c4>)
 8002fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002faa:	bf00      	nop
 8002fac:	08002fd1 	.word	0x08002fd1
 8002fb0:	08002fd9 	.word	0x08002fd9
 8002fb4:	08002fe1 	.word	0x08002fe1
 8002fb8:	08002ff7 	.word	0x08002ff7
 8002fbc:	08002fe7 	.word	0x08002fe7
 8002fc0:	08002ff7 	.word	0x08002ff7
 8002fc4:	08002ff7 	.word	0x08002ff7
 8002fc8:	08002ff7 	.word	0x08002ff7
 8002fcc:	08002fef 	.word	0x08002fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd0:	f7ff fa42 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8002fd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002fd6:	e014      	b.n	8003002 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fd8:	f7ff fa54 	bl	8002484 <HAL_RCC_GetPCLK2Freq>
 8002fdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002fde:	e010      	b.n	8003002 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fe0:	4b26      	ldr	r3, [pc, #152]	; (800307c <UART_SetConfig+0x594>)
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002fe4:	e00d      	b.n	8003002 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fe6:	f7ff f9c9 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8002fea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002fec:	e009      	b.n	8003002 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ff4:	e005      	b.n	8003002 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003000:	bf00      	nop
    }

    if (pclk != 0U)
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	2b00      	cmp	r3, #0
 8003006:	d021      	beq.n	800304c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	4a1a      	ldr	r2, [pc, #104]	; (8003078 <UART_SetConfig+0x590>)
 800300e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003012:	461a      	mov	r2, r3
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	fbb3 f2f2 	udiv	r2, r3, r2
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	085b      	lsrs	r3, r3, #1
 8003020:	441a      	add	r2, r3
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	fbb2 f3f3 	udiv	r3, r2, r3
 800302a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	2b0f      	cmp	r3, #15
 8003030:	d909      	bls.n	8003046 <UART_SetConfig+0x55e>
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003038:	d205      	bcs.n	8003046 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	b29a      	uxth	r2, r3
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	60da      	str	r2, [r3, #12]
 8003044:	e002      	b.n	800304c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2201      	movs	r2, #1
 8003050:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2201      	movs	r2, #1
 8003058:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2200      	movs	r2, #0
 8003060:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2200      	movs	r2, #0
 8003066:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003068:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800306c:	4618      	mov	r0, r3
 800306e:	3730      	adds	r7, #48	; 0x30
 8003070:	46bd      	mov	sp, r7
 8003072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003076:	bf00      	nop
 8003078:	08003f60 	.word	0x08003f60
 800307c:	00f42400 	.word	0x00f42400

08003080 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00a      	beq.n	8003132 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01a      	beq.n	8003196 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800317e:	d10a      	bne.n	8003196 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
  }
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031d4:	f7fd fe6a 	bl	8000eac <HAL_GetTick>
 80031d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d10e      	bne.n	8003206 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f82f 	bl	800325a <UART_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e025      	b.n	8003252 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b04      	cmp	r3, #4
 8003212:	d10e      	bne.n	8003232 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f819 	bl	800325a <UART_WaitOnFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e00f      	b.n	8003252 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b09c      	sub	sp, #112	; 0x70
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	4613      	mov	r3, r2
 8003268:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800326a:	e0a9      	b.n	80033c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800326e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003272:	f000 80a5 	beq.w	80033c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003276:	f7fd fe19 	bl	8000eac <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003282:	429a      	cmp	r2, r3
 8003284:	d302      	bcc.n	800328c <UART_WaitOnFlagUntilTimeout+0x32>
 8003286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003288:	2b00      	cmp	r3, #0
 800328a:	d140      	bne.n	800330e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800329a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032a0:	667b      	str	r3, [r7, #100]	; 0x64
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80032b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032b2:	e841 2300 	strex	r3, r2, [r1]
 80032b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80032b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1e6      	bne.n	800328c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	3308      	adds	r3, #8
 80032c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c8:	e853 3f00 	ldrex	r3, [r3]
 80032cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d0:	f023 0301 	bic.w	r3, r3, #1
 80032d4:	663b      	str	r3, [r7, #96]	; 0x60
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3308      	adds	r3, #8
 80032dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032de:	64ba      	str	r2, [r7, #72]	; 0x48
 80032e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032e6:	e841 2300 	strex	r3, r2, [r1]
 80032ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80032ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1e5      	bne.n	80032be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e069      	b.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d051      	beq.n	80033c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800332a:	d149      	bne.n	80033c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003334:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333e:	e853 3f00 	ldrex	r3, [r3]
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800334a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
 8003356:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800335a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800335c:	e841 2300 	strex	r3, r2, [r1]
 8003360:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e6      	bne.n	8003336 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3308      	adds	r3, #8
 800336e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	e853 3f00 	ldrex	r3, [r3]
 8003376:	613b      	str	r3, [r7, #16]
   return(result);
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f023 0301 	bic.w	r3, r3, #1
 800337e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3308      	adds	r3, #8
 8003386:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003388:	623a      	str	r2, [r7, #32]
 800338a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338c:	69f9      	ldr	r1, [r7, #28]
 800338e:	6a3a      	ldr	r2, [r7, #32]
 8003390:	e841 2300 	strex	r3, r2, [r1]
 8003394:	61bb      	str	r3, [r7, #24]
   return(result);
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1e5      	bne.n	8003368 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e010      	b.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69da      	ldr	r2, [r3, #28]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4013      	ands	r3, r2
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	bf0c      	ite	eq
 80033d0:	2301      	moveq	r3, #1
 80033d2:	2300      	movne	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	429a      	cmp	r2, r3
 80033dc:	f43f af46 	beq.w	800326c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3770      	adds	r7, #112	; 0x70
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_UARTEx_DisableFifoMode+0x16>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e027      	b.n	8003450 <HAL_UARTEx_DisableFifoMode+0x66>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2224      	movs	r2, #36	; 0x24
 800340c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800342e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2220      	movs	r2, #32
 8003442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003470:	2302      	movs	r3, #2
 8003472:	e02d      	b.n	80034d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2224      	movs	r2, #36	; 0x24
 8003480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0201 	bic.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f84f 	bl	8003554 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e02d      	b.n	800354c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2224      	movs	r2, #36	; 0x24
 80034fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0201 	bic.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f811 	bl	8003554 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003560:	2b00      	cmp	r3, #0
 8003562:	d108      	bne.n	8003576 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003574:	e031      	b.n	80035da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003576:	2308      	movs	r3, #8
 8003578:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800357a:	2308      	movs	r3, #8
 800357c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	0e5b      	lsrs	r3, r3, #25
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	0f5b      	lsrs	r3, r3, #29
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800359e:	7bbb      	ldrb	r3, [r7, #14]
 80035a0:	7b3a      	ldrb	r2, [r7, #12]
 80035a2:	4911      	ldr	r1, [pc, #68]	; (80035e8 <UARTEx_SetNbDataToProcess+0x94>)
 80035a4:	5c8a      	ldrb	r2, [r1, r2]
 80035a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80035aa:	7b3a      	ldrb	r2, [r7, #12]
 80035ac:	490f      	ldr	r1, [pc, #60]	; (80035ec <UARTEx_SetNbDataToProcess+0x98>)
 80035ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80035b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	7b7a      	ldrb	r2, [r7, #13]
 80035c0:	4909      	ldr	r1, [pc, #36]	; (80035e8 <UARTEx_SetNbDataToProcess+0x94>)
 80035c2:	5c8a      	ldrb	r2, [r1, r2]
 80035c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80035c8:	7b7a      	ldrb	r2, [r7, #13]
 80035ca:	4908      	ldr	r1, [pc, #32]	; (80035ec <UARTEx_SetNbDataToProcess+0x98>)
 80035cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80035ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	08003f78 	.word	0x08003f78
 80035ec:	08003f80 	.word	0x08003f80

080035f0 <std>:
 80035f0:	2300      	movs	r3, #0
 80035f2:	b510      	push	{r4, lr}
 80035f4:	4604      	mov	r4, r0
 80035f6:	e9c0 3300 	strd	r3, r3, [r0]
 80035fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035fe:	6083      	str	r3, [r0, #8]
 8003600:	8181      	strh	r1, [r0, #12]
 8003602:	6643      	str	r3, [r0, #100]	; 0x64
 8003604:	81c2      	strh	r2, [r0, #14]
 8003606:	6183      	str	r3, [r0, #24]
 8003608:	4619      	mov	r1, r3
 800360a:	2208      	movs	r2, #8
 800360c:	305c      	adds	r0, #92	; 0x5c
 800360e:	f000 f9d3 	bl	80039b8 <memset>
 8003612:	4b05      	ldr	r3, [pc, #20]	; (8003628 <std+0x38>)
 8003614:	6263      	str	r3, [r4, #36]	; 0x24
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <std+0x3c>)
 8003618:	62a3      	str	r3, [r4, #40]	; 0x28
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <std+0x40>)
 800361c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <std+0x44>)
 8003620:	6224      	str	r4, [r4, #32]
 8003622:	6323      	str	r3, [r4, #48]	; 0x30
 8003624:	bd10      	pop	{r4, pc}
 8003626:	bf00      	nop
 8003628:	08003809 	.word	0x08003809
 800362c:	0800382b 	.word	0x0800382b
 8003630:	08003863 	.word	0x08003863
 8003634:	08003887 	.word	0x08003887

08003638 <stdio_exit_handler>:
 8003638:	4a02      	ldr	r2, [pc, #8]	; (8003644 <stdio_exit_handler+0xc>)
 800363a:	4903      	ldr	r1, [pc, #12]	; (8003648 <stdio_exit_handler+0x10>)
 800363c:	4803      	ldr	r0, [pc, #12]	; (800364c <stdio_exit_handler+0x14>)
 800363e:	f000 b869 	b.w	8003714 <_fwalk_sglue>
 8003642:	bf00      	nop
 8003644:	2000000c 	.word	0x2000000c
 8003648:	08003da9 	.word	0x08003da9
 800364c:	20000018 	.word	0x20000018

08003650 <cleanup_stdio>:
 8003650:	6841      	ldr	r1, [r0, #4]
 8003652:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <cleanup_stdio+0x34>)
 8003654:	4299      	cmp	r1, r3
 8003656:	b510      	push	{r4, lr}
 8003658:	4604      	mov	r4, r0
 800365a:	d001      	beq.n	8003660 <cleanup_stdio+0x10>
 800365c:	f000 fba4 	bl	8003da8 <_fflush_r>
 8003660:	68a1      	ldr	r1, [r4, #8]
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <cleanup_stdio+0x38>)
 8003664:	4299      	cmp	r1, r3
 8003666:	d002      	beq.n	800366e <cleanup_stdio+0x1e>
 8003668:	4620      	mov	r0, r4
 800366a:	f000 fb9d 	bl	8003da8 <_fflush_r>
 800366e:	68e1      	ldr	r1, [r4, #12]
 8003670:	4b06      	ldr	r3, [pc, #24]	; (800368c <cleanup_stdio+0x3c>)
 8003672:	4299      	cmp	r1, r3
 8003674:	d004      	beq.n	8003680 <cleanup_stdio+0x30>
 8003676:	4620      	mov	r0, r4
 8003678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800367c:	f000 bb94 	b.w	8003da8 <_fflush_r>
 8003680:	bd10      	pop	{r4, pc}
 8003682:	bf00      	nop
 8003684:	2000025c 	.word	0x2000025c
 8003688:	200002c4 	.word	0x200002c4
 800368c:	2000032c 	.word	0x2000032c

08003690 <global_stdio_init.part.0>:
 8003690:	b510      	push	{r4, lr}
 8003692:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <global_stdio_init.part.0+0x30>)
 8003694:	4c0b      	ldr	r4, [pc, #44]	; (80036c4 <global_stdio_init.part.0+0x34>)
 8003696:	4a0c      	ldr	r2, [pc, #48]	; (80036c8 <global_stdio_init.part.0+0x38>)
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	4620      	mov	r0, r4
 800369c:	2200      	movs	r2, #0
 800369e:	2104      	movs	r1, #4
 80036a0:	f7ff ffa6 	bl	80035f0 <std>
 80036a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80036a8:	2201      	movs	r2, #1
 80036aa:	2109      	movs	r1, #9
 80036ac:	f7ff ffa0 	bl	80035f0 <std>
 80036b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80036b4:	2202      	movs	r2, #2
 80036b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036ba:	2112      	movs	r1, #18
 80036bc:	f7ff bf98 	b.w	80035f0 <std>
 80036c0:	20000394 	.word	0x20000394
 80036c4:	2000025c 	.word	0x2000025c
 80036c8:	08003639 	.word	0x08003639

080036cc <__sfp_lock_acquire>:
 80036cc:	4801      	ldr	r0, [pc, #4]	; (80036d4 <__sfp_lock_acquire+0x8>)
 80036ce:	f000 b9eb 	b.w	8003aa8 <__retarget_lock_acquire_recursive>
 80036d2:	bf00      	nop
 80036d4:	2000039d 	.word	0x2000039d

080036d8 <__sfp_lock_release>:
 80036d8:	4801      	ldr	r0, [pc, #4]	; (80036e0 <__sfp_lock_release+0x8>)
 80036da:	f000 b9e6 	b.w	8003aaa <__retarget_lock_release_recursive>
 80036de:	bf00      	nop
 80036e0:	2000039d 	.word	0x2000039d

080036e4 <__sinit>:
 80036e4:	b510      	push	{r4, lr}
 80036e6:	4604      	mov	r4, r0
 80036e8:	f7ff fff0 	bl	80036cc <__sfp_lock_acquire>
 80036ec:	6a23      	ldr	r3, [r4, #32]
 80036ee:	b11b      	cbz	r3, 80036f8 <__sinit+0x14>
 80036f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036f4:	f7ff bff0 	b.w	80036d8 <__sfp_lock_release>
 80036f8:	4b04      	ldr	r3, [pc, #16]	; (800370c <__sinit+0x28>)
 80036fa:	6223      	str	r3, [r4, #32]
 80036fc:	4b04      	ldr	r3, [pc, #16]	; (8003710 <__sinit+0x2c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1f5      	bne.n	80036f0 <__sinit+0xc>
 8003704:	f7ff ffc4 	bl	8003690 <global_stdio_init.part.0>
 8003708:	e7f2      	b.n	80036f0 <__sinit+0xc>
 800370a:	bf00      	nop
 800370c:	08003651 	.word	0x08003651
 8003710:	20000394 	.word	0x20000394

08003714 <_fwalk_sglue>:
 8003714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003718:	4607      	mov	r7, r0
 800371a:	4688      	mov	r8, r1
 800371c:	4614      	mov	r4, r2
 800371e:	2600      	movs	r6, #0
 8003720:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003724:	f1b9 0901 	subs.w	r9, r9, #1
 8003728:	d505      	bpl.n	8003736 <_fwalk_sglue+0x22>
 800372a:	6824      	ldr	r4, [r4, #0]
 800372c:	2c00      	cmp	r4, #0
 800372e:	d1f7      	bne.n	8003720 <_fwalk_sglue+0xc>
 8003730:	4630      	mov	r0, r6
 8003732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003736:	89ab      	ldrh	r3, [r5, #12]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d907      	bls.n	800374c <_fwalk_sglue+0x38>
 800373c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003740:	3301      	adds	r3, #1
 8003742:	d003      	beq.n	800374c <_fwalk_sglue+0x38>
 8003744:	4629      	mov	r1, r5
 8003746:	4638      	mov	r0, r7
 8003748:	47c0      	blx	r8
 800374a:	4306      	orrs	r6, r0
 800374c:	3568      	adds	r5, #104	; 0x68
 800374e:	e7e9      	b.n	8003724 <_fwalk_sglue+0x10>

08003750 <_puts_r>:
 8003750:	6a03      	ldr	r3, [r0, #32]
 8003752:	b570      	push	{r4, r5, r6, lr}
 8003754:	6884      	ldr	r4, [r0, #8]
 8003756:	4605      	mov	r5, r0
 8003758:	460e      	mov	r6, r1
 800375a:	b90b      	cbnz	r3, 8003760 <_puts_r+0x10>
 800375c:	f7ff ffc2 	bl	80036e4 <__sinit>
 8003760:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003762:	07db      	lsls	r3, r3, #31
 8003764:	d405      	bmi.n	8003772 <_puts_r+0x22>
 8003766:	89a3      	ldrh	r3, [r4, #12]
 8003768:	0598      	lsls	r0, r3, #22
 800376a:	d402      	bmi.n	8003772 <_puts_r+0x22>
 800376c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800376e:	f000 f99b 	bl	8003aa8 <__retarget_lock_acquire_recursive>
 8003772:	89a3      	ldrh	r3, [r4, #12]
 8003774:	0719      	lsls	r1, r3, #28
 8003776:	d513      	bpl.n	80037a0 <_puts_r+0x50>
 8003778:	6923      	ldr	r3, [r4, #16]
 800377a:	b18b      	cbz	r3, 80037a0 <_puts_r+0x50>
 800377c:	3e01      	subs	r6, #1
 800377e:	68a3      	ldr	r3, [r4, #8]
 8003780:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003784:	3b01      	subs	r3, #1
 8003786:	60a3      	str	r3, [r4, #8]
 8003788:	b9e9      	cbnz	r1, 80037c6 <_puts_r+0x76>
 800378a:	2b00      	cmp	r3, #0
 800378c:	da2e      	bge.n	80037ec <_puts_r+0x9c>
 800378e:	4622      	mov	r2, r4
 8003790:	210a      	movs	r1, #10
 8003792:	4628      	mov	r0, r5
 8003794:	f000 f87b 	bl	800388e <__swbuf_r>
 8003798:	3001      	adds	r0, #1
 800379a:	d007      	beq.n	80037ac <_puts_r+0x5c>
 800379c:	250a      	movs	r5, #10
 800379e:	e007      	b.n	80037b0 <_puts_r+0x60>
 80037a0:	4621      	mov	r1, r4
 80037a2:	4628      	mov	r0, r5
 80037a4:	f000 f8b0 	bl	8003908 <__swsetup_r>
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d0e7      	beq.n	800377c <_puts_r+0x2c>
 80037ac:	f04f 35ff 	mov.w	r5, #4294967295
 80037b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037b2:	07da      	lsls	r2, r3, #31
 80037b4:	d405      	bmi.n	80037c2 <_puts_r+0x72>
 80037b6:	89a3      	ldrh	r3, [r4, #12]
 80037b8:	059b      	lsls	r3, r3, #22
 80037ba:	d402      	bmi.n	80037c2 <_puts_r+0x72>
 80037bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037be:	f000 f974 	bl	8003aaa <__retarget_lock_release_recursive>
 80037c2:	4628      	mov	r0, r5
 80037c4:	bd70      	pop	{r4, r5, r6, pc}
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	da04      	bge.n	80037d4 <_puts_r+0x84>
 80037ca:	69a2      	ldr	r2, [r4, #24]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	dc06      	bgt.n	80037de <_puts_r+0x8e>
 80037d0:	290a      	cmp	r1, #10
 80037d2:	d004      	beq.n	80037de <_puts_r+0x8e>
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	6022      	str	r2, [r4, #0]
 80037da:	7019      	strb	r1, [r3, #0]
 80037dc:	e7cf      	b.n	800377e <_puts_r+0x2e>
 80037de:	4622      	mov	r2, r4
 80037e0:	4628      	mov	r0, r5
 80037e2:	f000 f854 	bl	800388e <__swbuf_r>
 80037e6:	3001      	adds	r0, #1
 80037e8:	d1c9      	bne.n	800377e <_puts_r+0x2e>
 80037ea:	e7df      	b.n	80037ac <_puts_r+0x5c>
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	250a      	movs	r5, #10
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	6022      	str	r2, [r4, #0]
 80037f4:	701d      	strb	r5, [r3, #0]
 80037f6:	e7db      	b.n	80037b0 <_puts_r+0x60>

080037f8 <puts>:
 80037f8:	4b02      	ldr	r3, [pc, #8]	; (8003804 <puts+0xc>)
 80037fa:	4601      	mov	r1, r0
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	f7ff bfa7 	b.w	8003750 <_puts_r>
 8003802:	bf00      	nop
 8003804:	20000064 	.word	0x20000064

08003808 <__sread>:
 8003808:	b510      	push	{r4, lr}
 800380a:	460c      	mov	r4, r1
 800380c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003810:	f000 f8fc 	bl	8003a0c <_read_r>
 8003814:	2800      	cmp	r0, #0
 8003816:	bfab      	itete	ge
 8003818:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800381a:	89a3      	ldrhlt	r3, [r4, #12]
 800381c:	181b      	addge	r3, r3, r0
 800381e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003822:	bfac      	ite	ge
 8003824:	6563      	strge	r3, [r4, #84]	; 0x54
 8003826:	81a3      	strhlt	r3, [r4, #12]
 8003828:	bd10      	pop	{r4, pc}

0800382a <__swrite>:
 800382a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800382e:	461f      	mov	r7, r3
 8003830:	898b      	ldrh	r3, [r1, #12]
 8003832:	05db      	lsls	r3, r3, #23
 8003834:	4605      	mov	r5, r0
 8003836:	460c      	mov	r4, r1
 8003838:	4616      	mov	r6, r2
 800383a:	d505      	bpl.n	8003848 <__swrite+0x1e>
 800383c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003840:	2302      	movs	r3, #2
 8003842:	2200      	movs	r2, #0
 8003844:	f000 f8d0 	bl	80039e8 <_lseek_r>
 8003848:	89a3      	ldrh	r3, [r4, #12]
 800384a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800384e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003852:	81a3      	strh	r3, [r4, #12]
 8003854:	4632      	mov	r2, r6
 8003856:	463b      	mov	r3, r7
 8003858:	4628      	mov	r0, r5
 800385a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800385e:	f000 b8e7 	b.w	8003a30 <_write_r>

08003862 <__sseek>:
 8003862:	b510      	push	{r4, lr}
 8003864:	460c      	mov	r4, r1
 8003866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800386a:	f000 f8bd 	bl	80039e8 <_lseek_r>
 800386e:	1c43      	adds	r3, r0, #1
 8003870:	89a3      	ldrh	r3, [r4, #12]
 8003872:	bf15      	itete	ne
 8003874:	6560      	strne	r0, [r4, #84]	; 0x54
 8003876:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800387a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800387e:	81a3      	strheq	r3, [r4, #12]
 8003880:	bf18      	it	ne
 8003882:	81a3      	strhne	r3, [r4, #12]
 8003884:	bd10      	pop	{r4, pc}

08003886 <__sclose>:
 8003886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800388a:	f000 b89d 	b.w	80039c8 <_close_r>

0800388e <__swbuf_r>:
 800388e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003890:	460e      	mov	r6, r1
 8003892:	4614      	mov	r4, r2
 8003894:	4605      	mov	r5, r0
 8003896:	b118      	cbz	r0, 80038a0 <__swbuf_r+0x12>
 8003898:	6a03      	ldr	r3, [r0, #32]
 800389a:	b90b      	cbnz	r3, 80038a0 <__swbuf_r+0x12>
 800389c:	f7ff ff22 	bl	80036e4 <__sinit>
 80038a0:	69a3      	ldr	r3, [r4, #24]
 80038a2:	60a3      	str	r3, [r4, #8]
 80038a4:	89a3      	ldrh	r3, [r4, #12]
 80038a6:	071a      	lsls	r2, r3, #28
 80038a8:	d525      	bpl.n	80038f6 <__swbuf_r+0x68>
 80038aa:	6923      	ldr	r3, [r4, #16]
 80038ac:	b31b      	cbz	r3, 80038f6 <__swbuf_r+0x68>
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	6922      	ldr	r2, [r4, #16]
 80038b2:	1a98      	subs	r0, r3, r2
 80038b4:	6963      	ldr	r3, [r4, #20]
 80038b6:	b2f6      	uxtb	r6, r6
 80038b8:	4283      	cmp	r3, r0
 80038ba:	4637      	mov	r7, r6
 80038bc:	dc04      	bgt.n	80038c8 <__swbuf_r+0x3a>
 80038be:	4621      	mov	r1, r4
 80038c0:	4628      	mov	r0, r5
 80038c2:	f000 fa71 	bl	8003da8 <_fflush_r>
 80038c6:	b9e0      	cbnz	r0, 8003902 <__swbuf_r+0x74>
 80038c8:	68a3      	ldr	r3, [r4, #8]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	60a3      	str	r3, [r4, #8]
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	6022      	str	r2, [r4, #0]
 80038d4:	701e      	strb	r6, [r3, #0]
 80038d6:	6962      	ldr	r2, [r4, #20]
 80038d8:	1c43      	adds	r3, r0, #1
 80038da:	429a      	cmp	r2, r3
 80038dc:	d004      	beq.n	80038e8 <__swbuf_r+0x5a>
 80038de:	89a3      	ldrh	r3, [r4, #12]
 80038e0:	07db      	lsls	r3, r3, #31
 80038e2:	d506      	bpl.n	80038f2 <__swbuf_r+0x64>
 80038e4:	2e0a      	cmp	r6, #10
 80038e6:	d104      	bne.n	80038f2 <__swbuf_r+0x64>
 80038e8:	4621      	mov	r1, r4
 80038ea:	4628      	mov	r0, r5
 80038ec:	f000 fa5c 	bl	8003da8 <_fflush_r>
 80038f0:	b938      	cbnz	r0, 8003902 <__swbuf_r+0x74>
 80038f2:	4638      	mov	r0, r7
 80038f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038f6:	4621      	mov	r1, r4
 80038f8:	4628      	mov	r0, r5
 80038fa:	f000 f805 	bl	8003908 <__swsetup_r>
 80038fe:	2800      	cmp	r0, #0
 8003900:	d0d5      	beq.n	80038ae <__swbuf_r+0x20>
 8003902:	f04f 37ff 	mov.w	r7, #4294967295
 8003906:	e7f4      	b.n	80038f2 <__swbuf_r+0x64>

08003908 <__swsetup_r>:
 8003908:	b538      	push	{r3, r4, r5, lr}
 800390a:	4b2a      	ldr	r3, [pc, #168]	; (80039b4 <__swsetup_r+0xac>)
 800390c:	4605      	mov	r5, r0
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	460c      	mov	r4, r1
 8003912:	b118      	cbz	r0, 800391c <__swsetup_r+0x14>
 8003914:	6a03      	ldr	r3, [r0, #32]
 8003916:	b90b      	cbnz	r3, 800391c <__swsetup_r+0x14>
 8003918:	f7ff fee4 	bl	80036e4 <__sinit>
 800391c:	89a3      	ldrh	r3, [r4, #12]
 800391e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003922:	0718      	lsls	r0, r3, #28
 8003924:	d422      	bmi.n	800396c <__swsetup_r+0x64>
 8003926:	06d9      	lsls	r1, r3, #27
 8003928:	d407      	bmi.n	800393a <__swsetup_r+0x32>
 800392a:	2309      	movs	r3, #9
 800392c:	602b      	str	r3, [r5, #0]
 800392e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003932:	81a3      	strh	r3, [r4, #12]
 8003934:	f04f 30ff 	mov.w	r0, #4294967295
 8003938:	e034      	b.n	80039a4 <__swsetup_r+0x9c>
 800393a:	0758      	lsls	r0, r3, #29
 800393c:	d512      	bpl.n	8003964 <__swsetup_r+0x5c>
 800393e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003940:	b141      	cbz	r1, 8003954 <__swsetup_r+0x4c>
 8003942:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003946:	4299      	cmp	r1, r3
 8003948:	d002      	beq.n	8003950 <__swsetup_r+0x48>
 800394a:	4628      	mov	r0, r5
 800394c:	f000 f8ae 	bl	8003aac <_free_r>
 8003950:	2300      	movs	r3, #0
 8003952:	6363      	str	r3, [r4, #52]	; 0x34
 8003954:	89a3      	ldrh	r3, [r4, #12]
 8003956:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800395a:	81a3      	strh	r3, [r4, #12]
 800395c:	2300      	movs	r3, #0
 800395e:	6063      	str	r3, [r4, #4]
 8003960:	6923      	ldr	r3, [r4, #16]
 8003962:	6023      	str	r3, [r4, #0]
 8003964:	89a3      	ldrh	r3, [r4, #12]
 8003966:	f043 0308 	orr.w	r3, r3, #8
 800396a:	81a3      	strh	r3, [r4, #12]
 800396c:	6923      	ldr	r3, [r4, #16]
 800396e:	b94b      	cbnz	r3, 8003984 <__swsetup_r+0x7c>
 8003970:	89a3      	ldrh	r3, [r4, #12]
 8003972:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800397a:	d003      	beq.n	8003984 <__swsetup_r+0x7c>
 800397c:	4621      	mov	r1, r4
 800397e:	4628      	mov	r0, r5
 8003980:	f000 fa60 	bl	8003e44 <__smakebuf_r>
 8003984:	89a0      	ldrh	r0, [r4, #12]
 8003986:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800398a:	f010 0301 	ands.w	r3, r0, #1
 800398e:	d00a      	beq.n	80039a6 <__swsetup_r+0x9e>
 8003990:	2300      	movs	r3, #0
 8003992:	60a3      	str	r3, [r4, #8]
 8003994:	6963      	ldr	r3, [r4, #20]
 8003996:	425b      	negs	r3, r3
 8003998:	61a3      	str	r3, [r4, #24]
 800399a:	6923      	ldr	r3, [r4, #16]
 800399c:	b943      	cbnz	r3, 80039b0 <__swsetup_r+0xa8>
 800399e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80039a2:	d1c4      	bne.n	800392e <__swsetup_r+0x26>
 80039a4:	bd38      	pop	{r3, r4, r5, pc}
 80039a6:	0781      	lsls	r1, r0, #30
 80039a8:	bf58      	it	pl
 80039aa:	6963      	ldrpl	r3, [r4, #20]
 80039ac:	60a3      	str	r3, [r4, #8]
 80039ae:	e7f4      	b.n	800399a <__swsetup_r+0x92>
 80039b0:	2000      	movs	r0, #0
 80039b2:	e7f7      	b.n	80039a4 <__swsetup_r+0x9c>
 80039b4:	20000064 	.word	0x20000064

080039b8 <memset>:
 80039b8:	4402      	add	r2, r0
 80039ba:	4603      	mov	r3, r0
 80039bc:	4293      	cmp	r3, r2
 80039be:	d100      	bne.n	80039c2 <memset+0xa>
 80039c0:	4770      	bx	lr
 80039c2:	f803 1b01 	strb.w	r1, [r3], #1
 80039c6:	e7f9      	b.n	80039bc <memset+0x4>

080039c8 <_close_r>:
 80039c8:	b538      	push	{r3, r4, r5, lr}
 80039ca:	4d06      	ldr	r5, [pc, #24]	; (80039e4 <_close_r+0x1c>)
 80039cc:	2300      	movs	r3, #0
 80039ce:	4604      	mov	r4, r0
 80039d0:	4608      	mov	r0, r1
 80039d2:	602b      	str	r3, [r5, #0]
 80039d4:	f7fd f95f 	bl	8000c96 <_close>
 80039d8:	1c43      	adds	r3, r0, #1
 80039da:	d102      	bne.n	80039e2 <_close_r+0x1a>
 80039dc:	682b      	ldr	r3, [r5, #0]
 80039de:	b103      	cbz	r3, 80039e2 <_close_r+0x1a>
 80039e0:	6023      	str	r3, [r4, #0]
 80039e2:	bd38      	pop	{r3, r4, r5, pc}
 80039e4:	20000398 	.word	0x20000398

080039e8 <_lseek_r>:
 80039e8:	b538      	push	{r3, r4, r5, lr}
 80039ea:	4d07      	ldr	r5, [pc, #28]	; (8003a08 <_lseek_r+0x20>)
 80039ec:	4604      	mov	r4, r0
 80039ee:	4608      	mov	r0, r1
 80039f0:	4611      	mov	r1, r2
 80039f2:	2200      	movs	r2, #0
 80039f4:	602a      	str	r2, [r5, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	f7fd f974 	bl	8000ce4 <_lseek>
 80039fc:	1c43      	adds	r3, r0, #1
 80039fe:	d102      	bne.n	8003a06 <_lseek_r+0x1e>
 8003a00:	682b      	ldr	r3, [r5, #0]
 8003a02:	b103      	cbz	r3, 8003a06 <_lseek_r+0x1e>
 8003a04:	6023      	str	r3, [r4, #0]
 8003a06:	bd38      	pop	{r3, r4, r5, pc}
 8003a08:	20000398 	.word	0x20000398

08003a0c <_read_r>:
 8003a0c:	b538      	push	{r3, r4, r5, lr}
 8003a0e:	4d07      	ldr	r5, [pc, #28]	; (8003a2c <_read_r+0x20>)
 8003a10:	4604      	mov	r4, r0
 8003a12:	4608      	mov	r0, r1
 8003a14:	4611      	mov	r1, r2
 8003a16:	2200      	movs	r2, #0
 8003a18:	602a      	str	r2, [r5, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f7fd f91e 	bl	8000c5c <_read>
 8003a20:	1c43      	adds	r3, r0, #1
 8003a22:	d102      	bne.n	8003a2a <_read_r+0x1e>
 8003a24:	682b      	ldr	r3, [r5, #0]
 8003a26:	b103      	cbz	r3, 8003a2a <_read_r+0x1e>
 8003a28:	6023      	str	r3, [r4, #0]
 8003a2a:	bd38      	pop	{r3, r4, r5, pc}
 8003a2c:	20000398 	.word	0x20000398

08003a30 <_write_r>:
 8003a30:	b538      	push	{r3, r4, r5, lr}
 8003a32:	4d07      	ldr	r5, [pc, #28]	; (8003a50 <_write_r+0x20>)
 8003a34:	4604      	mov	r4, r0
 8003a36:	4608      	mov	r0, r1
 8003a38:	4611      	mov	r1, r2
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	602a      	str	r2, [r5, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f7fc fd68 	bl	8000514 <_write>
 8003a44:	1c43      	adds	r3, r0, #1
 8003a46:	d102      	bne.n	8003a4e <_write_r+0x1e>
 8003a48:	682b      	ldr	r3, [r5, #0]
 8003a4a:	b103      	cbz	r3, 8003a4e <_write_r+0x1e>
 8003a4c:	6023      	str	r3, [r4, #0]
 8003a4e:	bd38      	pop	{r3, r4, r5, pc}
 8003a50:	20000398 	.word	0x20000398

08003a54 <__errno>:
 8003a54:	4b01      	ldr	r3, [pc, #4]	; (8003a5c <__errno+0x8>)
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	20000064 	.word	0x20000064

08003a60 <__libc_init_array>:
 8003a60:	b570      	push	{r4, r5, r6, lr}
 8003a62:	4d0d      	ldr	r5, [pc, #52]	; (8003a98 <__libc_init_array+0x38>)
 8003a64:	4c0d      	ldr	r4, [pc, #52]	; (8003a9c <__libc_init_array+0x3c>)
 8003a66:	1b64      	subs	r4, r4, r5
 8003a68:	10a4      	asrs	r4, r4, #2
 8003a6a:	2600      	movs	r6, #0
 8003a6c:	42a6      	cmp	r6, r4
 8003a6e:	d109      	bne.n	8003a84 <__libc_init_array+0x24>
 8003a70:	4d0b      	ldr	r5, [pc, #44]	; (8003aa0 <__libc_init_array+0x40>)
 8003a72:	4c0c      	ldr	r4, [pc, #48]	; (8003aa4 <__libc_init_array+0x44>)
 8003a74:	f000 fa54 	bl	8003f20 <_init>
 8003a78:	1b64      	subs	r4, r4, r5
 8003a7a:	10a4      	asrs	r4, r4, #2
 8003a7c:	2600      	movs	r6, #0
 8003a7e:	42a6      	cmp	r6, r4
 8003a80:	d105      	bne.n	8003a8e <__libc_init_array+0x2e>
 8003a82:	bd70      	pop	{r4, r5, r6, pc}
 8003a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a88:	4798      	blx	r3
 8003a8a:	3601      	adds	r6, #1
 8003a8c:	e7ee      	b.n	8003a6c <__libc_init_array+0xc>
 8003a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a92:	4798      	blx	r3
 8003a94:	3601      	adds	r6, #1
 8003a96:	e7f2      	b.n	8003a7e <__libc_init_array+0x1e>
 8003a98:	08003f90 	.word	0x08003f90
 8003a9c:	08003f90 	.word	0x08003f90
 8003aa0:	08003f90 	.word	0x08003f90
 8003aa4:	08003f94 	.word	0x08003f94

08003aa8 <__retarget_lock_acquire_recursive>:
 8003aa8:	4770      	bx	lr

08003aaa <__retarget_lock_release_recursive>:
 8003aaa:	4770      	bx	lr

08003aac <_free_r>:
 8003aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003aae:	2900      	cmp	r1, #0
 8003ab0:	d044      	beq.n	8003b3c <_free_r+0x90>
 8003ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ab6:	9001      	str	r0, [sp, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f1a1 0404 	sub.w	r4, r1, #4
 8003abe:	bfb8      	it	lt
 8003ac0:	18e4      	addlt	r4, r4, r3
 8003ac2:	f000 f8df 	bl	8003c84 <__malloc_lock>
 8003ac6:	4a1e      	ldr	r2, [pc, #120]	; (8003b40 <_free_r+0x94>)
 8003ac8:	9801      	ldr	r0, [sp, #4]
 8003aca:	6813      	ldr	r3, [r2, #0]
 8003acc:	b933      	cbnz	r3, 8003adc <_free_r+0x30>
 8003ace:	6063      	str	r3, [r4, #4]
 8003ad0:	6014      	str	r4, [r2, #0]
 8003ad2:	b003      	add	sp, #12
 8003ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ad8:	f000 b8da 	b.w	8003c90 <__malloc_unlock>
 8003adc:	42a3      	cmp	r3, r4
 8003ade:	d908      	bls.n	8003af2 <_free_r+0x46>
 8003ae0:	6825      	ldr	r5, [r4, #0]
 8003ae2:	1961      	adds	r1, r4, r5
 8003ae4:	428b      	cmp	r3, r1
 8003ae6:	bf01      	itttt	eq
 8003ae8:	6819      	ldreq	r1, [r3, #0]
 8003aea:	685b      	ldreq	r3, [r3, #4]
 8003aec:	1949      	addeq	r1, r1, r5
 8003aee:	6021      	streq	r1, [r4, #0]
 8003af0:	e7ed      	b.n	8003ace <_free_r+0x22>
 8003af2:	461a      	mov	r2, r3
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	b10b      	cbz	r3, 8003afc <_free_r+0x50>
 8003af8:	42a3      	cmp	r3, r4
 8003afa:	d9fa      	bls.n	8003af2 <_free_r+0x46>
 8003afc:	6811      	ldr	r1, [r2, #0]
 8003afe:	1855      	adds	r5, r2, r1
 8003b00:	42a5      	cmp	r5, r4
 8003b02:	d10b      	bne.n	8003b1c <_free_r+0x70>
 8003b04:	6824      	ldr	r4, [r4, #0]
 8003b06:	4421      	add	r1, r4
 8003b08:	1854      	adds	r4, r2, r1
 8003b0a:	42a3      	cmp	r3, r4
 8003b0c:	6011      	str	r1, [r2, #0]
 8003b0e:	d1e0      	bne.n	8003ad2 <_free_r+0x26>
 8003b10:	681c      	ldr	r4, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	6053      	str	r3, [r2, #4]
 8003b16:	440c      	add	r4, r1
 8003b18:	6014      	str	r4, [r2, #0]
 8003b1a:	e7da      	b.n	8003ad2 <_free_r+0x26>
 8003b1c:	d902      	bls.n	8003b24 <_free_r+0x78>
 8003b1e:	230c      	movs	r3, #12
 8003b20:	6003      	str	r3, [r0, #0]
 8003b22:	e7d6      	b.n	8003ad2 <_free_r+0x26>
 8003b24:	6825      	ldr	r5, [r4, #0]
 8003b26:	1961      	adds	r1, r4, r5
 8003b28:	428b      	cmp	r3, r1
 8003b2a:	bf04      	itt	eq
 8003b2c:	6819      	ldreq	r1, [r3, #0]
 8003b2e:	685b      	ldreq	r3, [r3, #4]
 8003b30:	6063      	str	r3, [r4, #4]
 8003b32:	bf04      	itt	eq
 8003b34:	1949      	addeq	r1, r1, r5
 8003b36:	6021      	streq	r1, [r4, #0]
 8003b38:	6054      	str	r4, [r2, #4]
 8003b3a:	e7ca      	b.n	8003ad2 <_free_r+0x26>
 8003b3c:	b003      	add	sp, #12
 8003b3e:	bd30      	pop	{r4, r5, pc}
 8003b40:	200003a0 	.word	0x200003a0

08003b44 <sbrk_aligned>:
 8003b44:	b570      	push	{r4, r5, r6, lr}
 8003b46:	4e0e      	ldr	r6, [pc, #56]	; (8003b80 <sbrk_aligned+0x3c>)
 8003b48:	460c      	mov	r4, r1
 8003b4a:	6831      	ldr	r1, [r6, #0]
 8003b4c:	4605      	mov	r5, r0
 8003b4e:	b911      	cbnz	r1, 8003b56 <sbrk_aligned+0x12>
 8003b50:	f000 f9d6 	bl	8003f00 <_sbrk_r>
 8003b54:	6030      	str	r0, [r6, #0]
 8003b56:	4621      	mov	r1, r4
 8003b58:	4628      	mov	r0, r5
 8003b5a:	f000 f9d1 	bl	8003f00 <_sbrk_r>
 8003b5e:	1c43      	adds	r3, r0, #1
 8003b60:	d00a      	beq.n	8003b78 <sbrk_aligned+0x34>
 8003b62:	1cc4      	adds	r4, r0, #3
 8003b64:	f024 0403 	bic.w	r4, r4, #3
 8003b68:	42a0      	cmp	r0, r4
 8003b6a:	d007      	beq.n	8003b7c <sbrk_aligned+0x38>
 8003b6c:	1a21      	subs	r1, r4, r0
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f000 f9c6 	bl	8003f00 <_sbrk_r>
 8003b74:	3001      	adds	r0, #1
 8003b76:	d101      	bne.n	8003b7c <sbrk_aligned+0x38>
 8003b78:	f04f 34ff 	mov.w	r4, #4294967295
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}
 8003b80:	200003a4 	.word	0x200003a4

08003b84 <_malloc_r>:
 8003b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b88:	1ccd      	adds	r5, r1, #3
 8003b8a:	f025 0503 	bic.w	r5, r5, #3
 8003b8e:	3508      	adds	r5, #8
 8003b90:	2d0c      	cmp	r5, #12
 8003b92:	bf38      	it	cc
 8003b94:	250c      	movcc	r5, #12
 8003b96:	2d00      	cmp	r5, #0
 8003b98:	4607      	mov	r7, r0
 8003b9a:	db01      	blt.n	8003ba0 <_malloc_r+0x1c>
 8003b9c:	42a9      	cmp	r1, r5
 8003b9e:	d905      	bls.n	8003bac <_malloc_r+0x28>
 8003ba0:	230c      	movs	r3, #12
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	2600      	movs	r6, #0
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c80 <_malloc_r+0xfc>
 8003bb0:	f000 f868 	bl	8003c84 <__malloc_lock>
 8003bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8003bb8:	461c      	mov	r4, r3
 8003bba:	bb5c      	cbnz	r4, 8003c14 <_malloc_r+0x90>
 8003bbc:	4629      	mov	r1, r5
 8003bbe:	4638      	mov	r0, r7
 8003bc0:	f7ff ffc0 	bl	8003b44 <sbrk_aligned>
 8003bc4:	1c43      	adds	r3, r0, #1
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	d155      	bne.n	8003c76 <_malloc_r+0xf2>
 8003bca:	f8d8 4000 	ldr.w	r4, [r8]
 8003bce:	4626      	mov	r6, r4
 8003bd0:	2e00      	cmp	r6, #0
 8003bd2:	d145      	bne.n	8003c60 <_malloc_r+0xdc>
 8003bd4:	2c00      	cmp	r4, #0
 8003bd6:	d048      	beq.n	8003c6a <_malloc_r+0xe6>
 8003bd8:	6823      	ldr	r3, [r4, #0]
 8003bda:	4631      	mov	r1, r6
 8003bdc:	4638      	mov	r0, r7
 8003bde:	eb04 0903 	add.w	r9, r4, r3
 8003be2:	f000 f98d 	bl	8003f00 <_sbrk_r>
 8003be6:	4581      	cmp	r9, r0
 8003be8:	d13f      	bne.n	8003c6a <_malloc_r+0xe6>
 8003bea:	6821      	ldr	r1, [r4, #0]
 8003bec:	1a6d      	subs	r5, r5, r1
 8003bee:	4629      	mov	r1, r5
 8003bf0:	4638      	mov	r0, r7
 8003bf2:	f7ff ffa7 	bl	8003b44 <sbrk_aligned>
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	d037      	beq.n	8003c6a <_malloc_r+0xe6>
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	442b      	add	r3, r5
 8003bfe:	6023      	str	r3, [r4, #0]
 8003c00:	f8d8 3000 	ldr.w	r3, [r8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d038      	beq.n	8003c7a <_malloc_r+0xf6>
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	42a2      	cmp	r2, r4
 8003c0c:	d12b      	bne.n	8003c66 <_malloc_r+0xe2>
 8003c0e:	2200      	movs	r2, #0
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	e00f      	b.n	8003c34 <_malloc_r+0xb0>
 8003c14:	6822      	ldr	r2, [r4, #0]
 8003c16:	1b52      	subs	r2, r2, r5
 8003c18:	d41f      	bmi.n	8003c5a <_malloc_r+0xd6>
 8003c1a:	2a0b      	cmp	r2, #11
 8003c1c:	d917      	bls.n	8003c4e <_malloc_r+0xca>
 8003c1e:	1961      	adds	r1, r4, r5
 8003c20:	42a3      	cmp	r3, r4
 8003c22:	6025      	str	r5, [r4, #0]
 8003c24:	bf18      	it	ne
 8003c26:	6059      	strne	r1, [r3, #4]
 8003c28:	6863      	ldr	r3, [r4, #4]
 8003c2a:	bf08      	it	eq
 8003c2c:	f8c8 1000 	streq.w	r1, [r8]
 8003c30:	5162      	str	r2, [r4, r5]
 8003c32:	604b      	str	r3, [r1, #4]
 8003c34:	4638      	mov	r0, r7
 8003c36:	f104 060b 	add.w	r6, r4, #11
 8003c3a:	f000 f829 	bl	8003c90 <__malloc_unlock>
 8003c3e:	f026 0607 	bic.w	r6, r6, #7
 8003c42:	1d23      	adds	r3, r4, #4
 8003c44:	1af2      	subs	r2, r6, r3
 8003c46:	d0ae      	beq.n	8003ba6 <_malloc_r+0x22>
 8003c48:	1b9b      	subs	r3, r3, r6
 8003c4a:	50a3      	str	r3, [r4, r2]
 8003c4c:	e7ab      	b.n	8003ba6 <_malloc_r+0x22>
 8003c4e:	42a3      	cmp	r3, r4
 8003c50:	6862      	ldr	r2, [r4, #4]
 8003c52:	d1dd      	bne.n	8003c10 <_malloc_r+0x8c>
 8003c54:	f8c8 2000 	str.w	r2, [r8]
 8003c58:	e7ec      	b.n	8003c34 <_malloc_r+0xb0>
 8003c5a:	4623      	mov	r3, r4
 8003c5c:	6864      	ldr	r4, [r4, #4]
 8003c5e:	e7ac      	b.n	8003bba <_malloc_r+0x36>
 8003c60:	4634      	mov	r4, r6
 8003c62:	6876      	ldr	r6, [r6, #4]
 8003c64:	e7b4      	b.n	8003bd0 <_malloc_r+0x4c>
 8003c66:	4613      	mov	r3, r2
 8003c68:	e7cc      	b.n	8003c04 <_malloc_r+0x80>
 8003c6a:	230c      	movs	r3, #12
 8003c6c:	603b      	str	r3, [r7, #0]
 8003c6e:	4638      	mov	r0, r7
 8003c70:	f000 f80e 	bl	8003c90 <__malloc_unlock>
 8003c74:	e797      	b.n	8003ba6 <_malloc_r+0x22>
 8003c76:	6025      	str	r5, [r4, #0]
 8003c78:	e7dc      	b.n	8003c34 <_malloc_r+0xb0>
 8003c7a:	605b      	str	r3, [r3, #4]
 8003c7c:	deff      	udf	#255	; 0xff
 8003c7e:	bf00      	nop
 8003c80:	200003a0 	.word	0x200003a0

08003c84 <__malloc_lock>:
 8003c84:	4801      	ldr	r0, [pc, #4]	; (8003c8c <__malloc_lock+0x8>)
 8003c86:	f7ff bf0f 	b.w	8003aa8 <__retarget_lock_acquire_recursive>
 8003c8a:	bf00      	nop
 8003c8c:	2000039c 	.word	0x2000039c

08003c90 <__malloc_unlock>:
 8003c90:	4801      	ldr	r0, [pc, #4]	; (8003c98 <__malloc_unlock+0x8>)
 8003c92:	f7ff bf0a 	b.w	8003aaa <__retarget_lock_release_recursive>
 8003c96:	bf00      	nop
 8003c98:	2000039c 	.word	0x2000039c

08003c9c <__sflush_r>:
 8003c9c:	898a      	ldrh	r2, [r1, #12]
 8003c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	0710      	lsls	r0, r2, #28
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	d458      	bmi.n	8003d5c <__sflush_r+0xc0>
 8003caa:	684b      	ldr	r3, [r1, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	dc05      	bgt.n	8003cbc <__sflush_r+0x20>
 8003cb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	dc02      	bgt.n	8003cbc <__sflush_r+0x20>
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cbe:	2e00      	cmp	r6, #0
 8003cc0:	d0f9      	beq.n	8003cb6 <__sflush_r+0x1a>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003cc8:	682f      	ldr	r7, [r5, #0]
 8003cca:	6a21      	ldr	r1, [r4, #32]
 8003ccc:	602b      	str	r3, [r5, #0]
 8003cce:	d032      	beq.n	8003d36 <__sflush_r+0x9a>
 8003cd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003cd2:	89a3      	ldrh	r3, [r4, #12]
 8003cd4:	075a      	lsls	r2, r3, #29
 8003cd6:	d505      	bpl.n	8003ce4 <__sflush_r+0x48>
 8003cd8:	6863      	ldr	r3, [r4, #4]
 8003cda:	1ac0      	subs	r0, r0, r3
 8003cdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cde:	b10b      	cbz	r3, 8003ce4 <__sflush_r+0x48>
 8003ce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ce2:	1ac0      	subs	r0, r0, r3
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cea:	6a21      	ldr	r1, [r4, #32]
 8003cec:	4628      	mov	r0, r5
 8003cee:	47b0      	blx	r6
 8003cf0:	1c43      	adds	r3, r0, #1
 8003cf2:	89a3      	ldrh	r3, [r4, #12]
 8003cf4:	d106      	bne.n	8003d04 <__sflush_r+0x68>
 8003cf6:	6829      	ldr	r1, [r5, #0]
 8003cf8:	291d      	cmp	r1, #29
 8003cfa:	d82b      	bhi.n	8003d54 <__sflush_r+0xb8>
 8003cfc:	4a29      	ldr	r2, [pc, #164]	; (8003da4 <__sflush_r+0x108>)
 8003cfe:	410a      	asrs	r2, r1
 8003d00:	07d6      	lsls	r6, r2, #31
 8003d02:	d427      	bmi.n	8003d54 <__sflush_r+0xb8>
 8003d04:	2200      	movs	r2, #0
 8003d06:	6062      	str	r2, [r4, #4]
 8003d08:	04d9      	lsls	r1, r3, #19
 8003d0a:	6922      	ldr	r2, [r4, #16]
 8003d0c:	6022      	str	r2, [r4, #0]
 8003d0e:	d504      	bpl.n	8003d1a <__sflush_r+0x7e>
 8003d10:	1c42      	adds	r2, r0, #1
 8003d12:	d101      	bne.n	8003d18 <__sflush_r+0x7c>
 8003d14:	682b      	ldr	r3, [r5, #0]
 8003d16:	b903      	cbnz	r3, 8003d1a <__sflush_r+0x7e>
 8003d18:	6560      	str	r0, [r4, #84]	; 0x54
 8003d1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d1c:	602f      	str	r7, [r5, #0]
 8003d1e:	2900      	cmp	r1, #0
 8003d20:	d0c9      	beq.n	8003cb6 <__sflush_r+0x1a>
 8003d22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d26:	4299      	cmp	r1, r3
 8003d28:	d002      	beq.n	8003d30 <__sflush_r+0x94>
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	f7ff febe 	bl	8003aac <_free_r>
 8003d30:	2000      	movs	r0, #0
 8003d32:	6360      	str	r0, [r4, #52]	; 0x34
 8003d34:	e7c0      	b.n	8003cb8 <__sflush_r+0x1c>
 8003d36:	2301      	movs	r3, #1
 8003d38:	4628      	mov	r0, r5
 8003d3a:	47b0      	blx	r6
 8003d3c:	1c41      	adds	r1, r0, #1
 8003d3e:	d1c8      	bne.n	8003cd2 <__sflush_r+0x36>
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0c5      	beq.n	8003cd2 <__sflush_r+0x36>
 8003d46:	2b1d      	cmp	r3, #29
 8003d48:	d001      	beq.n	8003d4e <__sflush_r+0xb2>
 8003d4a:	2b16      	cmp	r3, #22
 8003d4c:	d101      	bne.n	8003d52 <__sflush_r+0xb6>
 8003d4e:	602f      	str	r7, [r5, #0]
 8003d50:	e7b1      	b.n	8003cb6 <__sflush_r+0x1a>
 8003d52:	89a3      	ldrh	r3, [r4, #12]
 8003d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d58:	81a3      	strh	r3, [r4, #12]
 8003d5a:	e7ad      	b.n	8003cb8 <__sflush_r+0x1c>
 8003d5c:	690f      	ldr	r7, [r1, #16]
 8003d5e:	2f00      	cmp	r7, #0
 8003d60:	d0a9      	beq.n	8003cb6 <__sflush_r+0x1a>
 8003d62:	0793      	lsls	r3, r2, #30
 8003d64:	680e      	ldr	r6, [r1, #0]
 8003d66:	bf08      	it	eq
 8003d68:	694b      	ldreq	r3, [r1, #20]
 8003d6a:	600f      	str	r7, [r1, #0]
 8003d6c:	bf18      	it	ne
 8003d6e:	2300      	movne	r3, #0
 8003d70:	eba6 0807 	sub.w	r8, r6, r7
 8003d74:	608b      	str	r3, [r1, #8]
 8003d76:	f1b8 0f00 	cmp.w	r8, #0
 8003d7a:	dd9c      	ble.n	8003cb6 <__sflush_r+0x1a>
 8003d7c:	6a21      	ldr	r1, [r4, #32]
 8003d7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d80:	4643      	mov	r3, r8
 8003d82:	463a      	mov	r2, r7
 8003d84:	4628      	mov	r0, r5
 8003d86:	47b0      	blx	r6
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	dc06      	bgt.n	8003d9a <__sflush_r+0xfe>
 8003d8c:	89a3      	ldrh	r3, [r4, #12]
 8003d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d92:	81a3      	strh	r3, [r4, #12]
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295
 8003d98:	e78e      	b.n	8003cb8 <__sflush_r+0x1c>
 8003d9a:	4407      	add	r7, r0
 8003d9c:	eba8 0800 	sub.w	r8, r8, r0
 8003da0:	e7e9      	b.n	8003d76 <__sflush_r+0xda>
 8003da2:	bf00      	nop
 8003da4:	dfbffffe 	.word	0xdfbffffe

08003da8 <_fflush_r>:
 8003da8:	b538      	push	{r3, r4, r5, lr}
 8003daa:	690b      	ldr	r3, [r1, #16]
 8003dac:	4605      	mov	r5, r0
 8003dae:	460c      	mov	r4, r1
 8003db0:	b913      	cbnz	r3, 8003db8 <_fflush_r+0x10>
 8003db2:	2500      	movs	r5, #0
 8003db4:	4628      	mov	r0, r5
 8003db6:	bd38      	pop	{r3, r4, r5, pc}
 8003db8:	b118      	cbz	r0, 8003dc2 <_fflush_r+0x1a>
 8003dba:	6a03      	ldr	r3, [r0, #32]
 8003dbc:	b90b      	cbnz	r3, 8003dc2 <_fflush_r+0x1a>
 8003dbe:	f7ff fc91 	bl	80036e4 <__sinit>
 8003dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f3      	beq.n	8003db2 <_fflush_r+0xa>
 8003dca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003dcc:	07d0      	lsls	r0, r2, #31
 8003dce:	d404      	bmi.n	8003dda <_fflush_r+0x32>
 8003dd0:	0599      	lsls	r1, r3, #22
 8003dd2:	d402      	bmi.n	8003dda <_fflush_r+0x32>
 8003dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dd6:	f7ff fe67 	bl	8003aa8 <__retarget_lock_acquire_recursive>
 8003dda:	4628      	mov	r0, r5
 8003ddc:	4621      	mov	r1, r4
 8003dde:	f7ff ff5d 	bl	8003c9c <__sflush_r>
 8003de2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003de4:	07da      	lsls	r2, r3, #31
 8003de6:	4605      	mov	r5, r0
 8003de8:	d4e4      	bmi.n	8003db4 <_fflush_r+0xc>
 8003dea:	89a3      	ldrh	r3, [r4, #12]
 8003dec:	059b      	lsls	r3, r3, #22
 8003dee:	d4e1      	bmi.n	8003db4 <_fflush_r+0xc>
 8003df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003df2:	f7ff fe5a 	bl	8003aaa <__retarget_lock_release_recursive>
 8003df6:	e7dd      	b.n	8003db4 <_fflush_r+0xc>

08003df8 <__swhatbuf_r>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e00:	2900      	cmp	r1, #0
 8003e02:	b096      	sub	sp, #88	; 0x58
 8003e04:	4615      	mov	r5, r2
 8003e06:	461e      	mov	r6, r3
 8003e08:	da0d      	bge.n	8003e26 <__swhatbuf_r+0x2e>
 8003e0a:	89a3      	ldrh	r3, [r4, #12]
 8003e0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003e10:	f04f 0100 	mov.w	r1, #0
 8003e14:	bf0c      	ite	eq
 8003e16:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003e1a:	2340      	movne	r3, #64	; 0x40
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	6031      	str	r1, [r6, #0]
 8003e20:	602b      	str	r3, [r5, #0]
 8003e22:	b016      	add	sp, #88	; 0x58
 8003e24:	bd70      	pop	{r4, r5, r6, pc}
 8003e26:	466a      	mov	r2, sp
 8003e28:	f000 f848 	bl	8003ebc <_fstat_r>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	dbec      	blt.n	8003e0a <__swhatbuf_r+0x12>
 8003e30:	9901      	ldr	r1, [sp, #4]
 8003e32:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003e36:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003e3a:	4259      	negs	r1, r3
 8003e3c:	4159      	adcs	r1, r3
 8003e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e42:	e7eb      	b.n	8003e1c <__swhatbuf_r+0x24>

08003e44 <__smakebuf_r>:
 8003e44:	898b      	ldrh	r3, [r1, #12]
 8003e46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e48:	079d      	lsls	r5, r3, #30
 8003e4a:	4606      	mov	r6, r0
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	d507      	bpl.n	8003e60 <__smakebuf_r+0x1c>
 8003e50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	6123      	str	r3, [r4, #16]
 8003e58:	2301      	movs	r3, #1
 8003e5a:	6163      	str	r3, [r4, #20]
 8003e5c:	b002      	add	sp, #8
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
 8003e60:	ab01      	add	r3, sp, #4
 8003e62:	466a      	mov	r2, sp
 8003e64:	f7ff ffc8 	bl	8003df8 <__swhatbuf_r>
 8003e68:	9900      	ldr	r1, [sp, #0]
 8003e6a:	4605      	mov	r5, r0
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	f7ff fe89 	bl	8003b84 <_malloc_r>
 8003e72:	b948      	cbnz	r0, 8003e88 <__smakebuf_r+0x44>
 8003e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e78:	059a      	lsls	r2, r3, #22
 8003e7a:	d4ef      	bmi.n	8003e5c <__smakebuf_r+0x18>
 8003e7c:	f023 0303 	bic.w	r3, r3, #3
 8003e80:	f043 0302 	orr.w	r3, r3, #2
 8003e84:	81a3      	strh	r3, [r4, #12]
 8003e86:	e7e3      	b.n	8003e50 <__smakebuf_r+0xc>
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	6020      	str	r0, [r4, #0]
 8003e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e90:	81a3      	strh	r3, [r4, #12]
 8003e92:	9b00      	ldr	r3, [sp, #0]
 8003e94:	6163      	str	r3, [r4, #20]
 8003e96:	9b01      	ldr	r3, [sp, #4]
 8003e98:	6120      	str	r0, [r4, #16]
 8003e9a:	b15b      	cbz	r3, 8003eb4 <__smakebuf_r+0x70>
 8003e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	f000 f81d 	bl	8003ee0 <_isatty_r>
 8003ea6:	b128      	cbz	r0, 8003eb4 <__smakebuf_r+0x70>
 8003ea8:	89a3      	ldrh	r3, [r4, #12]
 8003eaa:	f023 0303 	bic.w	r3, r3, #3
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	81a3      	strh	r3, [r4, #12]
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	431d      	orrs	r5, r3
 8003eb8:	81a5      	strh	r5, [r4, #12]
 8003eba:	e7cf      	b.n	8003e5c <__smakebuf_r+0x18>

08003ebc <_fstat_r>:
 8003ebc:	b538      	push	{r3, r4, r5, lr}
 8003ebe:	4d07      	ldr	r5, [pc, #28]	; (8003edc <_fstat_r+0x20>)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	4604      	mov	r4, r0
 8003ec4:	4608      	mov	r0, r1
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	602b      	str	r3, [r5, #0]
 8003eca:	f7fc fef0 	bl	8000cae <_fstat>
 8003ece:	1c43      	adds	r3, r0, #1
 8003ed0:	d102      	bne.n	8003ed8 <_fstat_r+0x1c>
 8003ed2:	682b      	ldr	r3, [r5, #0]
 8003ed4:	b103      	cbz	r3, 8003ed8 <_fstat_r+0x1c>
 8003ed6:	6023      	str	r3, [r4, #0]
 8003ed8:	bd38      	pop	{r3, r4, r5, pc}
 8003eda:	bf00      	nop
 8003edc:	20000398 	.word	0x20000398

08003ee0 <_isatty_r>:
 8003ee0:	b538      	push	{r3, r4, r5, lr}
 8003ee2:	4d06      	ldr	r5, [pc, #24]	; (8003efc <_isatty_r+0x1c>)
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	4608      	mov	r0, r1
 8003eea:	602b      	str	r3, [r5, #0]
 8003eec:	f7fc feef 	bl	8000cce <_isatty>
 8003ef0:	1c43      	adds	r3, r0, #1
 8003ef2:	d102      	bne.n	8003efa <_isatty_r+0x1a>
 8003ef4:	682b      	ldr	r3, [r5, #0]
 8003ef6:	b103      	cbz	r3, 8003efa <_isatty_r+0x1a>
 8003ef8:	6023      	str	r3, [r4, #0]
 8003efa:	bd38      	pop	{r3, r4, r5, pc}
 8003efc:	20000398 	.word	0x20000398

08003f00 <_sbrk_r>:
 8003f00:	b538      	push	{r3, r4, r5, lr}
 8003f02:	4d06      	ldr	r5, [pc, #24]	; (8003f1c <_sbrk_r+0x1c>)
 8003f04:	2300      	movs	r3, #0
 8003f06:	4604      	mov	r4, r0
 8003f08:	4608      	mov	r0, r1
 8003f0a:	602b      	str	r3, [r5, #0]
 8003f0c:	f7fc fef8 	bl	8000d00 <_sbrk>
 8003f10:	1c43      	adds	r3, r0, #1
 8003f12:	d102      	bne.n	8003f1a <_sbrk_r+0x1a>
 8003f14:	682b      	ldr	r3, [r5, #0]
 8003f16:	b103      	cbz	r3, 8003f1a <_sbrk_r+0x1a>
 8003f18:	6023      	str	r3, [r4, #0]
 8003f1a:	bd38      	pop	{r3, r4, r5, pc}
 8003f1c:	20000398 	.word	0x20000398

08003f20 <_init>:
 8003f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f22:	bf00      	nop
 8003f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f26:	bc08      	pop	{r3}
 8003f28:	469e      	mov	lr, r3
 8003f2a:	4770      	bx	lr

08003f2c <_fini>:
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	bf00      	nop
 8003f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f32:	bc08      	pop	{r3}
 8003f34:	469e      	mov	lr, r3
 8003f36:	4770      	bx	lr
